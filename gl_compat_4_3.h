/*
 * glow-1.0.0: public-domain OpenGL function loader
 *
 * This file was generated with glow https://github.com/jshrake/glow
 * 
 * Version: 1.0.0
 * Date: 2015-11-27 09:08:23.224727516 -0800 PST
 * Language: C
 * Specification: 4.3
 * API: gl
 * Profile: compatibility
 * Command-line: glow --api="gl" --spec="4.3" --profile="compatibility" --debug=true
 * Extensions:

 * 
 * -----
 * USAGE
 * -----
 * Do this:
 *    #define GLOW_IMPLEMENTATION
 * before you include this file in *one* C or C++ file to create the implementation.
 *
 * -------
 * EXAMPLE
 * -------
 * #include ...
 * #include ...
 * #define GLOW_IMPLEMENTATION
 * #include "glow.h"
 * 
 
 * - #define GLOW_DEBUG before the #include to enable pre and post function callbacks
 * - #define GLOW_ASSERT(x) before the #include to avoid including assert.h
 * - #define GLOW_NO_STDIO before the #include to avoid including stdio.h for print debugging
 *
 * Users are encouraged to call glow_init or glow_init_with after OpenGL context creation
 * to eagerly load the OpenGL function pointers. If no initialization function
 * is called, the function pointers are lazily loaded during the first call.
 *
 * Users can specify their own function to load the OpenGL procedures via glow_init_with.
 * Calling glow_init is equivalent to calling glow_init_with(&glow_get_proc);
 *
 */
#ifndef GLOW_INCLUDE_GLOW_H
#define GLOW_INCLUDE_GLOW_H

#ifdef __cplusplus
extern "C" {
#endif

#ifdef GLOW_STATIC
#define GLOWDEF static
#else
#define GLOWDEF extern
#endif
/*
 * ---------------------------
 * Glow API
 * ---------------------------
 */
typedef void* (*glow_load_proc_t)(char const *name);
/*
 * Platform specific function for returning OpenGL function pointers by name
 * Returns NULL on failure to to open the OpenGL library image and on failure
 * to load the procedure given by name.
 */
GLOWDEF void *glow_get_proc(char const *name);
/*
 * Eagerly load OpenGL function pointers using glow_get_proc. Returns the
 * number of functions that failed to load. A return value of 0 indicates
 * success.
 */
GLOWDEF int glow_init(void);
/*
 * Eagerly load OpenGL function pointers with the specified loading function.
 * Returns the number of functions that failed to load. A return value of 0
 * indicates success.
 */
GLOWDEF int glow_init_with(glow_load_proc_t get_proc);


typedef void (*glow_debug_proc_t)(char const *name, void *funcptr, ...);
/*
 * Specify a callback to call before OpenGL function calls
 */
GLOWDEF void glow_set_pre_callback(glow_debug_proc_t callback);
/*
 * Specify a callback to call after OpenGL function calls
 */
GLOWDEF void glow_set_post_callback(glow_debug_proc_t callback);


#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif

/*
 * ---------------------------
 * Required includes
 * ---------------------------
 */


#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif

/*
 * ---------------------------
 * Versions
 * ---------------------------
 */
#define GL_VERSION_1_0
#define GL_VERSION_1_1
#define GL_VERSION_1_2
#define GL_VERSION_1_3
#define GL_VERSION_1_4
#define GL_VERSION_1_5
#define GL_VERSION_2_0
#define GL_VERSION_2_1
#define GL_VERSION_3_0
#define GL_VERSION_3_1
#define GL_VERSION_3_2
#define GL_VERSION_3_3
#define GL_VERSION_4_0
#define GL_VERSION_4_1
#define GL_VERSION_4_2
#define GL_VERSION_4_3

/*
 * ---------------------------
 * Types
 * ---------------------------
 */
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (APIENTRYP *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRYP *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRYP *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRYP *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;

/*
 * ---------------------------
 * Enums
 * ---------------------------
 */
#define GL_EXP 0x0800
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_POINT_BIT 0x00000002
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_FLAT 0x1D00
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_COLOR 0x1800
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_FOG_COORD 0x8451
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_BGR 0x80E0
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE18 0x84D2
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_XOR 0x1506
#define GL_RGBA2 0x8055
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_BLUE_BITS 0x0D54
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_MODULATE 0x2100
#define GL_C4UB_V3F 0x2A23
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_EXP2 0x0801
#define GL_QUERY_WAIT 0x8E13
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_RGBA16 0x805B
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_EQUIV 0x1509
#define GL_TEXTURE28 0x84DC
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_INDEX_OFFSET 0x0D13
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE23 0x84D7
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_CURRENT_BIT 0x00000001
#define GL_CLAMP 0x2900
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_DRAW_BUFFER6 0x882B
#define GL_RGB32F 0x8815
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_DRAW_BUFFER1 0x8826
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ZOOM_X 0x0D16
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_OBJECT_PLANE 0x2501
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_MAP1_INDEX 0x0D91
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_HIGH_FLOAT 0x8DF2
#define GL_BUFFER 0x82E0
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_RGB10 0x8052
#define GL_COLOR_MATERIAL 0x0B57
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_INTENSITY16 0x804D
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_IS_PER_PATCH 0x92E7
#define GL_MAP_COLOR 0x0D10
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_DECR 0x1E03
#define GL_ALPHA_BITS 0x0D55
#define GL_DIFFUSE 0x1201
#define GL_CONSTANT_ALPHA 0x8003
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_R8UI 0x8232
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_SHADER_COMPILER 0x8DFA
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_OBJECT_LINEAR 0x2401
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_UNIFORM_TYPE 0x8A37
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_TEXTURE12 0x84CC
#define GL_ADD 0x0104
#define GL_DYNAMIC_COPY 0x88EA
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_C4UB_V2F 0x2A22
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_FRONT 0x0404
#define GL_KEEP 0x1E00
#define GL_MAP1_COLOR_4 0x0D90
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_INTENSITY 0x8049
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_PREVIOUS 0x8578
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_S 0x2000
#define GL_TEXTURE2 0x84C2
#define GL_RGBA12 0x805A
#define GL_TEXTURE15 0x84CF
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_RENDER_MODE 0x0C40
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_SPOT_CUTOFF 0x1206
#define GL_STATIC_READ 0x88E5
#define GL_SLUMINANCE 0x8C46
#define GL_UNSIGNED_BYTE 0x1401
#define GL_INTENSITY8 0x804B
#define GL_FLOAT_MAT2 0x8B5A
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_AND_REVERSE 0x1502
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_DOMAIN 0x0A02
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_SAMPLE_MASK 0x8E51
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_FOG_BIT 0x00000080
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_LINE_STRIP 0x0003
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_VERSION 0x1F02
#define GL_2_BYTES 0x1407
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_MODELVIEW 0x1700
#define GL_LUMINANCE12 0x8041
#define GL_GENERATE_MIPMAP 0x8191
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_R16F 0x822D
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_RESCALE_NORMAL 0x803A
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_RG16_SNORM 0x8F99
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_COLOR_INDEX 0x1900
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_RGB4 0x804F
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_CLIP_DISTANCE0 0x3000
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_DEPTH_RANGE 0x0B70
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_ARRAY_STRIDE 0x92FE
#define GL_COMPILE 0x1300
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_RED_BITS 0x0D52
#define GL_TEXTURE_3D 0x806F
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_TEXTURE11 0x84CB
#define GL_DOT3_RGBA 0x86AF
#define GL_R32UI 0x8236
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_4_BYTES 0x1409
#define GL_R8_SNORM 0x8F94
#define GL_OR_REVERSE 0x150B
#define GL_TEXTURE19 0x84D3
#define GL_CONSTANT_COLOR 0x8001
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_LIGHT4 0x4004
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_VERTEX_TEXTURE 0x829B
#define GL_FIXED_ONLY 0x891D
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_INVALID_VALUE 0x0501
#define GL_COPY 0x1503
#define GL_RGBA8 0x8058
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_FRONT_LEFT 0x0400
#define GL_BITMAP_TOKEN 0x0704
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_ARRAY_SIZE 0x92FB
#define GL_NO_ERROR 0
#define GL_SRC_ALPHA 0x0302
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_POINT_SIZE_MIN 0x8126
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_NORMALIZE 0x0BA1
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_RGBA32UI 0x8D70
#define GL_UNIFORM 0x92E1
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_LOCATION_INDEX 0x930F
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_R16UI 0x8234
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_FOG_HINT 0x0C54
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_LINE_SMOOTH 0x0B20
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_DRAW_BUFFER10 0x882F
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_INTERPOLATE 0x8575
#define GL_LIGHT2 0x4002
#define GL_COMPILE_STATUS 0x8B81
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_IMAGE_2D_RECT 0x904F
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_CW 0x0900
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_CURRENT_NORMAL 0x0B02
#define GL_NAME_LENGTH 0x92F9
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_N3F_V3F 0x2A25
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_VIEWPORT_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_OR_INVERTED 0x150D
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_OPERAND2_RGB 0x8592
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_DEPTH_STENCIL 0x84F9
#define GL_RG16UI 0x823A
#define GL_DOUBLE_MAT2 0x8F46
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_RG16F 0x822F
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_CLIP_DISTANCE5 0x3005
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_HALF_FLOAT 0x140B
#define GL_SRC1_COLOR 0x88F9
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_DISPLAY_LIST 0x82E7
#define GL_LIST_MODE 0x0B30
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_BGRA 0x80E1
#define GL_TEXTURE4 0x84C4
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_DEPTH_TEST 0x0B71
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_TEXTURE_BIT 0x00040000
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_ALPHA_TEST 0x0BC0
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_LINE_WIDTH 0x0B21
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DST_ALPHA 0x0304
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_ISOLINES 0x8E7A
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FILTER 0x829A
#define GL_TEXTURE31 0x84DF
#define GL_STREAM_DRAW 0x88E0
#define GL_INT_VEC4 0x8B55
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_MAP_STENCIL 0x0D11
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_IMAGE_3D 0x904E
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_QUERY_RESULT 0x8866
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_BACK_LEFT 0x0402
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_STATIC_DRAW 0x88E4
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_MEDIUM_INT 0x8DF4
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_BOOL_VEC2 0x8B57
#define GL_TEXTURE26 0x84DA
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_CLIP_PLANE1 0x3001
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_2D 0x0600
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_SHORT 0x1402
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_READ_BUFFER 0x0C02
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_MAP2_INDEX 0x0DB1
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_FOG_MODE 0x0B65
#define GL_ZOOM_Y 0x0D17
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_LOCATION 0x930E
#define GL_RG8I 0x8237
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_R32I 0x8235
#define GL_ALPHA_INTEGER 0x8D97
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_TESS_GEN_MODE 0x8E76
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_COLOR_SUM 0x8458
#define GL_STENCIL_INDEX16 0x8D49
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_LOW_FLOAT 0x8DF0
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_C4F_N3F_V3F 0x2A26
#define GL_POINT_SPRITE 0x8861
#define GL_RGB8I 0x8D8F
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NICEST 0x1102
#define GL_EVAL_BIT 0x00010000
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_RGB 0x1907
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_AUX0 0x0409
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_LIGHT5 0x4005
#define GL_TEXTURE13 0x84CD
#define GL_DITHER 0x0BD0
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_SRGB8 0x8C41
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_SAMPLER 0x82E6
#define GL_COMPRESSED_RG 0x8226
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_POINT 0x1B00
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_COORD_REPLACE 0x8862
#define GL_RGB16I 0x8D89
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_R3_G3_B2 0x2A10
#define GL_EMISSION 0x1600
#define GL_EYE_LINEAR 0x2400
#define GL_DRAW_BUFFER15 0x8834
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_ALPHA12 0x803D
#define GL_LOWER_LEFT 0x8CA1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TEXTURE_VIEW 0x82B5
#define GL_TEXTURE7 0x84C7
#define GL_RED 0x1903
#define GL_TEXTURE24 0x84D8
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_FULL_SUPPORT 0x82B7
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_ACCUM 0x0100
#define GL_AUX3 0x040C
#define GL_SAMPLER_BINDING 0x8919
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_POINT_TOKEN 0x0701
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_FOG_COORDINATE 0x8451
#define GL_TEXTURE_BORDER 0x1005
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_LUMINANCE4 0x803F
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRIANGLE_STRIP 0x0005
#define GL_BLEND_DST_RGB 0x80C8
#define GL_DRAW_BUFFER7 0x882C
#define GL_COMPRESSED_RED 0x8225
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_VERTEX_ARRAY 0x8074
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_RG_INTEGER 0x8228
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MATRIX_MODE 0x0BA0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_FOG_END 0x0B64
#define GL_MAX_LIGHTS 0x0D31
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_FALSE 0
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_VENDOR 0x1F00
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_CCW 0x0901
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_TEXTURE29 0x84DD
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_DRAW_BUFFER8 0x882D
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_INDEX_SHIFT 0x0D12
#define GL_SAMPLES_PASSED 0x8914
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_INT_IMAGE_1D 0x9057
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_RGBA16I 0x8D88
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_CURRENT_INDEX 0x0B01
#define GL_ALPHA_BIAS 0x0D1D
#define GL_RGB16F 0x881B
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_R8 0x8229
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_WIDTH 0x827E
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_VERTEX_SHADER 0x8B31
#define GL_RGB_INTEGER 0x8D98
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_LIST_BIT 0x00020000
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_MAP1_NORMAL 0x0D92
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_COLOR_ARRAY 0x8076
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_AUX2 0x040B
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_NORMAL_ARRAY 0x8075
#define GL_RG8 0x822B
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_MIRRORED_REPEAT 0x8370
#define GL_FLOAT_VEC2 0x8B50
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_NAND 0x150E
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_RG32UI 0x823C
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_SAMPLER_1D 0x8B5D
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_READ_ONLY 0x88B8
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_DOUBLE_MAT3 0x8F47
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_TOKEN 0x0703
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SLUMINANCE8 0x8C47
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_LEQUAL 0x0203
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_OPERAND1_RGB 0x8591
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_ENV 0x2300
#define GL_LUMINANCE8 0x8040
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_HINT_BIT 0x00008000
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_FUNC_ADD 0x8006
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_SINGLE_COLOR 0x81F9
#define GL_DECR_WRAP 0x8508
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_FOG_DENSITY 0x0B62
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_STENCIL_REF 0x0B97
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_RGB5_A1 0x8057
#define GL_LINE_BIT 0x00000004
#define GL_ORDER 0x0A01
#define GL_PATCH_VERTICES 0x8E72
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_SYNC_FENCE 0x9116
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_FRAMEBUFFER 0x8D40
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_C3F_V3F 0x2A24
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_VIEWPORT 0x0BA2
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_INTENSITY12 0x804C
#define GL_RGBA_INTEGER 0x8D99
#define GL_RG16 0x822C
#define GL_GREEN_SCALE 0x0D18
#define GL_SRC0_ALPHA 0x8588
#define GL_DRAW_BUFFER9 0x882E
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_SRGB_READ 0x8297
#define GL_GREEN_BIAS 0x0D19
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_CLIP_PLANE2 0x3002
#define GL_MAX_DEPTH 0x8280
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_FIXED 0x140C
#define GL_DOUBLEBUFFER 0x0C32
#define GL_REPEAT 0x2901
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_BOOL_VEC4 0x8B59
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_INVERT 0x150A
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_DRAW_BUFFER2 0x8827
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_TYPE 0x92FA
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_LIGHT1 0x4001
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_MIPMAP 0x8293
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_FASTEST 0x1101
#define GL_DRAW_BUFFER3 0x8828
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_LEFT 0x0406
#define GL_OUT_OF_MEMORY 0x0505
#define GL_SRC2_RGB 0x8582
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_TEXTURE_WIDTH 0x1000
#define GL_ALPHA 0x1906
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_3_BYTES 0x1408
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_DECAL 0x2101
#define GL_FLOAT_MAT3 0x8B5B
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_DONT_CARE 0x1100
#define GL_SUBTRACT 0x84E7
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CLIP_DISTANCE7 0x3007
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_CONSTANT 0x8576
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_FRONT_AND_BACK 0x0408
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_LIGHT3 0x4003
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_TEXTURE21 0x84D5
#define GL_SYNC_CONDITION 0x9113
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_SRGB 0x8C40
#define GL_MINOR_VERSION 0x821C
#define GL_IMAGE_CUBE 0x9050
#define GL_OPERAND2_ALPHA 0x859A
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_LIGHT0 0x4000
#define GL_DOT3_RGB 0x86AE
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_BLUE_INTEGER 0x8D96
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_FLOAT_VEC4 0x8B52
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_STENCIL 0x1802
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_SPOT_EXPONENT 0x1205
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_DYNAMIC_READ 0x88E9
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_ALPHA16 0x803E
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_MATRIX_STRIDE 0x92FF
#define GL_MULT 0x0103
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_STATIC_COPY 0x88E6
#define GL_SCISSOR_TEST 0x0C11
#define GL_LIGHT6 0x4006
#define GL_COMBINE_RGB 0x8571
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ENCODING 0x8296
#define GL_STEREO 0x0C33
#define GL_TEXTURE8 0x84C8
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_LOGIC_OP 0x0BF1
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE20 0x84D4
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_RGB10_A2UI 0x906F
#define GL_POINTS 0x0000
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_TRIANGLES 0x0004
#define GL_RED_SCALE 0x0D14
#define GL_R 0x2002
#define GL_RGB16_SNORM 0x8F9A
#define GL_BACK 0x0405
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_STENCIL_FAIL 0x0B94
#define GL_NOR 0x1508
#define GL_RED_BIAS 0x0D15
#define GL_SYNC_STATUS 0x9114
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_SRGB_WRITE 0x8298
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_ENABLE_BIT 0x00002000
#define GL_RGBA_MODE 0x0C31
#define GL_FEEDBACK 0x1C01
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_RGB8UI 0x8D7D
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_LESS 0x0201
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_UNSIGNED_SHORT 0x1403
#define GL_MAX_SAMPLES 0x8D57
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_RGBA 0x1908
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_POINT_SMOOTH 0x0B10
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_DRAW_BUFFER4 0x8829
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_ARRAY_BUFFER 0x8892
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_OBJECT_TYPE 0x9112
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_TIMESTAMP 0x8E28
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_TEXTURE10 0x84CA
#define GL_INCR_WRAP 0x8507
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_NONE 0
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_WAIT_FAILED 0x911D
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_DRAW_BUFFER 0x0C01
#define GL_LINE_TOKEN 0x0702
#define GL_RG32I 0x823B
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_BACK_RIGHT 0x0403
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_RGBA16_SNORM 0x8F9B
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_UNIFORM_SIZE 0x8A38
#define GL_INT 0x1404
#define GL_DOUBLE 0x140A
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_OPERAND1_ALPHA 0x8599
#define GL_BUFFER_MAPPED 0x88BC
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_LIST_INDEX 0x0B33
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_EXTENSIONS 0x1F03
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_RGBA16UI 0x8D76
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_SRGB_ALPHA 0x8C42
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TEXTURE30 0x84DE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_STENCIL_TEST 0x0B90
#define GL_FOG_START 0x0B63
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_IS_ROW_MAJOR 0x9300
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_BOOL 0x8B56
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_PROGRAM 0x82E2
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_QUERY 0x82E3
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_ONE 1
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_BITMAP 0x1A00
#define GL_ALPHA_SCALE 0x0D1C
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_STREAM_COPY 0x88E2
#define GL_DRAW_BUFFER0 0x8825
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_SCISSOR_BOX 0x0C10
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_RGB565 0x8D62
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_ADD_SIGNED 0x8574
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_QUAD_STRIP 0x0008
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_CLIP_PLANE5 0x3005
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_INDEX 0x8222
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_INDEX_MODE 0x0C30
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_SOURCE2_RGB 0x8582
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_SRC0_RGB 0x8580
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_RGB10_A2 0x8059
#define GL_T2F_V3F 0x2A27
#define GL_COMPRESSED_RGB 0x84ED
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_AUX1 0x040A
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_STENCIL_INDEX4 0x8D47
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_BLOCK_INDEX 0x92FD
#define GL_STACK_UNDERFLOW 0x0504
#define GL_BLUE 0x1905
#define GL_DEPTH_BITS 0x0D56
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_INCR 0x1E02
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_INT_IMAGE_2D 0x9058
#define GL_SAMPLE_SHADING 0x8C36
#define GL_TRANSFORM_BIT 0x00001000
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_FOG_INDEX 0x0B61
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_DRAW_BUFFER13 0x8832
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_SOURCE1_ALPHA 0x8589
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_DST_COLOR 0x0306
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_BUFFER_BINDING 0x9302
#define GL_LOW_INT 0x8DF3
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_BLEND_DST 0x0BE0
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_FILL 0x1B02
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_R16 0x822A
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_IMAGE_2D 0x904D
#define GL_INVALID_OPERATION 0x0502
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_CLIP_DISTANCE3 0x3003
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_SPOT_DIRECTION 0x1204
#define GL_TEXTURE5 0x84C5
#define GL_VALIDATE_STATUS 0x8B83
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_FRONT_FACE 0x0B46
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_RGB5 0x8050
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_RG16I 0x8239
#define GL_MAJOR_VERSION 0x821B
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_SOURCE0_ALPHA 0x8588
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_COMBINE_ALPHA 0x8572
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_SYNC_FLAGS 0x9115
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_INT_VEC2 0x8B53
#define GL_Q 0x2003
#define GL_DRAW_BUFFER14 0x8833
#define GL_RGBA32I 0x8D82
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_COMPUTE_SHADER 0x91B9
#define GL_FUNC_SUBTRACT 0x800A
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_SMOOTH 0x1D01
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_SRC2_ALPHA 0x858A
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_BGR_INTEGER 0x8D9A
#define GL_CULL_FACE 0x0B44
#define GL_PROJECTION 0x1701
#define GL_MIN 0x8007
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_OFFSET 0x92FC
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_SHADE_MODEL 0x0B54
#define GL_FOG_COLOR 0x0B66
#define GL_TIME_ELAPSED 0x88BF
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_NEVER 0x0200
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_PROGRAM_INPUT 0x92E3
#define GL_FOG 0x0B60
#define GL_V2F 0x2A20
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_TRUE 1
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_RGB16UI 0x8D77
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_OPERAND0_ALPHA 0x8598
#define GL_SRC1_ALPHA 0x8589
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_RENDERER 0x1F01
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_ZERO 0
#define GL_ALPHA8 0x803C
#define GL_TEXTURE27 0x84DB
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_GREEN_BITS 0x0D53
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_RGB8 0x8051
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_NOOP 0x1505
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_LIGHTING 0x0B50
#define GL_CONDITION_SATISFIED 0x911C
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_STACK_OVERFLOW 0x0503
#define GL_T4F_V4F 0x2A28
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_PATCHES 0x000E
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_BUFFER_SIZE 0x8764
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_DEPTH_FUNC 0x0B74
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_TEXTURE16 0x84D0
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_RG32F 0x8230
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_R16I 0x8233
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_GEQUAL 0x0206
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_CLIP_PLANE0 0x3000
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_RG8_SNORM 0x8F95
#define GL_3D_COLOR 0x0602
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_MAP_READ_BIT 0x0001
#define GL_TEXTURE_GATHER 0x82A2
#define GL_EQUAL 0x0202
#define GL_TEXTURE14 0x84CE
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_NEAREST 0x2600
#define GL_SPHERE_MAP 0x2402
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_UPPER_LEFT 0x8CA2
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_QUADS 0x0007
#define GL_LINEAR 0x2601
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_BUFFER_USAGE 0x8765
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_CLEAR_BUFFER 0x82B4
#define GL_3D 0x0601
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_LINE_STIPPLE 0x0B24
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_RGB16 0x8054
#define GL_SHININESS 0x1601
#define GL_COPY_INVERTED 0x150C
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_FRONT_RIGHT 0x0401
#define GL_SAMPLES 0x80A9
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RG 0x8227
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_BOOL_VEC3 0x8B58
#define GL_RGBA8UI 0x8D7C
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_ALREADY_SIGNALED 0x911A
#define GL_SIGNALED 0x9119
#define GL_SAMPLER_3D 0x8B5F
#define GL_CONTEXT_FLAGS 0x821E
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_EDGE_FLAG 0x0B43
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_REPLACE 0x1E01
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_CLEAR 0x1500
#define GL_SELECT 0x1C02
#define GL_REFLECTION_MAP 0x8512
#define GL_SOURCE1_RGB 0x8581
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_PRIMARY_COLOR 0x8577
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_READ_PIXELS 0x828C
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_BYTE 0x1400
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_STENCIL_INDEX1 0x8D46
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_FLOAT 0x1406
#define GL_RGB_SCALE 0x8573
#define GL_R32F 0x822E
#define GL_SPECULAR 0x1202
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_COEFF 0x0A00
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_EYE_PLANE 0x2502
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_MAP_WRITE_BIT 0x0002
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_OR 0x1507
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_POLYGON_MODE 0x0B40
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_POLYGON_BIT 0x00000008
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_NORMAL_MAP 0x8511
#define GL_BGRA_INTEGER 0x8D9B
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_WRITE_ONLY 0x88B9
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_LUMINANCE 0x1909
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_DRAW_BUFFER5 0x882A
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEPTH_SCALE 0x0D1E
#define GL_RGB8_SNORM 0x8F96
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_AUX_BUFFERS 0x0C00
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_IMAGE_BUFFER 0x9051
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_RENDER 0x1C00
#define GL_ALPHA4 0x803B
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_COLOR_RENDERABLE 0x8286
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_CLIP_DISTANCE1 0x3001
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_READ_WRITE 0x88BA
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_VEC3 0x8B54
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_COMBINE 0x8570
#define GL_INDEX_BITS 0x0D51
#define GL_T 0x2001
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_UNSIGNALED 0x9118
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_RENDERBUFFER 0x8D41
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_LINK_STATUS 0x8B82
#define GL_LINE_LOOP 0x0002
#define GL_AND_INVERTED 0x1504
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_POLYGON 0x0009
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_RIGHT 0x0407
#define GL_TEXTURE25 0x84D9
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_SRC_COLOR 0x0300
#define GL_LIGHTING_BIT 0x00000040
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_IMAGE_1D 0x904C
#define GL_RGB12 0x8053
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_CLIP_DISTANCE6 0x3006
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_CULL_FACE_MODE 0x0B45
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_DEPTH 0x1801
#define GL_RG8UI 0x8238
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_CURRENT_QUERY 0x8865
#define GL_RGB32I 0x8D83
#define GL_AMBIENT 0x1200
#define GL_TEXTURE17 0x84D1
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TEXTURE6 0x84C6
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_UNSIGNED_INT 0x1405
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_DISTANCE2 0x3002
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_RGB9_E5 0x8C3D
#define GL_DOUBLE_MAT4 0x8F48
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_LINE 0x1B01
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_RED_INTEGER 0x8D94
#define GL_SAMPLE_POSITION 0x8E50
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_BLEND 0x0BE2
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_DEPTH 0x8071
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_DRAW_BUFFER11 0x8830
#define GL_LINES 0x0001
#define GL_POSITION 0x1203
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_INVALID_ENUM 0x0500
#define GL_R16_SNORM 0x8F98
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_RGBA4 0x8056
#define GL_NUM_EXTENSIONS 0x821D
#define GL_RGBA32F 0x8814
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_STENCIL_FUNC 0x0B92
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_STENCIL_INDEX 0x1901
#define GL_CURRENT_COLOR 0x0B00
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_RGBA8_SNORM 0x8F97
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_HIGH_INT 0x8DF5
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_TEXTURE_1D 0x0DE0
#define GL_FLOAT_VEC3 0x8B51
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_COLOR_INDEXES 0x1603
#define GL_POINT_SIZE 0x0B11
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_MAX_LAYERS 0x8281
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_SET 0x150F
#define GL_SOURCE0_RGB 0x8580
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_RETURN 0x0102
#define GL_SAMPLER_2D 0x8B5E
#define GL_TEXTURE_2D 0x0DE1
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_BLEND_SRC 0x0BE1
#define GL_GREATER 0x0204
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_LOAD 0x0101
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_OPERAND0_RGB 0x8590
#define GL_FOG_COORD_SRC 0x8450
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_POINT_SIZE_MAX 0x8127
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_NOTEQUAL 0x0205
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_COLOR_COMPONENTS 0x8283
#define GL_TRIANGLE_FAN 0x0006
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_SRC1_RGB 0x8581
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_SHADER 0x82E1
#define GL_CLIP_PLANE3 0x3003
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_INTENSITY4 0x804A
#define GL_INDEX_ARRAY 0x8077
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_GREEN 0x1904
#define GL_LIST_BASE 0x0B32
#define GL_V3F 0x2A21
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_STENCIL_INDEX8 0x8D48
#define GL_R8I 0x8231
#define GL_INT_IMAGE_3D 0x9059
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_TYPE 0x8B4F
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_TEXTURE 0x1702
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_LIGHT7 0x4007
#define GL_STREAM_READ 0x88E1
#define GL_DRAW_BUFFER12 0x8831
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_RGBA8I 0x8D8E
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_AND 0x1501
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_GREEN_INTEGER 0x8D95
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_ALWAYS 0x0207
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_MULTISAMPLE 0x809D
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_MAX 0x8008
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_RGB32UI 0x8D71
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_RGBA16F 0x881A
#define GL_DEPTH_CLAMP 0x864F
#define GL_BUFFER_ACCESS 0x88BB
#define GL_CLIP_DISTANCE4 0x3004
#define GL_LINES_ADJACENCY 0x000A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_LUMINANCE16 0x8042
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_SCISSOR_BIT 0x00080000
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_MAX_HEIGHT 0x827F
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_DEBUG_TYPE_POP_GROUP 0x826A

/*
 * ---------------------------
 * Commands
 * ---------------------------
 */

typedef void (APIENTRYP PFNGLINDEXFPROC)(GLfloat c);
GLOWDEF PFNGLINDEXFPROC glow_glIndexf;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETTEXPARAMETERIIVPROC glow_glGetTexParameterIiv;
typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
GLOWDEF PFNGLISSYNCPROC glow_glIsSync;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX3DVPROC glow_glUniformMatrix3dv;
typedef void (APIENTRYP PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLROTATEFPROC glow_glRotatef;
typedef void (APIENTRYP PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint *params);
GLOWDEF PFNGLTEXGENIVPROC glow_glTexGeniv;
typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLUNIFORM1UIVPROC glow_glUniform1uiv;
typedef void (APIENTRYP PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
GLOWDEF PFNGLRASTERPOS3IPROC glow_glRasterPos3i;
typedef void (APIENTRYP PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
GLOWDEF PFNGLVERTEX2FPROC glow_glVertex2f;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GLOWDEF PFNGLCOMPRESSEDTEXIMAGE3DPROC glow_glCompressedTexImage3D;
typedef void (APIENTRYP PFNGLENDLISTPROC)();
GLOWDEF PFNGLENDLISTPROC glow_glEndList;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLOWDEF PFNGLPROGRAMUNIFORM2DPROC glow_glProgramUniform2d;
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETFRAMEBUFFERPARAMETERIVPROC glow_glGetFramebufferParameteriv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble *v);
GLOWDEF PFNGLMULTITEXCOORD4DVPROC glow_glMultiTexCoord4dv;
typedef void (APIENTRYP PFNGLBEGINPROC)(GLenum mode);
GLOWDEF PFNGLBEGINPROC glow_glBegin;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLSECONDARYCOLOR3FVPROC glow_glSecondaryColor3fv;
typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLUNIFORM3IVPROC glow_glUniform3iv;
typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
GLOWDEF PFNGLGETQUERYINDEXEDIVPROC glow_glGetQueryIndexediv;
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLOWDEF PFNGLPOLYGONMODEPROC glow_glPolygonMode;
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLOWDEF PFNGLDISPATCHCOMPUTEPROC glow_glDispatchCompute;
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
GLOWDEF PFNGLBINDTEXTUREPROC glow_glBindTexture;
typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint *textures, const GLfloat *priorities);
GLOWDEF PFNGLPRIORITIZETEXTURESPROC glow_glPrioritizeTextures;
typedef void (APIENTRYP PFNGLINDEXUBVPROC)(const GLubyte *c);
GLOWDEF PFNGLINDEXUBVPROC glow_glIndexubv;
typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
GLOWDEF PFNGLDEPTHMASKPROC glow_glDepthMask;
typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum array);
GLOWDEF PFNGLENABLECLIENTSTATEPROC glow_glEnableClientState;
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLOWDEF PFNGLGETATTACHEDSHADERSPROC glow_glGetAttachedShaders;
typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
GLOWDEF PFNGLCOLORP4UIPROC glow_glColorP4ui;
typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat *buffer);
GLOWDEF PFNGLFEEDBACKBUFFERPROC glow_glFeedbackBuffer;
typedef void (APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLRASTERPOS3FPROC glow_glRasterPos3f;
typedef void (APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat s);
GLOWDEF PFNGLTEXCOORD1FPROC glow_glTexCoord1f;
typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC)(const GLshort *v);
GLOWDEF PFNGLTEXCOORD4SVPROC glow_glTexCoord4sv;
typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETQUERYIVPROC glow_glGetQueryiv;
typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLOWDEF PFNGLCLEARDEPTHPROC glow_glClearDepth;
typedef void (APIENTRYP PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
GLOWDEF PFNGLTEXENVIPROC glow_glTexEnvi;
typedef void (APIENTRYP PFNGLPOPMATRIXPROC)();
GLOWDEF PFNGLPOPMATRIXPROC glow_glPopMatrix;
typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void *pointer);
GLOWDEF PFNGLEDGEFLAGPOINTERPROC glow_glEdgeFlagPointer;
typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC)(const GLdouble *v);
GLOWDEF PFNGLTEXCOORD4DVPROC glow_glTexCoord4dv;
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLOWDEF PFNGLBINDVERTEXBUFFERPROC glow_glBindVertexBuffer;
typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GLOWDEF PFNGLGETOBJECTPTRLABELPROC glow_glGetObjectPtrLabel;
typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLOWDEF PFNGLTEXPARAMETERFPROC glow_glTexParameterf;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
GLOWDEF PFNGLVERTEXATTRIB1SVPROC glow_glVertexAttrib1sv;
typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLTEXCOORD3FVPROC glow_glTexCoord3fv;
typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint *params);
GLOWDEF PFNGLLIGHTMODELIVPROC glow_glLightModeliv;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
GLOWDEF PFNGLGETQUERYOBJECTUIVPROC glow_glGetQueryObjectuiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
GLOWDEF PFNGLGETVERTEXATTRIBLDVPROC glow_glGetVertexAttribLdv;
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void *userParam);
GLOWDEF PFNGLDEBUGMESSAGECALLBACKPROC glow_glDebugMessageCallback;
typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLOWDEF PFNGLSTENCILOPPROC glow_glStencilOp;
typedef void (APIENTRYP PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
GLOWDEF PFNGLCOPYPIXELSPROC glow_glCopyPixels;
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
GLOWDEF PFNGLISVERTEXARRAYPROC glow_glIsVertexArray;
typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
GLOWDEF PFNGLSAMPLEMASKIPROC glow_glSampleMaski;
typedef void (APIENTRYP PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint *params);
GLOWDEF PFNGLLIGHTIVPROC glow_glLightiv;
typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLOWDEF PFNGLTEXBUFFERPROC glow_glTexBuffer;
typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
GLOWDEF PFNGLSHADERBINARYPROC glow_glShaderBinary;
typedef void (APIENTRYP PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint *params);
GLOWDEF PFNGLMATERIALIVPROC glow_glMaterialiv;
typedef void (APIENTRYP PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
GLOWDEF PFNGLNORMAL3BPROC glow_glNormal3b;
typedef void (APIENTRYP PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint *v);
GLOWDEF PFNGLGETMAPIVPROC glow_glGetMapiv;
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
GLOWDEF PFNGLBINDTRANSFORMFEEDBACKPROC glow_glBindTransformFeedback;
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GLOWDEF PFNGLGETDEBUGMESSAGELOGPROC glow_glGetDebugMessageLog;
typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
GLOWDEF PFNGLGETBOOLEANVPROC glow_glGetBooleanv;
typedef void (APIENTRYP PFNGLINDEXUBPROC)(GLubyte c);
GLOWDEF PFNGLINDEXUBPROC glow_glIndexub;
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLOWDEF PFNGLBLITFRAMEBUFFERPROC glow_glBlitFramebuffer;
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
GLOWDEF PFNGLGETMULTISAMPLEFVPROC glow_glGetMultisamplefv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLPROGRAMUNIFORM3IVPROC glow_glProgramUniform3iv;
typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLOWDEF PFNGLGETPROGRAMRESOURCEINDEXPROC glow_glGetProgramResourceIndex;
typedef void (APIENTRYP PFNGLINDEXFVPROC)(const GLfloat *c);
GLOWDEF PFNGLINDEXFVPROC glow_glIndexfv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLOWDEF PFNGLVERTEXATTRIBFORMATPROC glow_glVertexAttribFormat;
typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC)(const GLdouble *v);
GLOWDEF PFNGLRASTERPOS4DVPROC glow_glRasterPos4dv;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glow_glDrawTransformFeedbackInstanced;
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLOWDEF PFNGLVIEWPORTINDEXEDFPROC glow_glViewportIndexedf;
typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);
GLOWDEF PFNGLISBUFFERPROC glow_glIsBuffer;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX3X2FVPROC glow_glUniformMatrix3x2fv;
typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
GLOWDEF PFNGLDEPTHRANGEINDEXEDPROC glow_glDepthRangeIndexed;
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETTEXLEVELPARAMETERFVPROC glow_glGetTexLevelParameterfv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC)(const GLint *v);
GLOWDEF PFNGLSECONDARYCOLOR3IVPROC glow_glSecondaryColor3iv;
typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLUNIFORM1IVPROC glow_glUniform1iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLOWDEF PFNGLVERTEXATTRIB4DPROC glow_glVertexAttrib4d;
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
GLOWDEF PFNGLSECONDARYCOLORP3UIPROC glow_glSecondaryColorP3ui;
typedef void (APIENTRYP PFNGLRECTSVPROC)(const GLshort *v1, const GLshort *v2);
GLOWDEF PFNGLRECTSVPROC glow_glRectsv;
typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC)(const GLshort *v);
GLOWDEF PFNGLRASTERPOS2SVPROC glow_glRasterPos2sv;
typedef void (APIENTRYP PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
GLOWDEF PFNGLEVALMESH1PROC glow_glEvalMesh1;
typedef void (APIENTRYP PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLOWDEF PFNGLORTHOPROC glow_glOrtho;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
GLOWDEF PFNGLMULTIDRAWELEMENTSPROC glow_glMultiDrawElements;
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLOWDEF PFNGLDISABLEVERTEXATTRIBARRAYPROC glow_glDisableVertexAttribArray;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORM4FVPROC glow_glProgramUniform4fv;
typedef void (APIENTRYP PFNGLCOLOR4UIVPROC)(const GLuint *v);
GLOWDEF PFNGLCOLOR4UIVPROC glow_glColor4uiv;
typedef void (APIENTRYP PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
GLOWDEF PFNGLTEXGENFPROC glow_glTexGenf;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLOWDEF PFNGLVERTEXATTRIBI4IPROC glow_glVertexAttribI4i;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GLOWDEF PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glow_glGetActiveUniformBlockName;
typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
GLOWDEF PFNGLDELETESAMPLERSPROC glow_glDeleteSamplers;
typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLUNIFORM4DVPROC glow_glUniform4dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLOWDEF PFNGLPROGRAMUNIFORM2UIPROC glow_glProgramUniform2ui;
typedef void (APIENTRYP PFNGLRECTFVPROC)(const GLfloat *v1, const GLfloat *v2);
GLOWDEF PFNGLRECTFVPROC glow_glRectfv;
typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
GLOWDEF PFNGLENABLEIPROC glow_glEnablei;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLVERTEXATTRIBI1IVPROC glow_glVertexAttribI1iv;
typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
GLOWDEF PFNGLCLIENTACTIVETEXTUREPROC glow_glClientActiveTexture;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
GLOWDEF PFNGLVERTEXATTRIB4NBVPROC glow_glVertexAttrib4Nbv;
typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
GLOWDEF PFNGLWINDOWPOS3IPROC glow_glWindowPos3i;
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
GLOWDEF PFNGLGETBUFFERPOINTERVPROC glow_glGetBufferPointerv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
GLOWDEF PFNGLGETVERTEXATTRIBPOINTERVPROC glow_glGetVertexAttribPointerv;
typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLUNIFORM1DVPROC glow_glUniform1dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
GLOWDEF PFNGLVERTEXATTRIBL1DPROC glow_glVertexAttribL1d;
typedef void (APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETTEXENVIVPROC glow_glGetTexEnviv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLPROGRAMUNIFORM1IVPROC glow_glProgramUniform1iv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLOWDEF PFNGLPROGRAMUNIFORM3UIPROC glow_glProgramUniform3ui;
typedef void (APIENTRYP PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
GLOWDEF PFNGLMAP2DPROC glow_glMap2d;
typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLOWDEF PFNGLPOLYGONOFFSETPROC glow_glPolygonOffset;
typedef void (APIENTRYP PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLCOLORPOINTERPROC glow_glColorPointer;
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
GLOWDEF PFNGLBINDSAMPLERPROC glow_glBindSampler;
typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLOWDEF PFNGLINVALIDATETEXSUBIMAGEPROC glow_glInvalidateTexSubImage;
typedef void (APIENTRYP PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
GLOWDEF PFNGLCOLOR4UIPROC glow_glColor4ui;
typedef void (APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat c);
GLOWDEF PFNGLCLEARINDEXPROC glow_glClearIndex;
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
GLOWDEF PFNGLDELETEVERTEXARRAYSPROC glow_glDeleteVertexArrays;
typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLOWDEF PFNGLWAITSYNCPROC glow_glWaitSync;
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)();
GLOWDEF PFNGLRESUMETRANSFORMFEEDBACKPROC glow_glResumeTransformFeedback;
typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLOWDEF PFNGLCOPYIMAGESUBDATAPROC glow_glCopyImageSubData;
typedef void (APIENTRYP PFNGLSHADEMODELPROC)(GLenum mode);
GLOWDEF PFNGLSHADEMODELPROC glow_glShadeModel;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
GLOWDEF PFNGLSAMPLERPARAMETERIVPROC glow_glSamplerParameteriv;
typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
GLOWDEF PFNGLUNIFORM2UIPROC glow_glUniform2ui;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
GLOWDEF PFNGLGETQUERYOBJECTUI64VPROC glow_glGetQueryObjectui64v;
typedef void (APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETMATERIALFVPROC glow_glGetMaterialfv;
typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
GLOWDEF PFNGLCLEARBUFFERUIVPROC glow_glClearBufferuiv;
typedef void (APIENTRYP PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
GLOWDEF PFNGLCOLOR3FPROC glow_glColor3f;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC)(const GLushort *v);
GLOWDEF PFNGLSECONDARYCOLOR3USVPROC glow_glSecondaryColor3usv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLVERTEXATTRIB4NIVPROC glow_glVertexAttrib4Niv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
GLOWDEF PFNGLVERTEXATTRIB4SVPROC glow_glVertexAttrib4sv;
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
GLOWDEF PFNGLGETINTEGERI_VPROC glow_glGetIntegeri_v;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLVERTEXATTRIBI4IVPROC glow_glVertexAttribI4iv;
typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLOWDEF PFNGLUNIFORM3UIPROC glow_glUniform3ui;
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
GLOWDEF PFNGLGETACTIVESUBROUTINENAMEPROC glow_glGetActiveSubroutineName;
typedef void (APIENTRYP PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
GLOWDEF PFNGLRECTSPROC glow_glRects;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIBL1DVPROC glow_glVertexAttribL1dv;
typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
GLOWDEF PFNGLUNIFORM2FPROC glow_glUniform2f;
typedef void (APIENTRYP PFNGLFLUSHPROC)();
GLOWDEF PFNGLFLUSHPROC glow_glFlush;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
GLOWDEF PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glow_glMultiDrawElementsBaseVertex;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX3X2DVPROC glow_glUniformMatrix3x2dv;
typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
GLOWDEF PFNGLPATCHPARAMETERIPROC glow_glPatchParameteri;
typedef void (APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLTRANSLATEFPROC glow_glTranslatef;
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLOWDEF PFNGLTEXIMAGE2DMULTISAMPLEPROC glow_glTexImage2DMultisample;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLOWDEF PFNGLMULTITEXCOORDP3UIPROC glow_glMultiTexCoordP3ui;
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLOWDEF PFNGLGETPROGRAMRESOURCELOCATIONPROC glow_glGetProgramResourceLocation;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLVERTEXATTRIB3DPROC glow_glVertexAttrib3d;
typedef void (APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
GLOWDEF PFNGLTEXCOORD2SPROC glow_glTexCoord2s;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLOWDEF PFNGLFRAMEBUFFERTEXTURE1DPROC glow_glFramebufferTexture1D;
typedef void (APIENTRYP PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
GLOWDEF PFNGLCOLOR3USPROC glow_glColor3us;
typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC)(const GLfloat *v);
GLOWDEF PFNGLTEXCOORD1FVPROC glow_glTexCoord1fv;
typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
GLOWDEF PFNGLPUSHCLIENTATTRIBPROC glow_glPushClientAttrib;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIB2DVPROC glow_glVertexAttrib2dv;
typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
GLOWDEF PFNGLGETTEXIMAGEPROC glow_glGetTexImage;
typedef void (APIENTRYP PFNGLVERTEX4DVPROC)(const GLdouble *v);
GLOWDEF PFNGLVERTEX4DVPROC glow_glVertex4dv;
typedef void (APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLINDEXPOINTERPROC glow_glIndexPointer;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
GLOWDEF PFNGLVERTEXATTRIBI4UIVPROC glow_glVertexAttribI4uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glow_glProgramUniformMatrix2x4fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLOWDEF PFNGLVERTEXATTRIBP4UIVPROC glow_glVertexAttribP4uiv;
typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLRASTERPOS3DVPROC glow_glRasterPos3dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
GLOWDEF PFNGLVERTEXATTRIB1FVPROC glow_glVertexAttrib1fv;
typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
GLOWDEF PFNGLGETFRAGDATAINDEXPROC glow_glGetFragDataIndex;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glow_glProgramUniformMatrix2x3dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glow_glProgramUniformMatrix3x4dv;
typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
GLOWDEF PFNGLNORMALP3UIPROC glow_glNormalP3ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3FVPROC glow_glProgramUniformMatrix3fv;
typedef void (APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLOWDEF PFNGLCLEARACCUMPROC glow_glClearAccum;
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLOWDEF PFNGLVERTEXATTRIBLFORMATPROC glow_glVertexAttribLFormat;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
GLOWDEF PFNGLPROGRAMUNIFORM1FPROC glow_glProgramUniform1f;
typedef void (APIENTRYP PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
GLOWDEF PFNGLTEXENVFVPROC glow_glTexEnvfv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint *v);
GLOWDEF PFNGLMULTITEXCOORD3IVPROC glow_glMultiTexCoord3iv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC)(const GLshort *v);
GLOWDEF PFNGLSECONDARYCOLOR3SVPROC glow_glSecondaryColor3sv;
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
GLOWDEF PFNGLCREATESHADERPROGRAMVPROC glow_glCreateShaderProgramv;
typedef void (APIENTRYP PFNGLCOLOR3IVPROC)(const GLint *v);
GLOWDEF PFNGLCOLOR3IVPROC glow_glColor3iv;
typedef void (APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble u);
GLOWDEF PFNGLEVALCOORD1DPROC glow_glEvalCoord1d;
typedef void (APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield mask);
GLOWDEF PFNGLPUSHATTRIBPROC glow_glPushAttrib;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLOWDEF PFNGLBLENDFUNCSEPARATEPROC glow_glBlendFuncSeparate;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLOWDEF PFNGLVERTEXATTRIB4FPROC glow_glVertexAttrib4f;
typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GLOWDEF PFNGLGETUNIFORMINDICESPROC glow_glGetUniformIndices;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLOWDEF PFNGLMULTITEXCOORDP1UIPROC glow_glMultiTexCoordP1ui;
typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
GLOWDEF PFNGLCLEARBUFFERDATAPROC glow_glClearBufferData;
typedef void (APIENTRYP PFNGLINDEXMASKPROC)(GLuint mask);
GLOWDEF PFNGLINDEXMASKPROC glow_glIndexMask;
typedef void (APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLDRAWPIXELSPROC glow_glDrawPixels;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
GLOWDEF PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glow_glCompressedTexSubImage3D;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
GLOWDEF PFNGLMULTITEXCOORD4DPROC glow_glMultiTexCoord4d;
typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
GLOWDEF PFNGLCOLORP4UIVPROC glow_glColorP4uiv;
typedef void (APIENTRYP PFNGLCOLOR3BVPROC)(const GLbyte *v);
GLOWDEF PFNGLCOLOR3BVPROC glow_glColor3bv;
typedef void (APIENTRYP PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
GLOWDEF PFNGLNEWLISTPROC glow_glNewList;
typedef void (APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
GLOWDEF PFNGLTEXCOORD3SPROC glow_glTexCoord3s;
typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLOWDEF PFNGLBLENDFUNCPROC glow_glBlendFunc;
typedef void (APIENTRYP PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
GLOWDEF PFNGLMAP1DPROC glow_glMap1d;
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
GLOWDEF PFNGLDELETEBUFFERSPROC glow_glDeleteBuffers;
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
GLOWDEF PFNGLISPROGRAMPROC glow_glIsProgram;
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
GLOWDEF PFNGLVERTEXATTRIBPOINTERPROC glow_glVertexAttribPointer;
typedef void (APIENTRYP PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
GLOWDEF PFNGLVERTEX3SPROC glow_glVertex3s;
typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLUNIFORM2DVPROC glow_glUniform2dv;
typedef void (APIENTRYP PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat *params);
GLOWDEF PFNGLLIGHTFVPROC glow_glLightfv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
GLOWDEF PFNGLSECONDARYCOLOR3BPROC glow_glSecondaryColor3b;
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
GLOWDEF PFNGLBLENDEQUATIONPROC glow_glBlendEquation;
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLVERTEXATTRIBIPOINTERPROC glow_glVertexAttribIPointer;
typedef void (APIENTRYP PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
GLOWDEF PFNGLMAP2FPROC glow_glMap2f;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
GLOWDEF PFNGLVERTEXATTRIBI1UIVPROC glow_glVertexAttribI1uiv;
typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
GLOWDEF PFNGLGETUNIFORMBLOCKINDEXPROC glow_glGetUniformBlockIndex;
typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC)(const GLint *v);
GLOWDEF PFNGLTEXCOORD4IVPROC glow_glTexCoord4iv;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLOWDEF PFNGLCOPYTEXSUBIMAGE1DPROC glow_glCopyTexSubImage1D;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLOWDEF PFNGLCOPYTEXSUBIMAGE2DPROC glow_glCopyTexSubImage2D;
typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLWINDOWPOS3DPROC glow_glWindowPos3d;
typedef void (APIENTRYP PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
GLOWDEF PFNGLBITMAPPROC glow_glBitmap;
typedef void (APIENTRYP PFNGLCOLOR4DVPROC)(const GLdouble *v);
GLOWDEF PFNGLCOLOR4DVPROC glow_glColor4dv;
typedef void (APIENTRYP PFNGLFOGFPROC)(GLenum pname, GLfloat param);
GLOWDEF PFNGLFOGFPROC glow_glFogf;
typedef void (APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat token);
GLOWDEF PFNGLPASSTHROUGHPROC glow_glPassThrough;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
GLOWDEF PFNGLMULTITEXCOORD2FPROC glow_glMultiTexCoord2f;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
GLOWDEF PFNGLSECONDARYCOLOR3SPROC glow_glSecondaryColor3s;
typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
GLOWDEF PFNGLGETFLOATVPROC glow_glGetFloatv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX2X4FVPROC glow_glUniformMatrix2x4fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLOWDEF PFNGLVERTEXATTRIBP1UIVPROC glow_glVertexAttribP1uiv;
typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
GLOWDEF PFNGLENDQUERYINDEXEDPROC glow_glEndQueryIndexed;
typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
GLOWDEF PFNGLGENQUERIESPROC glow_glGenQueries;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX2X3DVPROC glow_glUniformMatrix2x3dv;
typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC)(const GLint *v);
GLOWDEF PFNGLTEXCOORD2IVPROC glow_glTexCoord2iv;
typedef void (APIENTRYP PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat *v);
GLOWDEF PFNGLGETMAPFVPROC glow_glGetMapfv;
typedef void (APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETTEXENVFVPROC glow_glGetTexEnvfv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
GLOWDEF PFNGLPROGRAMUNIFORM1UIPROC glow_glProgramUniform1ui;
typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
GLOWDEF PFNGLDEPTHFUNCPROC glow_glDepthFunc;
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
GLOWDEF PFNGLGETCOMPRESSEDTEXIMAGEPROC glow_glGetCompressedTexImage;
typedef GLint (APIENTRYP PFNGLRENDERMODEPROC)(GLenum mode);
GLOWDEF PFNGLRENDERMODEPROC glow_glRenderMode;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLOWDEF PFNGLCOPYTEXIMAGE1DPROC glow_glCopyTexImage1D;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLOWDEF PFNGLGETACTIVEUNIFORMSIVPROC glow_glGetActiveUniformsiv;
typedef void (APIENTRYP PFNGLPOPATTRIBPROC)();
GLOWDEF PFNGLPOPATTRIBPROC glow_glPopAttrib;
typedef void (APIENTRYP PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble *v);
GLOWDEF PFNGLGETMAPDVPROC glow_glGetMapdv;
typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
GLOWDEF PFNGLGENTEXTURESPROC glow_glGenTextures;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GLOWDEF PFNGLCOMPRESSEDTEXIMAGE2DPROC glow_glCompressedTexImage2D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLOWDEF PFNGLFRAMEBUFFERTEXTURE2DPROC glow_glFramebufferTexture2D;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
GLOWDEF PFNGLGETINTERNALFORMATI64VPROC glow_glGetInternalformati64v;
typedef void (APIENTRYP PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
GLOWDEF PFNGLLIGHTIPROC glow_glLighti;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX3X4FVPROC glow_glUniformMatrix3x4fv;
typedef GLubyte (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
GLOWDEF PFNGLGETSTRINGIPROC glow_glGetStringi;
typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
GLOWDEF PFNGLVERTEXP3UIVPROC glow_glVertexP3uiv;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
GLOWDEF PFNGLMULTIDRAWARRAYSPROC glow_glMultiDrawArrays;
typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
GLOWDEF PFNGLATTACHSHADERPROC glow_glAttachShader;
typedef GLboolean (APIENTRYP PFNGLISLISTPROC)(GLuint list);
GLOWDEF PFNGLISLISTPROC glow_glIsList;
typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
GLOWDEF PFNGLDELETEQUERIESPROC glow_glDeleteQueries;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLOWDEF PFNGLVERTEXATTRIBI4UIPROC glow_glVertexAttribI4ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLVERTEXATTRIB4IVPROC glow_glVertexAttrib4iv;
typedef void (APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean flag);
GLOWDEF PFNGLEDGEFLAGPROC glow_glEdgeFlag;
typedef void (APIENTRYP PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLROTATEDPROC glow_glRotated;
typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
GLOWDEF PFNGLPOINTSIZEPROC glow_glPointSize;
typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
GLOWDEF PFNGLDEPTHRANGEARRAYVPROC glow_glDepthRangeArrayv;
typedef void (APIENTRYP PFNGLLOADIDENTITYPROC)();
GLOWDEF PFNGLLOADIDENTITYPROC glow_glLoadIdentity;
typedef void (APIENTRYP PFNGLVERTEX3SVPROC)(const GLshort *v);
GLOWDEF PFNGLVERTEX3SVPROC glow_glVertex3sv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glow_glProgramUniformMatrix4x3fv;
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
GLOWDEF PFNGLDISABLECLIENTSTATEPROC glow_glDisableClientState;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
GLOWDEF PFNGLSECONDARYCOLOR3FPROC glow_glSecondaryColor3f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
GLOWDEF PFNGLVERTEXATTRIB3SVPROC glow_glVertexAttrib3sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLOWDEF PFNGLVERTEXATTRIBP3UIVPROC glow_glVertexAttribP3uiv;
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
GLOWDEF PFNGLPROGRAMPARAMETERIPROC glow_glProgramParameteri;
typedef void (APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint *params);
GLOWDEF PFNGLGETTEXGENIVPROC glow_glGetTexGeniv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLOWDEF PFNGLVERTEXATTRIB4SPROC glow_glVertexAttrib4s;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX2DVPROC glow_glUniformMatrix2dv;
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
GLOWDEF PFNGLVIEWPORTINDEXEDFVPROC glow_glViewportIndexedfv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
GLOWDEF PFNGLVERTEXATTRIB2FVPROC glow_glVertexAttrib2fv;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLOWDEF PFNGLMULTITEXCOORDP1UIVPROC glow_glMultiTexCoordP1uiv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX4X3DVPROC glow_glUniformMatrix4x3dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2DVPROC glow_glProgramUniformMatrix2dv;
typedef void (APIENTRYP PFNGLLISTBASEPROC)(GLuint base);
GLOWDEF PFNGLLISTBASEPROC glow_glListBase;
typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLOWDEF PFNGLUNIFORM3FPROC glow_glUniform3f;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLOWDEF PFNGLGETACTIVEUNIFORMNAMEPROC glow_glGetActiveUniformName;
typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void **params);
GLOWDEF PFNGLGETPOINTERVPROC glow_glGetPointerv;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLTEXSUBIMAGE1DPROC glow_glTexSubImage1D;
typedef void (APIENTRYP PFNGLARRAYELEMENTPROC)(GLint i);
GLOWDEF PFNGLARRAYELEMENTPROC glow_glArrayElement;
typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
GLOWDEF PFNGLUNIFORM2IPROC glow_glUniform2i;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLOWDEF PFNGLVERTEXATTRIB4NUBPROC glow_glVertexAttrib4Nub;
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
GLOWDEF PFNGLGENFRAMEBUFFERSPROC glow_glGenFramebuffers;
typedef void (APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
GLOWDEF PFNGLEVALCOORD2FPROC glow_glEvalCoord2f;
typedef void (APIENTRYP PFNGLVERTEX3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLVERTEX3DVPROC glow_glVertex3dv;
typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC)(const GLint *v);
GLOWDEF PFNGLWINDOWPOS2IVPROC glow_glWindowPos2iv;
typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
GLOWDEF PFNGLQUERYCOUNTERPROC glow_glQueryCounter;
typedef void (APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
GLOWDEF PFNGLTEXCOORD3DPROC glow_glTexCoord3d;
typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat *params);
GLOWDEF PFNGLLIGHTMODELFVPROC glow_glLightModelfv;
typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
GLOWDEF PFNGLGETUNIFORMFVPROC glow_glGetUniformfv;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLOWDEF PFNGLFRAMEBUFFERTEXTURE3DPROC glow_glFramebufferTexture3D;
typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLOWDEF PFNGLPIXELSTOREFPROC glow_glPixelStoref;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLOWDEF PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glow_glBindFragDataLocationIndexed;
typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
GLOWDEF PFNGLCOLORP3UIPROC glow_glColorP3ui;
typedef void (APIENTRYP PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
GLOWDEF PFNGLTEXCOORD4IPROC glow_glTexCoord4i;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
GLOWDEF PFNGLSECONDARYCOLOR3DPROC glow_glSecondaryColor3d;
typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLOWDEF PFNGLUNIFORM4UIPROC glow_glUniform4ui;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glow_glDrawTransformFeedbackStream;
typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
GLOWDEF PFNGLDEPTHRANGEFPROC glow_glDepthRangef;
typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC)(const GLdouble *v);
GLOWDEF PFNGLRASTERPOS2DVPROC glow_glRasterPos2dv;
typedef void (APIENTRYP PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
GLOWDEF PFNGLVERTEX2SPROC glow_glVertex2s;
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLOWDEF PFNGLBINDBUFFERRANGEPROC glow_glBindBufferRange;
typedef void (APIENTRYP PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
GLOWDEF PFNGLNORMAL3SPROC glow_glNormal3s;
typedef void (APIENTRYP PFNGLINDEXIPROC)(GLint c);
GLOWDEF PFNGLINDEXIPROC glow_glIndexi;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORM3FVPROC glow_glProgramUniform3fv;
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
GLOWDEF PFNGLVALIDATEPROGRAMPIPELINEPROC glow_glValidateProgramPipeline;
typedef void (APIENTRYP PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
GLOWDEF PFNGLCOLOR3SPROC glow_glColor3s;
typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLUNIFORM3FVPROC glow_glUniform3fv;
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
GLOWDEF PFNGLISRENDERBUFFERPROC glow_glIsRenderbuffer;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX4DVPROC glow_glUniformMatrix4dv;
typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GLOWDEF PFNGLCLEARBUFFERSUBDATAPROC glow_glClearBufferSubData;
typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLSECONDARYCOLORPOINTERPROC glow_glSecondaryColorPointer;
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)();
GLOWDEF PFNGLENDCONDITIONALRENDERPROC glow_glEndConditionalRender;
typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
GLOWDEF PFNGLVERTEXBINDINGDIVISORPROC glow_glVertexBindingDivisor;
typedef void (APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
GLOWDEF PFNGLRASTERPOS2FPROC glow_glRasterPos2f;
typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
GLOWDEF PFNGLVERTEXP4UIVPROC glow_glVertexP4uiv;
typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte *mask);
GLOWDEF PFNGLGETPOLYGONSTIPPLEPROC glow_glGetPolygonStipple;
typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC)(const GLshort *v);
GLOWDEF PFNGLRASTERPOS3SVPROC glow_glRasterPos3sv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble *v);
GLOWDEF PFNGLMULTITEXCOORD1DVPROC glow_glMultiTexCoord1dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glow_glProgramUniformMatrix2x4dv;
typedef void (APIENTRYP PFNGLNORMAL3BVPROC)(const GLbyte *v);
GLOWDEF PFNGLNORMAL3BVPROC glow_glNormal3bv;
typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLOWDEF PFNGLCOLORMASKPROC glow_glColorMask;
typedef void (APIENTRYP PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
GLOWDEF PFNGLCOLOR4BPROC glow_glColor4b;
typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
GLOWDEF PFNGLCLEARSTENCILPROC glow_glClearStencil;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
GLOWDEF PFNGLVERTEXATTRIBI2UIVPROC glow_glVertexAttribI2uiv;
typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLUNIFORM4IVPROC glow_glUniform4iv;
typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC)(const GLdouble *v);
GLOWDEF PFNGLTEXCOORD1DVPROC glow_glTexCoord1dv;
typedef void (APIENTRYP PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLSCALEFPROC glow_glScalef;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLOWDEF PFNGLCOPYTEXIMAGE2DPROC glow_glCopyTexImage2D;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
GLOWDEF PFNGLSECONDARYCOLOR3USPROC glow_glSecondaryColor3us;
typedef void (APIENTRYP PFNGLINDEXSVPROC)(const GLshort *c);
GLOWDEF PFNGLINDEXSVPROC glow_glIndexsv;
typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC)(const GLint *v);
GLOWDEF PFNGLRASTERPOS3IVPROC glow_glRasterPos3iv;
typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
GLOWDEF PFNGLGETSUBROUTINEINDEXPROC glow_glGetSubroutineIndex;
typedef void (APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
GLOWDEF PFNGLCOLOR4UBPROC glow_glColor4ub;
typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLUNIFORM2FVPROC glow_glUniform2fv;
typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
GLOWDEF PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glow_glGetSubroutineUniformLocation;
typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLOWDEF PFNGLSHADERSTORAGEBLOCKBINDINGPROC glow_glShaderStorageBlockBinding;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLTEXSUBIMAGE3DPROC glow_glTexSubImage3D;
typedef void (APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
GLOWDEF PFNGLLIGHTMODELFPROC glow_glLightModelf;
typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLWINDOWPOS3FVPROC glow_glWindowPos3fv;
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
GLOWDEF PFNGLSTENCILFUNCSEPARATEPROC glow_glStencilFuncSeparate;
typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
GLOWDEF PFNGLREADBUFFERPROC glow_glReadBuffer;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat *v);
GLOWDEF PFNGLMULTITEXCOORD3FVPROC glow_glMultiTexCoord3fv;
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
GLOWDEF PFNGLCHECKFRAMEBUFFERSTATUSPROC glow_glCheckFramebufferStatus;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLPROGRAMUNIFORM4UIVPROC glow_glProgramUniform4uiv;
typedef void (APIENTRYP PFNGLVERTEX2IPROC)(GLint x, GLint y);
GLOWDEF PFNGLVERTEX2IPROC glow_glVertex2i;
typedef void (APIENTRYP PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
GLOWDEF PFNGLALPHAFUNCPROC glow_glAlphaFunc;
typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
GLOWDEF PFNGLDRAWBUFFERSPROC glow_glDrawBuffers;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
GLOWDEF PFNGLVERTEXATTRIB2FPROC glow_glVertexAttrib2f;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glow_glProgramUniformMatrix3x2fv;
typedef void (APIENTRYP PFNGLVERTEX2IVPROC)(const GLint *v);
GLOWDEF PFNGLVERTEX2IVPROC glow_glVertex2iv;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
GLOWDEF PFNGLCOMPRESSEDTEXIMAGE1DPROC glow_glCompressedTexImage1D;
typedef void (APIENTRYP PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
GLOWDEF PFNGLVERTEX2DPROC glow_glVertex2d;
typedef void (APIENTRYP PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
GLOWDEF PFNGLLIGHTFPROC glow_glLightf;
typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
GLOWDEF PFNGLFENCESYNCPROC glow_glFenceSync;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLOWDEF PFNGLVERTEXATTRIBP4UIPROC glow_glVertexAttribP4ui;
typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
GLOWDEF PFNGLTEXCOORDP3UIPROC glow_glTexCoordP3ui;
typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
GLOWDEF PFNGLTEXCOORDP4UIPROC glow_glTexCoordP4ui;
typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLOWDEF PFNGLTEXBUFFERRANGEPROC glow_glTexBufferRange;
typedef void (APIENTRYP PFNGLRECTIVPROC)(const GLint *v1, const GLint *v2);
GLOWDEF PFNGLRECTIVPROC glow_glRectiv;
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
GLOWDEF PFNGLLINKPROGRAMPROC glow_glLinkProgram;
typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
GLOWDEF PFNGLISTEXTUREPROC glow_glIsTexture;
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
GLOWDEF PFNGLGETPROGRAMIVPROC glow_glGetProgramiv;
typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
GLOWDEF PFNGLUNIFORM1FPROC glow_glUniform1f;
typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLOWDEF PFNGLGETPROGRAMINTERFACEIVPROC glow_glGetProgramInterfaceiv;
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
GLOWDEF PFNGLGETUNIFORMLOCATIONPROC glow_glGetUniformLocation;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glow_glDrawElementsInstancedBaseVertex;
typedef void (APIENTRYP PFNGLCOLOR3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLCOLOR3DVPROC glow_glColor3dv;
typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC)(const GLshort *v);
GLOWDEF PFNGLWINDOWPOS2SVPROC glow_glWindowPos2sv;
typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLUNIFORM1FVPROC glow_glUniform1fv;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
GLOWDEF PFNGLSAMPLERPARAMETERIUIVPROC glow_glSamplerParameterIuiv;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLOWDEF PFNGLCOPYTEXSUBIMAGE3DPROC glow_glCopyTexSubImage3D;
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
GLOWDEF PFNGLGETATTRIBLOCATIONPROC glow_glGetAttribLocation;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX4X3FVPROC glow_glUniformMatrix4x3fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
GLOWDEF PFNGLVERTEXATTRIBI2UIPROC glow_glVertexAttribI2ui;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLOWDEF PFNGLBLENDEQUATIONSEPARATEIPROC glow_glBlendEquationSeparatei;
typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC)(const GLfloat *v);
GLOWDEF PFNGLWINDOWPOS2FVPROC glow_glWindowPos2fv;
typedef void (APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat *values);
GLOWDEF PFNGLPIXELMAPFVPROC glow_glPixelMapfv;
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLOWDEF PFNGLGETACTIVEATTRIBPROC glow_glGetActiveAttrib;
typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
GLOWDEF PFNGLGETUNIFORMSUBROUTINEUIVPROC glow_glGetUniformSubroutineuiv;
typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC)(const GLshort *v);
GLOWDEF PFNGLTEXCOORD1SVPROC glow_glTexCoord1sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLOWDEF PFNGLVERTEXATTRIBL2DPROC glow_glVertexAttribL2d;
typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLUNIFORM2UIVPROC glow_glUniform2uiv;
typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void *pointer);
GLOWDEF PFNGLINTERLEAVEDARRAYSPROC glow_glInterleavedArrays;
typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint *textures, GLboolean *residences);
GLOWDEF PFNGLARETEXTURESRESIDENTPROC glow_glAreTexturesResident;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
GLOWDEF PFNGLMULTITEXCOORD1SPROC glow_glMultiTexCoord1s;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLOWDEF PFNGLVERTEXATTRIBP3UIPROC glow_glVertexAttribP3ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glow_glProgramUniformMatrix4x3dv;
typedef void (APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
GLOWDEF PFNGLTEXCOORD3FPROC glow_glTexCoord3f;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIBL3DVPROC glow_glVertexAttribL3dv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLOWDEF PFNGLMULTITEXCOORD4FPROC glow_glMultiTexCoord4f;
typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
GLOWDEF PFNGLGETSHADERIVPROC glow_glGetShaderiv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETSAMPLERPARAMETERFVPROC glow_glGetSamplerParameterfv;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
GLOWDEF PFNGLMULTIDRAWELEMENTSINDIRECTPROC glow_glMultiDrawElementsIndirect;
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLOWDEF PFNGLDEBUGMESSAGEINSERTPROC glow_glDebugMessageInsert;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
GLOWDEF PFNGLMULTITEXCOORD1DPROC glow_glMultiTexCoord1d;
typedef void (APIENTRYP PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
GLOWDEF PFNGLCOLOR4IPROC glow_glColor4i;
typedef void (APIENTRYP PFNGLVERTEX2DVPROC)(const GLdouble *v);
GLOWDEF PFNGLVERTEX2DVPROC glow_glVertex2dv;
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
GLOWDEF PFNGLDELETETEXTURESPROC glow_glDeleteTextures;
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLOWDEF PFNGLTEXPARAMETERIPROC glow_glTexParameteri;
typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC)(const GLshort *v);
GLOWDEF PFNGLRASTERPOS4SVPROC glow_glRasterPos4sv;
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)();
GLOWDEF PFNGLPAUSETRANSFORMFEEDBACKPROC glow_glPauseTransformFeedback;
typedef void (APIENTRYP PFNGLINDEXDPROC)(GLdouble c);
GLOWDEF PFNGLINDEXDPROC glow_glIndexd;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
GLOWDEF PFNGLVERTEXATTRIBI1IPROC glow_glVertexAttribI1i;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glow_glDrawElementsInstancedBaseInstance;
typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
GLOWDEF PFNGLCLAMPCOLORPROC glow_glClampColor;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDPROC glow_glDrawElementsInstanced;
typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLOWDEF PFNGLBINDIMAGETEXTUREPROC glow_glBindImageTexture;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glow_glDrawTransformFeedbackStreamInstanced;
typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC)(const void *ptr, GLsizei length, const GLchar *label);
GLOWDEF PFNGLOBJECTPTRLABELPROC glow_glObjectPtrLabel;
typedef void (APIENTRYP PFNGLCOLOR4IVPROC)(const GLint *v);
GLOWDEF PFNGLCOLOR4IVPROC glow_glColor4iv;
typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC)(const GLshort *v);
GLOWDEF PFNGLWINDOWPOS3SVPROC glow_glWindowPos3sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIB3DVPROC glow_glVertexAttrib3dv;
typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLUNIFORM3UIVPROC glow_glUniform3uiv;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLOWDEF PFNGLFRAMEBUFFERTEXTUREPROC glow_glFramebufferTexture;
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
GLOWDEF PFNGLACTIVETEXTUREPROC glow_glActiveTexture;
typedef void (APIENTRYP PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
GLOWDEF PFNGLMAP1FPROC glow_glMap1f;
typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint *values);
GLOWDEF PFNGLPIXELMAPUIVPROC glow_glPixelMapuiv;
typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLOWDEF PFNGLVIEWPORTPROC glow_glViewport;
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
GLOWDEF PFNGLBEGINCONDITIONALRENDERPROC glow_glBeginConditionalRender;
typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
GLOWDEF PFNGLUNIFORMSUBROUTINESUIVPROC glow_glUniformSubroutinesuiv;
typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);
GLOWDEF PFNGLFRONTFACEPROC glow_glFrontFace;
typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLOWDEF PFNGLSCISSORPROC glow_glScissor;
typedef void (APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLRASTERPOS3DPROC glow_glRasterPos3d;
typedef void (APIENTRYP PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
GLOWDEF PFNGLTEXCOORD2IPROC glow_glTexCoord2i;
typedef void (APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
GLOWDEF PFNGLLIGHTMODELIPROC glow_glLightModeli;
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
GLOWDEF PFNGLGETBOOLEANI_VPROC glow_glGetBooleani_v;
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
GLOWDEF PFNGLGETFLOATI_VPROC glow_glGetFloati_v;
typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
GLOWDEF PFNGLHINTPROC glow_glHint;
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat *m);
GLOWDEF PFNGLLOADTRANSPOSEMATRIXFPROC glow_glLoadTransposeMatrixf;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLOWDEF PFNGLPROGRAMUNIFORM2IPROC glow_glProgramUniform2i;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4FVPROC glow_glProgramUniformMatrix4fv;
typedef void (APIENTRYP PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat *params);
GLOWDEF PFNGLTEXGENFVPROC glow_glTexGenfv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLVERTEXATTRIBI3IVPROC glow_glVertexAttribI3iv;
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLOWDEF PFNGLDRAWELEMENTSBASEVERTEXPROC glow_glDrawElementsBaseVertex;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLOWDEF PFNGLMULTITEXCOORDP4UIVPROC glow_glMultiTexCoordP4uiv;
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
GLOWDEF PFNGLDELETEPROGRAMPIPELINESPROC glow_glDeleteProgramPipelines;
typedef void (APIENTRYP PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
GLOWDEF PFNGLNORMAL3DPROC glow_glNormal3d;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKPROC glow_glDrawTransformFeedback;
typedef void (APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint *params);
GLOWDEF PFNGLGETMATERIALIVPROC glow_glGetMaterialiv;
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble *m);
GLOWDEF PFNGLMULTTRANSPOSEMATRIXDPROC glow_glMultTransposeMatrixd;
typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
GLOWDEF PFNGLISSHADERPROC glow_glIsShader;
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GLOWDEF PFNGLDEBUGMESSAGECONTROLPROC glow_glDebugMessageControl;
typedef void (APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
GLOWDEF PFNGLRASTERPOS2SPROC glow_glRasterPos2s;
typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat *coord);
GLOWDEF PFNGLFOGCOORDFVPROC glow_glFogCoordfv;
typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC)(const GLint *v);
GLOWDEF PFNGLWINDOWPOS3IVPROC glow_glWindowPos3iv;
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
GLOWDEF PFNGLBINDPROGRAMPIPELINEPROC glow_glBindProgramPipeline;
typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC)(const GLshort *v);
GLOWDEF PFNGLTEXCOORD3SVPROC glow_glTexCoord3sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLVERTEXATTRIBL3DPROC glow_glVertexAttribL3d;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
GLOWDEF PFNGLGETQUERYOBJECTIVPROC glow_glGetQueryObjectiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETVERTEXATTRIBFVPROC glow_glGetVertexAttribfv;
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
GLOWDEF PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glow_glGetProgramResourceLocationIndex;
typedef void (APIENTRYP PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
GLOWDEF PFNGLVERTEX4IPROC glow_glVertex4i;
typedef void (APIENTRYP PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
GLOWDEF PFNGLVERTEX4SPROC glow_glVertex4s;
typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
GLOWDEF PFNGLBLENDFUNCIPROC glow_glBlendFunci;
typedef void (APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
GLOWDEF PFNGLRASTERPOS3SPROC glow_glRasterPos3s;
typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
GLOWDEF PFNGLDELETESHADERPROC glow_glDeleteShader;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
GLOWDEF PFNGLVERTEXATTRIB4NSVPROC glow_glVertexAttrib4Nsv;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLOWDEF PFNGLMULTITEXCOORDP2UIVPROC glow_glMultiTexCoordP2uiv;
typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLOWDEF PFNGLTEXSTORAGE2DMULTISAMPLEPROC glow_glTexStorage2DMultisample;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETTEXPARAMETERFVPROC glow_glGetTexParameterfv;
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
GLOWDEF PFNGLVALIDATEPROGRAMPROC glow_glValidateProgram;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
GLOWDEF PFNGLVERTEXATTRIBI1UIPROC glow_glVertexAttribI1ui;
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
GLOWDEF PFNGLGETBUFFERPARAMETERI64VPROC glow_glGetBufferParameteri64v;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLOWDEF PFNGLMULTITEXCOORDP4UIPROC glow_glMultiTexCoordP4ui;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat *v);
GLOWDEF PFNGLMULTITEXCOORD1FVPROC glow_glMultiTexCoord1fv;
typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC)(const GLfloat *v);
GLOWDEF PFNGLTEXCOORD4FVPROC glow_glTexCoord4fv;
typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLOWDEF PFNGLUNIFORMBLOCKBINDINGPROC glow_glUniformBlockBinding;
typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
GLOWDEF PFNGLTEXCOORDP1UIPROC glow_glTexCoordP1ui;
typedef void (APIENTRYP PFNGLINDEXDVPROC)(const GLdouble *c);
GLOWDEF PFNGLINDEXDVPROC glow_glIndexdv;
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
GLOWDEF PFNGLTEXPARAMETERIUIVPROC glow_glTexParameterIuiv;
typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GLOWDEF PFNGLCLEARBUFFERFVPROC glow_glClearBufferfv;
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
GLOWDEF PFNGLGENVERTEXARRAYSPROC glow_glGenVertexArrays;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORM1FVPROC glow_glProgramUniform1fv;
typedef void (APIENTRYP PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GLOWDEF PFNGLOBJECTLABELPROC glow_glObjectLabel;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint *v);
GLOWDEF PFNGLMULTITEXCOORD4IVPROC glow_glMultiTexCoord4iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLOWDEF PFNGLVERTEXATTRIB3SPROC glow_glVertexAttrib3s;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLOWDEF PFNGLVERTEXATTRIBP2UIPROC glow_glVertexAttribP2ui;
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
GLOWDEF PFNGLMINSAMPLESHADINGPROC glow_glMinSampleShading;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLOWDEF PFNGLVERTEXATTRIBL4DPROC glow_glVertexAttribL4d;
typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble *coord);
GLOWDEF PFNGLFOGCOORDDVPROC glow_glFogCoorddv;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
GLOWDEF PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glow_glDrawRangeElementsBaseVertex;
typedef GLuint (APIENTRYP PFNGLGENLISTSPROC)(GLsizei range);
GLOWDEF PFNGLGENLISTSPROC glow_glGenLists;
typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
GLOWDEF PFNGLWINDOWPOS2SPROC glow_glWindowPos2s;
typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLUNIFORM4UIVPROC glow_glUniform4uiv;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
GLOWDEF PFNGLSAMPLERPARAMETERFPROC glow_glSamplerParameterf;
typedef void (APIENTRYP PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
GLOWDEF PFNGLLINESTIPPLEPROC glow_glLineStipple;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLPROGRAMUNIFORM2UIVPROC glow_glProgramUniform2uiv;
typedef void (APIENTRYP PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLVERTEX3DPROC glow_glVertex3d;
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
GLOWDEF PFNGLBINDATTRIBLOCATIONPROC glow_glBindAttribLocation;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX2X4DVPROC glow_glUniformMatrix2x4dv;
typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC)(const GLdouble *u);
GLOWDEF PFNGLEVALCOORD1DVPROC glow_glEvalCoord1dv;
typedef void (APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
GLOWDEF PFNGLEVALCOORD2DPROC glow_glEvalCoord2d;
typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat *values);
GLOWDEF PFNGLGETPIXELMAPFVPROC glow_glGetPixelMapfv;
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
GLOWDEF PFNGLBINDVERTEXARRAYPROC glow_glBindVertexArray;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3DVPROC glow_glProgramUniformMatrix3dv;
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLOWDEF PFNGLPIXELSTOREIPROC glow_glPixelStorei;
typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLVERTEXPOINTERPROC glow_glVertexPointer;
typedef void (APIENTRYP PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLOWDEF PFNGLFRUSTUMPROC glow_glFrustum;
typedef void (APIENTRYP PFNGLLOADNAMEPROC)(GLuint name);
GLOWDEF PFNGLLOADNAMEPROC glow_glLoadName;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
GLOWDEF PFNGLSECONDARYCOLOR3UBPROC glow_glSecondaryColor3ub;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
GLOWDEF PFNGLVERTEXATTRIB4NUSVPROC glow_glVertexAttrib4Nusv;
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
GLOWDEF PFNGLFLUSHMAPPEDBUFFERRANGEPROC glow_glFlushMappedBufferRange;
typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
GLOWDEF PFNGLPROGRAMBINARYPROC glow_glProgramBinary;
typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC)(const GLfloat *v);
GLOWDEF PFNGLTEXCOORD2FVPROC glow_glTexCoord2fv;
typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLSCISSORINDEXEDVPROC glow_glScissorIndexedv;
typedef void (APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat u);
GLOWDEF PFNGLEVALCOORD1FPROC glow_glEvalCoord1f;
typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLOWDEF PFNGLUNIFORM4FPROC glow_glUniform4f;
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLOWDEF PFNGLINVALIDATEBUFFERSUBDATAPROC glow_glInvalidateBufferSubData;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
GLOWDEF PFNGLMULTITEXCOORD4IPROC glow_glMultiTexCoord4i;
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
GLOWDEF PFNGLDELETEFRAMEBUFFERSPROC glow_glDeleteFramebuffers;
typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
GLOWDEF PFNGLGETINTEGERVPROC glow_glGetIntegerv;
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble *m);
GLOWDEF PFNGLLOADTRANSPOSEMATRIXDPROC glow_glLoadTransposeMatrixd;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORM3DVPROC glow_glProgramUniform3dv;
typedef void (APIENTRYP PFNGLCOLOR4SVPROC)(const GLshort *v);
GLOWDEF PFNGLCOLOR4SVPROC glow_glColor4sv;
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat *m);
GLOWDEF PFNGLMULTTRANSPOSEMATRIXFPROC glow_glMultTransposeMatrixf;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
GLOWDEF PFNGLBLENDEQUATIONSEPARATEPROC glow_glBlendEquationSeparate;
typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
GLOWDEF PFNGLUNIFORM1IPROC glow_glUniform1i;
typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
GLOWDEF PFNGLBLENDEQUATIONIPROC glow_glBlendEquationi;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORM4DVPROC glow_glProgramUniform4dv;
typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
GLOWDEF PFNGLMEMORYBARRIERPROC glow_glMemoryBarrier;
typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC)(const GLfloat *u);
GLOWDEF PFNGLEVALCOORD1FVPROC glow_glEvalCoord1fv;
typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
GLOWDEF PFNGLWINDOWPOS2IPROC glow_glWindowPos2i;
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
GLOWDEF PFNGLDELETEPROGRAMPROC glow_glDeleteProgram;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLOWDEF PFNGLPROGRAMUNIFORM4DPROC glow_glProgramUniform4d;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat *v);
GLOWDEF PFNGLMULTITEXCOORD2FVPROC glow_glMultiTexCoord2fv;
typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
GLOWDEF PFNGLVERTEXP4UIPROC glow_glVertexP4ui;
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLOWDEF PFNGLGETPROGRAMPIPELINEINFOLOGPROC glow_glGetProgramPipelineInfoLog;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
GLOWDEF PFNGLVERTEXATTRIBI3UIVPROC glow_glVertexAttribI3uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
GLOWDEF PFNGLVERTEXATTRIB4NUIVPROC glow_glVertexAttrib4Nuiv;
typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
GLOWDEF PFNGLPIXELTRANSFERIPROC glow_glPixelTransferi;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
GLOWDEF PFNGLMULTITEXCOORD3IPROC glow_glMultiTexCoord3i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLOWDEF PFNGLVERTEXATTRIBI3UIPROC glow_glVertexAttribI3ui;
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
GLOWDEF PFNGLISFRAMEBUFFERPROC glow_glIsFramebuffer;
typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
GLOWDEF PFNGLVERTEXP3UIPROC glow_glVertexP3ui;
typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
GLOWDEF PFNGLISENABLEDPROC glow_glIsEnabled;
typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
GLOWDEF PFNGLSCISSORARRAYVPROC glow_glScissorArrayv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte *v);
GLOWDEF PFNGLSECONDARYCOLOR3BVPROC glow_glSecondaryColor3bv;
typedef void (APIENTRYP PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLVERTEX3FPROC glow_glVertex3f;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble *v);
GLOWDEF PFNGLMULTITEXCOORD2DVPROC glow_glMultiTexCoord2dv;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
GLOWDEF PFNGLGETQUERYOBJECTI64VPROC glow_glGetQueryObjecti64v;
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
GLOWDEF PFNGLGETTEXLEVELPARAMETERIVPROC glow_glGetTexLevelParameteriv;
typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLWINDOWPOS3DVPROC glow_glWindowPos3dv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
GLOWDEF PFNGLMULTITEXCOORD1FPROC glow_glMultiTexCoord1f;
typedef void (APIENTRYP PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
GLOWDEF PFNGLNORMAL3IPROC glow_glNormal3i;
typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC)(const GLint *v);
GLOWDEF PFNGLRASTERPOS2IVPROC glow_glRasterPos2iv;
typedef void (APIENTRYP PFNGLVERTEX3IVPROC)(const GLint *v);
GLOWDEF PFNGLVERTEX3IVPROC glow_glVertex3iv;
typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC)(const GLfloat *u);
GLOWDEF PFNGLEVALCOORD2FVPROC glow_glEvalCoord2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX3FVPROC glow_glUniformMatrix3fv;
typedef void (APIENTRYP PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
GLOWDEF PFNGLCOLOR4SPROC glow_glColor4s;
typedef void (APIENTRYP PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLOWDEF PFNGLVERTEX4DPROC glow_glVertex4d;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
GLOWDEF PFNGLGETINTERNALFORMATIVPROC glow_glGetInternalformativ;
typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
GLOWDEF PFNGLUNIFORM2DPROC glow_glUniform2d;
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
GLOWDEF PFNGLISPROGRAMPIPELINEPROC glow_glIsProgramPipeline;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
GLOWDEF PFNGLVERTEXATTRIB2SVPROC glow_glVertexAttrib2sv;
typedef void (APIENTRYP PFNGLCOLOR4BVPROC)(const GLbyte *v);
GLOWDEF PFNGLCOLOR4BVPROC glow_glColor4bv;
typedef void (APIENTRYP PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLOWDEF PFNGLVERTEX4FPROC glow_glVertex4f;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
GLOWDEF PFNGLGETVERTEXATTRIBDVPROC glow_glGetVertexAttribdv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLOWDEF PFNGLPROGRAMUNIFORM4IPROC glow_glProgramUniform4i;
typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
GLOWDEF PFNGLGETDOUBLEVPROC glow_glGetDoublev;
typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort *values);
GLOWDEF PFNGLGETPIXELMAPUSVPROC glow_glGetPixelMapusv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLPROGRAMUNIFORM4IVPROC glow_glProgramUniform4iv;
typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC)();
GLOWDEF PFNGLPOPDEBUGGROUPPROC glow_glPopDebugGroup;
typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
GLOWDEF PFNGLLOGICOPPROC glow_glLogicOp;
typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
GLOWDEF PFNGLWINDOWPOS2DPROC glow_glWindowPos2d;
typedef void * (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLOWDEF PFNGLMAPBUFFERRANGEPROC glow_glMapBufferRange;
typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);
GLOWDEF PFNGLFOGCOORDFPROC glow_glFogCoordf;
typedef void (APIENTRYP PFNGLNORMAL3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLNORMAL3DVPROC glow_glNormal3dv;
typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GLOWDEF PFNGLGETSHADERPRECISIONFORMATPROC glow_glGetShaderPrecisionFormat;
typedef void (APIENTRYP PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
GLOWDEF PFNGLCOLOR4DPROC glow_glColor4d;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2FVPROC glow_glProgramUniformMatrix2fv;
typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLOWDEF PFNGLTEXSTORAGE3DPROC glow_glTexStorage3D;
typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
GLOWDEF PFNGLCLEARBUFFERIVPROC glow_glClearBufferiv;
typedef void (APIENTRYP PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
GLOWDEF PFNGLRECTFPROC glow_glRectf;
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GLOWDEF PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glow_glGetTransformFeedbackVarying;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
GLOWDEF PFNGLMULTITEXCOORDP3UIVPROC glow_glMultiTexCoordP3uiv;
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
GLOWDEF PFNGLGETDOUBLEI_VPROC glow_glGetDoublei_v;
typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
GLOWDEF PFNGLTEXPARAMETERFVPROC glow_glTexParameterfv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX2FVPROC glow_glUniformMatrix2fv;
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
GLOWDEF PFNGLGETFRAGDATALOCATIONPROC glow_glGetFragDataLocation;
typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
GLOWDEF PFNGLVERTEXP2UIVPROC glow_glVertexP2uiv;
typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLOWDEF PFNGLUNIFORM4DPROC glow_glUniform4d;
typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
GLOWDEF PFNGLGETUNIFORMDVPROC glow_glGetUniformdv;
typedef void (APIENTRYP PFNGLINDEXSPROC)(GLshort c);
GLOWDEF PFNGLINDEXSPROC glow_glIndexs;
typedef void (APIENTRYP PFNGLPUSHMATRIXPROC)();
GLOWDEF PFNGLPUSHMATRIXPROC glow_glPushMatrix;
typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLUNIFORM4FVPROC glow_glUniform4fv;
typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
GLOWDEF PFNGLTEXCOORDP3UIVPROC glow_glTexCoordP3uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLPROGRAMUNIFORM2IVPROC glow_glProgramUniform2iv;
typedef void (APIENTRYP PFNGLCOLOR4UBVPROC)(const GLubyte *v);
GLOWDEF PFNGLCOLOR4UBVPROC glow_glColor4ubv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat *v);
GLOWDEF PFNGLMULTITEXCOORD4FVPROC glow_glMultiTexCoord4fv;
typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLOWDEF PFNGLGETSHADERSOURCEPROC glow_glGetShaderSource;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
GLOWDEF PFNGLVERTEXATTRIBI2IVPROC glow_glVertexAttribI2iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
GLOWDEF PFNGLVERTEXATTRIBI4UBVPROC glow_glVertexAttribI4ubv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLOWDEF PFNGLPROGRAMUNIFORM2FPROC glow_glProgramUniform2f;
typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
GLOWDEF PFNGLPUSHDEBUGGROUPPROC glow_glPushDebugGroup;
typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLOWDEF PFNGLTEXPARAMETERIVPROC glow_glTexParameteriv;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLOWDEF PFNGLDRAWARRAYSINSTANCEDPROC glow_glDrawArraysInstanced;
typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
GLOWDEF PFNGLCLEARDEPTHFPROC glow_glClearDepthf;
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
GLOWDEF PFNGLGENPROGRAMPIPELINESPROC glow_glGenProgramPipelines;
typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GLOWDEF PFNGLINVALIDATEFRAMEBUFFERPROC glow_glInvalidateFramebuffer;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort *v);
GLOWDEF PFNGLMULTITEXCOORD4SVPROC glow_glMultiTexCoord4sv;
typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint *values);
GLOWDEF PFNGLGETPIXELMAPUIVPROC glow_glGetPixelMapuiv;
typedef void (APIENTRYP PFNGLCOLOR3SVPROC)(const GLshort *v);
GLOWDEF PFNGLCOLOR3SVPROC glow_glColor3sv;
typedef void (APIENTRYP PFNGLEVALPOINT1PROC)(GLint i);
GLOWDEF PFNGLEVALPOINT1PROC glow_glEvalPoint1;
typedef void (APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLTRANSLATEDPROC glow_glTranslated;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
GLOWDEF PFNGLVERTEXATTRIBI2IPROC glow_glVertexAttribI2i;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
GLOWDEF PFNGLGETTEXPARAMETERIUIVPROC glow_glGetTexParameterIuiv;
typedef void (APIENTRYP PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
GLOWDEF PFNGLCOLOR4USPROC glow_glColor4us;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
GLOWDEF PFNGLVERTEXATTRIBI4BVPROC glow_glVertexAttribI4bv;
typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)();
GLOWDEF PFNGLRELEASESHADERCOMPILERPROC glow_glReleaseShaderCompiler;
typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLTEXIMAGE1DPROC glow_glTexImage1D;
typedef void (APIENTRYP PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
GLOWDEF PFNGLCOLOR3UIPROC glow_glColor3ui;
typedef void (APIENTRYP PFNGLTEXCOORD1IPROC)(GLint s);
GLOWDEF PFNGLTEXCOORD1IPROC glow_glTexCoord1i;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
GLOWDEF PFNGLVERTEXATTRIB4FVPROC glow_glVertexAttrib4fv;
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
GLOWDEF PFNGLBEGINTRANSFORMFEEDBACKPROC glow_glBeginTransformFeedback;
typedef GLenum (APIENTRYP PFNGLGETERRORPROC)();
GLOWDEF PFNGLGETERRORPROC glow_glGetError;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4DVPROC glow_glProgramUniformMatrix4dv;
typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GLOWDEF PFNGLGETPROGRAMBINARYPROC glow_glGetProgramBinary;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORM2DVPROC glow_glProgramUniform2dv;
typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
GLOWDEF PFNGLDRAWBUFFERPROC glow_glDrawBuffer;
typedef void (APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
GLOWDEF PFNGLPIXELZOOMPROC glow_glPixelZoom;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
GLOWDEF PFNGLMULTITEXCOORD1IPROC glow_glMultiTexCoord1i;
typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLOWDEF PFNGLUNIFORM3IPROC glow_glUniform3i;
typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GLOWDEF PFNGLGETOBJECTLABELPROC glow_glGetObjectLabel;
typedef void (APIENTRYP PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
GLOWDEF PFNGLRASTERPOS4IPROC glow_glRasterPos4i;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
GLOWDEF PFNGLPOINTPARAMETERFPROC glow_glPointParameterf;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
GLOWDEF PFNGLSAMPLERPARAMETERFVPROC glow_glSamplerParameterfv;
typedef void (APIENTRYP PFNGLINDEXIVPROC)(const GLint *c);
GLOWDEF PFNGLINDEXIVPROC glow_glIndexiv;
typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
GLOWDEF PFNGLWINDOWPOS3SPROC glow_glWindowPos3s;
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETBUFFERPARAMETERIVPROC glow_glGetBufferParameteriv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIBL2DVPROC glow_glVertexAttribL2dv;
typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
GLOWDEF PFNGLLINEWIDTHPROC glow_glLineWidth;
typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLOWDEF PFNGLUNIFORM4IPROC glow_glUniform4i;
typedef void (APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLOWDEF PFNGLRASTERPOS4FPROC glow_glRasterPos4f;
typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC)(const GLint *v);
GLOWDEF PFNGLTEXCOORD3IVPROC glow_glTexCoord3iv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
GLOWDEF PFNGLGETVERTEXATTRIBIIVPROC glow_glGetVertexAttribIiv;
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLOWDEF PFNGLFRAMEBUFFERRENDERBUFFERPROC glow_glFramebufferRenderbuffer;
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLOWDEF PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glow_glGetFramebufferAttachmentParameteriv;
typedef void (APIENTRYP PFNGLENDPROC)();
GLOWDEF PFNGLENDPROC glow_glEnd;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glow_glProgramUniformMatrix3x4fv;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLOWDEF PFNGLBLENDFUNCSEPARATEIPROC glow_glBlendFuncSeparatei;
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLOWDEF PFNGLSTENCILOPSEPARATEPROC glow_glStencilOpSeparate;
typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
GLOWDEF PFNGLBEGINQUERYPROC glow_glBeginQuery;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
GLOWDEF PFNGLVERTEXATTRIB1DPROC glow_glVertexAttrib1d;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLOWDEF PFNGLPROGRAMUNIFORM3DPROC glow_glProgramUniform3d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIB4DVPROC glow_glVertexAttrib4dv;
typedef void (APIENTRYP PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLSCALEDPROC glow_glScaled;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GLOWDEF PFNGLGETACTIVEUNIFORMPROC glow_glGetActiveUniform;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
GLOWDEF PFNGLVERTEXATTRIB4NUBVPROC glow_glVertexAttrib4Nubv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX3X4DVPROC glow_glUniformMatrix3x4dv;
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
GLOWDEF PFNGLPOINTPARAMETERIVPROC glow_glPointParameteriv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLUNIFORMMATRIX4X2DVPROC glow_glUniformMatrix4x2dv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORM2FVPROC glow_glProgramUniform2fv;
typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
GLOWDEF PFNGLSTENCILMASKPROC glow_glStencilMask;
typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
GLOWDEF PFNGLGETPROGRAMSTAGEIVPROC glow_glGetProgramStageiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLPROGRAMUNIFORM3UIVPROC glow_glProgramUniform3uiv;
typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
GLOWDEF PFNGLVERTEXP2UIPROC glow_glVertexP2ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
GLOWDEF PFNGLPROGRAMUNIFORM1DPROC glow_glProgramUniform1d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIB1DVPROC glow_glVertexAttrib1dv;
typedef void (APIENTRYP PFNGLCALLLISTPROC)(GLuint list);
GLOWDEF PFNGLCALLLISTPROC glow_glCallList;
typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
GLOWDEF PFNGLWINDOWPOS2FPROC glow_glWindowPos2f;
typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
GLOWDEF PFNGLGENBUFFERSPROC glow_glGenBuffers;
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLOWDEF PFNGLBUFFERSUBDATAPROC glow_glBufferSubData;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
GLOWDEF PFNGLVERTEXATTRIB4UBVPROC glow_glVertexAttrib4ubv;
typedef void (APIENTRYP PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
GLOWDEF PFNGLRECTIPROC glow_glRecti;
typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLTEXCOORDPOINTERPROC glow_glTexCoordPointer;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
GLOWDEF PFNGLMULTITEXCOORD2SPROC glow_glMultiTexCoord2s;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
GLOWDEF PFNGLVERTEXATTRIBI3IPROC glow_glVertexAttribI3i;
typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
GLOWDEF PFNGLVIEWPORTARRAYVPROC glow_glViewportArrayv;
typedef void (APIENTRYP PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
GLOWDEF PFNGLRECTDPROC glow_glRectd;
typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
GLOWDEF PFNGLDRAWARRAYSPROC glow_glDrawArrays;
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
GLOWDEF PFNGLCREATESHADERPROC glow_glCreateShader;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLOWDEF PFNGLPROGRAMUNIFORM3IPROC glow_glProgramUniform3i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
GLOWDEF PFNGLVERTEXATTRIBBINDINGPROC glow_glVertexAttribBinding;
typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC)(const GLdouble *v);
GLOWDEF PFNGLTEXCOORD2DVPROC glow_glTexCoord2dv;
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)();
GLOWDEF PFNGLCREATEPROGRAMPROC glow_glCreateProgram;
typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLOWDEF PFNGLTEXSTORAGE2DPROC glow_glTexStorage2D;
typedef void (APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
GLOWDEF PFNGLTEXCOORD2FPROC glow_glTexCoord2f;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
GLOWDEF PFNGLMULTITEXCOORD3SPROC glow_glMultiTexCoord3s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
GLOWDEF PFNGLVERTEXATTRIB4BVPROC glow_glVertexAttrib4bv;
typedef void (APIENTRYP PFNGLCOLOR3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLCOLOR3FVPROC glow_glColor3fv;
typedef void (APIENTRYP PFNGLFOGIVPROC)(GLenum pname, const GLint *params);
GLOWDEF PFNGLFOGIVPROC glow_glFogiv;
typedef void (APIENTRYP PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLOWDEF PFNGLTEXENVIVPROC glow_glTexEnviv;
typedef void (APIENTRYP PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
GLOWDEF PFNGLTEXGENDPROC glow_glTexGend;
typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC)();
GLOWDEF PFNGLPOPCLIENTATTRIBPROC glow_glPopClientAttrib;
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
GLOWDEF PFNGLSTENCILMASKSEPARATEPROC glow_glStencilMaskSeparate;
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
GLOWDEF PFNGLSECONDARYCOLORP3UIVPROC glow_glSecondaryColorP3uiv;
typedef void (APIENTRYP PFNGLFINISHPROC)();
GLOWDEF PFNGLFINISHPROC glow_glFinish;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
GLOWDEF PFNGLVERTEXATTRIB1SPROC glow_glVertexAttrib1s;
typedef void (APIENTRYP PFNGLCOLOR3UBVPROC)(const GLubyte *v);
GLOWDEF PFNGLCOLOR3UBVPROC glow_glColor3ubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GLOWDEF PFNGLVERTEXATTRIBP2UIVPROC glow_glVertexAttribP2uiv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble *v);
GLOWDEF PFNGLMULTITEXCOORD3DVPROC glow_glMultiTexCoord3dv;
typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
GLOWDEF PFNGLUNIFORM1DPROC glow_glUniform1d;
typedef void (APIENTRYP PFNGLVERTEX3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLVERTEX3FVPROC glow_glVertex3fv;
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)();
GLOWDEF PFNGLENDTRANSFORMFEEDBACKPROC glow_glEndTransformFeedback;
typedef void (APIENTRYP PFNGLVERTEX2SVPROC)(const GLshort *v);
GLOWDEF PFNGLVERTEX2SVPROC glow_glVertex2sv;
typedef void (APIENTRYP PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
GLOWDEF PFNGLNORMAL3FPROC glow_glNormal3f;
typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);
GLOWDEF PFNGLFOGCOORDDPROC glow_glFogCoordd;
typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
GLOWDEF PFNGLDETACHSHADERPROC glow_glDetachShader;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glow_glProgramUniformMatrix4x2fv;
typedef void (APIENTRYP PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
GLOWDEF PFNGLEVALMESH2PROC glow_glEvalMesh2;
typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLTEXIMAGE3DPROC glow_glTexImage3D;
typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLOWDEF PFNGLCOLORMASKIPROC glow_glColorMaski;
typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
GLOWDEF PFNGLCLEARPROC glow_glClear;
typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
GLOWDEF PFNGLISENABLEDIPROC glow_glIsEnabledi;
typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
GLOWDEF PFNGLTEXCOORDP1UIVPROC glow_glTexCoordP1uiv;
typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
GLOWDEF PFNGLTEXCOORDP4UIVPROC glow_glTexCoordP4uiv;
typedef void (APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLOWDEF PFNGLTEXCOORD4FPROC glow_glTexCoord4f;
typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
GLOWDEF PFNGLBINDRENDERBUFFERPROC glow_glBindRenderbuffer;
typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLOWDEF PFNGLTEXTUREVIEWPROC glow_glTextureView;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
GLOWDEF PFNGLVERTEXATTRIB2SPROC glow_glVertexAttrib2s;
typedef void (APIENTRYP PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
GLOWDEF PFNGLMATERIALFPROC glow_glMaterialf;
typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC)(const GLdouble *u);
GLOWDEF PFNGLEVALCOORD2DVPROC glow_glEvalCoord2dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
GLOWDEF PFNGLVERTEXATTRIBDIVISORPROC glow_glVertexAttribDivisor;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
GLOWDEF PFNGLDRAWELEMENTSINDIRECTPROC glow_glDrawElementsIndirect;
typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble near, GLdouble far);
GLOWDEF PFNGLDEPTHRANGEPROC glow_glDepthRange;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint *v);
GLOWDEF PFNGLSECONDARYCOLOR3UIVPROC glow_glSecondaryColor3uiv;
typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLOWDEF PFNGLCLIENTWAITSYNCPROC glow_glClientWaitSync;
typedef void (APIENTRYP PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
GLOWDEF PFNGLCOLOR3DPROC glow_glColor3d;
typedef void (APIENTRYP PFNGLVERTEX4IVPROC)(const GLint *v);
GLOWDEF PFNGLVERTEX4IVPROC glow_glVertex4iv;
typedef void (APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLNORMALPOINTERPROC glow_glNormalPointer;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
GLOWDEF PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glow_glCompressedTexSubImage1D;
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
GLOWDEF PFNGLDELETERENDERBUFFERSPROC glow_glDeleteRenderbuffers;
typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC)(const GLint *v);
GLOWDEF PFNGLTEXCOORD1IVPROC glow_glTexCoord1iv;
typedef void (APIENTRYP PFNGLCOLOR3USVPROC)(const GLushort *v);
GLOWDEF PFNGLCOLOR3USVPROC glow_glColor3usv;
typedef void (APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint *buffer);
GLOWDEF PFNGLSELECTBUFFERPROC glow_glSelectBuffer;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
GLOWDEF PFNGLPROGRAMUNIFORM1IPROC glow_glProgramUniform1i;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
GLOWDEF PFNGLMULTITEXCOORD3DPROC glow_glMultiTexCoord3d;
typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
GLOWDEF PFNGLDELETESYNCPROC glow_glDeleteSync;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLOWDEF PFNGLPROGRAMUNIFORM4UIPROC glow_glProgramUniform4ui;
typedef void (APIENTRYP PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat *params);
GLOWDEF PFNGLMATERIALFVPROC glow_glMaterialfv;
typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
GLOWDEF PFNGLGENSAMPLERSPROC glow_glGenSamplers;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glow_glProgramUniformMatrix3x2dv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
GLOWDEF PFNGLGETVERTEXATTRIBIVPROC glow_glGetVertexAttribiv;
typedef void (APIENTRYP PFNGLCOLOR3UIVPROC)(const GLuint *v);
GLOWDEF PFNGLCOLOR3UIVPROC glow_glColor3uiv;
typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);
GLOWDEF PFNGLISQUERYPROC glow_glIsQuery;
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
GLOWDEF PFNGLGENTRANSFORMFEEDBACKSPROC glow_glGenTransformFeedbacks;
typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLOWDEF PFNGLSTENCILFUNCPROC glow_glStencilFunc;
typedef void (APIENTRYP PFNGLEVALPOINT2PROC)(GLint i, GLint j);
GLOWDEF PFNGLEVALPOINT2PROC glow_glEvalPoint2;
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLOWDEF PFNGLGETPROGRAMINFOLOGPROC glow_glGetProgramInfoLog;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
GLOWDEF PFNGLVERTEXATTRIB4UIVPROC glow_glVertexAttrib4uiv;
typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
GLOWDEF PFNGLGENERATEMIPMAPPROC glow_glGenerateMipmap;
typedef void (APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETLIGHTFVPROC glow_glGetLightfv;
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
GLOWDEF PFNGLPRIMITIVERESTARTINDEXPROC glow_glPrimitiveRestartIndex;
typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GLOWDEF PFNGLREADPIXELSPROC glow_glReadPixels;
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLOWDEF PFNGLENABLEVERTEXATTRIBARRAYPROC glow_glEnableVertexAttribArray;
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
GLOWDEF PFNGLUSEPROGRAMPROC glow_glUseProgram;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
GLOWDEF PFNGLVERTEXATTRIB3FVPROC glow_glVertexAttrib3fv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort *v);
GLOWDEF PFNGLMULTITEXCOORD1SVPROC glow_glMultiTexCoord1sv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
GLOWDEF PFNGLMULTITEXCOORD2DPROC glow_glMultiTexCoord2d;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte *v);
GLOWDEF PFNGLSECONDARYCOLOR3UBVPROC glow_glSecondaryColor3ubv;
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
GLOWDEF PFNGLCOMPILESHADERPROC glow_glCompileShader;
typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
GLOWDEF PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glow_glGetActiveAtomicCounterBufferiv;
typedef void (APIENTRYP PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
GLOWDEF PFNGLDELETELISTSPROC glow_glDeleteLists;
typedef void (APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
GLOWDEF PFNGLTEXCOORD4SPROC glow_glTexCoord4s;
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
GLOWDEF PFNGLGENRENDERBUFFERSPROC glow_glGenRenderbuffers;
typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
GLOWDEF PFNGLISTRANSFORMFEEDBACKPROC glow_glIsTransformFeedback;
typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
GLOWDEF PFNGLBEGINQUERYINDEXEDPROC glow_glBeginQueryIndexed;
typedef void (APIENTRYP PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLOWDEF PFNGLCOLOR4FPROC glow_glColor4f;
typedef void (APIENTRYP PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
GLOWDEF PFNGLTEXCOORD3IPROC glow_glTexCoord3i;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort *v);
GLOWDEF PFNGLMULTITEXCOORD3SVPROC glow_glMultiTexCoord3sv;
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETRENDERBUFFERPARAMETERIVPROC glow_glGetRenderbufferParameteriv;
typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC)(const GLfloat *v);
GLOWDEF PFNGLRASTERPOS2FVPROC glow_glRasterPos2fv;
typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
GLOWDEF PFNGLBINDBUFFERBASEPROC glow_glBindBufferBase;
typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLOWDEF PFNGLCLEARBUFFERFIPROC glow_glClearBufferfi;
typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLOWDEF PFNGLSCISSORINDEXEDPROC glow_glScissorIndexed;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort *v);
GLOWDEF PFNGLMULTITEXCOORD2SVPROC glow_glMultiTexCoord2sv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
GLOWDEF PFNGLSECONDARYCOLOR3UIPROC glow_glSecondaryColor3ui;
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
GLOWDEF PFNGLTEXPARAMETERIIVPROC glow_glTexParameterIiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLOWDEF PFNGLPROGRAMUNIFORM4FPROC glow_glProgramUniform4f;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
GLOWDEF PFNGLGETTEXPARAMETERIVPROC glow_glGetTexParameteriv;
typedef void (APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint *params);
GLOWDEF PFNGLGETLIGHTIVPROC glow_glGetLightiv;
typedef void (APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble *params);
GLOWDEF PFNGLGETTEXGENDVPROC glow_glGetTexGendv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLOWDEF PFNGLVERTEXATTRIBP1UIPROC glow_glVertexAttribP1ui;
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
GLOWDEF PFNGLACTIVESHADERPROGRAMPROC glow_glActiveShaderProgram;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
GLOWDEF PFNGLPROGRAMUNIFORM1UIVPROC glow_glProgramUniform1uiv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glow_glProgramUniformMatrix4x2dv;
typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLOWDEF PFNGLTEXSTORAGE3DMULTISAMPLEPROC glow_glTexStorage3DMultisample;
typedef void (APIENTRYP PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
GLOWDEF PFNGLMAPGRID2FPROC glow_glMapGrid2f;
typedef void (APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
GLOWDEF PFNGLCOLORMATERIALPROC glow_glColorMaterial;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
GLOWDEF PFNGLVERTEXATTRIB4USVPROC glow_glVertexAttrib4usv;
typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
GLOWDEF PFNGLGETINTEGER64VPROC glow_glGetInteger64v;
typedef void (APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort s);
GLOWDEF PFNGLTEXCOORD1SPROC glow_glTexCoord1s;
typedef void (APIENTRYP PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble *equation);
GLOWDEF PFNGLCLIPPLANEPROC glow_glClipPlane;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
GLOWDEF PFNGLDRAWRANGEELEMENTSPROC glow_glDrawRangeElements;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint *v);
GLOWDEF PFNGLMULTITEXCOORD2IVPROC glow_glMultiTexCoord2iv;
typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
GLOWDEF PFNGLGETUNIFORMIVPROC glow_glGetUniformiv;
typedef void (APIENTRYP PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void *lists);
GLOWDEF PFNGLCALLLISTSPROC glow_glCallLists;
typedef void (APIENTRYP PFNGLVERTEX2FVPROC)(const GLfloat *v);
GLOWDEF PFNGLVERTEX2FVPROC glow_glVertex2fv;
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
GLOWDEF PFNGLPROVOKINGVERTEXPROC glow_glProvokingVertex;
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
GLOWDEF PFNGLDISPATCHCOMPUTEINDIRECTPROC glow_glDispatchComputeIndirect;
typedef void (APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
GLOWDEF PFNGLTEXCOORD4DPROC glow_glTexCoord4d;
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLOWDEF PFNGLTEXIMAGE3DMULTISAMPLEPROC glow_glTexImage3DMultisample;
typedef void (APIENTRYP PFNGLVERTEX4SVPROC)(const GLshort *v);
GLOWDEF PFNGLVERTEX4SVPROC glow_glVertex4sv;
typedef void (APIENTRYP PFNGLFOGFVPROC)(GLenum pname, const GLfloat *params);
GLOWDEF PFNGLFOGFVPROC glow_glFogfv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
GLOWDEF PFNGLVERTEXATTRIBI4SVPROC glow_glVertexAttribI4sv;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLOWDEF PFNGLGETACTIVEUNIFORMBLOCKIVPROC glow_glGetActiveUniformBlockiv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
GLOWDEF PFNGLGETSAMPLERPARAMETERIVPROC glow_glGetSamplerParameteriv;
typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLOWDEF PFNGLFRAMEBUFFERPARAMETERIPROC glow_glFramebufferParameteri;
typedef void (APIENTRYP PFNGLCOLOR4FVPROC)(const GLfloat *v);
GLOWDEF PFNGLCOLOR4FVPROC glow_glColor4fv;
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
GLOWDEF PFNGLDRAWELEMENTSPROC glow_glDrawElements;
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
GLOWDEF PFNGLSAMPLECOVERAGEPROC glow_glSampleCoverage;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
GLOWDEF PFNGLVERTEXATTRIBL4DVPROC glow_glVertexAttribL4dv;
typedef void (APIENTRYP PFNGLNORMAL3IVPROC)(const GLint *v);
GLOWDEF PFNGLNORMAL3IVPROC glow_glNormal3iv;
typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
GLOWDEF PFNGLISSAMPLERPROC glow_glIsSampler;
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
GLOWDEF PFNGLGETPROGRAMPIPELINEIVPROC glow_glGetProgramPipelineiv;
typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
GLOWDEF PFNGLINVALIDATETEXIMAGEPROC glow_glInvalidateTexImage;
typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
GLOWDEF PFNGLUNIFORM1UIPROC glow_glUniform1ui;
typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GLOWDEF PFNGLBUFFERDATAPROC glow_glBufferData;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX4FVPROC glow_glUniformMatrix4fv;
typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
GLOWDEF PFNGLDRAWARRAYSINDIRECTPROC glow_glDrawArraysIndirect;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLPROGRAMUNIFORM1DVPROC glow_glProgramUniform1dv;
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glow_glDrawElementsInstancedBaseVertexBaseInstance;
typedef void (APIENTRYP PFNGLLOADMATRIXDPROC)(const GLdouble *m);
GLOWDEF PFNGLLOADMATRIXDPROC glow_glLoadMatrixd;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GLOWDEF PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glow_glCompressedTexSubImage2D;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX4X2FVPROC glow_glUniformMatrix4x2fv;
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
GLOWDEF PFNGLBINDFRAMEBUFFERPROC glow_glBindFramebuffer;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLOWDEF PFNGLFRAMEBUFFERTEXTURELAYERPROC glow_glFramebufferTextureLayer;
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
GLOWDEF PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glow_glGetActiveSubroutineUniformiv;
typedef void (APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLOWDEF PFNGLRASTERPOS4DPROC glow_glRasterPos4d;
typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC)(const GLdouble *v);
GLOWDEF PFNGLWINDOWPOS2DVPROC glow_glWindowPos2dv;
typedef void (APIENTRYP PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
GLOWDEF PFNGLCOLOR3BPROC glow_glColor3b;
typedef void (APIENTRYP PFNGLMULTMATRIXDPROC)(const GLdouble *m);
GLOWDEF PFNGLMULTMATRIXDPROC glow_glMultMatrixd;
typedef void (APIENTRYP PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
GLOWDEF PFNGLTEXENVFPROC glow_glTexEnvf;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLOWDEF PFNGLVERTEXATTRIB2DPROC glow_glVertexAttrib2d;
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLOWDEF PFNGLMULTITEXCOORDP2UIPROC glow_glMultiTexCoordP2ui;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLOWDEF PFNGLPROGRAMUNIFORM3FPROC glow_glProgramUniform3f;
typedef void (APIENTRYP PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
GLOWDEF PFNGLMATERIALIPROC glow_glMateriali;
typedef void (APIENTRYP PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
GLOWDEF PFNGLMAPGRID1FPROC glow_glMapGrid1f;
typedef void (APIENTRYP PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
GLOWDEF PFNGLMAPGRID2DPROC glow_glMapGrid2d;
typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
GLOWDEF PFNGLGETUNIFORMUIVPROC glow_glGetUniformuiv;
typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
GLOWDEF PFNGLUNIFORM3DVPROC glow_glUniform3dv;
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLOWDEF PFNGLUSEPROGRAMSTAGESPROC glow_glUseProgramStages;
typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC)(const GLint *v);
GLOWDEF PFNGLRASTERPOS4IVPROC glow_glRasterPos4iv;
typedef void (APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
GLOWDEF PFNGLRASTERPOS4SPROC glow_glRasterPos4s;
typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLRASTERPOS3FVPROC glow_glRasterPos3fv;
typedef void (APIENTRYP PFNGLNORMAL3FVPROC)(const GLfloat *v);
GLOWDEF PFNGLNORMAL3FVPROC glow_glNormal3fv;
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GLOWDEF PFNGLGETSHADERINFOLOGPROC glow_glGetShaderInfoLog;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
GLOWDEF PFNGLVERTEXATTRIB1FPROC glow_glVertexAttrib1f;
typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
GLOWDEF PFNGLDISABLEIPROC glow_glDisablei;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
GLOWDEF PFNGLVERTEXATTRIBI4USVPROC glow_glVertexAttribI4usv;
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
GLOWDEF PFNGLDELETETRANSFORMFEEDBACKSPROC glow_glDeleteTransformFeedbacks;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLOWDEF PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glow_glDrawArraysInstancedBaseInstance;
typedef void (APIENTRYP PFNGLCOLOR4USVPROC)(const GLushort *v);
GLOWDEF PFNGLCOLOR4USVPROC glow_glColor4usv;
typedef void (APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
GLOWDEF PFNGLCOLOR3UBPROC glow_glColor3ub;
typedef void (APIENTRYP PFNGLFOGIPROC)(GLenum pname, GLint param);
GLOWDEF PFNGLFOGIPROC glow_glFogi;
typedef void (APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat value);
GLOWDEF PFNGLACCUMPROC glow_glAccum;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLUNIFORMMATRIX2X3FVPROC glow_glUniformMatrix2x3fv;
typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
GLOWDEF PFNGLTEXCOORDP2UIVPROC glow_glTexCoordP2uiv;
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLTEXIMAGE2DPROC glow_glTexImage2D;
typedef void (APIENTRYP PFNGLMATRIXMODEPROC)(GLenum mode);
GLOWDEF PFNGLMATRIXMODEPROC glow_glMatrixMode;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GLOWDEF PFNGLTEXSUBIMAGE2DPROC glow_glTexSubImage2D;
typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLFOGCOORDPOINTERPROC glow_glFogCoordPointer;
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);
GLOWDEF PFNGLUNMAPBUFFERPROC glow_glUnmapBuffer;
typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
GLOWDEF PFNGLTEXCOORDP2UIPROC glow_glTexCoordP2ui;
typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLOWDEF PFNGLTEXSTORAGE1DPROC glow_glTexStorage1D;
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GLOWDEF PFNGLGETPROGRAMRESOURCEIVPROC glow_glGetProgramResourceiv;
typedef void (APIENTRYP PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
GLOWDEF PFNGLCOLOR3IPROC glow_glColor3i;
typedef void (APIENTRYP PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
GLOWDEF PFNGLMAPGRID1DPROC glow_glMapGrid1d;
typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
GLOWDEF PFNGLBINDBUFFERPROC glow_glBindBuffer;
typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
GLOWDEF PFNGLUNIFORM2IVPROC glow_glUniform2iv;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
GLOWDEF PFNGLSAMPLERPARAMETERIIVPROC glow_glSamplerParameterIiv;
typedef void (APIENTRYP PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
GLOWDEF PFNGLVERTEX3IPROC glow_glVertex3i;
typedef void (APIENTRYP PFNGLVERTEX4FVPROC)(const GLfloat *v);
GLOWDEF PFNGLVERTEX4FVPROC glow_glVertex4fv;
typedef void (APIENTRYP PFNGLLOADMATRIXFPROC)(const GLfloat *m);
GLOWDEF PFNGLLOADMATRIXFPROC glow_glLoadMatrixf;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
GLOWDEF PFNGLMULTITEXCOORD4SPROC glow_glMultiTexCoord4s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLVERTEXATTRIB3FPROC glow_glVertexAttrib3f;
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
GLOWDEF PFNGLGETINTEGER64I_VPROC glow_glGetInteger64i_v;
typedef GLubyte (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
GLOWDEF PFNGLGETSTRINGPROC glow_glGetString;
typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);
GLOWDEF PFNGLENDQUERYPROC glow_glEndQuery;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLOWDEF PFNGLRENDERBUFFERSTORAGEPROC glow_glRenderbufferStorage;
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLOWDEF PFNGLGETPROGRAMRESOURCENAMEPROC glow_glGetProgramResourceName;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
GLOWDEF PFNGLMULTITEXCOORD2IPROC glow_glMultiTexCoord2i;
typedef void (APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble s);
GLOWDEF PFNGLTEXCOORD1DPROC glow_glTexCoord1d;
typedef void (APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
GLOWDEF PFNGLTEXCOORD2DPROC glow_glTexCoord2d;
typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
GLOWDEF PFNGLPIXELTRANSFERFPROC glow_glPixelTransferf;
typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort *values);
GLOWDEF PFNGLPIXELMAPUSVPROC glow_glPixelMapusv;
typedef void (APIENTRYP PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
GLOWDEF PFNGLRASTERPOS2IPROC glow_glRasterPos2i;
typedef void (APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
GLOWDEF PFNGLRASTERPOS2DPROC glow_glRasterPos2d;
typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const GLubyte *mask);
GLOWDEF PFNGLPOLYGONSTIPPLEPROC glow_glPolygonStipple;
typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble *equation);
GLOWDEF PFNGLGETCLIPPLANEPROC glow_glGetClipPlane;
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
GLOWDEF PFNGLGETBUFFERSUBDATAPROC glow_glGetBufferSubData;
typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
GLOWDEF PFNGLPATCHPARAMETERFVPROC glow_glPatchParameterfv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLOWDEF PFNGLVERTEXATTRIBIFORMATPROC glow_glVertexAttribIFormat;
typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
GLOWDEF PFNGLDISABLEPROC glow_glDisable;
typedef void (APIENTRYP PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble *params);
GLOWDEF PFNGLTEXGENDVPROC glow_glTexGendv;
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
GLOWDEF PFNGLTRANSFORMFEEDBACKVARYINGSPROC glow_glTransformFeedbackVaryings;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
GLOWDEF PFNGLGETVERTEXATTRIBIUIVPROC glow_glGetVertexAttribIuiv;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
GLOWDEF PFNGLBINDFRAGDATALOCATIONPROC glow_glBindFragDataLocation;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLOWDEF PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glow_glRenderbufferStorageMultisample;
typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
GLOWDEF PFNGLCOLORP3UIVPROC glow_glColorP3uiv;
typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);
GLOWDEF PFNGLENABLEPROC glow_glEnable;
typedef void (APIENTRYP PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
GLOWDEF PFNGLTEXGENIPROC glow_glTexGeni;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
GLOWDEF PFNGLMULTITEXCOORD3FPROC glow_glMultiTexCoord3f;
typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
GLOWDEF PFNGLPOINTPARAMETERIPROC glow_glPointParameteri;
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
GLOWDEF PFNGLSAMPLERPARAMETERIPROC glow_glSamplerParameteri;
typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLOWDEF PFNGLINVALIDATESUBFRAMEBUFFERPROC glow_glInvalidateSubFramebuffer;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
GLOWDEF PFNGLMULTIDRAWARRAYSINDIRECTPROC glow_glMultiDrawArraysIndirect;
typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLTEXCOORD3DVPROC glow_glTexCoord3dv;
typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC)(const GLshort *v);
GLOWDEF PFNGLTEXCOORD2SVPROC glow_glTexCoord2sv;
typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLOWDEF PFNGLGETSYNCIVPROC glow_glGetSynciv;
typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLOWDEF PFNGLUNIFORM3DPROC glow_glUniform3d;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
GLOWDEF PFNGLSECONDARYCOLOR3IPROC glow_glSecondaryColor3i;
typedef void * (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
GLOWDEF PFNGLMAPBUFFERPROC glow_glMapBuffer;
typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
GLOWDEF PFNGLNORMALP3UIVPROC glow_glNormalP3uiv;
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
GLOWDEF PFNGLINVALIDATEBUFFERDATAPROC glow_glInvalidateBufferData;
typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLOWDEF PFNGLBLENDCOLORPROC glow_glBlendColor;
typedef void (APIENTRYP PFNGLPUSHNAMEPROC)(GLuint name);
GLOWDEF PFNGLPUSHNAMEPROC glow_glPushName;
typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
GLOWDEF PFNGLWINDOWPOS3FPROC glow_glWindowPos3f;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
GLOWDEF PFNGLGETSAMPLERPARAMETERIIVPROC glow_glGetSamplerParameterIiv;
typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLOWDEF PFNGLCLEARCOLORPROC glow_glClearColor;
typedef void (APIENTRYP PFNGLMULTMATRIXFPROC)(const GLfloat *m);
GLOWDEF PFNGLMULTMATRIXFPROC glow_glMultMatrixf;
typedef void (APIENTRYP PFNGLINITNAMESPROC)();
GLOWDEF PFNGLINITNAMESPROC glow_glInitNames;
typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLOWDEF PFNGLCOPYBUFFERSUBDATAPROC glow_glCopyBufferSubData;
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
GLOWDEF PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glow_glGetActiveSubroutineUniformName;
typedef void (APIENTRYP PFNGLRECTDVPROC)(const GLdouble *v1, const GLdouble *v2);
GLOWDEF PFNGLRECTDVPROC glow_glRectdv;
typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC)(const GLfloat *v);
GLOWDEF PFNGLRASTERPOS4FVPROC glow_glRasterPos4fv;
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glow_glProgramUniformMatrix2x3fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLOWDEF PFNGLVERTEXATTRIBLPOINTERPROC glow_glVertexAttribLPointer;
typedef void (APIENTRYP PFNGLNORMAL3SVPROC)(const GLshort *v);
GLOWDEF PFNGLNORMAL3SVPROC glow_glNormal3sv;
typedef void (APIENTRYP PFNGLEDGEFLAGVPROC)(const GLboolean *flag);
GLOWDEF PFNGLEDGEFLAGVPROC glow_glEdgeFlagv;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
GLOWDEF PFNGLPOINTPARAMETERFVPROC glow_glPointParameterfv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble *v);
GLOWDEF PFNGLSECONDARYCOLOR3DVPROC glow_glSecondaryColor3dv;
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
GLOWDEF PFNGLGETSAMPLERPARAMETERIUIVPROC glow_glGetSamplerParameterIuiv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint *v);
GLOWDEF PFNGLMULTITEXCOORD1IVPROC glow_glMultiTexCoord1iv;
typedef void (APIENTRYP PFNGLPOPNAMEPROC)();
GLOWDEF PFNGLPOPNAMEPROC glow_glPopName;
typedef void (APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat *params);
GLOWDEF PFNGLGETTEXGENFVPROC glow_glGetTexGenfv;
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
GLOWDEF PFNGLSHADERSOURCEPROC glow_glShaderSource;
typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
GLOWDEF PFNGLCULLFACEPROC glow_glCullFace;


#ifndef GLOW_DEBUG

#define glIndexf glow_glIndexf
#define glGetTexParameterIiv glow_glGetTexParameterIiv
#define glIsSync glow_glIsSync
#define glUniformMatrix3dv glow_glUniformMatrix3dv
#define glRotatef glow_glRotatef
#define glTexGeniv glow_glTexGeniv
#define glUniform1uiv glow_glUniform1uiv
#define glRasterPos3i glow_glRasterPos3i
#define glVertex2f glow_glVertex2f
#define glCompressedTexImage3D glow_glCompressedTexImage3D
#define glEndList glow_glEndList
#define glProgramUniform2d glow_glProgramUniform2d
#define glGetFramebufferParameteriv glow_glGetFramebufferParameteriv
#define glMultiTexCoord4dv glow_glMultiTexCoord4dv
#define glBegin glow_glBegin
#define glSecondaryColor3fv glow_glSecondaryColor3fv
#define glUniform3iv glow_glUniform3iv
#define glGetQueryIndexediv glow_glGetQueryIndexediv
#define glPolygonMode glow_glPolygonMode
#define glDispatchCompute glow_glDispatchCompute
#define glBindTexture glow_glBindTexture
#define glPrioritizeTextures glow_glPrioritizeTextures
#define glIndexubv glow_glIndexubv
#define glDepthMask glow_glDepthMask
#define glEnableClientState glow_glEnableClientState
#define glGetAttachedShaders glow_glGetAttachedShaders
#define glColorP4ui glow_glColorP4ui
#define glFeedbackBuffer glow_glFeedbackBuffer
#define glRasterPos3f glow_glRasterPos3f
#define glTexCoord1f glow_glTexCoord1f
#define glTexCoord4sv glow_glTexCoord4sv
#define glGetQueryiv glow_glGetQueryiv
#define glClearDepth glow_glClearDepth
#define glTexEnvi glow_glTexEnvi
#define glPopMatrix glow_glPopMatrix
#define glEdgeFlagPointer glow_glEdgeFlagPointer
#define glTexCoord4dv glow_glTexCoord4dv
#define glBindVertexBuffer glow_glBindVertexBuffer
#define glGetObjectPtrLabel glow_glGetObjectPtrLabel
#define glTexParameterf glow_glTexParameterf
#define glVertexAttrib1sv glow_glVertexAttrib1sv
#define glTexCoord3fv glow_glTexCoord3fv
#define glLightModeliv glow_glLightModeliv
#define glGetQueryObjectuiv glow_glGetQueryObjectuiv
#define glGetVertexAttribLdv glow_glGetVertexAttribLdv
#define glDebugMessageCallback glow_glDebugMessageCallback
#define glStencilOp glow_glStencilOp
#define glCopyPixels glow_glCopyPixels
#define glIsVertexArray glow_glIsVertexArray
#define glSampleMaski glow_glSampleMaski
#define glLightiv glow_glLightiv
#define glTexBuffer glow_glTexBuffer
#define glShaderBinary glow_glShaderBinary
#define glMaterialiv glow_glMaterialiv
#define glNormal3b glow_glNormal3b
#define glGetMapiv glow_glGetMapiv
#define glBindTransformFeedback glow_glBindTransformFeedback
#define glGetDebugMessageLog glow_glGetDebugMessageLog
#define glGetBooleanv glow_glGetBooleanv
#define glIndexub glow_glIndexub
#define glBlitFramebuffer glow_glBlitFramebuffer
#define glGetMultisamplefv glow_glGetMultisamplefv
#define glProgramUniform3iv glow_glProgramUniform3iv
#define glGetProgramResourceIndex glow_glGetProgramResourceIndex
#define glIndexfv glow_glIndexfv
#define glVertexAttribFormat glow_glVertexAttribFormat
#define glRasterPos4dv glow_glRasterPos4dv
#define glDrawTransformFeedbackInstanced glow_glDrawTransformFeedbackInstanced
#define glViewportIndexedf glow_glViewportIndexedf
#define glIsBuffer glow_glIsBuffer
#define glUniformMatrix3x2fv glow_glUniformMatrix3x2fv
#define glDepthRangeIndexed glow_glDepthRangeIndexed
#define glGetTexLevelParameterfv glow_glGetTexLevelParameterfv
#define glSecondaryColor3iv glow_glSecondaryColor3iv
#define glUniform1iv glow_glUniform1iv
#define glVertexAttrib4d glow_glVertexAttrib4d
#define glSecondaryColorP3ui glow_glSecondaryColorP3ui
#define glRectsv glow_glRectsv
#define glRasterPos2sv glow_glRasterPos2sv
#define glEvalMesh1 glow_glEvalMesh1
#define glOrtho glow_glOrtho
#define glMultiDrawElements glow_glMultiDrawElements
#define glDisableVertexAttribArray glow_glDisableVertexAttribArray
#define glProgramUniform4fv glow_glProgramUniform4fv
#define glColor4uiv glow_glColor4uiv
#define glTexGenf glow_glTexGenf
#define glVertexAttribI4i glow_glVertexAttribI4i
#define glGetActiveUniformBlockName glow_glGetActiveUniformBlockName
#define glDeleteSamplers glow_glDeleteSamplers
#define glUniform4dv glow_glUniform4dv
#define glProgramUniform2ui glow_glProgramUniform2ui
#define glRectfv glow_glRectfv
#define glEnablei glow_glEnablei
#define glVertexAttribI1iv glow_glVertexAttribI1iv
#define glClientActiveTexture glow_glClientActiveTexture
#define glVertexAttrib4Nbv glow_glVertexAttrib4Nbv
#define glWindowPos3i glow_glWindowPos3i
#define glGetBufferPointerv glow_glGetBufferPointerv
#define glGetVertexAttribPointerv glow_glGetVertexAttribPointerv
#define glUniform1dv glow_glUniform1dv
#define glVertexAttribL1d glow_glVertexAttribL1d
#define glGetTexEnviv glow_glGetTexEnviv
#define glProgramUniform1iv glow_glProgramUniform1iv
#define glProgramUniform3ui glow_glProgramUniform3ui
#define glMap2d glow_glMap2d
#define glPolygonOffset glow_glPolygonOffset
#define glColorPointer glow_glColorPointer
#define glBindSampler glow_glBindSampler
#define glInvalidateTexSubImage glow_glInvalidateTexSubImage
#define glColor4ui glow_glColor4ui
#define glClearIndex glow_glClearIndex
#define glDeleteVertexArrays glow_glDeleteVertexArrays
#define glWaitSync glow_glWaitSync
#define glResumeTransformFeedback glow_glResumeTransformFeedback
#define glCopyImageSubData glow_glCopyImageSubData
#define glShadeModel glow_glShadeModel
#define glSamplerParameteriv glow_glSamplerParameteriv
#define glUniform2ui glow_glUniform2ui
#define glGetQueryObjectui64v glow_glGetQueryObjectui64v
#define glGetMaterialfv glow_glGetMaterialfv
#define glClearBufferuiv glow_glClearBufferuiv
#define glColor3f glow_glColor3f
#define glSecondaryColor3usv glow_glSecondaryColor3usv
#define glVertexAttrib4Niv glow_glVertexAttrib4Niv
#define glVertexAttrib4sv glow_glVertexAttrib4sv
#define glGetIntegeri_v glow_glGetIntegeri_v
#define glVertexAttribI4iv glow_glVertexAttribI4iv
#define glUniform3ui glow_glUniform3ui
#define glGetActiveSubroutineName glow_glGetActiveSubroutineName
#define glRects glow_glRects
#define glVertexAttribL1dv glow_glVertexAttribL1dv
#define glUniform2f glow_glUniform2f
#define glFlush glow_glFlush
#define glMultiDrawElementsBaseVertex glow_glMultiDrawElementsBaseVertex
#define glUniformMatrix3x2dv glow_glUniformMatrix3x2dv
#define glPatchParameteri glow_glPatchParameteri
#define glTranslatef glow_glTranslatef
#define glTexImage2DMultisample glow_glTexImage2DMultisample
#define glMultiTexCoordP3ui glow_glMultiTexCoordP3ui
#define glGetProgramResourceLocation glow_glGetProgramResourceLocation
#define glVertexAttrib3d glow_glVertexAttrib3d
#define glTexCoord2s glow_glTexCoord2s
#define glFramebufferTexture1D glow_glFramebufferTexture1D
#define glColor3us glow_glColor3us
#define glTexCoord1fv glow_glTexCoord1fv
#define glPushClientAttrib glow_glPushClientAttrib
#define glVertexAttrib2dv glow_glVertexAttrib2dv
#define glGetTexImage glow_glGetTexImage
#define glVertex4dv glow_glVertex4dv
#define glIndexPointer glow_glIndexPointer
#define glVertexAttribI4uiv glow_glVertexAttribI4uiv
#define glProgramUniformMatrix2x4fv glow_glProgramUniformMatrix2x4fv
#define glVertexAttribP4uiv glow_glVertexAttribP4uiv
#define glRasterPos3dv glow_glRasterPos3dv
#define glVertexAttrib1fv glow_glVertexAttrib1fv
#define glGetFragDataIndex glow_glGetFragDataIndex
#define glProgramUniformMatrix2x3dv glow_glProgramUniformMatrix2x3dv
#define glProgramUniformMatrix3x4dv glow_glProgramUniformMatrix3x4dv
#define glNormalP3ui glow_glNormalP3ui
#define glProgramUniformMatrix3fv glow_glProgramUniformMatrix3fv
#define glClearAccum glow_glClearAccum
#define glVertexAttribLFormat glow_glVertexAttribLFormat
#define glProgramUniform1f glow_glProgramUniform1f
#define glTexEnvfv glow_glTexEnvfv
#define glMultiTexCoord3iv glow_glMultiTexCoord3iv
#define glSecondaryColor3sv glow_glSecondaryColor3sv
#define glCreateShaderProgramv glow_glCreateShaderProgramv
#define glColor3iv glow_glColor3iv
#define glEvalCoord1d glow_glEvalCoord1d
#define glPushAttrib glow_glPushAttrib
#define glBlendFuncSeparate glow_glBlendFuncSeparate
#define glVertexAttrib4f glow_glVertexAttrib4f
#define glGetUniformIndices glow_glGetUniformIndices
#define glMultiTexCoordP1ui glow_glMultiTexCoordP1ui
#define glClearBufferData glow_glClearBufferData
#define glIndexMask glow_glIndexMask
#define glDrawPixels glow_glDrawPixels
#define glCompressedTexSubImage3D glow_glCompressedTexSubImage3D
#define glMultiTexCoord4d glow_glMultiTexCoord4d
#define glColorP4uiv glow_glColorP4uiv
#define glColor3bv glow_glColor3bv
#define glNewList glow_glNewList
#define glTexCoord3s glow_glTexCoord3s
#define glBlendFunc glow_glBlendFunc
#define glMap1d glow_glMap1d
#define glDeleteBuffers glow_glDeleteBuffers
#define glIsProgram glow_glIsProgram
#define glVertexAttribPointer glow_glVertexAttribPointer
#define glVertex3s glow_glVertex3s
#define glUniform2dv glow_glUniform2dv
#define glLightfv glow_glLightfv
#define glSecondaryColor3b glow_glSecondaryColor3b
#define glBlendEquation glow_glBlendEquation
#define glVertexAttribIPointer glow_glVertexAttribIPointer
#define glMap2f glow_glMap2f
#define glVertexAttribI1uiv glow_glVertexAttribI1uiv
#define glGetUniformBlockIndex glow_glGetUniformBlockIndex
#define glTexCoord4iv glow_glTexCoord4iv
#define glCopyTexSubImage1D glow_glCopyTexSubImage1D
#define glCopyTexSubImage2D glow_glCopyTexSubImage2D
#define glWindowPos3d glow_glWindowPos3d
#define glBitmap glow_glBitmap
#define glColor4dv glow_glColor4dv
#define glFogf glow_glFogf
#define glPassThrough glow_glPassThrough
#define glMultiTexCoord2f glow_glMultiTexCoord2f
#define glSecondaryColor3s glow_glSecondaryColor3s
#define glGetFloatv glow_glGetFloatv
#define glUniformMatrix2x4fv glow_glUniformMatrix2x4fv
#define glVertexAttribP1uiv glow_glVertexAttribP1uiv
#define glEndQueryIndexed glow_glEndQueryIndexed
#define glGenQueries glow_glGenQueries
#define glUniformMatrix2x3dv glow_glUniformMatrix2x3dv
#define glTexCoord2iv glow_glTexCoord2iv
#define glGetMapfv glow_glGetMapfv
#define glGetTexEnvfv glow_glGetTexEnvfv
#define glProgramUniform1ui glow_glProgramUniform1ui
#define glDepthFunc glow_glDepthFunc
#define glGetCompressedTexImage glow_glGetCompressedTexImage
#define glRenderMode glow_glRenderMode
#define glCopyTexImage1D glow_glCopyTexImage1D
#define glGetActiveUniformsiv glow_glGetActiveUniformsiv
#define glPopAttrib glow_glPopAttrib
#define glGetMapdv glow_glGetMapdv
#define glGenTextures glow_glGenTextures
#define glCompressedTexImage2D glow_glCompressedTexImage2D
#define glFramebufferTexture2D glow_glFramebufferTexture2D
#define glGetInternalformati64v glow_glGetInternalformati64v
#define glLighti glow_glLighti
#define glUniformMatrix3x4fv glow_glUniformMatrix3x4fv
#define glGetStringi glow_glGetStringi
#define glVertexP3uiv glow_glVertexP3uiv
#define glMultiDrawArrays glow_glMultiDrawArrays
#define glAttachShader glow_glAttachShader
#define glIsList glow_glIsList
#define glDeleteQueries glow_glDeleteQueries
#define glVertexAttribI4ui glow_glVertexAttribI4ui
#define glVertexAttrib4iv glow_glVertexAttrib4iv
#define glEdgeFlag glow_glEdgeFlag
#define glRotated glow_glRotated
#define glPointSize glow_glPointSize
#define glDepthRangeArrayv glow_glDepthRangeArrayv
#define glLoadIdentity glow_glLoadIdentity
#define glVertex3sv glow_glVertex3sv
#define glProgramUniformMatrix4x3fv glow_glProgramUniformMatrix4x3fv
#define glDisableClientState glow_glDisableClientState
#define glSecondaryColor3f glow_glSecondaryColor3f
#define glVertexAttrib3sv glow_glVertexAttrib3sv
#define glVertexAttribP3uiv glow_glVertexAttribP3uiv
#define glProgramParameteri glow_glProgramParameteri
#define glGetTexGeniv glow_glGetTexGeniv
#define glVertexAttrib4s glow_glVertexAttrib4s
#define glUniformMatrix2dv glow_glUniformMatrix2dv
#define glViewportIndexedfv glow_glViewportIndexedfv
#define glVertexAttrib2fv glow_glVertexAttrib2fv
#define glMultiTexCoordP1uiv glow_glMultiTexCoordP1uiv
#define glUniformMatrix4x3dv glow_glUniformMatrix4x3dv
#define glProgramUniformMatrix2dv glow_glProgramUniformMatrix2dv
#define glListBase glow_glListBase
#define glUniform3f glow_glUniform3f
#define glGetActiveUniformName glow_glGetActiveUniformName
#define glGetPointerv glow_glGetPointerv
#define glTexSubImage1D glow_glTexSubImage1D
#define glArrayElement glow_glArrayElement
#define glUniform2i glow_glUniform2i
#define glVertexAttrib4Nub glow_glVertexAttrib4Nub
#define glGenFramebuffers glow_glGenFramebuffers
#define glEvalCoord2f glow_glEvalCoord2f
#define glVertex3dv glow_glVertex3dv
#define glWindowPos2iv glow_glWindowPos2iv
#define glQueryCounter glow_glQueryCounter
#define glTexCoord3d glow_glTexCoord3d
#define glLightModelfv glow_glLightModelfv
#define glGetUniformfv glow_glGetUniformfv
#define glFramebufferTexture3D glow_glFramebufferTexture3D
#define glPixelStoref glow_glPixelStoref
#define glBindFragDataLocationIndexed glow_glBindFragDataLocationIndexed
#define glColorP3ui glow_glColorP3ui
#define glTexCoord4i glow_glTexCoord4i
#define glSecondaryColor3d glow_glSecondaryColor3d
#define glUniform4ui glow_glUniform4ui
#define glDrawTransformFeedbackStream glow_glDrawTransformFeedbackStream
#define glDepthRangef glow_glDepthRangef
#define glRasterPos2dv glow_glRasterPos2dv
#define glVertex2s glow_glVertex2s
#define glBindBufferRange glow_glBindBufferRange
#define glNormal3s glow_glNormal3s
#define glIndexi glow_glIndexi
#define glProgramUniform3fv glow_glProgramUniform3fv
#define glValidateProgramPipeline glow_glValidateProgramPipeline
#define glColor3s glow_glColor3s
#define glUniform3fv glow_glUniform3fv
#define glIsRenderbuffer glow_glIsRenderbuffer
#define glUniformMatrix4dv glow_glUniformMatrix4dv
#define glClearBufferSubData glow_glClearBufferSubData
#define glSecondaryColorPointer glow_glSecondaryColorPointer
#define glEndConditionalRender glow_glEndConditionalRender
#define glVertexBindingDivisor glow_glVertexBindingDivisor
#define glRasterPos2f glow_glRasterPos2f
#define glVertexP4uiv glow_glVertexP4uiv
#define glGetPolygonStipple glow_glGetPolygonStipple
#define glRasterPos3sv glow_glRasterPos3sv
#define glMultiTexCoord1dv glow_glMultiTexCoord1dv
#define glProgramUniformMatrix2x4dv glow_glProgramUniformMatrix2x4dv
#define glNormal3bv glow_glNormal3bv
#define glColorMask glow_glColorMask
#define glColor4b glow_glColor4b
#define glClearStencil glow_glClearStencil
#define glVertexAttribI2uiv glow_glVertexAttribI2uiv
#define glUniform4iv glow_glUniform4iv
#define glTexCoord1dv glow_glTexCoord1dv
#define glScalef glow_glScalef
#define glCopyTexImage2D glow_glCopyTexImage2D
#define glSecondaryColor3us glow_glSecondaryColor3us
#define glIndexsv glow_glIndexsv
#define glRasterPos3iv glow_glRasterPos3iv
#define glGetSubroutineIndex glow_glGetSubroutineIndex
#define glColor4ub glow_glColor4ub
#define glUniform2fv glow_glUniform2fv
#define glGetSubroutineUniformLocation glow_glGetSubroutineUniformLocation
#define glShaderStorageBlockBinding glow_glShaderStorageBlockBinding
#define glTexSubImage3D glow_glTexSubImage3D
#define glLightModelf glow_glLightModelf
#define glWindowPos3fv glow_glWindowPos3fv
#define glStencilFuncSeparate glow_glStencilFuncSeparate
#define glReadBuffer glow_glReadBuffer
#define glMultiTexCoord3fv glow_glMultiTexCoord3fv
#define glCheckFramebufferStatus glow_glCheckFramebufferStatus
#define glProgramUniform4uiv glow_glProgramUniform4uiv
#define glVertex2i glow_glVertex2i
#define glAlphaFunc glow_glAlphaFunc
#define glDrawBuffers glow_glDrawBuffers
#define glVertexAttrib2f glow_glVertexAttrib2f
#define glProgramUniformMatrix3x2fv glow_glProgramUniformMatrix3x2fv
#define glVertex2iv glow_glVertex2iv
#define glCompressedTexImage1D glow_glCompressedTexImage1D
#define glVertex2d glow_glVertex2d
#define glLightf glow_glLightf
#define glFenceSync glow_glFenceSync
#define glVertexAttribP4ui glow_glVertexAttribP4ui
#define glTexCoordP3ui glow_glTexCoordP3ui
#define glTexCoordP4ui glow_glTexCoordP4ui
#define glTexBufferRange glow_glTexBufferRange
#define glRectiv glow_glRectiv
#define glLinkProgram glow_glLinkProgram
#define glIsTexture glow_glIsTexture
#define glGetProgramiv glow_glGetProgramiv
#define glUniform1f glow_glUniform1f
#define glGetProgramInterfaceiv glow_glGetProgramInterfaceiv
#define glGetUniformLocation glow_glGetUniformLocation
#define glDrawElementsInstancedBaseVertex glow_glDrawElementsInstancedBaseVertex
#define glColor3dv glow_glColor3dv
#define glWindowPos2sv glow_glWindowPos2sv
#define glUniform1fv glow_glUniform1fv
#define glSamplerParameterIuiv glow_glSamplerParameterIuiv
#define glCopyTexSubImage3D glow_glCopyTexSubImage3D
#define glGetAttribLocation glow_glGetAttribLocation
#define glUniformMatrix4x3fv glow_glUniformMatrix4x3fv
#define glVertexAttribI2ui glow_glVertexAttribI2ui
#define glBlendEquationSeparatei glow_glBlendEquationSeparatei
#define glWindowPos2fv glow_glWindowPos2fv
#define glPixelMapfv glow_glPixelMapfv
#define glGetActiveAttrib glow_glGetActiveAttrib
#define glGetUniformSubroutineuiv glow_glGetUniformSubroutineuiv
#define glTexCoord1sv glow_glTexCoord1sv
#define glVertexAttribL2d glow_glVertexAttribL2d
#define glUniform2uiv glow_glUniform2uiv
#define glInterleavedArrays glow_glInterleavedArrays
#define glAreTexturesResident glow_glAreTexturesResident
#define glMultiTexCoord1s glow_glMultiTexCoord1s
#define glVertexAttribP3ui glow_glVertexAttribP3ui
#define glProgramUniformMatrix4x3dv glow_glProgramUniformMatrix4x3dv
#define glTexCoord3f glow_glTexCoord3f
#define glVertexAttribL3dv glow_glVertexAttribL3dv
#define glMultiTexCoord4f glow_glMultiTexCoord4f
#define glGetShaderiv glow_glGetShaderiv
#define glGetSamplerParameterfv glow_glGetSamplerParameterfv
#define glMultiDrawElementsIndirect glow_glMultiDrawElementsIndirect
#define glDebugMessageInsert glow_glDebugMessageInsert
#define glMultiTexCoord1d glow_glMultiTexCoord1d
#define glColor4i glow_glColor4i
#define glVertex2dv glow_glVertex2dv
#define glDeleteTextures glow_glDeleteTextures
#define glTexParameteri glow_glTexParameteri
#define glRasterPos4sv glow_glRasterPos4sv
#define glPauseTransformFeedback glow_glPauseTransformFeedback
#define glIndexd glow_glIndexd
#define glVertexAttribI1i glow_glVertexAttribI1i
#define glDrawElementsInstancedBaseInstance glow_glDrawElementsInstancedBaseInstance
#define glClampColor glow_glClampColor
#define glDrawElementsInstanced glow_glDrawElementsInstanced
#define glBindImageTexture glow_glBindImageTexture
#define glDrawTransformFeedbackStreamInstanced glow_glDrawTransformFeedbackStreamInstanced
#define glObjectPtrLabel glow_glObjectPtrLabel
#define glColor4iv glow_glColor4iv
#define glWindowPos3sv glow_glWindowPos3sv
#define glVertexAttrib3dv glow_glVertexAttrib3dv
#define glUniform3uiv glow_glUniform3uiv
#define glFramebufferTexture glow_glFramebufferTexture
#define glActiveTexture glow_glActiveTexture
#define glMap1f glow_glMap1f
#define glPixelMapuiv glow_glPixelMapuiv
#define glViewport glow_glViewport
#define glBeginConditionalRender glow_glBeginConditionalRender
#define glUniformSubroutinesuiv glow_glUniformSubroutinesuiv
#define glFrontFace glow_glFrontFace
#define glScissor glow_glScissor
#define glRasterPos3d glow_glRasterPos3d
#define glTexCoord2i glow_glTexCoord2i
#define glLightModeli glow_glLightModeli
#define glGetBooleani_v glow_glGetBooleani_v
#define glGetFloati_v glow_glGetFloati_v
#define glHint glow_glHint
#define glLoadTransposeMatrixf glow_glLoadTransposeMatrixf
#define glProgramUniform2i glow_glProgramUniform2i
#define glProgramUniformMatrix4fv glow_glProgramUniformMatrix4fv
#define glTexGenfv glow_glTexGenfv
#define glVertexAttribI3iv glow_glVertexAttribI3iv
#define glDrawElementsBaseVertex glow_glDrawElementsBaseVertex
#define glMultiTexCoordP4uiv glow_glMultiTexCoordP4uiv
#define glDeleteProgramPipelines glow_glDeleteProgramPipelines
#define glNormal3d glow_glNormal3d
#define glDrawTransformFeedback glow_glDrawTransformFeedback
#define glGetMaterialiv glow_glGetMaterialiv
#define glMultTransposeMatrixd glow_glMultTransposeMatrixd
#define glIsShader glow_glIsShader
#define glDebugMessageControl glow_glDebugMessageControl
#define glRasterPos2s glow_glRasterPos2s
#define glFogCoordfv glow_glFogCoordfv
#define glWindowPos3iv glow_glWindowPos3iv
#define glBindProgramPipeline glow_glBindProgramPipeline
#define glTexCoord3sv glow_glTexCoord3sv
#define glVertexAttribL3d glow_glVertexAttribL3d
#define glGetQueryObjectiv glow_glGetQueryObjectiv
#define glGetVertexAttribfv glow_glGetVertexAttribfv
#define glGetProgramResourceLocationIndex glow_glGetProgramResourceLocationIndex
#define glVertex4i glow_glVertex4i
#define glVertex4s glow_glVertex4s
#define glBlendFunci glow_glBlendFunci
#define glRasterPos3s glow_glRasterPos3s
#define glDeleteShader glow_glDeleteShader
#define glVertexAttrib4Nsv glow_glVertexAttrib4Nsv
#define glMultiTexCoordP2uiv glow_glMultiTexCoordP2uiv
#define glTexStorage2DMultisample glow_glTexStorage2DMultisample
#define glGetTexParameterfv glow_glGetTexParameterfv
#define glValidateProgram glow_glValidateProgram
#define glVertexAttribI1ui glow_glVertexAttribI1ui
#define glGetBufferParameteri64v glow_glGetBufferParameteri64v
#define glMultiTexCoordP4ui glow_glMultiTexCoordP4ui
#define glMultiTexCoord1fv glow_glMultiTexCoord1fv
#define glTexCoord4fv glow_glTexCoord4fv
#define glUniformBlockBinding glow_glUniformBlockBinding
#define glTexCoordP1ui glow_glTexCoordP1ui
#define glIndexdv glow_glIndexdv
#define glTexParameterIuiv glow_glTexParameterIuiv
#define glClearBufferfv glow_glClearBufferfv
#define glGenVertexArrays glow_glGenVertexArrays
#define glProgramUniform1fv glow_glProgramUniform1fv
#define glObjectLabel glow_glObjectLabel
#define glMultiTexCoord4iv glow_glMultiTexCoord4iv
#define glVertexAttrib3s glow_glVertexAttrib3s
#define glVertexAttribP2ui glow_glVertexAttribP2ui
#define glMinSampleShading glow_glMinSampleShading
#define glVertexAttribL4d glow_glVertexAttribL4d
#define glFogCoorddv glow_glFogCoorddv
#define glDrawRangeElementsBaseVertex glow_glDrawRangeElementsBaseVertex
#define glGenLists glow_glGenLists
#define glWindowPos2s glow_glWindowPos2s
#define glUniform4uiv glow_glUniform4uiv
#define glSamplerParameterf glow_glSamplerParameterf
#define glLineStipple glow_glLineStipple
#define glProgramUniform2uiv glow_glProgramUniform2uiv
#define glVertex3d glow_glVertex3d
#define glBindAttribLocation glow_glBindAttribLocation
#define glUniformMatrix2x4dv glow_glUniformMatrix2x4dv
#define glEvalCoord1dv glow_glEvalCoord1dv
#define glEvalCoord2d glow_glEvalCoord2d
#define glGetPixelMapfv glow_glGetPixelMapfv
#define glBindVertexArray glow_glBindVertexArray
#define glProgramUniformMatrix3dv glow_glProgramUniformMatrix3dv
#define glPixelStorei glow_glPixelStorei
#define glVertexPointer glow_glVertexPointer
#define glFrustum glow_glFrustum
#define glLoadName glow_glLoadName
#define glSecondaryColor3ub glow_glSecondaryColor3ub
#define glVertexAttrib4Nusv glow_glVertexAttrib4Nusv
#define glFlushMappedBufferRange glow_glFlushMappedBufferRange
#define glProgramBinary glow_glProgramBinary
#define glTexCoord2fv glow_glTexCoord2fv
#define glScissorIndexedv glow_glScissorIndexedv
#define glEvalCoord1f glow_glEvalCoord1f
#define glUniform4f glow_glUniform4f
#define glInvalidateBufferSubData glow_glInvalidateBufferSubData
#define glMultiTexCoord4i glow_glMultiTexCoord4i
#define glDeleteFramebuffers glow_glDeleteFramebuffers
#define glGetIntegerv glow_glGetIntegerv
#define glLoadTransposeMatrixd glow_glLoadTransposeMatrixd
#define glProgramUniform3dv glow_glProgramUniform3dv
#define glColor4sv glow_glColor4sv
#define glMultTransposeMatrixf glow_glMultTransposeMatrixf
#define glBlendEquationSeparate glow_glBlendEquationSeparate
#define glUniform1i glow_glUniform1i
#define glBlendEquationi glow_glBlendEquationi
#define glProgramUniform4dv glow_glProgramUniform4dv
#define glMemoryBarrier glow_glMemoryBarrier
#define glEvalCoord1fv glow_glEvalCoord1fv
#define glWindowPos2i glow_glWindowPos2i
#define glDeleteProgram glow_glDeleteProgram
#define glProgramUniform4d glow_glProgramUniform4d
#define glMultiTexCoord2fv glow_glMultiTexCoord2fv
#define glVertexP4ui glow_glVertexP4ui
#define glGetProgramPipelineInfoLog glow_glGetProgramPipelineInfoLog
#define glVertexAttribI3uiv glow_glVertexAttribI3uiv
#define glVertexAttrib4Nuiv glow_glVertexAttrib4Nuiv
#define glPixelTransferi glow_glPixelTransferi
#define glMultiTexCoord3i glow_glMultiTexCoord3i
#define glVertexAttribI3ui glow_glVertexAttribI3ui
#define glIsFramebuffer glow_glIsFramebuffer
#define glVertexP3ui glow_glVertexP3ui
#define glIsEnabled glow_glIsEnabled
#define glScissorArrayv glow_glScissorArrayv
#define glSecondaryColor3bv glow_glSecondaryColor3bv
#define glVertex3f glow_glVertex3f
#define glMultiTexCoord2dv glow_glMultiTexCoord2dv
#define glGetQueryObjecti64v glow_glGetQueryObjecti64v
#define glGetTexLevelParameteriv glow_glGetTexLevelParameteriv
#define glWindowPos3dv glow_glWindowPos3dv
#define glMultiTexCoord1f glow_glMultiTexCoord1f
#define glNormal3i glow_glNormal3i
#define glRasterPos2iv glow_glRasterPos2iv
#define glVertex3iv glow_glVertex3iv
#define glEvalCoord2fv glow_glEvalCoord2fv
#define glUniformMatrix3fv glow_glUniformMatrix3fv
#define glColor4s glow_glColor4s
#define glVertex4d glow_glVertex4d
#define glGetInternalformativ glow_glGetInternalformativ
#define glUniform2d glow_glUniform2d
#define glIsProgramPipeline glow_glIsProgramPipeline
#define glVertexAttrib2sv glow_glVertexAttrib2sv
#define glColor4bv glow_glColor4bv
#define glVertex4f glow_glVertex4f
#define glGetVertexAttribdv glow_glGetVertexAttribdv
#define glProgramUniform4i glow_glProgramUniform4i
#define glGetDoublev glow_glGetDoublev
#define glGetPixelMapusv glow_glGetPixelMapusv
#define glProgramUniform4iv glow_glProgramUniform4iv
#define glPopDebugGroup glow_glPopDebugGroup
#define glLogicOp glow_glLogicOp
#define glWindowPos2d glow_glWindowPos2d
#define glMapBufferRange glow_glMapBufferRange
#define glFogCoordf glow_glFogCoordf
#define glNormal3dv glow_glNormal3dv
#define glGetShaderPrecisionFormat glow_glGetShaderPrecisionFormat
#define glColor4d glow_glColor4d
#define glProgramUniformMatrix2fv glow_glProgramUniformMatrix2fv
#define glTexStorage3D glow_glTexStorage3D
#define glClearBufferiv glow_glClearBufferiv
#define glRectf glow_glRectf
#define glGetTransformFeedbackVarying glow_glGetTransformFeedbackVarying
#define glMultiTexCoordP3uiv glow_glMultiTexCoordP3uiv
#define glGetDoublei_v glow_glGetDoublei_v
#define glTexParameterfv glow_glTexParameterfv
#define glUniformMatrix2fv glow_glUniformMatrix2fv
#define glGetFragDataLocation glow_glGetFragDataLocation
#define glVertexP2uiv glow_glVertexP2uiv
#define glUniform4d glow_glUniform4d
#define glGetUniformdv glow_glGetUniformdv
#define glIndexs glow_glIndexs
#define glPushMatrix glow_glPushMatrix
#define glUniform4fv glow_glUniform4fv
#define glTexCoordP3uiv glow_glTexCoordP3uiv
#define glProgramUniform2iv glow_glProgramUniform2iv
#define glColor4ubv glow_glColor4ubv
#define glMultiTexCoord4fv glow_glMultiTexCoord4fv
#define glGetShaderSource glow_glGetShaderSource
#define glVertexAttribI2iv glow_glVertexAttribI2iv
#define glVertexAttribI4ubv glow_glVertexAttribI4ubv
#define glProgramUniform2f glow_glProgramUniform2f
#define glPushDebugGroup glow_glPushDebugGroup
#define glTexParameteriv glow_glTexParameteriv
#define glDrawArraysInstanced glow_glDrawArraysInstanced
#define glClearDepthf glow_glClearDepthf
#define glGenProgramPipelines glow_glGenProgramPipelines
#define glInvalidateFramebuffer glow_glInvalidateFramebuffer
#define glMultiTexCoord4sv glow_glMultiTexCoord4sv
#define glGetPixelMapuiv glow_glGetPixelMapuiv
#define glColor3sv glow_glColor3sv
#define glEvalPoint1 glow_glEvalPoint1
#define glTranslated glow_glTranslated
#define glVertexAttribI2i glow_glVertexAttribI2i
#define glGetTexParameterIuiv glow_glGetTexParameterIuiv
#define glColor4us glow_glColor4us
#define glVertexAttribI4bv glow_glVertexAttribI4bv
#define glReleaseShaderCompiler glow_glReleaseShaderCompiler
#define glTexImage1D glow_glTexImage1D
#define glColor3ui glow_glColor3ui
#define glTexCoord1i glow_glTexCoord1i
#define glVertexAttrib4fv glow_glVertexAttrib4fv
#define glBeginTransformFeedback glow_glBeginTransformFeedback
#define glGetError glow_glGetError
#define glProgramUniformMatrix4dv glow_glProgramUniformMatrix4dv
#define glGetProgramBinary glow_glGetProgramBinary
#define glProgramUniform2dv glow_glProgramUniform2dv
#define glDrawBuffer glow_glDrawBuffer
#define glPixelZoom glow_glPixelZoom
#define glMultiTexCoord1i glow_glMultiTexCoord1i
#define glUniform3i glow_glUniform3i
#define glGetObjectLabel glow_glGetObjectLabel
#define glRasterPos4i glow_glRasterPos4i
#define glPointParameterf glow_glPointParameterf
#define glSamplerParameterfv glow_glSamplerParameterfv
#define glIndexiv glow_glIndexiv
#define glWindowPos3s glow_glWindowPos3s
#define glGetBufferParameteriv glow_glGetBufferParameteriv
#define glVertexAttribL2dv glow_glVertexAttribL2dv
#define glLineWidth glow_glLineWidth
#define glUniform4i glow_glUniform4i
#define glRasterPos4f glow_glRasterPos4f
#define glTexCoord3iv glow_glTexCoord3iv
#define glGetVertexAttribIiv glow_glGetVertexAttribIiv
#define glFramebufferRenderbuffer glow_glFramebufferRenderbuffer
#define glGetFramebufferAttachmentParameteriv glow_glGetFramebufferAttachmentParameteriv
#define glEnd glow_glEnd
#define glProgramUniformMatrix3x4fv glow_glProgramUniformMatrix3x4fv
#define glBlendFuncSeparatei glow_glBlendFuncSeparatei
#define glStencilOpSeparate glow_glStencilOpSeparate
#define glBeginQuery glow_glBeginQuery
#define glVertexAttrib1d glow_glVertexAttrib1d
#define glProgramUniform3d glow_glProgramUniform3d
#define glVertexAttrib4dv glow_glVertexAttrib4dv
#define glScaled glow_glScaled
#define glGetActiveUniform glow_glGetActiveUniform
#define glVertexAttrib4Nubv glow_glVertexAttrib4Nubv
#define glUniformMatrix3x4dv glow_glUniformMatrix3x4dv
#define glPointParameteriv glow_glPointParameteriv
#define glUniformMatrix4x2dv glow_glUniformMatrix4x2dv
#define glProgramUniform2fv glow_glProgramUniform2fv
#define glStencilMask glow_glStencilMask
#define glGetProgramStageiv glow_glGetProgramStageiv
#define glProgramUniform3uiv glow_glProgramUniform3uiv
#define glVertexP2ui glow_glVertexP2ui
#define glProgramUniform1d glow_glProgramUniform1d
#define glVertexAttrib1dv glow_glVertexAttrib1dv
#define glCallList glow_glCallList
#define glWindowPos2f glow_glWindowPos2f
#define glGenBuffers glow_glGenBuffers
#define glBufferSubData glow_glBufferSubData
#define glVertexAttrib4ubv glow_glVertexAttrib4ubv
#define glRecti glow_glRecti
#define glTexCoordPointer glow_glTexCoordPointer
#define glMultiTexCoord2s glow_glMultiTexCoord2s
#define glVertexAttribI3i glow_glVertexAttribI3i
#define glViewportArrayv glow_glViewportArrayv
#define glRectd glow_glRectd
#define glDrawArrays glow_glDrawArrays
#define glCreateShader glow_glCreateShader
#define glProgramUniform3i glow_glProgramUniform3i
#define glVertexAttribBinding glow_glVertexAttribBinding
#define glTexCoord2dv glow_glTexCoord2dv
#define glCreateProgram glow_glCreateProgram
#define glTexStorage2D glow_glTexStorage2D
#define glTexCoord2f glow_glTexCoord2f
#define glMultiTexCoord3s glow_glMultiTexCoord3s
#define glVertexAttrib4bv glow_glVertexAttrib4bv
#define glColor3fv glow_glColor3fv
#define glFogiv glow_glFogiv
#define glTexEnviv glow_glTexEnviv
#define glTexGend glow_glTexGend
#define glPopClientAttrib glow_glPopClientAttrib
#define glStencilMaskSeparate glow_glStencilMaskSeparate
#define glSecondaryColorP3uiv glow_glSecondaryColorP3uiv
#define glFinish glow_glFinish
#define glVertexAttrib1s glow_glVertexAttrib1s
#define glColor3ubv glow_glColor3ubv
#define glVertexAttribP2uiv glow_glVertexAttribP2uiv
#define glMultiTexCoord3dv glow_glMultiTexCoord3dv
#define glUniform1d glow_glUniform1d
#define glVertex3fv glow_glVertex3fv
#define glEndTransformFeedback glow_glEndTransformFeedback
#define glVertex2sv glow_glVertex2sv
#define glNormal3f glow_glNormal3f
#define glFogCoordd glow_glFogCoordd
#define glDetachShader glow_glDetachShader
#define glProgramUniformMatrix4x2fv glow_glProgramUniformMatrix4x2fv
#define glEvalMesh2 glow_glEvalMesh2
#define glTexImage3D glow_glTexImage3D
#define glColorMaski glow_glColorMaski
#define glClear glow_glClear
#define glIsEnabledi glow_glIsEnabledi
#define glTexCoordP1uiv glow_glTexCoordP1uiv
#define glTexCoordP4uiv glow_glTexCoordP4uiv
#define glTexCoord4f glow_glTexCoord4f
#define glBindRenderbuffer glow_glBindRenderbuffer
#define glTextureView glow_glTextureView
#define glVertexAttrib2s glow_glVertexAttrib2s
#define glMaterialf glow_glMaterialf
#define glEvalCoord2dv glow_glEvalCoord2dv
#define glVertexAttribDivisor glow_glVertexAttribDivisor
#define glDrawElementsIndirect glow_glDrawElementsIndirect
#define glDepthRange glow_glDepthRange
#define glSecondaryColor3uiv glow_glSecondaryColor3uiv
#define glClientWaitSync glow_glClientWaitSync
#define glColor3d glow_glColor3d
#define glVertex4iv glow_glVertex4iv
#define glNormalPointer glow_glNormalPointer
#define glCompressedTexSubImage1D glow_glCompressedTexSubImage1D
#define glDeleteRenderbuffers glow_glDeleteRenderbuffers
#define glTexCoord1iv glow_glTexCoord1iv
#define glColor3usv glow_glColor3usv
#define glSelectBuffer glow_glSelectBuffer
#define glProgramUniform1i glow_glProgramUniform1i
#define glMultiTexCoord3d glow_glMultiTexCoord3d
#define glDeleteSync glow_glDeleteSync
#define glProgramUniform4ui glow_glProgramUniform4ui
#define glMaterialfv glow_glMaterialfv
#define glGenSamplers glow_glGenSamplers
#define glProgramUniformMatrix3x2dv glow_glProgramUniformMatrix3x2dv
#define glGetVertexAttribiv glow_glGetVertexAttribiv
#define glColor3uiv glow_glColor3uiv
#define glIsQuery glow_glIsQuery
#define glGenTransformFeedbacks glow_glGenTransformFeedbacks
#define glStencilFunc glow_glStencilFunc
#define glEvalPoint2 glow_glEvalPoint2
#define glGetProgramInfoLog glow_glGetProgramInfoLog
#define glVertexAttrib4uiv glow_glVertexAttrib4uiv
#define glGenerateMipmap glow_glGenerateMipmap
#define glGetLightfv glow_glGetLightfv
#define glPrimitiveRestartIndex glow_glPrimitiveRestartIndex
#define glReadPixels glow_glReadPixels
#define glEnableVertexAttribArray glow_glEnableVertexAttribArray
#define glUseProgram glow_glUseProgram
#define glVertexAttrib3fv glow_glVertexAttrib3fv
#define glMultiTexCoord1sv glow_glMultiTexCoord1sv
#define glMultiTexCoord2d glow_glMultiTexCoord2d
#define glSecondaryColor3ubv glow_glSecondaryColor3ubv
#define glCompileShader glow_glCompileShader
#define glGetActiveAtomicCounterBufferiv glow_glGetActiveAtomicCounterBufferiv
#define glDeleteLists glow_glDeleteLists
#define glTexCoord4s glow_glTexCoord4s
#define glGenRenderbuffers glow_glGenRenderbuffers
#define glIsTransformFeedback glow_glIsTransformFeedback
#define glBeginQueryIndexed glow_glBeginQueryIndexed
#define glColor4f glow_glColor4f
#define glTexCoord3i glow_glTexCoord3i
#define glMultiTexCoord3sv glow_glMultiTexCoord3sv
#define glGetRenderbufferParameteriv glow_glGetRenderbufferParameteriv
#define glRasterPos2fv glow_glRasterPos2fv
#define glBindBufferBase glow_glBindBufferBase
#define glClearBufferfi glow_glClearBufferfi
#define glScissorIndexed glow_glScissorIndexed
#define glMultiTexCoord2sv glow_glMultiTexCoord2sv
#define glSecondaryColor3ui glow_glSecondaryColor3ui
#define glTexParameterIiv glow_glTexParameterIiv
#define glProgramUniform4f glow_glProgramUniform4f
#define glGetTexParameteriv glow_glGetTexParameteriv
#define glGetLightiv glow_glGetLightiv
#define glGetTexGendv glow_glGetTexGendv
#define glVertexAttribP1ui glow_glVertexAttribP1ui
#define glActiveShaderProgram glow_glActiveShaderProgram
#define glProgramUniform1uiv glow_glProgramUniform1uiv
#define glProgramUniformMatrix4x2dv glow_glProgramUniformMatrix4x2dv
#define glTexStorage3DMultisample glow_glTexStorage3DMultisample
#define glMapGrid2f glow_glMapGrid2f
#define glColorMaterial glow_glColorMaterial
#define glVertexAttrib4usv glow_glVertexAttrib4usv
#define glGetInteger64v glow_glGetInteger64v
#define glTexCoord1s glow_glTexCoord1s
#define glClipPlane glow_glClipPlane
#define glDrawRangeElements glow_glDrawRangeElements
#define glMultiTexCoord2iv glow_glMultiTexCoord2iv
#define glGetUniformiv glow_glGetUniformiv
#define glCallLists glow_glCallLists
#define glVertex2fv glow_glVertex2fv
#define glProvokingVertex glow_glProvokingVertex
#define glDispatchComputeIndirect glow_glDispatchComputeIndirect
#define glTexCoord4d glow_glTexCoord4d
#define glTexImage3DMultisample glow_glTexImage3DMultisample
#define glVertex4sv glow_glVertex4sv
#define glFogfv glow_glFogfv
#define glVertexAttribI4sv glow_glVertexAttribI4sv
#define glGetActiveUniformBlockiv glow_glGetActiveUniformBlockiv
#define glGetSamplerParameteriv glow_glGetSamplerParameteriv
#define glFramebufferParameteri glow_glFramebufferParameteri
#define glColor4fv glow_glColor4fv
#define glDrawElements glow_glDrawElements
#define glSampleCoverage glow_glSampleCoverage
#define glVertexAttribL4dv glow_glVertexAttribL4dv
#define glNormal3iv glow_glNormal3iv
#define glIsSampler glow_glIsSampler
#define glGetProgramPipelineiv glow_glGetProgramPipelineiv
#define glInvalidateTexImage glow_glInvalidateTexImage
#define glUniform1ui glow_glUniform1ui
#define glBufferData glow_glBufferData
#define glUniformMatrix4fv glow_glUniformMatrix4fv
#define glDrawArraysIndirect glow_glDrawArraysIndirect
#define glProgramUniform1dv glow_glProgramUniform1dv
#define glDrawElementsInstancedBaseVertexBaseInstance glow_glDrawElementsInstancedBaseVertexBaseInstance
#define glLoadMatrixd glow_glLoadMatrixd
#define glCompressedTexSubImage2D glow_glCompressedTexSubImage2D
#define glUniformMatrix4x2fv glow_glUniformMatrix4x2fv
#define glBindFramebuffer glow_glBindFramebuffer
#define glFramebufferTextureLayer glow_glFramebufferTextureLayer
#define glGetActiveSubroutineUniformiv glow_glGetActiveSubroutineUniformiv
#define glRasterPos4d glow_glRasterPos4d
#define glWindowPos2dv glow_glWindowPos2dv
#define glColor3b glow_glColor3b
#define glMultMatrixd glow_glMultMatrixd
#define glTexEnvf glow_glTexEnvf
#define glVertexAttrib2d glow_glVertexAttrib2d
#define glMultiTexCoordP2ui glow_glMultiTexCoordP2ui
#define glProgramUniform3f glow_glProgramUniform3f
#define glMateriali glow_glMateriali
#define glMapGrid1f glow_glMapGrid1f
#define glMapGrid2d glow_glMapGrid2d
#define glGetUniformuiv glow_glGetUniformuiv
#define glUniform3dv glow_glUniform3dv
#define glUseProgramStages glow_glUseProgramStages
#define glRasterPos4iv glow_glRasterPos4iv
#define glRasterPos4s glow_glRasterPos4s
#define glRasterPos3fv glow_glRasterPos3fv
#define glNormal3fv glow_glNormal3fv
#define glGetShaderInfoLog glow_glGetShaderInfoLog
#define glVertexAttrib1f glow_glVertexAttrib1f
#define glDisablei glow_glDisablei
#define glVertexAttribI4usv glow_glVertexAttribI4usv
#define glDeleteTransformFeedbacks glow_glDeleteTransformFeedbacks
#define glDrawArraysInstancedBaseInstance glow_glDrawArraysInstancedBaseInstance
#define glColor4usv glow_glColor4usv
#define glColor3ub glow_glColor3ub
#define glFogi glow_glFogi
#define glAccum glow_glAccum
#define glUniformMatrix2x3fv glow_glUniformMatrix2x3fv
#define glTexCoordP2uiv glow_glTexCoordP2uiv
#define glTexImage2D glow_glTexImage2D
#define glMatrixMode glow_glMatrixMode
#define glTexSubImage2D glow_glTexSubImage2D
#define glFogCoordPointer glow_glFogCoordPointer
#define glUnmapBuffer glow_glUnmapBuffer
#define glTexCoordP2ui glow_glTexCoordP2ui
#define glTexStorage1D glow_glTexStorage1D
#define glGetProgramResourceiv glow_glGetProgramResourceiv
#define glColor3i glow_glColor3i
#define glMapGrid1d glow_glMapGrid1d
#define glBindBuffer glow_glBindBuffer
#define glUniform2iv glow_glUniform2iv
#define glSamplerParameterIiv glow_glSamplerParameterIiv
#define glVertex3i glow_glVertex3i
#define glVertex4fv glow_glVertex4fv
#define glLoadMatrixf glow_glLoadMatrixf
#define glMultiTexCoord4s glow_glMultiTexCoord4s
#define glVertexAttrib3f glow_glVertexAttrib3f
#define glGetInteger64i_v glow_glGetInteger64i_v
#define glGetString glow_glGetString
#define glEndQuery glow_glEndQuery
#define glRenderbufferStorage glow_glRenderbufferStorage
#define glGetProgramResourceName glow_glGetProgramResourceName
#define glMultiTexCoord2i glow_glMultiTexCoord2i
#define glTexCoord1d glow_glTexCoord1d
#define glTexCoord2d glow_glTexCoord2d
#define glPixelTransferf glow_glPixelTransferf
#define glPixelMapusv glow_glPixelMapusv
#define glRasterPos2i glow_glRasterPos2i
#define glRasterPos2d glow_glRasterPos2d
#define glPolygonStipple glow_glPolygonStipple
#define glGetClipPlane glow_glGetClipPlane
#define glGetBufferSubData glow_glGetBufferSubData
#define glPatchParameterfv glow_glPatchParameterfv
#define glVertexAttribIFormat glow_glVertexAttribIFormat
#define glDisable glow_glDisable
#define glTexGendv glow_glTexGendv
#define glTransformFeedbackVaryings glow_glTransformFeedbackVaryings
#define glGetVertexAttribIuiv glow_glGetVertexAttribIuiv
#define glBindFragDataLocation glow_glBindFragDataLocation
#define glRenderbufferStorageMultisample glow_glRenderbufferStorageMultisample
#define glColorP3uiv glow_glColorP3uiv
#define glEnable glow_glEnable
#define glTexGeni glow_glTexGeni
#define glMultiTexCoord3f glow_glMultiTexCoord3f
#define glPointParameteri glow_glPointParameteri
#define glSamplerParameteri glow_glSamplerParameteri
#define glInvalidateSubFramebuffer glow_glInvalidateSubFramebuffer
#define glMultiDrawArraysIndirect glow_glMultiDrawArraysIndirect
#define glTexCoord3dv glow_glTexCoord3dv
#define glTexCoord2sv glow_glTexCoord2sv
#define glGetSynciv glow_glGetSynciv
#define glUniform3d glow_glUniform3d
#define glSecondaryColor3i glow_glSecondaryColor3i
#define glMapBuffer glow_glMapBuffer
#define glNormalP3uiv glow_glNormalP3uiv
#define glInvalidateBufferData glow_glInvalidateBufferData
#define glBlendColor glow_glBlendColor
#define glPushName glow_glPushName
#define glWindowPos3f glow_glWindowPos3f
#define glGetSamplerParameterIiv glow_glGetSamplerParameterIiv
#define glClearColor glow_glClearColor
#define glMultMatrixf glow_glMultMatrixf
#define glInitNames glow_glInitNames
#define glCopyBufferSubData glow_glCopyBufferSubData
#define glGetActiveSubroutineUniformName glow_glGetActiveSubroutineUniformName
#define glRectdv glow_glRectdv
#define glRasterPos4fv glow_glRasterPos4fv
#define glProgramUniformMatrix2x3fv glow_glProgramUniformMatrix2x3fv
#define glVertexAttribLPointer glow_glVertexAttribLPointer
#define glNormal3sv glow_glNormal3sv
#define glEdgeFlagv glow_glEdgeFlagv
#define glPointParameterfv glow_glPointParameterfv
#define glSecondaryColor3dv glow_glSecondaryColor3dv
#define glGetSamplerParameterIuiv glow_glGetSamplerParameterIuiv
#define glMultiTexCoord1iv glow_glMultiTexCoord1iv
#define glPopName glow_glPopName
#define glGetTexGenfv glow_glGetTexGenfv
#define glShaderSource glow_glShaderSource
#define glCullFace glow_glCullFace

#endif /* GLOW_DEBUG */


#ifdef GLOW_DEBUG

GLOWDEF PFNGLINDEXFPROC glow_debug_glIndexf;
#define glIndexf glow_debug_glIndexf
GLOWDEF PFNGLGETTEXPARAMETERIIVPROC glow_debug_glGetTexParameterIiv;
#define glGetTexParameterIiv glow_debug_glGetTexParameterIiv
GLOWDEF PFNGLISSYNCPROC glow_debug_glIsSync;
#define glIsSync glow_debug_glIsSync
GLOWDEF PFNGLUNIFORMMATRIX3DVPROC glow_debug_glUniformMatrix3dv;
#define glUniformMatrix3dv glow_debug_glUniformMatrix3dv
GLOWDEF PFNGLROTATEFPROC glow_debug_glRotatef;
#define glRotatef glow_debug_glRotatef
GLOWDEF PFNGLTEXGENIVPROC glow_debug_glTexGeniv;
#define glTexGeniv glow_debug_glTexGeniv
GLOWDEF PFNGLUNIFORM1UIVPROC glow_debug_glUniform1uiv;
#define glUniform1uiv glow_debug_glUniform1uiv
GLOWDEF PFNGLRASTERPOS3IPROC glow_debug_glRasterPos3i;
#define glRasterPos3i glow_debug_glRasterPos3i
GLOWDEF PFNGLVERTEX2FPROC glow_debug_glVertex2f;
#define glVertex2f glow_debug_glVertex2f
GLOWDEF PFNGLCOMPRESSEDTEXIMAGE3DPROC glow_debug_glCompressedTexImage3D;
#define glCompressedTexImage3D glow_debug_glCompressedTexImage3D
GLOWDEF PFNGLENDLISTPROC glow_debug_glEndList;
#define glEndList glow_debug_glEndList
GLOWDEF PFNGLPROGRAMUNIFORM2DPROC glow_debug_glProgramUniform2d;
#define glProgramUniform2d glow_debug_glProgramUniform2d
GLOWDEF PFNGLGETFRAMEBUFFERPARAMETERIVPROC glow_debug_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv glow_debug_glGetFramebufferParameteriv
GLOWDEF PFNGLMULTITEXCOORD4DVPROC glow_debug_glMultiTexCoord4dv;
#define glMultiTexCoord4dv glow_debug_glMultiTexCoord4dv
GLOWDEF PFNGLBEGINPROC glow_debug_glBegin;
#define glBegin glow_debug_glBegin
GLOWDEF PFNGLSECONDARYCOLOR3FVPROC glow_debug_glSecondaryColor3fv;
#define glSecondaryColor3fv glow_debug_glSecondaryColor3fv
GLOWDEF PFNGLUNIFORM3IVPROC glow_debug_glUniform3iv;
#define glUniform3iv glow_debug_glUniform3iv
GLOWDEF PFNGLGETQUERYINDEXEDIVPROC glow_debug_glGetQueryIndexediv;
#define glGetQueryIndexediv glow_debug_glGetQueryIndexediv
GLOWDEF PFNGLPOLYGONMODEPROC glow_debug_glPolygonMode;
#define glPolygonMode glow_debug_glPolygonMode
GLOWDEF PFNGLDISPATCHCOMPUTEPROC glow_debug_glDispatchCompute;
#define glDispatchCompute glow_debug_glDispatchCompute
GLOWDEF PFNGLBINDTEXTUREPROC glow_debug_glBindTexture;
#define glBindTexture glow_debug_glBindTexture
GLOWDEF PFNGLPRIORITIZETEXTURESPROC glow_debug_glPrioritizeTextures;
#define glPrioritizeTextures glow_debug_glPrioritizeTextures
GLOWDEF PFNGLINDEXUBVPROC glow_debug_glIndexubv;
#define glIndexubv glow_debug_glIndexubv
GLOWDEF PFNGLDEPTHMASKPROC glow_debug_glDepthMask;
#define glDepthMask glow_debug_glDepthMask
GLOWDEF PFNGLENABLECLIENTSTATEPROC glow_debug_glEnableClientState;
#define glEnableClientState glow_debug_glEnableClientState
GLOWDEF PFNGLGETATTACHEDSHADERSPROC glow_debug_glGetAttachedShaders;
#define glGetAttachedShaders glow_debug_glGetAttachedShaders
GLOWDEF PFNGLCOLORP4UIPROC glow_debug_glColorP4ui;
#define glColorP4ui glow_debug_glColorP4ui
GLOWDEF PFNGLFEEDBACKBUFFERPROC glow_debug_glFeedbackBuffer;
#define glFeedbackBuffer glow_debug_glFeedbackBuffer
GLOWDEF PFNGLRASTERPOS3FPROC glow_debug_glRasterPos3f;
#define glRasterPos3f glow_debug_glRasterPos3f
GLOWDEF PFNGLTEXCOORD1FPROC glow_debug_glTexCoord1f;
#define glTexCoord1f glow_debug_glTexCoord1f
GLOWDEF PFNGLTEXCOORD4SVPROC glow_debug_glTexCoord4sv;
#define glTexCoord4sv glow_debug_glTexCoord4sv
GLOWDEF PFNGLGETQUERYIVPROC glow_debug_glGetQueryiv;
#define glGetQueryiv glow_debug_glGetQueryiv
GLOWDEF PFNGLCLEARDEPTHPROC glow_debug_glClearDepth;
#define glClearDepth glow_debug_glClearDepth
GLOWDEF PFNGLTEXENVIPROC glow_debug_glTexEnvi;
#define glTexEnvi glow_debug_glTexEnvi
GLOWDEF PFNGLPOPMATRIXPROC glow_debug_glPopMatrix;
#define glPopMatrix glow_debug_glPopMatrix
GLOWDEF PFNGLEDGEFLAGPOINTERPROC glow_debug_glEdgeFlagPointer;
#define glEdgeFlagPointer glow_debug_glEdgeFlagPointer
GLOWDEF PFNGLTEXCOORD4DVPROC glow_debug_glTexCoord4dv;
#define glTexCoord4dv glow_debug_glTexCoord4dv
GLOWDEF PFNGLBINDVERTEXBUFFERPROC glow_debug_glBindVertexBuffer;
#define glBindVertexBuffer glow_debug_glBindVertexBuffer
GLOWDEF PFNGLGETOBJECTPTRLABELPROC glow_debug_glGetObjectPtrLabel;
#define glGetObjectPtrLabel glow_debug_glGetObjectPtrLabel
GLOWDEF PFNGLTEXPARAMETERFPROC glow_debug_glTexParameterf;
#define glTexParameterf glow_debug_glTexParameterf
GLOWDEF PFNGLVERTEXATTRIB1SVPROC glow_debug_glVertexAttrib1sv;
#define glVertexAttrib1sv glow_debug_glVertexAttrib1sv
GLOWDEF PFNGLTEXCOORD3FVPROC glow_debug_glTexCoord3fv;
#define glTexCoord3fv glow_debug_glTexCoord3fv
GLOWDEF PFNGLLIGHTMODELIVPROC glow_debug_glLightModeliv;
#define glLightModeliv glow_debug_glLightModeliv
GLOWDEF PFNGLGETQUERYOBJECTUIVPROC glow_debug_glGetQueryObjectuiv;
#define glGetQueryObjectuiv glow_debug_glGetQueryObjectuiv
GLOWDEF PFNGLGETVERTEXATTRIBLDVPROC glow_debug_glGetVertexAttribLdv;
#define glGetVertexAttribLdv glow_debug_glGetVertexAttribLdv
GLOWDEF PFNGLDEBUGMESSAGECALLBACKPROC glow_debug_glDebugMessageCallback;
#define glDebugMessageCallback glow_debug_glDebugMessageCallback
GLOWDEF PFNGLSTENCILOPPROC glow_debug_glStencilOp;
#define glStencilOp glow_debug_glStencilOp
GLOWDEF PFNGLCOPYPIXELSPROC glow_debug_glCopyPixels;
#define glCopyPixels glow_debug_glCopyPixels
GLOWDEF PFNGLISVERTEXARRAYPROC glow_debug_glIsVertexArray;
#define glIsVertexArray glow_debug_glIsVertexArray
GLOWDEF PFNGLSAMPLEMASKIPROC glow_debug_glSampleMaski;
#define glSampleMaski glow_debug_glSampleMaski
GLOWDEF PFNGLLIGHTIVPROC glow_debug_glLightiv;
#define glLightiv glow_debug_glLightiv
GLOWDEF PFNGLTEXBUFFERPROC glow_debug_glTexBuffer;
#define glTexBuffer glow_debug_glTexBuffer
GLOWDEF PFNGLSHADERBINARYPROC glow_debug_glShaderBinary;
#define glShaderBinary glow_debug_glShaderBinary
GLOWDEF PFNGLMATERIALIVPROC glow_debug_glMaterialiv;
#define glMaterialiv glow_debug_glMaterialiv
GLOWDEF PFNGLNORMAL3BPROC glow_debug_glNormal3b;
#define glNormal3b glow_debug_glNormal3b
GLOWDEF PFNGLGETMAPIVPROC glow_debug_glGetMapiv;
#define glGetMapiv glow_debug_glGetMapiv
GLOWDEF PFNGLBINDTRANSFORMFEEDBACKPROC glow_debug_glBindTransformFeedback;
#define glBindTransformFeedback glow_debug_glBindTransformFeedback
GLOWDEF PFNGLGETDEBUGMESSAGELOGPROC glow_debug_glGetDebugMessageLog;
#define glGetDebugMessageLog glow_debug_glGetDebugMessageLog
GLOWDEF PFNGLGETBOOLEANVPROC glow_debug_glGetBooleanv;
#define glGetBooleanv glow_debug_glGetBooleanv
GLOWDEF PFNGLINDEXUBPROC glow_debug_glIndexub;
#define glIndexub glow_debug_glIndexub
GLOWDEF PFNGLBLITFRAMEBUFFERPROC glow_debug_glBlitFramebuffer;
#define glBlitFramebuffer glow_debug_glBlitFramebuffer
GLOWDEF PFNGLGETMULTISAMPLEFVPROC glow_debug_glGetMultisamplefv;
#define glGetMultisamplefv glow_debug_glGetMultisamplefv
GLOWDEF PFNGLPROGRAMUNIFORM3IVPROC glow_debug_glProgramUniform3iv;
#define glProgramUniform3iv glow_debug_glProgramUniform3iv
GLOWDEF PFNGLGETPROGRAMRESOURCEINDEXPROC glow_debug_glGetProgramResourceIndex;
#define glGetProgramResourceIndex glow_debug_glGetProgramResourceIndex
GLOWDEF PFNGLINDEXFVPROC glow_debug_glIndexfv;
#define glIndexfv glow_debug_glIndexfv
GLOWDEF PFNGLVERTEXATTRIBFORMATPROC glow_debug_glVertexAttribFormat;
#define glVertexAttribFormat glow_debug_glVertexAttribFormat
GLOWDEF PFNGLRASTERPOS4DVPROC glow_debug_glRasterPos4dv;
#define glRasterPos4dv glow_debug_glRasterPos4dv
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glow_debug_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced glow_debug_glDrawTransformFeedbackInstanced
GLOWDEF PFNGLVIEWPORTINDEXEDFPROC glow_debug_glViewportIndexedf;
#define glViewportIndexedf glow_debug_glViewportIndexedf
GLOWDEF PFNGLISBUFFERPROC glow_debug_glIsBuffer;
#define glIsBuffer glow_debug_glIsBuffer
GLOWDEF PFNGLUNIFORMMATRIX3X2FVPROC glow_debug_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv glow_debug_glUniformMatrix3x2fv
GLOWDEF PFNGLDEPTHRANGEINDEXEDPROC glow_debug_glDepthRangeIndexed;
#define glDepthRangeIndexed glow_debug_glDepthRangeIndexed
GLOWDEF PFNGLGETTEXLEVELPARAMETERFVPROC glow_debug_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glow_debug_glGetTexLevelParameterfv
GLOWDEF PFNGLSECONDARYCOLOR3IVPROC glow_debug_glSecondaryColor3iv;
#define glSecondaryColor3iv glow_debug_glSecondaryColor3iv
GLOWDEF PFNGLUNIFORM1IVPROC glow_debug_glUniform1iv;
#define glUniform1iv glow_debug_glUniform1iv
GLOWDEF PFNGLVERTEXATTRIB4DPROC glow_debug_glVertexAttrib4d;
#define glVertexAttrib4d glow_debug_glVertexAttrib4d
GLOWDEF PFNGLSECONDARYCOLORP3UIPROC glow_debug_glSecondaryColorP3ui;
#define glSecondaryColorP3ui glow_debug_glSecondaryColorP3ui
GLOWDEF PFNGLRECTSVPROC glow_debug_glRectsv;
#define glRectsv glow_debug_glRectsv
GLOWDEF PFNGLRASTERPOS2SVPROC glow_debug_glRasterPos2sv;
#define glRasterPos2sv glow_debug_glRasterPos2sv
GLOWDEF PFNGLEVALMESH1PROC glow_debug_glEvalMesh1;
#define glEvalMesh1 glow_debug_glEvalMesh1
GLOWDEF PFNGLORTHOPROC glow_debug_glOrtho;
#define glOrtho glow_debug_glOrtho
GLOWDEF PFNGLMULTIDRAWELEMENTSPROC glow_debug_glMultiDrawElements;
#define glMultiDrawElements glow_debug_glMultiDrawElements
GLOWDEF PFNGLDISABLEVERTEXATTRIBARRAYPROC glow_debug_glDisableVertexAttribArray;
#define glDisableVertexAttribArray glow_debug_glDisableVertexAttribArray
GLOWDEF PFNGLPROGRAMUNIFORM4FVPROC glow_debug_glProgramUniform4fv;
#define glProgramUniform4fv glow_debug_glProgramUniform4fv
GLOWDEF PFNGLCOLOR4UIVPROC glow_debug_glColor4uiv;
#define glColor4uiv glow_debug_glColor4uiv
GLOWDEF PFNGLTEXGENFPROC glow_debug_glTexGenf;
#define glTexGenf glow_debug_glTexGenf
GLOWDEF PFNGLVERTEXATTRIBI4IPROC glow_debug_glVertexAttribI4i;
#define glVertexAttribI4i glow_debug_glVertexAttribI4i
GLOWDEF PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glow_debug_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName glow_debug_glGetActiveUniformBlockName
GLOWDEF PFNGLDELETESAMPLERSPROC glow_debug_glDeleteSamplers;
#define glDeleteSamplers glow_debug_glDeleteSamplers
GLOWDEF PFNGLUNIFORM4DVPROC glow_debug_glUniform4dv;
#define glUniform4dv glow_debug_glUniform4dv
GLOWDEF PFNGLPROGRAMUNIFORM2UIPROC glow_debug_glProgramUniform2ui;
#define glProgramUniform2ui glow_debug_glProgramUniform2ui
GLOWDEF PFNGLRECTFVPROC glow_debug_glRectfv;
#define glRectfv glow_debug_glRectfv
GLOWDEF PFNGLENABLEIPROC glow_debug_glEnablei;
#define glEnablei glow_debug_glEnablei
GLOWDEF PFNGLVERTEXATTRIBI1IVPROC glow_debug_glVertexAttribI1iv;
#define glVertexAttribI1iv glow_debug_glVertexAttribI1iv
GLOWDEF PFNGLCLIENTACTIVETEXTUREPROC glow_debug_glClientActiveTexture;
#define glClientActiveTexture glow_debug_glClientActiveTexture
GLOWDEF PFNGLVERTEXATTRIB4NBVPROC glow_debug_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv glow_debug_glVertexAttrib4Nbv
GLOWDEF PFNGLWINDOWPOS3IPROC glow_debug_glWindowPos3i;
#define glWindowPos3i glow_debug_glWindowPos3i
GLOWDEF PFNGLGETBUFFERPOINTERVPROC glow_debug_glGetBufferPointerv;
#define glGetBufferPointerv glow_debug_glGetBufferPointerv
GLOWDEF PFNGLGETVERTEXATTRIBPOINTERVPROC glow_debug_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv glow_debug_glGetVertexAttribPointerv
GLOWDEF PFNGLUNIFORM1DVPROC glow_debug_glUniform1dv;
#define glUniform1dv glow_debug_glUniform1dv
GLOWDEF PFNGLVERTEXATTRIBL1DPROC glow_debug_glVertexAttribL1d;
#define glVertexAttribL1d glow_debug_glVertexAttribL1d
GLOWDEF PFNGLGETTEXENVIVPROC glow_debug_glGetTexEnviv;
#define glGetTexEnviv glow_debug_glGetTexEnviv
GLOWDEF PFNGLPROGRAMUNIFORM1IVPROC glow_debug_glProgramUniform1iv;
#define glProgramUniform1iv glow_debug_glProgramUniform1iv
GLOWDEF PFNGLPROGRAMUNIFORM3UIPROC glow_debug_glProgramUniform3ui;
#define glProgramUniform3ui glow_debug_glProgramUniform3ui
GLOWDEF PFNGLMAP2DPROC glow_debug_glMap2d;
#define glMap2d glow_debug_glMap2d
GLOWDEF PFNGLPOLYGONOFFSETPROC glow_debug_glPolygonOffset;
#define glPolygonOffset glow_debug_glPolygonOffset
GLOWDEF PFNGLCOLORPOINTERPROC glow_debug_glColorPointer;
#define glColorPointer glow_debug_glColorPointer
GLOWDEF PFNGLBINDSAMPLERPROC glow_debug_glBindSampler;
#define glBindSampler glow_debug_glBindSampler
GLOWDEF PFNGLINVALIDATETEXSUBIMAGEPROC glow_debug_glInvalidateTexSubImage;
#define glInvalidateTexSubImage glow_debug_glInvalidateTexSubImage
GLOWDEF PFNGLCOLOR4UIPROC glow_debug_glColor4ui;
#define glColor4ui glow_debug_glColor4ui
GLOWDEF PFNGLCLEARINDEXPROC glow_debug_glClearIndex;
#define glClearIndex glow_debug_glClearIndex
GLOWDEF PFNGLDELETEVERTEXARRAYSPROC glow_debug_glDeleteVertexArrays;
#define glDeleteVertexArrays glow_debug_glDeleteVertexArrays
GLOWDEF PFNGLWAITSYNCPROC glow_debug_glWaitSync;
#define glWaitSync glow_debug_glWaitSync
GLOWDEF PFNGLRESUMETRANSFORMFEEDBACKPROC glow_debug_glResumeTransformFeedback;
#define glResumeTransformFeedback glow_debug_glResumeTransformFeedback
GLOWDEF PFNGLCOPYIMAGESUBDATAPROC glow_debug_glCopyImageSubData;
#define glCopyImageSubData glow_debug_glCopyImageSubData
GLOWDEF PFNGLSHADEMODELPROC glow_debug_glShadeModel;
#define glShadeModel glow_debug_glShadeModel
GLOWDEF PFNGLSAMPLERPARAMETERIVPROC glow_debug_glSamplerParameteriv;
#define glSamplerParameteriv glow_debug_glSamplerParameteriv
GLOWDEF PFNGLUNIFORM2UIPROC glow_debug_glUniform2ui;
#define glUniform2ui glow_debug_glUniform2ui
GLOWDEF PFNGLGETQUERYOBJECTUI64VPROC glow_debug_glGetQueryObjectui64v;
#define glGetQueryObjectui64v glow_debug_glGetQueryObjectui64v
GLOWDEF PFNGLGETMATERIALFVPROC glow_debug_glGetMaterialfv;
#define glGetMaterialfv glow_debug_glGetMaterialfv
GLOWDEF PFNGLCLEARBUFFERUIVPROC glow_debug_glClearBufferuiv;
#define glClearBufferuiv glow_debug_glClearBufferuiv
GLOWDEF PFNGLCOLOR3FPROC glow_debug_glColor3f;
#define glColor3f glow_debug_glColor3f
GLOWDEF PFNGLSECONDARYCOLOR3USVPROC glow_debug_glSecondaryColor3usv;
#define glSecondaryColor3usv glow_debug_glSecondaryColor3usv
GLOWDEF PFNGLVERTEXATTRIB4NIVPROC glow_debug_glVertexAttrib4Niv;
#define glVertexAttrib4Niv glow_debug_glVertexAttrib4Niv
GLOWDEF PFNGLVERTEXATTRIB4SVPROC glow_debug_glVertexAttrib4sv;
#define glVertexAttrib4sv glow_debug_glVertexAttrib4sv
GLOWDEF PFNGLGETINTEGERI_VPROC glow_debug_glGetIntegeri_v;
#define glGetIntegeri_v glow_debug_glGetIntegeri_v
GLOWDEF PFNGLVERTEXATTRIBI4IVPROC glow_debug_glVertexAttribI4iv;
#define glVertexAttribI4iv glow_debug_glVertexAttribI4iv
GLOWDEF PFNGLUNIFORM3UIPROC glow_debug_glUniform3ui;
#define glUniform3ui glow_debug_glUniform3ui
GLOWDEF PFNGLGETACTIVESUBROUTINENAMEPROC glow_debug_glGetActiveSubroutineName;
#define glGetActiveSubroutineName glow_debug_glGetActiveSubroutineName
GLOWDEF PFNGLRECTSPROC glow_debug_glRects;
#define glRects glow_debug_glRects
GLOWDEF PFNGLVERTEXATTRIBL1DVPROC glow_debug_glVertexAttribL1dv;
#define glVertexAttribL1dv glow_debug_glVertexAttribL1dv
GLOWDEF PFNGLUNIFORM2FPROC glow_debug_glUniform2f;
#define glUniform2f glow_debug_glUniform2f
GLOWDEF PFNGLFLUSHPROC glow_debug_glFlush;
#define glFlush glow_debug_glFlush
GLOWDEF PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glow_debug_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex glow_debug_glMultiDrawElementsBaseVertex
GLOWDEF PFNGLUNIFORMMATRIX3X2DVPROC glow_debug_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv glow_debug_glUniformMatrix3x2dv
GLOWDEF PFNGLPATCHPARAMETERIPROC glow_debug_glPatchParameteri;
#define glPatchParameteri glow_debug_glPatchParameteri
GLOWDEF PFNGLTRANSLATEFPROC glow_debug_glTranslatef;
#define glTranslatef glow_debug_glTranslatef
GLOWDEF PFNGLTEXIMAGE2DMULTISAMPLEPROC glow_debug_glTexImage2DMultisample;
#define glTexImage2DMultisample glow_debug_glTexImage2DMultisample
GLOWDEF PFNGLMULTITEXCOORDP3UIPROC glow_debug_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui glow_debug_glMultiTexCoordP3ui
GLOWDEF PFNGLGETPROGRAMRESOURCELOCATIONPROC glow_debug_glGetProgramResourceLocation;
#define glGetProgramResourceLocation glow_debug_glGetProgramResourceLocation
GLOWDEF PFNGLVERTEXATTRIB3DPROC glow_debug_glVertexAttrib3d;
#define glVertexAttrib3d glow_debug_glVertexAttrib3d
GLOWDEF PFNGLTEXCOORD2SPROC glow_debug_glTexCoord2s;
#define glTexCoord2s glow_debug_glTexCoord2s
GLOWDEF PFNGLFRAMEBUFFERTEXTURE1DPROC glow_debug_glFramebufferTexture1D;
#define glFramebufferTexture1D glow_debug_glFramebufferTexture1D
GLOWDEF PFNGLCOLOR3USPROC glow_debug_glColor3us;
#define glColor3us glow_debug_glColor3us
GLOWDEF PFNGLTEXCOORD1FVPROC glow_debug_glTexCoord1fv;
#define glTexCoord1fv glow_debug_glTexCoord1fv
GLOWDEF PFNGLPUSHCLIENTATTRIBPROC glow_debug_glPushClientAttrib;
#define glPushClientAttrib glow_debug_glPushClientAttrib
GLOWDEF PFNGLVERTEXATTRIB2DVPROC glow_debug_glVertexAttrib2dv;
#define glVertexAttrib2dv glow_debug_glVertexAttrib2dv
GLOWDEF PFNGLGETTEXIMAGEPROC glow_debug_glGetTexImage;
#define glGetTexImage glow_debug_glGetTexImage
GLOWDEF PFNGLVERTEX4DVPROC glow_debug_glVertex4dv;
#define glVertex4dv glow_debug_glVertex4dv
GLOWDEF PFNGLINDEXPOINTERPROC glow_debug_glIndexPointer;
#define glIndexPointer glow_debug_glIndexPointer
GLOWDEF PFNGLVERTEXATTRIBI4UIVPROC glow_debug_glVertexAttribI4uiv;
#define glVertexAttribI4uiv glow_debug_glVertexAttribI4uiv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glow_debug_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv glow_debug_glProgramUniformMatrix2x4fv
GLOWDEF PFNGLVERTEXATTRIBP4UIVPROC glow_debug_glVertexAttribP4uiv;
#define glVertexAttribP4uiv glow_debug_glVertexAttribP4uiv
GLOWDEF PFNGLRASTERPOS3DVPROC glow_debug_glRasterPos3dv;
#define glRasterPos3dv glow_debug_glRasterPos3dv
GLOWDEF PFNGLVERTEXATTRIB1FVPROC glow_debug_glVertexAttrib1fv;
#define glVertexAttrib1fv glow_debug_glVertexAttrib1fv
GLOWDEF PFNGLGETFRAGDATAINDEXPROC glow_debug_glGetFragDataIndex;
#define glGetFragDataIndex glow_debug_glGetFragDataIndex
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glow_debug_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv glow_debug_glProgramUniformMatrix2x3dv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glow_debug_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv glow_debug_glProgramUniformMatrix3x4dv
GLOWDEF PFNGLNORMALP3UIPROC glow_debug_glNormalP3ui;
#define glNormalP3ui glow_debug_glNormalP3ui
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3FVPROC glow_debug_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv glow_debug_glProgramUniformMatrix3fv
GLOWDEF PFNGLCLEARACCUMPROC glow_debug_glClearAccum;
#define glClearAccum glow_debug_glClearAccum
GLOWDEF PFNGLVERTEXATTRIBLFORMATPROC glow_debug_glVertexAttribLFormat;
#define glVertexAttribLFormat glow_debug_glVertexAttribLFormat
GLOWDEF PFNGLPROGRAMUNIFORM1FPROC glow_debug_glProgramUniform1f;
#define glProgramUniform1f glow_debug_glProgramUniform1f
GLOWDEF PFNGLTEXENVFVPROC glow_debug_glTexEnvfv;
#define glTexEnvfv glow_debug_glTexEnvfv
GLOWDEF PFNGLMULTITEXCOORD3IVPROC glow_debug_glMultiTexCoord3iv;
#define glMultiTexCoord3iv glow_debug_glMultiTexCoord3iv
GLOWDEF PFNGLSECONDARYCOLOR3SVPROC glow_debug_glSecondaryColor3sv;
#define glSecondaryColor3sv glow_debug_glSecondaryColor3sv
GLOWDEF PFNGLCREATESHADERPROGRAMVPROC glow_debug_glCreateShaderProgramv;
#define glCreateShaderProgramv glow_debug_glCreateShaderProgramv
GLOWDEF PFNGLCOLOR3IVPROC glow_debug_glColor3iv;
#define glColor3iv glow_debug_glColor3iv
GLOWDEF PFNGLEVALCOORD1DPROC glow_debug_glEvalCoord1d;
#define glEvalCoord1d glow_debug_glEvalCoord1d
GLOWDEF PFNGLPUSHATTRIBPROC glow_debug_glPushAttrib;
#define glPushAttrib glow_debug_glPushAttrib
GLOWDEF PFNGLBLENDFUNCSEPARATEPROC glow_debug_glBlendFuncSeparate;
#define glBlendFuncSeparate glow_debug_glBlendFuncSeparate
GLOWDEF PFNGLVERTEXATTRIB4FPROC glow_debug_glVertexAttrib4f;
#define glVertexAttrib4f glow_debug_glVertexAttrib4f
GLOWDEF PFNGLGETUNIFORMINDICESPROC glow_debug_glGetUniformIndices;
#define glGetUniformIndices glow_debug_glGetUniformIndices
GLOWDEF PFNGLMULTITEXCOORDP1UIPROC glow_debug_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui glow_debug_glMultiTexCoordP1ui
GLOWDEF PFNGLCLEARBUFFERDATAPROC glow_debug_glClearBufferData;
#define glClearBufferData glow_debug_glClearBufferData
GLOWDEF PFNGLINDEXMASKPROC glow_debug_glIndexMask;
#define glIndexMask glow_debug_glIndexMask
GLOWDEF PFNGLDRAWPIXELSPROC glow_debug_glDrawPixels;
#define glDrawPixels glow_debug_glDrawPixels
GLOWDEF PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glow_debug_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D glow_debug_glCompressedTexSubImage3D
GLOWDEF PFNGLMULTITEXCOORD4DPROC glow_debug_glMultiTexCoord4d;
#define glMultiTexCoord4d glow_debug_glMultiTexCoord4d
GLOWDEF PFNGLCOLORP4UIVPROC glow_debug_glColorP4uiv;
#define glColorP4uiv glow_debug_glColorP4uiv
GLOWDEF PFNGLCOLOR3BVPROC glow_debug_glColor3bv;
#define glColor3bv glow_debug_glColor3bv
GLOWDEF PFNGLNEWLISTPROC glow_debug_glNewList;
#define glNewList glow_debug_glNewList
GLOWDEF PFNGLTEXCOORD3SPROC glow_debug_glTexCoord3s;
#define glTexCoord3s glow_debug_glTexCoord3s
GLOWDEF PFNGLBLENDFUNCPROC glow_debug_glBlendFunc;
#define glBlendFunc glow_debug_glBlendFunc
GLOWDEF PFNGLMAP1DPROC glow_debug_glMap1d;
#define glMap1d glow_debug_glMap1d
GLOWDEF PFNGLDELETEBUFFERSPROC glow_debug_glDeleteBuffers;
#define glDeleteBuffers glow_debug_glDeleteBuffers
GLOWDEF PFNGLISPROGRAMPROC glow_debug_glIsProgram;
#define glIsProgram glow_debug_glIsProgram
GLOWDEF PFNGLVERTEXATTRIBPOINTERPROC glow_debug_glVertexAttribPointer;
#define glVertexAttribPointer glow_debug_glVertexAttribPointer
GLOWDEF PFNGLVERTEX3SPROC glow_debug_glVertex3s;
#define glVertex3s glow_debug_glVertex3s
GLOWDEF PFNGLUNIFORM2DVPROC glow_debug_glUniform2dv;
#define glUniform2dv glow_debug_glUniform2dv
GLOWDEF PFNGLLIGHTFVPROC glow_debug_glLightfv;
#define glLightfv glow_debug_glLightfv
GLOWDEF PFNGLSECONDARYCOLOR3BPROC glow_debug_glSecondaryColor3b;
#define glSecondaryColor3b glow_debug_glSecondaryColor3b
GLOWDEF PFNGLBLENDEQUATIONPROC glow_debug_glBlendEquation;
#define glBlendEquation glow_debug_glBlendEquation
GLOWDEF PFNGLVERTEXATTRIBIPOINTERPROC glow_debug_glVertexAttribIPointer;
#define glVertexAttribIPointer glow_debug_glVertexAttribIPointer
GLOWDEF PFNGLMAP2FPROC glow_debug_glMap2f;
#define glMap2f glow_debug_glMap2f
GLOWDEF PFNGLVERTEXATTRIBI1UIVPROC glow_debug_glVertexAttribI1uiv;
#define glVertexAttribI1uiv glow_debug_glVertexAttribI1uiv
GLOWDEF PFNGLGETUNIFORMBLOCKINDEXPROC glow_debug_glGetUniformBlockIndex;
#define glGetUniformBlockIndex glow_debug_glGetUniformBlockIndex
GLOWDEF PFNGLTEXCOORD4IVPROC glow_debug_glTexCoord4iv;
#define glTexCoord4iv glow_debug_glTexCoord4iv
GLOWDEF PFNGLCOPYTEXSUBIMAGE1DPROC glow_debug_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glow_debug_glCopyTexSubImage1D
GLOWDEF PFNGLCOPYTEXSUBIMAGE2DPROC glow_debug_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glow_debug_glCopyTexSubImage2D
GLOWDEF PFNGLWINDOWPOS3DPROC glow_debug_glWindowPos3d;
#define glWindowPos3d glow_debug_glWindowPos3d
GLOWDEF PFNGLBITMAPPROC glow_debug_glBitmap;
#define glBitmap glow_debug_glBitmap
GLOWDEF PFNGLCOLOR4DVPROC glow_debug_glColor4dv;
#define glColor4dv glow_debug_glColor4dv
GLOWDEF PFNGLFOGFPROC glow_debug_glFogf;
#define glFogf glow_debug_glFogf
GLOWDEF PFNGLPASSTHROUGHPROC glow_debug_glPassThrough;
#define glPassThrough glow_debug_glPassThrough
GLOWDEF PFNGLMULTITEXCOORD2FPROC glow_debug_glMultiTexCoord2f;
#define glMultiTexCoord2f glow_debug_glMultiTexCoord2f
GLOWDEF PFNGLSECONDARYCOLOR3SPROC glow_debug_glSecondaryColor3s;
#define glSecondaryColor3s glow_debug_glSecondaryColor3s
GLOWDEF PFNGLGETFLOATVPROC glow_debug_glGetFloatv;
#define glGetFloatv glow_debug_glGetFloatv
GLOWDEF PFNGLUNIFORMMATRIX2X4FVPROC glow_debug_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv glow_debug_glUniformMatrix2x4fv
GLOWDEF PFNGLVERTEXATTRIBP1UIVPROC glow_debug_glVertexAttribP1uiv;
#define glVertexAttribP1uiv glow_debug_glVertexAttribP1uiv
GLOWDEF PFNGLENDQUERYINDEXEDPROC glow_debug_glEndQueryIndexed;
#define glEndQueryIndexed glow_debug_glEndQueryIndexed
GLOWDEF PFNGLGENQUERIESPROC glow_debug_glGenQueries;
#define glGenQueries glow_debug_glGenQueries
GLOWDEF PFNGLUNIFORMMATRIX2X3DVPROC glow_debug_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv glow_debug_glUniformMatrix2x3dv
GLOWDEF PFNGLTEXCOORD2IVPROC glow_debug_glTexCoord2iv;
#define glTexCoord2iv glow_debug_glTexCoord2iv
GLOWDEF PFNGLGETMAPFVPROC glow_debug_glGetMapfv;
#define glGetMapfv glow_debug_glGetMapfv
GLOWDEF PFNGLGETTEXENVFVPROC glow_debug_glGetTexEnvfv;
#define glGetTexEnvfv glow_debug_glGetTexEnvfv
GLOWDEF PFNGLPROGRAMUNIFORM1UIPROC glow_debug_glProgramUniform1ui;
#define glProgramUniform1ui glow_debug_glProgramUniform1ui
GLOWDEF PFNGLDEPTHFUNCPROC glow_debug_glDepthFunc;
#define glDepthFunc glow_debug_glDepthFunc
GLOWDEF PFNGLGETCOMPRESSEDTEXIMAGEPROC glow_debug_glGetCompressedTexImage;
#define glGetCompressedTexImage glow_debug_glGetCompressedTexImage
GLOWDEF PFNGLRENDERMODEPROC glow_debug_glRenderMode;
#define glRenderMode glow_debug_glRenderMode
GLOWDEF PFNGLCOPYTEXIMAGE1DPROC glow_debug_glCopyTexImage1D;
#define glCopyTexImage1D glow_debug_glCopyTexImage1D
GLOWDEF PFNGLGETACTIVEUNIFORMSIVPROC glow_debug_glGetActiveUniformsiv;
#define glGetActiveUniformsiv glow_debug_glGetActiveUniformsiv
GLOWDEF PFNGLPOPATTRIBPROC glow_debug_glPopAttrib;
#define glPopAttrib glow_debug_glPopAttrib
GLOWDEF PFNGLGETMAPDVPROC glow_debug_glGetMapdv;
#define glGetMapdv glow_debug_glGetMapdv
GLOWDEF PFNGLGENTEXTURESPROC glow_debug_glGenTextures;
#define glGenTextures glow_debug_glGenTextures
GLOWDEF PFNGLCOMPRESSEDTEXIMAGE2DPROC glow_debug_glCompressedTexImage2D;
#define glCompressedTexImage2D glow_debug_glCompressedTexImage2D
GLOWDEF PFNGLFRAMEBUFFERTEXTURE2DPROC glow_debug_glFramebufferTexture2D;
#define glFramebufferTexture2D glow_debug_glFramebufferTexture2D
GLOWDEF PFNGLGETINTERNALFORMATI64VPROC glow_debug_glGetInternalformati64v;
#define glGetInternalformati64v glow_debug_glGetInternalformati64v
GLOWDEF PFNGLLIGHTIPROC glow_debug_glLighti;
#define glLighti glow_debug_glLighti
GLOWDEF PFNGLUNIFORMMATRIX3X4FVPROC glow_debug_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv glow_debug_glUniformMatrix3x4fv
GLOWDEF PFNGLGETSTRINGIPROC glow_debug_glGetStringi;
#define glGetStringi glow_debug_glGetStringi
GLOWDEF PFNGLVERTEXP3UIVPROC glow_debug_glVertexP3uiv;
#define glVertexP3uiv glow_debug_glVertexP3uiv
GLOWDEF PFNGLMULTIDRAWARRAYSPROC glow_debug_glMultiDrawArrays;
#define glMultiDrawArrays glow_debug_glMultiDrawArrays
GLOWDEF PFNGLATTACHSHADERPROC glow_debug_glAttachShader;
#define glAttachShader glow_debug_glAttachShader
GLOWDEF PFNGLISLISTPROC glow_debug_glIsList;
#define glIsList glow_debug_glIsList
GLOWDEF PFNGLDELETEQUERIESPROC glow_debug_glDeleteQueries;
#define glDeleteQueries glow_debug_glDeleteQueries
GLOWDEF PFNGLVERTEXATTRIBI4UIPROC glow_debug_glVertexAttribI4ui;
#define glVertexAttribI4ui glow_debug_glVertexAttribI4ui
GLOWDEF PFNGLVERTEXATTRIB4IVPROC glow_debug_glVertexAttrib4iv;
#define glVertexAttrib4iv glow_debug_glVertexAttrib4iv
GLOWDEF PFNGLEDGEFLAGPROC glow_debug_glEdgeFlag;
#define glEdgeFlag glow_debug_glEdgeFlag
GLOWDEF PFNGLROTATEDPROC glow_debug_glRotated;
#define glRotated glow_debug_glRotated
GLOWDEF PFNGLPOINTSIZEPROC glow_debug_glPointSize;
#define glPointSize glow_debug_glPointSize
GLOWDEF PFNGLDEPTHRANGEARRAYVPROC glow_debug_glDepthRangeArrayv;
#define glDepthRangeArrayv glow_debug_glDepthRangeArrayv
GLOWDEF PFNGLLOADIDENTITYPROC glow_debug_glLoadIdentity;
#define glLoadIdentity glow_debug_glLoadIdentity
GLOWDEF PFNGLVERTEX3SVPROC glow_debug_glVertex3sv;
#define glVertex3sv glow_debug_glVertex3sv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glow_debug_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv glow_debug_glProgramUniformMatrix4x3fv
GLOWDEF PFNGLDISABLECLIENTSTATEPROC glow_debug_glDisableClientState;
#define glDisableClientState glow_debug_glDisableClientState
GLOWDEF PFNGLSECONDARYCOLOR3FPROC glow_debug_glSecondaryColor3f;
#define glSecondaryColor3f glow_debug_glSecondaryColor3f
GLOWDEF PFNGLVERTEXATTRIB3SVPROC glow_debug_glVertexAttrib3sv;
#define glVertexAttrib3sv glow_debug_glVertexAttrib3sv
GLOWDEF PFNGLVERTEXATTRIBP3UIVPROC glow_debug_glVertexAttribP3uiv;
#define glVertexAttribP3uiv glow_debug_glVertexAttribP3uiv
GLOWDEF PFNGLPROGRAMPARAMETERIPROC glow_debug_glProgramParameteri;
#define glProgramParameteri glow_debug_glProgramParameteri
GLOWDEF PFNGLGETTEXGENIVPROC glow_debug_glGetTexGeniv;
#define glGetTexGeniv glow_debug_glGetTexGeniv
GLOWDEF PFNGLVERTEXATTRIB4SPROC glow_debug_glVertexAttrib4s;
#define glVertexAttrib4s glow_debug_glVertexAttrib4s
GLOWDEF PFNGLUNIFORMMATRIX2DVPROC glow_debug_glUniformMatrix2dv;
#define glUniformMatrix2dv glow_debug_glUniformMatrix2dv
GLOWDEF PFNGLVIEWPORTINDEXEDFVPROC glow_debug_glViewportIndexedfv;
#define glViewportIndexedfv glow_debug_glViewportIndexedfv
GLOWDEF PFNGLVERTEXATTRIB2FVPROC glow_debug_glVertexAttrib2fv;
#define glVertexAttrib2fv glow_debug_glVertexAttrib2fv
GLOWDEF PFNGLMULTITEXCOORDP1UIVPROC glow_debug_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv glow_debug_glMultiTexCoordP1uiv
GLOWDEF PFNGLUNIFORMMATRIX4X3DVPROC glow_debug_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv glow_debug_glUniformMatrix4x3dv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2DVPROC glow_debug_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv glow_debug_glProgramUniformMatrix2dv
GLOWDEF PFNGLLISTBASEPROC glow_debug_glListBase;
#define glListBase glow_debug_glListBase
GLOWDEF PFNGLUNIFORM3FPROC glow_debug_glUniform3f;
#define glUniform3f glow_debug_glUniform3f
GLOWDEF PFNGLGETACTIVEUNIFORMNAMEPROC glow_debug_glGetActiveUniformName;
#define glGetActiveUniformName glow_debug_glGetActiveUniformName
GLOWDEF PFNGLGETPOINTERVPROC glow_debug_glGetPointerv;
#define glGetPointerv glow_debug_glGetPointerv
GLOWDEF PFNGLTEXSUBIMAGE1DPROC glow_debug_glTexSubImage1D;
#define glTexSubImage1D glow_debug_glTexSubImage1D
GLOWDEF PFNGLARRAYELEMENTPROC glow_debug_glArrayElement;
#define glArrayElement glow_debug_glArrayElement
GLOWDEF PFNGLUNIFORM2IPROC glow_debug_glUniform2i;
#define glUniform2i glow_debug_glUniform2i
GLOWDEF PFNGLVERTEXATTRIB4NUBPROC glow_debug_glVertexAttrib4Nub;
#define glVertexAttrib4Nub glow_debug_glVertexAttrib4Nub
GLOWDEF PFNGLGENFRAMEBUFFERSPROC glow_debug_glGenFramebuffers;
#define glGenFramebuffers glow_debug_glGenFramebuffers
GLOWDEF PFNGLEVALCOORD2FPROC glow_debug_glEvalCoord2f;
#define glEvalCoord2f glow_debug_glEvalCoord2f
GLOWDEF PFNGLVERTEX3DVPROC glow_debug_glVertex3dv;
#define glVertex3dv glow_debug_glVertex3dv
GLOWDEF PFNGLWINDOWPOS2IVPROC glow_debug_glWindowPos2iv;
#define glWindowPos2iv glow_debug_glWindowPos2iv
GLOWDEF PFNGLQUERYCOUNTERPROC glow_debug_glQueryCounter;
#define glQueryCounter glow_debug_glQueryCounter
GLOWDEF PFNGLTEXCOORD3DPROC glow_debug_glTexCoord3d;
#define glTexCoord3d glow_debug_glTexCoord3d
GLOWDEF PFNGLLIGHTMODELFVPROC glow_debug_glLightModelfv;
#define glLightModelfv glow_debug_glLightModelfv
GLOWDEF PFNGLGETUNIFORMFVPROC glow_debug_glGetUniformfv;
#define glGetUniformfv glow_debug_glGetUniformfv
GLOWDEF PFNGLFRAMEBUFFERTEXTURE3DPROC glow_debug_glFramebufferTexture3D;
#define glFramebufferTexture3D glow_debug_glFramebufferTexture3D
GLOWDEF PFNGLPIXELSTOREFPROC glow_debug_glPixelStoref;
#define glPixelStoref glow_debug_glPixelStoref
GLOWDEF PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glow_debug_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed glow_debug_glBindFragDataLocationIndexed
GLOWDEF PFNGLCOLORP3UIPROC glow_debug_glColorP3ui;
#define glColorP3ui glow_debug_glColorP3ui
GLOWDEF PFNGLTEXCOORD4IPROC glow_debug_glTexCoord4i;
#define glTexCoord4i glow_debug_glTexCoord4i
GLOWDEF PFNGLSECONDARYCOLOR3DPROC glow_debug_glSecondaryColor3d;
#define glSecondaryColor3d glow_debug_glSecondaryColor3d
GLOWDEF PFNGLUNIFORM4UIPROC glow_debug_glUniform4ui;
#define glUniform4ui glow_debug_glUniform4ui
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glow_debug_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream glow_debug_glDrawTransformFeedbackStream
GLOWDEF PFNGLDEPTHRANGEFPROC glow_debug_glDepthRangef;
#define glDepthRangef glow_debug_glDepthRangef
GLOWDEF PFNGLRASTERPOS2DVPROC glow_debug_glRasterPos2dv;
#define glRasterPos2dv glow_debug_glRasterPos2dv
GLOWDEF PFNGLVERTEX2SPROC glow_debug_glVertex2s;
#define glVertex2s glow_debug_glVertex2s
GLOWDEF PFNGLBINDBUFFERRANGEPROC glow_debug_glBindBufferRange;
#define glBindBufferRange glow_debug_glBindBufferRange
GLOWDEF PFNGLNORMAL3SPROC glow_debug_glNormal3s;
#define glNormal3s glow_debug_glNormal3s
GLOWDEF PFNGLINDEXIPROC glow_debug_glIndexi;
#define glIndexi glow_debug_glIndexi
GLOWDEF PFNGLPROGRAMUNIFORM3FVPROC glow_debug_glProgramUniform3fv;
#define glProgramUniform3fv glow_debug_glProgramUniform3fv
GLOWDEF PFNGLVALIDATEPROGRAMPIPELINEPROC glow_debug_glValidateProgramPipeline;
#define glValidateProgramPipeline glow_debug_glValidateProgramPipeline
GLOWDEF PFNGLCOLOR3SPROC glow_debug_glColor3s;
#define glColor3s glow_debug_glColor3s
GLOWDEF PFNGLUNIFORM3FVPROC glow_debug_glUniform3fv;
#define glUniform3fv glow_debug_glUniform3fv
GLOWDEF PFNGLISRENDERBUFFERPROC glow_debug_glIsRenderbuffer;
#define glIsRenderbuffer glow_debug_glIsRenderbuffer
GLOWDEF PFNGLUNIFORMMATRIX4DVPROC glow_debug_glUniformMatrix4dv;
#define glUniformMatrix4dv glow_debug_glUniformMatrix4dv
GLOWDEF PFNGLCLEARBUFFERSUBDATAPROC glow_debug_glClearBufferSubData;
#define glClearBufferSubData glow_debug_glClearBufferSubData
GLOWDEF PFNGLSECONDARYCOLORPOINTERPROC glow_debug_glSecondaryColorPointer;
#define glSecondaryColorPointer glow_debug_glSecondaryColorPointer
GLOWDEF PFNGLENDCONDITIONALRENDERPROC glow_debug_glEndConditionalRender;
#define glEndConditionalRender glow_debug_glEndConditionalRender
GLOWDEF PFNGLVERTEXBINDINGDIVISORPROC glow_debug_glVertexBindingDivisor;
#define glVertexBindingDivisor glow_debug_glVertexBindingDivisor
GLOWDEF PFNGLRASTERPOS2FPROC glow_debug_glRasterPos2f;
#define glRasterPos2f glow_debug_glRasterPos2f
GLOWDEF PFNGLVERTEXP4UIVPROC glow_debug_glVertexP4uiv;
#define glVertexP4uiv glow_debug_glVertexP4uiv
GLOWDEF PFNGLGETPOLYGONSTIPPLEPROC glow_debug_glGetPolygonStipple;
#define glGetPolygonStipple glow_debug_glGetPolygonStipple
GLOWDEF PFNGLRASTERPOS3SVPROC glow_debug_glRasterPos3sv;
#define glRasterPos3sv glow_debug_glRasterPos3sv
GLOWDEF PFNGLMULTITEXCOORD1DVPROC glow_debug_glMultiTexCoord1dv;
#define glMultiTexCoord1dv glow_debug_glMultiTexCoord1dv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glow_debug_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv glow_debug_glProgramUniformMatrix2x4dv
GLOWDEF PFNGLNORMAL3BVPROC glow_debug_glNormal3bv;
#define glNormal3bv glow_debug_glNormal3bv
GLOWDEF PFNGLCOLORMASKPROC glow_debug_glColorMask;
#define glColorMask glow_debug_glColorMask
GLOWDEF PFNGLCOLOR4BPROC glow_debug_glColor4b;
#define glColor4b glow_debug_glColor4b
GLOWDEF PFNGLCLEARSTENCILPROC glow_debug_glClearStencil;
#define glClearStencil glow_debug_glClearStencil
GLOWDEF PFNGLVERTEXATTRIBI2UIVPROC glow_debug_glVertexAttribI2uiv;
#define glVertexAttribI2uiv glow_debug_glVertexAttribI2uiv
GLOWDEF PFNGLUNIFORM4IVPROC glow_debug_glUniform4iv;
#define glUniform4iv glow_debug_glUniform4iv
GLOWDEF PFNGLTEXCOORD1DVPROC glow_debug_glTexCoord1dv;
#define glTexCoord1dv glow_debug_glTexCoord1dv
GLOWDEF PFNGLSCALEFPROC glow_debug_glScalef;
#define glScalef glow_debug_glScalef
GLOWDEF PFNGLCOPYTEXIMAGE2DPROC glow_debug_glCopyTexImage2D;
#define glCopyTexImage2D glow_debug_glCopyTexImage2D
GLOWDEF PFNGLSECONDARYCOLOR3USPROC glow_debug_glSecondaryColor3us;
#define glSecondaryColor3us glow_debug_glSecondaryColor3us
GLOWDEF PFNGLINDEXSVPROC glow_debug_glIndexsv;
#define glIndexsv glow_debug_glIndexsv
GLOWDEF PFNGLRASTERPOS3IVPROC glow_debug_glRasterPos3iv;
#define glRasterPos3iv glow_debug_glRasterPos3iv
GLOWDEF PFNGLGETSUBROUTINEINDEXPROC glow_debug_glGetSubroutineIndex;
#define glGetSubroutineIndex glow_debug_glGetSubroutineIndex
GLOWDEF PFNGLCOLOR4UBPROC glow_debug_glColor4ub;
#define glColor4ub glow_debug_glColor4ub
GLOWDEF PFNGLUNIFORM2FVPROC glow_debug_glUniform2fv;
#define glUniform2fv glow_debug_glUniform2fv
GLOWDEF PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glow_debug_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation glow_debug_glGetSubroutineUniformLocation
GLOWDEF PFNGLSHADERSTORAGEBLOCKBINDINGPROC glow_debug_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding glow_debug_glShaderStorageBlockBinding
GLOWDEF PFNGLTEXSUBIMAGE3DPROC glow_debug_glTexSubImage3D;
#define glTexSubImage3D glow_debug_glTexSubImage3D
GLOWDEF PFNGLLIGHTMODELFPROC glow_debug_glLightModelf;
#define glLightModelf glow_debug_glLightModelf
GLOWDEF PFNGLWINDOWPOS3FVPROC glow_debug_glWindowPos3fv;
#define glWindowPos3fv glow_debug_glWindowPos3fv
GLOWDEF PFNGLSTENCILFUNCSEPARATEPROC glow_debug_glStencilFuncSeparate;
#define glStencilFuncSeparate glow_debug_glStencilFuncSeparate
GLOWDEF PFNGLREADBUFFERPROC glow_debug_glReadBuffer;
#define glReadBuffer glow_debug_glReadBuffer
GLOWDEF PFNGLMULTITEXCOORD3FVPROC glow_debug_glMultiTexCoord3fv;
#define glMultiTexCoord3fv glow_debug_glMultiTexCoord3fv
GLOWDEF PFNGLCHECKFRAMEBUFFERSTATUSPROC glow_debug_glCheckFramebufferStatus;
#define glCheckFramebufferStatus glow_debug_glCheckFramebufferStatus
GLOWDEF PFNGLPROGRAMUNIFORM4UIVPROC glow_debug_glProgramUniform4uiv;
#define glProgramUniform4uiv glow_debug_glProgramUniform4uiv
GLOWDEF PFNGLVERTEX2IPROC glow_debug_glVertex2i;
#define glVertex2i glow_debug_glVertex2i
GLOWDEF PFNGLALPHAFUNCPROC glow_debug_glAlphaFunc;
#define glAlphaFunc glow_debug_glAlphaFunc
GLOWDEF PFNGLDRAWBUFFERSPROC glow_debug_glDrawBuffers;
#define glDrawBuffers glow_debug_glDrawBuffers
GLOWDEF PFNGLVERTEXATTRIB2FPROC glow_debug_glVertexAttrib2f;
#define glVertexAttrib2f glow_debug_glVertexAttrib2f
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glow_debug_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv glow_debug_glProgramUniformMatrix3x2fv
GLOWDEF PFNGLVERTEX2IVPROC glow_debug_glVertex2iv;
#define glVertex2iv glow_debug_glVertex2iv
GLOWDEF PFNGLCOMPRESSEDTEXIMAGE1DPROC glow_debug_glCompressedTexImage1D;
#define glCompressedTexImage1D glow_debug_glCompressedTexImage1D
GLOWDEF PFNGLVERTEX2DPROC glow_debug_glVertex2d;
#define glVertex2d glow_debug_glVertex2d
GLOWDEF PFNGLLIGHTFPROC glow_debug_glLightf;
#define glLightf glow_debug_glLightf
GLOWDEF PFNGLFENCESYNCPROC glow_debug_glFenceSync;
#define glFenceSync glow_debug_glFenceSync
GLOWDEF PFNGLVERTEXATTRIBP4UIPROC glow_debug_glVertexAttribP4ui;
#define glVertexAttribP4ui glow_debug_glVertexAttribP4ui
GLOWDEF PFNGLTEXCOORDP3UIPROC glow_debug_glTexCoordP3ui;
#define glTexCoordP3ui glow_debug_glTexCoordP3ui
GLOWDEF PFNGLTEXCOORDP4UIPROC glow_debug_glTexCoordP4ui;
#define glTexCoordP4ui glow_debug_glTexCoordP4ui
GLOWDEF PFNGLTEXBUFFERRANGEPROC glow_debug_glTexBufferRange;
#define glTexBufferRange glow_debug_glTexBufferRange
GLOWDEF PFNGLRECTIVPROC glow_debug_glRectiv;
#define glRectiv glow_debug_glRectiv
GLOWDEF PFNGLLINKPROGRAMPROC glow_debug_glLinkProgram;
#define glLinkProgram glow_debug_glLinkProgram
GLOWDEF PFNGLISTEXTUREPROC glow_debug_glIsTexture;
#define glIsTexture glow_debug_glIsTexture
GLOWDEF PFNGLGETPROGRAMIVPROC glow_debug_glGetProgramiv;
#define glGetProgramiv glow_debug_glGetProgramiv
GLOWDEF PFNGLUNIFORM1FPROC glow_debug_glUniform1f;
#define glUniform1f glow_debug_glUniform1f
GLOWDEF PFNGLGETPROGRAMINTERFACEIVPROC glow_debug_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv glow_debug_glGetProgramInterfaceiv
GLOWDEF PFNGLGETUNIFORMLOCATIONPROC glow_debug_glGetUniformLocation;
#define glGetUniformLocation glow_debug_glGetUniformLocation
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glow_debug_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex glow_debug_glDrawElementsInstancedBaseVertex
GLOWDEF PFNGLCOLOR3DVPROC glow_debug_glColor3dv;
#define glColor3dv glow_debug_glColor3dv
GLOWDEF PFNGLWINDOWPOS2SVPROC glow_debug_glWindowPos2sv;
#define glWindowPos2sv glow_debug_glWindowPos2sv
GLOWDEF PFNGLUNIFORM1FVPROC glow_debug_glUniform1fv;
#define glUniform1fv glow_debug_glUniform1fv
GLOWDEF PFNGLSAMPLERPARAMETERIUIVPROC glow_debug_glSamplerParameterIuiv;
#define glSamplerParameterIuiv glow_debug_glSamplerParameterIuiv
GLOWDEF PFNGLCOPYTEXSUBIMAGE3DPROC glow_debug_glCopyTexSubImage3D;
#define glCopyTexSubImage3D glow_debug_glCopyTexSubImage3D
GLOWDEF PFNGLGETATTRIBLOCATIONPROC glow_debug_glGetAttribLocation;
#define glGetAttribLocation glow_debug_glGetAttribLocation
GLOWDEF PFNGLUNIFORMMATRIX4X3FVPROC glow_debug_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv glow_debug_glUniformMatrix4x3fv
GLOWDEF PFNGLVERTEXATTRIBI2UIPROC glow_debug_glVertexAttribI2ui;
#define glVertexAttribI2ui glow_debug_glVertexAttribI2ui
GLOWDEF PFNGLBLENDEQUATIONSEPARATEIPROC glow_debug_glBlendEquationSeparatei;
#define glBlendEquationSeparatei glow_debug_glBlendEquationSeparatei
GLOWDEF PFNGLWINDOWPOS2FVPROC glow_debug_glWindowPos2fv;
#define glWindowPos2fv glow_debug_glWindowPos2fv
GLOWDEF PFNGLPIXELMAPFVPROC glow_debug_glPixelMapfv;
#define glPixelMapfv glow_debug_glPixelMapfv
GLOWDEF PFNGLGETACTIVEATTRIBPROC glow_debug_glGetActiveAttrib;
#define glGetActiveAttrib glow_debug_glGetActiveAttrib
GLOWDEF PFNGLGETUNIFORMSUBROUTINEUIVPROC glow_debug_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv glow_debug_glGetUniformSubroutineuiv
GLOWDEF PFNGLTEXCOORD1SVPROC glow_debug_glTexCoord1sv;
#define glTexCoord1sv glow_debug_glTexCoord1sv
GLOWDEF PFNGLVERTEXATTRIBL2DPROC glow_debug_glVertexAttribL2d;
#define glVertexAttribL2d glow_debug_glVertexAttribL2d
GLOWDEF PFNGLUNIFORM2UIVPROC glow_debug_glUniform2uiv;
#define glUniform2uiv glow_debug_glUniform2uiv
GLOWDEF PFNGLINTERLEAVEDARRAYSPROC glow_debug_glInterleavedArrays;
#define glInterleavedArrays glow_debug_glInterleavedArrays
GLOWDEF PFNGLARETEXTURESRESIDENTPROC glow_debug_glAreTexturesResident;
#define glAreTexturesResident glow_debug_glAreTexturesResident
GLOWDEF PFNGLMULTITEXCOORD1SPROC glow_debug_glMultiTexCoord1s;
#define glMultiTexCoord1s glow_debug_glMultiTexCoord1s
GLOWDEF PFNGLVERTEXATTRIBP3UIPROC glow_debug_glVertexAttribP3ui;
#define glVertexAttribP3ui glow_debug_glVertexAttribP3ui
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glow_debug_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv glow_debug_glProgramUniformMatrix4x3dv
GLOWDEF PFNGLTEXCOORD3FPROC glow_debug_glTexCoord3f;
#define glTexCoord3f glow_debug_glTexCoord3f
GLOWDEF PFNGLVERTEXATTRIBL3DVPROC glow_debug_glVertexAttribL3dv;
#define glVertexAttribL3dv glow_debug_glVertexAttribL3dv
GLOWDEF PFNGLMULTITEXCOORD4FPROC glow_debug_glMultiTexCoord4f;
#define glMultiTexCoord4f glow_debug_glMultiTexCoord4f
GLOWDEF PFNGLGETSHADERIVPROC glow_debug_glGetShaderiv;
#define glGetShaderiv glow_debug_glGetShaderiv
GLOWDEF PFNGLGETSAMPLERPARAMETERFVPROC glow_debug_glGetSamplerParameterfv;
#define glGetSamplerParameterfv glow_debug_glGetSamplerParameterfv
GLOWDEF PFNGLMULTIDRAWELEMENTSINDIRECTPROC glow_debug_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect glow_debug_glMultiDrawElementsIndirect
GLOWDEF PFNGLDEBUGMESSAGEINSERTPROC glow_debug_glDebugMessageInsert;
#define glDebugMessageInsert glow_debug_glDebugMessageInsert
GLOWDEF PFNGLMULTITEXCOORD1DPROC glow_debug_glMultiTexCoord1d;
#define glMultiTexCoord1d glow_debug_glMultiTexCoord1d
GLOWDEF PFNGLCOLOR4IPROC glow_debug_glColor4i;
#define glColor4i glow_debug_glColor4i
GLOWDEF PFNGLVERTEX2DVPROC glow_debug_glVertex2dv;
#define glVertex2dv glow_debug_glVertex2dv
GLOWDEF PFNGLDELETETEXTURESPROC glow_debug_glDeleteTextures;
#define glDeleteTextures glow_debug_glDeleteTextures
GLOWDEF PFNGLTEXPARAMETERIPROC glow_debug_glTexParameteri;
#define glTexParameteri glow_debug_glTexParameteri
GLOWDEF PFNGLRASTERPOS4SVPROC glow_debug_glRasterPos4sv;
#define glRasterPos4sv glow_debug_glRasterPos4sv
GLOWDEF PFNGLPAUSETRANSFORMFEEDBACKPROC glow_debug_glPauseTransformFeedback;
#define glPauseTransformFeedback glow_debug_glPauseTransformFeedback
GLOWDEF PFNGLINDEXDPROC glow_debug_glIndexd;
#define glIndexd glow_debug_glIndexd
GLOWDEF PFNGLVERTEXATTRIBI1IPROC glow_debug_glVertexAttribI1i;
#define glVertexAttribI1i glow_debug_glVertexAttribI1i
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glow_debug_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance glow_debug_glDrawElementsInstancedBaseInstance
GLOWDEF PFNGLCLAMPCOLORPROC glow_debug_glClampColor;
#define glClampColor glow_debug_glClampColor
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDPROC glow_debug_glDrawElementsInstanced;
#define glDrawElementsInstanced glow_debug_glDrawElementsInstanced
GLOWDEF PFNGLBINDIMAGETEXTUREPROC glow_debug_glBindImageTexture;
#define glBindImageTexture glow_debug_glBindImageTexture
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glow_debug_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced glow_debug_glDrawTransformFeedbackStreamInstanced
GLOWDEF PFNGLOBJECTPTRLABELPROC glow_debug_glObjectPtrLabel;
#define glObjectPtrLabel glow_debug_glObjectPtrLabel
GLOWDEF PFNGLCOLOR4IVPROC glow_debug_glColor4iv;
#define glColor4iv glow_debug_glColor4iv
GLOWDEF PFNGLWINDOWPOS3SVPROC glow_debug_glWindowPos3sv;
#define glWindowPos3sv glow_debug_glWindowPos3sv
GLOWDEF PFNGLVERTEXATTRIB3DVPROC glow_debug_glVertexAttrib3dv;
#define glVertexAttrib3dv glow_debug_glVertexAttrib3dv
GLOWDEF PFNGLUNIFORM3UIVPROC glow_debug_glUniform3uiv;
#define glUniform3uiv glow_debug_glUniform3uiv
GLOWDEF PFNGLFRAMEBUFFERTEXTUREPROC glow_debug_glFramebufferTexture;
#define glFramebufferTexture glow_debug_glFramebufferTexture
GLOWDEF PFNGLACTIVETEXTUREPROC glow_debug_glActiveTexture;
#define glActiveTexture glow_debug_glActiveTexture
GLOWDEF PFNGLMAP1FPROC glow_debug_glMap1f;
#define glMap1f glow_debug_glMap1f
GLOWDEF PFNGLPIXELMAPUIVPROC glow_debug_glPixelMapuiv;
#define glPixelMapuiv glow_debug_glPixelMapuiv
GLOWDEF PFNGLVIEWPORTPROC glow_debug_glViewport;
#define glViewport glow_debug_glViewport
GLOWDEF PFNGLBEGINCONDITIONALRENDERPROC glow_debug_glBeginConditionalRender;
#define glBeginConditionalRender glow_debug_glBeginConditionalRender
GLOWDEF PFNGLUNIFORMSUBROUTINESUIVPROC glow_debug_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv glow_debug_glUniformSubroutinesuiv
GLOWDEF PFNGLFRONTFACEPROC glow_debug_glFrontFace;
#define glFrontFace glow_debug_glFrontFace
GLOWDEF PFNGLSCISSORPROC glow_debug_glScissor;
#define glScissor glow_debug_glScissor
GLOWDEF PFNGLRASTERPOS3DPROC glow_debug_glRasterPos3d;
#define glRasterPos3d glow_debug_glRasterPos3d
GLOWDEF PFNGLTEXCOORD2IPROC glow_debug_glTexCoord2i;
#define glTexCoord2i glow_debug_glTexCoord2i
GLOWDEF PFNGLLIGHTMODELIPROC glow_debug_glLightModeli;
#define glLightModeli glow_debug_glLightModeli
GLOWDEF PFNGLGETBOOLEANI_VPROC glow_debug_glGetBooleani_v;
#define glGetBooleani_v glow_debug_glGetBooleani_v
GLOWDEF PFNGLGETFLOATI_VPROC glow_debug_glGetFloati_v;
#define glGetFloati_v glow_debug_glGetFloati_v
GLOWDEF PFNGLHINTPROC glow_debug_glHint;
#define glHint glow_debug_glHint
GLOWDEF PFNGLLOADTRANSPOSEMATRIXFPROC glow_debug_glLoadTransposeMatrixf;
#define glLoadTransposeMatrixf glow_debug_glLoadTransposeMatrixf
GLOWDEF PFNGLPROGRAMUNIFORM2IPROC glow_debug_glProgramUniform2i;
#define glProgramUniform2i glow_debug_glProgramUniform2i
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4FVPROC glow_debug_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv glow_debug_glProgramUniformMatrix4fv
GLOWDEF PFNGLTEXGENFVPROC glow_debug_glTexGenfv;
#define glTexGenfv glow_debug_glTexGenfv
GLOWDEF PFNGLVERTEXATTRIBI3IVPROC glow_debug_glVertexAttribI3iv;
#define glVertexAttribI3iv glow_debug_glVertexAttribI3iv
GLOWDEF PFNGLDRAWELEMENTSBASEVERTEXPROC glow_debug_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex glow_debug_glDrawElementsBaseVertex
GLOWDEF PFNGLMULTITEXCOORDP4UIVPROC glow_debug_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv glow_debug_glMultiTexCoordP4uiv
GLOWDEF PFNGLDELETEPROGRAMPIPELINESPROC glow_debug_glDeleteProgramPipelines;
#define glDeleteProgramPipelines glow_debug_glDeleteProgramPipelines
GLOWDEF PFNGLNORMAL3DPROC glow_debug_glNormal3d;
#define glNormal3d glow_debug_glNormal3d
GLOWDEF PFNGLDRAWTRANSFORMFEEDBACKPROC glow_debug_glDrawTransformFeedback;
#define glDrawTransformFeedback glow_debug_glDrawTransformFeedback
GLOWDEF PFNGLGETMATERIALIVPROC glow_debug_glGetMaterialiv;
#define glGetMaterialiv glow_debug_glGetMaterialiv
GLOWDEF PFNGLMULTTRANSPOSEMATRIXDPROC glow_debug_glMultTransposeMatrixd;
#define glMultTransposeMatrixd glow_debug_glMultTransposeMatrixd
GLOWDEF PFNGLISSHADERPROC glow_debug_glIsShader;
#define glIsShader glow_debug_glIsShader
GLOWDEF PFNGLDEBUGMESSAGECONTROLPROC glow_debug_glDebugMessageControl;
#define glDebugMessageControl glow_debug_glDebugMessageControl
GLOWDEF PFNGLRASTERPOS2SPROC glow_debug_glRasterPos2s;
#define glRasterPos2s glow_debug_glRasterPos2s
GLOWDEF PFNGLFOGCOORDFVPROC glow_debug_glFogCoordfv;
#define glFogCoordfv glow_debug_glFogCoordfv
GLOWDEF PFNGLWINDOWPOS3IVPROC glow_debug_glWindowPos3iv;
#define glWindowPos3iv glow_debug_glWindowPos3iv
GLOWDEF PFNGLBINDPROGRAMPIPELINEPROC glow_debug_glBindProgramPipeline;
#define glBindProgramPipeline glow_debug_glBindProgramPipeline
GLOWDEF PFNGLTEXCOORD3SVPROC glow_debug_glTexCoord3sv;
#define glTexCoord3sv glow_debug_glTexCoord3sv
GLOWDEF PFNGLVERTEXATTRIBL3DPROC glow_debug_glVertexAttribL3d;
#define glVertexAttribL3d glow_debug_glVertexAttribL3d
GLOWDEF PFNGLGETQUERYOBJECTIVPROC glow_debug_glGetQueryObjectiv;
#define glGetQueryObjectiv glow_debug_glGetQueryObjectiv
GLOWDEF PFNGLGETVERTEXATTRIBFVPROC glow_debug_glGetVertexAttribfv;
#define glGetVertexAttribfv glow_debug_glGetVertexAttribfv
GLOWDEF PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glow_debug_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex glow_debug_glGetProgramResourceLocationIndex
GLOWDEF PFNGLVERTEX4IPROC glow_debug_glVertex4i;
#define glVertex4i glow_debug_glVertex4i
GLOWDEF PFNGLVERTEX4SPROC glow_debug_glVertex4s;
#define glVertex4s glow_debug_glVertex4s
GLOWDEF PFNGLBLENDFUNCIPROC glow_debug_glBlendFunci;
#define glBlendFunci glow_debug_glBlendFunci
GLOWDEF PFNGLRASTERPOS3SPROC glow_debug_glRasterPos3s;
#define glRasterPos3s glow_debug_glRasterPos3s
GLOWDEF PFNGLDELETESHADERPROC glow_debug_glDeleteShader;
#define glDeleteShader glow_debug_glDeleteShader
GLOWDEF PFNGLVERTEXATTRIB4NSVPROC glow_debug_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv glow_debug_glVertexAttrib4Nsv
GLOWDEF PFNGLMULTITEXCOORDP2UIVPROC glow_debug_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv glow_debug_glMultiTexCoordP2uiv
GLOWDEF PFNGLTEXSTORAGE2DMULTISAMPLEPROC glow_debug_glTexStorage2DMultisample;
#define glTexStorage2DMultisample glow_debug_glTexStorage2DMultisample
GLOWDEF PFNGLGETTEXPARAMETERFVPROC glow_debug_glGetTexParameterfv;
#define glGetTexParameterfv glow_debug_glGetTexParameterfv
GLOWDEF PFNGLVALIDATEPROGRAMPROC glow_debug_glValidateProgram;
#define glValidateProgram glow_debug_glValidateProgram
GLOWDEF PFNGLVERTEXATTRIBI1UIPROC glow_debug_glVertexAttribI1ui;
#define glVertexAttribI1ui glow_debug_glVertexAttribI1ui
GLOWDEF PFNGLGETBUFFERPARAMETERI64VPROC glow_debug_glGetBufferParameteri64v;
#define glGetBufferParameteri64v glow_debug_glGetBufferParameteri64v
GLOWDEF PFNGLMULTITEXCOORDP4UIPROC glow_debug_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui glow_debug_glMultiTexCoordP4ui
GLOWDEF PFNGLMULTITEXCOORD1FVPROC glow_debug_glMultiTexCoord1fv;
#define glMultiTexCoord1fv glow_debug_glMultiTexCoord1fv
GLOWDEF PFNGLTEXCOORD4FVPROC glow_debug_glTexCoord4fv;
#define glTexCoord4fv glow_debug_glTexCoord4fv
GLOWDEF PFNGLUNIFORMBLOCKBINDINGPROC glow_debug_glUniformBlockBinding;
#define glUniformBlockBinding glow_debug_glUniformBlockBinding
GLOWDEF PFNGLTEXCOORDP1UIPROC glow_debug_glTexCoordP1ui;
#define glTexCoordP1ui glow_debug_glTexCoordP1ui
GLOWDEF PFNGLINDEXDVPROC glow_debug_glIndexdv;
#define glIndexdv glow_debug_glIndexdv
GLOWDEF PFNGLTEXPARAMETERIUIVPROC glow_debug_glTexParameterIuiv;
#define glTexParameterIuiv glow_debug_glTexParameterIuiv
GLOWDEF PFNGLCLEARBUFFERFVPROC glow_debug_glClearBufferfv;
#define glClearBufferfv glow_debug_glClearBufferfv
GLOWDEF PFNGLGENVERTEXARRAYSPROC glow_debug_glGenVertexArrays;
#define glGenVertexArrays glow_debug_glGenVertexArrays
GLOWDEF PFNGLPROGRAMUNIFORM1FVPROC glow_debug_glProgramUniform1fv;
#define glProgramUniform1fv glow_debug_glProgramUniform1fv
GLOWDEF PFNGLOBJECTLABELPROC glow_debug_glObjectLabel;
#define glObjectLabel glow_debug_glObjectLabel
GLOWDEF PFNGLMULTITEXCOORD4IVPROC glow_debug_glMultiTexCoord4iv;
#define glMultiTexCoord4iv glow_debug_glMultiTexCoord4iv
GLOWDEF PFNGLVERTEXATTRIB3SPROC glow_debug_glVertexAttrib3s;
#define glVertexAttrib3s glow_debug_glVertexAttrib3s
GLOWDEF PFNGLVERTEXATTRIBP2UIPROC glow_debug_glVertexAttribP2ui;
#define glVertexAttribP2ui glow_debug_glVertexAttribP2ui
GLOWDEF PFNGLMINSAMPLESHADINGPROC glow_debug_glMinSampleShading;
#define glMinSampleShading glow_debug_glMinSampleShading
GLOWDEF PFNGLVERTEXATTRIBL4DPROC glow_debug_glVertexAttribL4d;
#define glVertexAttribL4d glow_debug_glVertexAttribL4d
GLOWDEF PFNGLFOGCOORDDVPROC glow_debug_glFogCoorddv;
#define glFogCoorddv glow_debug_glFogCoorddv
GLOWDEF PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glow_debug_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex glow_debug_glDrawRangeElementsBaseVertex
GLOWDEF PFNGLGENLISTSPROC glow_debug_glGenLists;
#define glGenLists glow_debug_glGenLists
GLOWDEF PFNGLWINDOWPOS2SPROC glow_debug_glWindowPos2s;
#define glWindowPos2s glow_debug_glWindowPos2s
GLOWDEF PFNGLUNIFORM4UIVPROC glow_debug_glUniform4uiv;
#define glUniform4uiv glow_debug_glUniform4uiv
GLOWDEF PFNGLSAMPLERPARAMETERFPROC glow_debug_glSamplerParameterf;
#define glSamplerParameterf glow_debug_glSamplerParameterf
GLOWDEF PFNGLLINESTIPPLEPROC glow_debug_glLineStipple;
#define glLineStipple glow_debug_glLineStipple
GLOWDEF PFNGLPROGRAMUNIFORM2UIVPROC glow_debug_glProgramUniform2uiv;
#define glProgramUniform2uiv glow_debug_glProgramUniform2uiv
GLOWDEF PFNGLVERTEX3DPROC glow_debug_glVertex3d;
#define glVertex3d glow_debug_glVertex3d
GLOWDEF PFNGLBINDATTRIBLOCATIONPROC glow_debug_glBindAttribLocation;
#define glBindAttribLocation glow_debug_glBindAttribLocation
GLOWDEF PFNGLUNIFORMMATRIX2X4DVPROC glow_debug_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv glow_debug_glUniformMatrix2x4dv
GLOWDEF PFNGLEVALCOORD1DVPROC glow_debug_glEvalCoord1dv;
#define glEvalCoord1dv glow_debug_glEvalCoord1dv
GLOWDEF PFNGLEVALCOORD2DPROC glow_debug_glEvalCoord2d;
#define glEvalCoord2d glow_debug_glEvalCoord2d
GLOWDEF PFNGLGETPIXELMAPFVPROC glow_debug_glGetPixelMapfv;
#define glGetPixelMapfv glow_debug_glGetPixelMapfv
GLOWDEF PFNGLBINDVERTEXARRAYPROC glow_debug_glBindVertexArray;
#define glBindVertexArray glow_debug_glBindVertexArray
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3DVPROC glow_debug_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv glow_debug_glProgramUniformMatrix3dv
GLOWDEF PFNGLPIXELSTOREIPROC glow_debug_glPixelStorei;
#define glPixelStorei glow_debug_glPixelStorei
GLOWDEF PFNGLVERTEXPOINTERPROC glow_debug_glVertexPointer;
#define glVertexPointer glow_debug_glVertexPointer
GLOWDEF PFNGLFRUSTUMPROC glow_debug_glFrustum;
#define glFrustum glow_debug_glFrustum
GLOWDEF PFNGLLOADNAMEPROC glow_debug_glLoadName;
#define glLoadName glow_debug_glLoadName
GLOWDEF PFNGLSECONDARYCOLOR3UBPROC glow_debug_glSecondaryColor3ub;
#define glSecondaryColor3ub glow_debug_glSecondaryColor3ub
GLOWDEF PFNGLVERTEXATTRIB4NUSVPROC glow_debug_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv glow_debug_glVertexAttrib4Nusv
GLOWDEF PFNGLFLUSHMAPPEDBUFFERRANGEPROC glow_debug_glFlushMappedBufferRange;
#define glFlushMappedBufferRange glow_debug_glFlushMappedBufferRange
GLOWDEF PFNGLPROGRAMBINARYPROC glow_debug_glProgramBinary;
#define glProgramBinary glow_debug_glProgramBinary
GLOWDEF PFNGLTEXCOORD2FVPROC glow_debug_glTexCoord2fv;
#define glTexCoord2fv glow_debug_glTexCoord2fv
GLOWDEF PFNGLSCISSORINDEXEDVPROC glow_debug_glScissorIndexedv;
#define glScissorIndexedv glow_debug_glScissorIndexedv
GLOWDEF PFNGLEVALCOORD1FPROC glow_debug_glEvalCoord1f;
#define glEvalCoord1f glow_debug_glEvalCoord1f
GLOWDEF PFNGLUNIFORM4FPROC glow_debug_glUniform4f;
#define glUniform4f glow_debug_glUniform4f
GLOWDEF PFNGLINVALIDATEBUFFERSUBDATAPROC glow_debug_glInvalidateBufferSubData;
#define glInvalidateBufferSubData glow_debug_glInvalidateBufferSubData
GLOWDEF PFNGLMULTITEXCOORD4IPROC glow_debug_glMultiTexCoord4i;
#define glMultiTexCoord4i glow_debug_glMultiTexCoord4i
GLOWDEF PFNGLDELETEFRAMEBUFFERSPROC glow_debug_glDeleteFramebuffers;
#define glDeleteFramebuffers glow_debug_glDeleteFramebuffers
GLOWDEF PFNGLGETINTEGERVPROC glow_debug_glGetIntegerv;
#define glGetIntegerv glow_debug_glGetIntegerv
GLOWDEF PFNGLLOADTRANSPOSEMATRIXDPROC glow_debug_glLoadTransposeMatrixd;
#define glLoadTransposeMatrixd glow_debug_glLoadTransposeMatrixd
GLOWDEF PFNGLPROGRAMUNIFORM3DVPROC glow_debug_glProgramUniform3dv;
#define glProgramUniform3dv glow_debug_glProgramUniform3dv
GLOWDEF PFNGLCOLOR4SVPROC glow_debug_glColor4sv;
#define glColor4sv glow_debug_glColor4sv
GLOWDEF PFNGLMULTTRANSPOSEMATRIXFPROC glow_debug_glMultTransposeMatrixf;
#define glMultTransposeMatrixf glow_debug_glMultTransposeMatrixf
GLOWDEF PFNGLBLENDEQUATIONSEPARATEPROC glow_debug_glBlendEquationSeparate;
#define glBlendEquationSeparate glow_debug_glBlendEquationSeparate
GLOWDEF PFNGLUNIFORM1IPROC glow_debug_glUniform1i;
#define glUniform1i glow_debug_glUniform1i
GLOWDEF PFNGLBLENDEQUATIONIPROC glow_debug_glBlendEquationi;
#define glBlendEquationi glow_debug_glBlendEquationi
GLOWDEF PFNGLPROGRAMUNIFORM4DVPROC glow_debug_glProgramUniform4dv;
#define glProgramUniform4dv glow_debug_glProgramUniform4dv
GLOWDEF PFNGLMEMORYBARRIERPROC glow_debug_glMemoryBarrier;
#define glMemoryBarrier glow_debug_glMemoryBarrier
GLOWDEF PFNGLEVALCOORD1FVPROC glow_debug_glEvalCoord1fv;
#define glEvalCoord1fv glow_debug_glEvalCoord1fv
GLOWDEF PFNGLWINDOWPOS2IPROC glow_debug_glWindowPos2i;
#define glWindowPos2i glow_debug_glWindowPos2i
GLOWDEF PFNGLDELETEPROGRAMPROC glow_debug_glDeleteProgram;
#define glDeleteProgram glow_debug_glDeleteProgram
GLOWDEF PFNGLPROGRAMUNIFORM4DPROC glow_debug_glProgramUniform4d;
#define glProgramUniform4d glow_debug_glProgramUniform4d
GLOWDEF PFNGLMULTITEXCOORD2FVPROC glow_debug_glMultiTexCoord2fv;
#define glMultiTexCoord2fv glow_debug_glMultiTexCoord2fv
GLOWDEF PFNGLVERTEXP4UIPROC glow_debug_glVertexP4ui;
#define glVertexP4ui glow_debug_glVertexP4ui
GLOWDEF PFNGLGETPROGRAMPIPELINEINFOLOGPROC glow_debug_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog glow_debug_glGetProgramPipelineInfoLog
GLOWDEF PFNGLVERTEXATTRIBI3UIVPROC glow_debug_glVertexAttribI3uiv;
#define glVertexAttribI3uiv glow_debug_glVertexAttribI3uiv
GLOWDEF PFNGLVERTEXATTRIB4NUIVPROC glow_debug_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv glow_debug_glVertexAttrib4Nuiv
GLOWDEF PFNGLPIXELTRANSFERIPROC glow_debug_glPixelTransferi;
#define glPixelTransferi glow_debug_glPixelTransferi
GLOWDEF PFNGLMULTITEXCOORD3IPROC glow_debug_glMultiTexCoord3i;
#define glMultiTexCoord3i glow_debug_glMultiTexCoord3i
GLOWDEF PFNGLVERTEXATTRIBI3UIPROC glow_debug_glVertexAttribI3ui;
#define glVertexAttribI3ui glow_debug_glVertexAttribI3ui
GLOWDEF PFNGLISFRAMEBUFFERPROC glow_debug_glIsFramebuffer;
#define glIsFramebuffer glow_debug_glIsFramebuffer
GLOWDEF PFNGLVERTEXP3UIPROC glow_debug_glVertexP3ui;
#define glVertexP3ui glow_debug_glVertexP3ui
GLOWDEF PFNGLISENABLEDPROC glow_debug_glIsEnabled;
#define glIsEnabled glow_debug_glIsEnabled
GLOWDEF PFNGLSCISSORARRAYVPROC glow_debug_glScissorArrayv;
#define glScissorArrayv glow_debug_glScissorArrayv
GLOWDEF PFNGLSECONDARYCOLOR3BVPROC glow_debug_glSecondaryColor3bv;
#define glSecondaryColor3bv glow_debug_glSecondaryColor3bv
GLOWDEF PFNGLVERTEX3FPROC glow_debug_glVertex3f;
#define glVertex3f glow_debug_glVertex3f
GLOWDEF PFNGLMULTITEXCOORD2DVPROC glow_debug_glMultiTexCoord2dv;
#define glMultiTexCoord2dv glow_debug_glMultiTexCoord2dv
GLOWDEF PFNGLGETQUERYOBJECTI64VPROC glow_debug_glGetQueryObjecti64v;
#define glGetQueryObjecti64v glow_debug_glGetQueryObjecti64v
GLOWDEF PFNGLGETTEXLEVELPARAMETERIVPROC glow_debug_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glow_debug_glGetTexLevelParameteriv
GLOWDEF PFNGLWINDOWPOS3DVPROC glow_debug_glWindowPos3dv;
#define glWindowPos3dv glow_debug_glWindowPos3dv
GLOWDEF PFNGLMULTITEXCOORD1FPROC glow_debug_glMultiTexCoord1f;
#define glMultiTexCoord1f glow_debug_glMultiTexCoord1f
GLOWDEF PFNGLNORMAL3IPROC glow_debug_glNormal3i;
#define glNormal3i glow_debug_glNormal3i
GLOWDEF PFNGLRASTERPOS2IVPROC glow_debug_glRasterPos2iv;
#define glRasterPos2iv glow_debug_glRasterPos2iv
GLOWDEF PFNGLVERTEX3IVPROC glow_debug_glVertex3iv;
#define glVertex3iv glow_debug_glVertex3iv
GLOWDEF PFNGLEVALCOORD2FVPROC glow_debug_glEvalCoord2fv;
#define glEvalCoord2fv glow_debug_glEvalCoord2fv
GLOWDEF PFNGLUNIFORMMATRIX3FVPROC glow_debug_glUniformMatrix3fv;
#define glUniformMatrix3fv glow_debug_glUniformMatrix3fv
GLOWDEF PFNGLCOLOR4SPROC glow_debug_glColor4s;
#define glColor4s glow_debug_glColor4s
GLOWDEF PFNGLVERTEX4DPROC glow_debug_glVertex4d;
#define glVertex4d glow_debug_glVertex4d
GLOWDEF PFNGLGETINTERNALFORMATIVPROC glow_debug_glGetInternalformativ;
#define glGetInternalformativ glow_debug_glGetInternalformativ
GLOWDEF PFNGLUNIFORM2DPROC glow_debug_glUniform2d;
#define glUniform2d glow_debug_glUniform2d
GLOWDEF PFNGLISPROGRAMPIPELINEPROC glow_debug_glIsProgramPipeline;
#define glIsProgramPipeline glow_debug_glIsProgramPipeline
GLOWDEF PFNGLVERTEXATTRIB2SVPROC glow_debug_glVertexAttrib2sv;
#define glVertexAttrib2sv glow_debug_glVertexAttrib2sv
GLOWDEF PFNGLCOLOR4BVPROC glow_debug_glColor4bv;
#define glColor4bv glow_debug_glColor4bv
GLOWDEF PFNGLVERTEX4FPROC glow_debug_glVertex4f;
#define glVertex4f glow_debug_glVertex4f
GLOWDEF PFNGLGETVERTEXATTRIBDVPROC glow_debug_glGetVertexAttribdv;
#define glGetVertexAttribdv glow_debug_glGetVertexAttribdv
GLOWDEF PFNGLPROGRAMUNIFORM4IPROC glow_debug_glProgramUniform4i;
#define glProgramUniform4i glow_debug_glProgramUniform4i
GLOWDEF PFNGLGETDOUBLEVPROC glow_debug_glGetDoublev;
#define glGetDoublev glow_debug_glGetDoublev
GLOWDEF PFNGLGETPIXELMAPUSVPROC glow_debug_glGetPixelMapusv;
#define glGetPixelMapusv glow_debug_glGetPixelMapusv
GLOWDEF PFNGLPROGRAMUNIFORM4IVPROC glow_debug_glProgramUniform4iv;
#define glProgramUniform4iv glow_debug_glProgramUniform4iv
GLOWDEF PFNGLPOPDEBUGGROUPPROC glow_debug_glPopDebugGroup;
#define glPopDebugGroup glow_debug_glPopDebugGroup
GLOWDEF PFNGLLOGICOPPROC glow_debug_glLogicOp;
#define glLogicOp glow_debug_glLogicOp
GLOWDEF PFNGLWINDOWPOS2DPROC glow_debug_glWindowPos2d;
#define glWindowPos2d glow_debug_glWindowPos2d
GLOWDEF PFNGLMAPBUFFERRANGEPROC glow_debug_glMapBufferRange;
#define glMapBufferRange glow_debug_glMapBufferRange
GLOWDEF PFNGLFOGCOORDFPROC glow_debug_glFogCoordf;
#define glFogCoordf glow_debug_glFogCoordf
GLOWDEF PFNGLNORMAL3DVPROC glow_debug_glNormal3dv;
#define glNormal3dv glow_debug_glNormal3dv
GLOWDEF PFNGLGETSHADERPRECISIONFORMATPROC glow_debug_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat glow_debug_glGetShaderPrecisionFormat
GLOWDEF PFNGLCOLOR4DPROC glow_debug_glColor4d;
#define glColor4d glow_debug_glColor4d
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2FVPROC glow_debug_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv glow_debug_glProgramUniformMatrix2fv
GLOWDEF PFNGLTEXSTORAGE3DPROC glow_debug_glTexStorage3D;
#define glTexStorage3D glow_debug_glTexStorage3D
GLOWDEF PFNGLCLEARBUFFERIVPROC glow_debug_glClearBufferiv;
#define glClearBufferiv glow_debug_glClearBufferiv
GLOWDEF PFNGLRECTFPROC glow_debug_glRectf;
#define glRectf glow_debug_glRectf
GLOWDEF PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glow_debug_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying glow_debug_glGetTransformFeedbackVarying
GLOWDEF PFNGLMULTITEXCOORDP3UIVPROC glow_debug_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv glow_debug_glMultiTexCoordP3uiv
GLOWDEF PFNGLGETDOUBLEI_VPROC glow_debug_glGetDoublei_v;
#define glGetDoublei_v glow_debug_glGetDoublei_v
GLOWDEF PFNGLTEXPARAMETERFVPROC glow_debug_glTexParameterfv;
#define glTexParameterfv glow_debug_glTexParameterfv
GLOWDEF PFNGLUNIFORMMATRIX2FVPROC glow_debug_glUniformMatrix2fv;
#define glUniformMatrix2fv glow_debug_glUniformMatrix2fv
GLOWDEF PFNGLGETFRAGDATALOCATIONPROC glow_debug_glGetFragDataLocation;
#define glGetFragDataLocation glow_debug_glGetFragDataLocation
GLOWDEF PFNGLVERTEXP2UIVPROC glow_debug_glVertexP2uiv;
#define glVertexP2uiv glow_debug_glVertexP2uiv
GLOWDEF PFNGLUNIFORM4DPROC glow_debug_glUniform4d;
#define glUniform4d glow_debug_glUniform4d
GLOWDEF PFNGLGETUNIFORMDVPROC glow_debug_glGetUniformdv;
#define glGetUniformdv glow_debug_glGetUniformdv
GLOWDEF PFNGLINDEXSPROC glow_debug_glIndexs;
#define glIndexs glow_debug_glIndexs
GLOWDEF PFNGLPUSHMATRIXPROC glow_debug_glPushMatrix;
#define glPushMatrix glow_debug_glPushMatrix
GLOWDEF PFNGLUNIFORM4FVPROC glow_debug_glUniform4fv;
#define glUniform4fv glow_debug_glUniform4fv
GLOWDEF PFNGLTEXCOORDP3UIVPROC glow_debug_glTexCoordP3uiv;
#define glTexCoordP3uiv glow_debug_glTexCoordP3uiv
GLOWDEF PFNGLPROGRAMUNIFORM2IVPROC glow_debug_glProgramUniform2iv;
#define glProgramUniform2iv glow_debug_glProgramUniform2iv
GLOWDEF PFNGLCOLOR4UBVPROC glow_debug_glColor4ubv;
#define glColor4ubv glow_debug_glColor4ubv
GLOWDEF PFNGLMULTITEXCOORD4FVPROC glow_debug_glMultiTexCoord4fv;
#define glMultiTexCoord4fv glow_debug_glMultiTexCoord4fv
GLOWDEF PFNGLGETSHADERSOURCEPROC glow_debug_glGetShaderSource;
#define glGetShaderSource glow_debug_glGetShaderSource
GLOWDEF PFNGLVERTEXATTRIBI2IVPROC glow_debug_glVertexAttribI2iv;
#define glVertexAttribI2iv glow_debug_glVertexAttribI2iv
GLOWDEF PFNGLVERTEXATTRIBI4UBVPROC glow_debug_glVertexAttribI4ubv;
#define glVertexAttribI4ubv glow_debug_glVertexAttribI4ubv
GLOWDEF PFNGLPROGRAMUNIFORM2FPROC glow_debug_glProgramUniform2f;
#define glProgramUniform2f glow_debug_glProgramUniform2f
GLOWDEF PFNGLPUSHDEBUGGROUPPROC glow_debug_glPushDebugGroup;
#define glPushDebugGroup glow_debug_glPushDebugGroup
GLOWDEF PFNGLTEXPARAMETERIVPROC glow_debug_glTexParameteriv;
#define glTexParameteriv glow_debug_glTexParameteriv
GLOWDEF PFNGLDRAWARRAYSINSTANCEDPROC glow_debug_glDrawArraysInstanced;
#define glDrawArraysInstanced glow_debug_glDrawArraysInstanced
GLOWDEF PFNGLCLEARDEPTHFPROC glow_debug_glClearDepthf;
#define glClearDepthf glow_debug_glClearDepthf
GLOWDEF PFNGLGENPROGRAMPIPELINESPROC glow_debug_glGenProgramPipelines;
#define glGenProgramPipelines glow_debug_glGenProgramPipelines
GLOWDEF PFNGLINVALIDATEFRAMEBUFFERPROC glow_debug_glInvalidateFramebuffer;
#define glInvalidateFramebuffer glow_debug_glInvalidateFramebuffer
GLOWDEF PFNGLMULTITEXCOORD4SVPROC glow_debug_glMultiTexCoord4sv;
#define glMultiTexCoord4sv glow_debug_glMultiTexCoord4sv
GLOWDEF PFNGLGETPIXELMAPUIVPROC glow_debug_glGetPixelMapuiv;
#define glGetPixelMapuiv glow_debug_glGetPixelMapuiv
GLOWDEF PFNGLCOLOR3SVPROC glow_debug_glColor3sv;
#define glColor3sv glow_debug_glColor3sv
GLOWDEF PFNGLEVALPOINT1PROC glow_debug_glEvalPoint1;
#define glEvalPoint1 glow_debug_glEvalPoint1
GLOWDEF PFNGLTRANSLATEDPROC glow_debug_glTranslated;
#define glTranslated glow_debug_glTranslated
GLOWDEF PFNGLVERTEXATTRIBI2IPROC glow_debug_glVertexAttribI2i;
#define glVertexAttribI2i glow_debug_glVertexAttribI2i
GLOWDEF PFNGLGETTEXPARAMETERIUIVPROC glow_debug_glGetTexParameterIuiv;
#define glGetTexParameterIuiv glow_debug_glGetTexParameterIuiv
GLOWDEF PFNGLCOLOR4USPROC glow_debug_glColor4us;
#define glColor4us glow_debug_glColor4us
GLOWDEF PFNGLVERTEXATTRIBI4BVPROC glow_debug_glVertexAttribI4bv;
#define glVertexAttribI4bv glow_debug_glVertexAttribI4bv
GLOWDEF PFNGLRELEASESHADERCOMPILERPROC glow_debug_glReleaseShaderCompiler;
#define glReleaseShaderCompiler glow_debug_glReleaseShaderCompiler
GLOWDEF PFNGLTEXIMAGE1DPROC glow_debug_glTexImage1D;
#define glTexImage1D glow_debug_glTexImage1D
GLOWDEF PFNGLCOLOR3UIPROC glow_debug_glColor3ui;
#define glColor3ui glow_debug_glColor3ui
GLOWDEF PFNGLTEXCOORD1IPROC glow_debug_glTexCoord1i;
#define glTexCoord1i glow_debug_glTexCoord1i
GLOWDEF PFNGLVERTEXATTRIB4FVPROC glow_debug_glVertexAttrib4fv;
#define glVertexAttrib4fv glow_debug_glVertexAttrib4fv
GLOWDEF PFNGLBEGINTRANSFORMFEEDBACKPROC glow_debug_glBeginTransformFeedback;
#define glBeginTransformFeedback glow_debug_glBeginTransformFeedback
GLOWDEF PFNGLGETERRORPROC glow_debug_glGetError;
#define glGetError glow_debug_glGetError
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4DVPROC glow_debug_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv glow_debug_glProgramUniformMatrix4dv
GLOWDEF PFNGLGETPROGRAMBINARYPROC glow_debug_glGetProgramBinary;
#define glGetProgramBinary glow_debug_glGetProgramBinary
GLOWDEF PFNGLPROGRAMUNIFORM2DVPROC glow_debug_glProgramUniform2dv;
#define glProgramUniform2dv glow_debug_glProgramUniform2dv
GLOWDEF PFNGLDRAWBUFFERPROC glow_debug_glDrawBuffer;
#define glDrawBuffer glow_debug_glDrawBuffer
GLOWDEF PFNGLPIXELZOOMPROC glow_debug_glPixelZoom;
#define glPixelZoom glow_debug_glPixelZoom
GLOWDEF PFNGLMULTITEXCOORD1IPROC glow_debug_glMultiTexCoord1i;
#define glMultiTexCoord1i glow_debug_glMultiTexCoord1i
GLOWDEF PFNGLUNIFORM3IPROC glow_debug_glUniform3i;
#define glUniform3i glow_debug_glUniform3i
GLOWDEF PFNGLGETOBJECTLABELPROC glow_debug_glGetObjectLabel;
#define glGetObjectLabel glow_debug_glGetObjectLabel
GLOWDEF PFNGLRASTERPOS4IPROC glow_debug_glRasterPos4i;
#define glRasterPos4i glow_debug_glRasterPos4i
GLOWDEF PFNGLPOINTPARAMETERFPROC glow_debug_glPointParameterf;
#define glPointParameterf glow_debug_glPointParameterf
GLOWDEF PFNGLSAMPLERPARAMETERFVPROC glow_debug_glSamplerParameterfv;
#define glSamplerParameterfv glow_debug_glSamplerParameterfv
GLOWDEF PFNGLINDEXIVPROC glow_debug_glIndexiv;
#define glIndexiv glow_debug_glIndexiv
GLOWDEF PFNGLWINDOWPOS3SPROC glow_debug_glWindowPos3s;
#define glWindowPos3s glow_debug_glWindowPos3s
GLOWDEF PFNGLGETBUFFERPARAMETERIVPROC glow_debug_glGetBufferParameteriv;
#define glGetBufferParameteriv glow_debug_glGetBufferParameteriv
GLOWDEF PFNGLVERTEXATTRIBL2DVPROC glow_debug_glVertexAttribL2dv;
#define glVertexAttribL2dv glow_debug_glVertexAttribL2dv
GLOWDEF PFNGLLINEWIDTHPROC glow_debug_glLineWidth;
#define glLineWidth glow_debug_glLineWidth
GLOWDEF PFNGLUNIFORM4IPROC glow_debug_glUniform4i;
#define glUniform4i glow_debug_glUniform4i
GLOWDEF PFNGLRASTERPOS4FPROC glow_debug_glRasterPos4f;
#define glRasterPos4f glow_debug_glRasterPos4f
GLOWDEF PFNGLTEXCOORD3IVPROC glow_debug_glTexCoord3iv;
#define glTexCoord3iv glow_debug_glTexCoord3iv
GLOWDEF PFNGLGETVERTEXATTRIBIIVPROC glow_debug_glGetVertexAttribIiv;
#define glGetVertexAttribIiv glow_debug_glGetVertexAttribIiv
GLOWDEF PFNGLFRAMEBUFFERRENDERBUFFERPROC glow_debug_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer glow_debug_glFramebufferRenderbuffer
GLOWDEF PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glow_debug_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv glow_debug_glGetFramebufferAttachmentParameteriv
GLOWDEF PFNGLENDPROC glow_debug_glEnd;
#define glEnd glow_debug_glEnd
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glow_debug_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv glow_debug_glProgramUniformMatrix3x4fv
GLOWDEF PFNGLBLENDFUNCSEPARATEIPROC glow_debug_glBlendFuncSeparatei;
#define glBlendFuncSeparatei glow_debug_glBlendFuncSeparatei
GLOWDEF PFNGLSTENCILOPSEPARATEPROC glow_debug_glStencilOpSeparate;
#define glStencilOpSeparate glow_debug_glStencilOpSeparate
GLOWDEF PFNGLBEGINQUERYPROC glow_debug_glBeginQuery;
#define glBeginQuery glow_debug_glBeginQuery
GLOWDEF PFNGLVERTEXATTRIB1DPROC glow_debug_glVertexAttrib1d;
#define glVertexAttrib1d glow_debug_glVertexAttrib1d
GLOWDEF PFNGLPROGRAMUNIFORM3DPROC glow_debug_glProgramUniform3d;
#define glProgramUniform3d glow_debug_glProgramUniform3d
GLOWDEF PFNGLVERTEXATTRIB4DVPROC glow_debug_glVertexAttrib4dv;
#define glVertexAttrib4dv glow_debug_glVertexAttrib4dv
GLOWDEF PFNGLSCALEDPROC glow_debug_glScaled;
#define glScaled glow_debug_glScaled
GLOWDEF PFNGLGETACTIVEUNIFORMPROC glow_debug_glGetActiveUniform;
#define glGetActiveUniform glow_debug_glGetActiveUniform
GLOWDEF PFNGLVERTEXATTRIB4NUBVPROC glow_debug_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv glow_debug_glVertexAttrib4Nubv
GLOWDEF PFNGLUNIFORMMATRIX3X4DVPROC glow_debug_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv glow_debug_glUniformMatrix3x4dv
GLOWDEF PFNGLPOINTPARAMETERIVPROC glow_debug_glPointParameteriv;
#define glPointParameteriv glow_debug_glPointParameteriv
GLOWDEF PFNGLUNIFORMMATRIX4X2DVPROC glow_debug_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv glow_debug_glUniformMatrix4x2dv
GLOWDEF PFNGLPROGRAMUNIFORM2FVPROC glow_debug_glProgramUniform2fv;
#define glProgramUniform2fv glow_debug_glProgramUniform2fv
GLOWDEF PFNGLSTENCILMASKPROC glow_debug_glStencilMask;
#define glStencilMask glow_debug_glStencilMask
GLOWDEF PFNGLGETPROGRAMSTAGEIVPROC glow_debug_glGetProgramStageiv;
#define glGetProgramStageiv glow_debug_glGetProgramStageiv
GLOWDEF PFNGLPROGRAMUNIFORM3UIVPROC glow_debug_glProgramUniform3uiv;
#define glProgramUniform3uiv glow_debug_glProgramUniform3uiv
GLOWDEF PFNGLVERTEXP2UIPROC glow_debug_glVertexP2ui;
#define glVertexP2ui glow_debug_glVertexP2ui
GLOWDEF PFNGLPROGRAMUNIFORM1DPROC glow_debug_glProgramUniform1d;
#define glProgramUniform1d glow_debug_glProgramUniform1d
GLOWDEF PFNGLVERTEXATTRIB1DVPROC glow_debug_glVertexAttrib1dv;
#define glVertexAttrib1dv glow_debug_glVertexAttrib1dv
GLOWDEF PFNGLCALLLISTPROC glow_debug_glCallList;
#define glCallList glow_debug_glCallList
GLOWDEF PFNGLWINDOWPOS2FPROC glow_debug_glWindowPos2f;
#define glWindowPos2f glow_debug_glWindowPos2f
GLOWDEF PFNGLGENBUFFERSPROC glow_debug_glGenBuffers;
#define glGenBuffers glow_debug_glGenBuffers
GLOWDEF PFNGLBUFFERSUBDATAPROC glow_debug_glBufferSubData;
#define glBufferSubData glow_debug_glBufferSubData
GLOWDEF PFNGLVERTEXATTRIB4UBVPROC glow_debug_glVertexAttrib4ubv;
#define glVertexAttrib4ubv glow_debug_glVertexAttrib4ubv
GLOWDEF PFNGLRECTIPROC glow_debug_glRecti;
#define glRecti glow_debug_glRecti
GLOWDEF PFNGLTEXCOORDPOINTERPROC glow_debug_glTexCoordPointer;
#define glTexCoordPointer glow_debug_glTexCoordPointer
GLOWDEF PFNGLMULTITEXCOORD2SPROC glow_debug_glMultiTexCoord2s;
#define glMultiTexCoord2s glow_debug_glMultiTexCoord2s
GLOWDEF PFNGLVERTEXATTRIBI3IPROC glow_debug_glVertexAttribI3i;
#define glVertexAttribI3i glow_debug_glVertexAttribI3i
GLOWDEF PFNGLVIEWPORTARRAYVPROC glow_debug_glViewportArrayv;
#define glViewportArrayv glow_debug_glViewportArrayv
GLOWDEF PFNGLRECTDPROC glow_debug_glRectd;
#define glRectd glow_debug_glRectd
GLOWDEF PFNGLDRAWARRAYSPROC glow_debug_glDrawArrays;
#define glDrawArrays glow_debug_glDrawArrays
GLOWDEF PFNGLCREATESHADERPROC glow_debug_glCreateShader;
#define glCreateShader glow_debug_glCreateShader
GLOWDEF PFNGLPROGRAMUNIFORM3IPROC glow_debug_glProgramUniform3i;
#define glProgramUniform3i glow_debug_glProgramUniform3i
GLOWDEF PFNGLVERTEXATTRIBBINDINGPROC glow_debug_glVertexAttribBinding;
#define glVertexAttribBinding glow_debug_glVertexAttribBinding
GLOWDEF PFNGLTEXCOORD2DVPROC glow_debug_glTexCoord2dv;
#define glTexCoord2dv glow_debug_glTexCoord2dv
GLOWDEF PFNGLCREATEPROGRAMPROC glow_debug_glCreateProgram;
#define glCreateProgram glow_debug_glCreateProgram
GLOWDEF PFNGLTEXSTORAGE2DPROC glow_debug_glTexStorage2D;
#define glTexStorage2D glow_debug_glTexStorage2D
GLOWDEF PFNGLTEXCOORD2FPROC glow_debug_glTexCoord2f;
#define glTexCoord2f glow_debug_glTexCoord2f
GLOWDEF PFNGLMULTITEXCOORD3SPROC glow_debug_glMultiTexCoord3s;
#define glMultiTexCoord3s glow_debug_glMultiTexCoord3s
GLOWDEF PFNGLVERTEXATTRIB4BVPROC glow_debug_glVertexAttrib4bv;
#define glVertexAttrib4bv glow_debug_glVertexAttrib4bv
GLOWDEF PFNGLCOLOR3FVPROC glow_debug_glColor3fv;
#define glColor3fv glow_debug_glColor3fv
GLOWDEF PFNGLFOGIVPROC glow_debug_glFogiv;
#define glFogiv glow_debug_glFogiv
GLOWDEF PFNGLTEXENVIVPROC glow_debug_glTexEnviv;
#define glTexEnviv glow_debug_glTexEnviv
GLOWDEF PFNGLTEXGENDPROC glow_debug_glTexGend;
#define glTexGend glow_debug_glTexGend
GLOWDEF PFNGLPOPCLIENTATTRIBPROC glow_debug_glPopClientAttrib;
#define glPopClientAttrib glow_debug_glPopClientAttrib
GLOWDEF PFNGLSTENCILMASKSEPARATEPROC glow_debug_glStencilMaskSeparate;
#define glStencilMaskSeparate glow_debug_glStencilMaskSeparate
GLOWDEF PFNGLSECONDARYCOLORP3UIVPROC glow_debug_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv glow_debug_glSecondaryColorP3uiv
GLOWDEF PFNGLFINISHPROC glow_debug_glFinish;
#define glFinish glow_debug_glFinish
GLOWDEF PFNGLVERTEXATTRIB1SPROC glow_debug_glVertexAttrib1s;
#define glVertexAttrib1s glow_debug_glVertexAttrib1s
GLOWDEF PFNGLCOLOR3UBVPROC glow_debug_glColor3ubv;
#define glColor3ubv glow_debug_glColor3ubv
GLOWDEF PFNGLVERTEXATTRIBP2UIVPROC glow_debug_glVertexAttribP2uiv;
#define glVertexAttribP2uiv glow_debug_glVertexAttribP2uiv
GLOWDEF PFNGLMULTITEXCOORD3DVPROC glow_debug_glMultiTexCoord3dv;
#define glMultiTexCoord3dv glow_debug_glMultiTexCoord3dv
GLOWDEF PFNGLUNIFORM1DPROC glow_debug_glUniform1d;
#define glUniform1d glow_debug_glUniform1d
GLOWDEF PFNGLVERTEX3FVPROC glow_debug_glVertex3fv;
#define glVertex3fv glow_debug_glVertex3fv
GLOWDEF PFNGLENDTRANSFORMFEEDBACKPROC glow_debug_glEndTransformFeedback;
#define glEndTransformFeedback glow_debug_glEndTransformFeedback
GLOWDEF PFNGLVERTEX2SVPROC glow_debug_glVertex2sv;
#define glVertex2sv glow_debug_glVertex2sv
GLOWDEF PFNGLNORMAL3FPROC glow_debug_glNormal3f;
#define glNormal3f glow_debug_glNormal3f
GLOWDEF PFNGLFOGCOORDDPROC glow_debug_glFogCoordd;
#define glFogCoordd glow_debug_glFogCoordd
GLOWDEF PFNGLDETACHSHADERPROC glow_debug_glDetachShader;
#define glDetachShader glow_debug_glDetachShader
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glow_debug_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv glow_debug_glProgramUniformMatrix4x2fv
GLOWDEF PFNGLEVALMESH2PROC glow_debug_glEvalMesh2;
#define glEvalMesh2 glow_debug_glEvalMesh2
GLOWDEF PFNGLTEXIMAGE3DPROC glow_debug_glTexImage3D;
#define glTexImage3D glow_debug_glTexImage3D
GLOWDEF PFNGLCOLORMASKIPROC glow_debug_glColorMaski;
#define glColorMaski glow_debug_glColorMaski
GLOWDEF PFNGLCLEARPROC glow_debug_glClear;
#define glClear glow_debug_glClear
GLOWDEF PFNGLISENABLEDIPROC glow_debug_glIsEnabledi;
#define glIsEnabledi glow_debug_glIsEnabledi
GLOWDEF PFNGLTEXCOORDP1UIVPROC glow_debug_glTexCoordP1uiv;
#define glTexCoordP1uiv glow_debug_glTexCoordP1uiv
GLOWDEF PFNGLTEXCOORDP4UIVPROC glow_debug_glTexCoordP4uiv;
#define glTexCoordP4uiv glow_debug_glTexCoordP4uiv
GLOWDEF PFNGLTEXCOORD4FPROC glow_debug_glTexCoord4f;
#define glTexCoord4f glow_debug_glTexCoord4f
GLOWDEF PFNGLBINDRENDERBUFFERPROC glow_debug_glBindRenderbuffer;
#define glBindRenderbuffer glow_debug_glBindRenderbuffer
GLOWDEF PFNGLTEXTUREVIEWPROC glow_debug_glTextureView;
#define glTextureView glow_debug_glTextureView
GLOWDEF PFNGLVERTEXATTRIB2SPROC glow_debug_glVertexAttrib2s;
#define glVertexAttrib2s glow_debug_glVertexAttrib2s
GLOWDEF PFNGLMATERIALFPROC glow_debug_glMaterialf;
#define glMaterialf glow_debug_glMaterialf
GLOWDEF PFNGLEVALCOORD2DVPROC glow_debug_glEvalCoord2dv;
#define glEvalCoord2dv glow_debug_glEvalCoord2dv
GLOWDEF PFNGLVERTEXATTRIBDIVISORPROC glow_debug_glVertexAttribDivisor;
#define glVertexAttribDivisor glow_debug_glVertexAttribDivisor
GLOWDEF PFNGLDRAWELEMENTSINDIRECTPROC glow_debug_glDrawElementsIndirect;
#define glDrawElementsIndirect glow_debug_glDrawElementsIndirect
GLOWDEF PFNGLDEPTHRANGEPROC glow_debug_glDepthRange;
#define glDepthRange glow_debug_glDepthRange
GLOWDEF PFNGLSECONDARYCOLOR3UIVPROC glow_debug_glSecondaryColor3uiv;
#define glSecondaryColor3uiv glow_debug_glSecondaryColor3uiv
GLOWDEF PFNGLCLIENTWAITSYNCPROC glow_debug_glClientWaitSync;
#define glClientWaitSync glow_debug_glClientWaitSync
GLOWDEF PFNGLCOLOR3DPROC glow_debug_glColor3d;
#define glColor3d glow_debug_glColor3d
GLOWDEF PFNGLVERTEX4IVPROC glow_debug_glVertex4iv;
#define glVertex4iv glow_debug_glVertex4iv
GLOWDEF PFNGLNORMALPOINTERPROC glow_debug_glNormalPointer;
#define glNormalPointer glow_debug_glNormalPointer
GLOWDEF PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glow_debug_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D glow_debug_glCompressedTexSubImage1D
GLOWDEF PFNGLDELETERENDERBUFFERSPROC glow_debug_glDeleteRenderbuffers;
#define glDeleteRenderbuffers glow_debug_glDeleteRenderbuffers
GLOWDEF PFNGLTEXCOORD1IVPROC glow_debug_glTexCoord1iv;
#define glTexCoord1iv glow_debug_glTexCoord1iv
GLOWDEF PFNGLCOLOR3USVPROC glow_debug_glColor3usv;
#define glColor3usv glow_debug_glColor3usv
GLOWDEF PFNGLSELECTBUFFERPROC glow_debug_glSelectBuffer;
#define glSelectBuffer glow_debug_glSelectBuffer
GLOWDEF PFNGLPROGRAMUNIFORM1IPROC glow_debug_glProgramUniform1i;
#define glProgramUniform1i glow_debug_glProgramUniform1i
GLOWDEF PFNGLMULTITEXCOORD3DPROC glow_debug_glMultiTexCoord3d;
#define glMultiTexCoord3d glow_debug_glMultiTexCoord3d
GLOWDEF PFNGLDELETESYNCPROC glow_debug_glDeleteSync;
#define glDeleteSync glow_debug_glDeleteSync
GLOWDEF PFNGLPROGRAMUNIFORM4UIPROC glow_debug_glProgramUniform4ui;
#define glProgramUniform4ui glow_debug_glProgramUniform4ui
GLOWDEF PFNGLMATERIALFVPROC glow_debug_glMaterialfv;
#define glMaterialfv glow_debug_glMaterialfv
GLOWDEF PFNGLGENSAMPLERSPROC glow_debug_glGenSamplers;
#define glGenSamplers glow_debug_glGenSamplers
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glow_debug_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv glow_debug_glProgramUniformMatrix3x2dv
GLOWDEF PFNGLGETVERTEXATTRIBIVPROC glow_debug_glGetVertexAttribiv;
#define glGetVertexAttribiv glow_debug_glGetVertexAttribiv
GLOWDEF PFNGLCOLOR3UIVPROC glow_debug_glColor3uiv;
#define glColor3uiv glow_debug_glColor3uiv
GLOWDEF PFNGLISQUERYPROC glow_debug_glIsQuery;
#define glIsQuery glow_debug_glIsQuery
GLOWDEF PFNGLGENTRANSFORMFEEDBACKSPROC glow_debug_glGenTransformFeedbacks;
#define glGenTransformFeedbacks glow_debug_glGenTransformFeedbacks
GLOWDEF PFNGLSTENCILFUNCPROC glow_debug_glStencilFunc;
#define glStencilFunc glow_debug_glStencilFunc
GLOWDEF PFNGLEVALPOINT2PROC glow_debug_glEvalPoint2;
#define glEvalPoint2 glow_debug_glEvalPoint2
GLOWDEF PFNGLGETPROGRAMINFOLOGPROC glow_debug_glGetProgramInfoLog;
#define glGetProgramInfoLog glow_debug_glGetProgramInfoLog
GLOWDEF PFNGLVERTEXATTRIB4UIVPROC glow_debug_glVertexAttrib4uiv;
#define glVertexAttrib4uiv glow_debug_glVertexAttrib4uiv
GLOWDEF PFNGLGENERATEMIPMAPPROC glow_debug_glGenerateMipmap;
#define glGenerateMipmap glow_debug_glGenerateMipmap
GLOWDEF PFNGLGETLIGHTFVPROC glow_debug_glGetLightfv;
#define glGetLightfv glow_debug_glGetLightfv
GLOWDEF PFNGLPRIMITIVERESTARTINDEXPROC glow_debug_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex glow_debug_glPrimitiveRestartIndex
GLOWDEF PFNGLREADPIXELSPROC glow_debug_glReadPixels;
#define glReadPixels glow_debug_glReadPixels
GLOWDEF PFNGLENABLEVERTEXATTRIBARRAYPROC glow_debug_glEnableVertexAttribArray;
#define glEnableVertexAttribArray glow_debug_glEnableVertexAttribArray
GLOWDEF PFNGLUSEPROGRAMPROC glow_debug_glUseProgram;
#define glUseProgram glow_debug_glUseProgram
GLOWDEF PFNGLVERTEXATTRIB3FVPROC glow_debug_glVertexAttrib3fv;
#define glVertexAttrib3fv glow_debug_glVertexAttrib3fv
GLOWDEF PFNGLMULTITEXCOORD1SVPROC glow_debug_glMultiTexCoord1sv;
#define glMultiTexCoord1sv glow_debug_glMultiTexCoord1sv
GLOWDEF PFNGLMULTITEXCOORD2DPROC glow_debug_glMultiTexCoord2d;
#define glMultiTexCoord2d glow_debug_glMultiTexCoord2d
GLOWDEF PFNGLSECONDARYCOLOR3UBVPROC glow_debug_glSecondaryColor3ubv;
#define glSecondaryColor3ubv glow_debug_glSecondaryColor3ubv
GLOWDEF PFNGLCOMPILESHADERPROC glow_debug_glCompileShader;
#define glCompileShader glow_debug_glCompileShader
GLOWDEF PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glow_debug_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv glow_debug_glGetActiveAtomicCounterBufferiv
GLOWDEF PFNGLDELETELISTSPROC glow_debug_glDeleteLists;
#define glDeleteLists glow_debug_glDeleteLists
GLOWDEF PFNGLTEXCOORD4SPROC glow_debug_glTexCoord4s;
#define glTexCoord4s glow_debug_glTexCoord4s
GLOWDEF PFNGLGENRENDERBUFFERSPROC glow_debug_glGenRenderbuffers;
#define glGenRenderbuffers glow_debug_glGenRenderbuffers
GLOWDEF PFNGLISTRANSFORMFEEDBACKPROC glow_debug_glIsTransformFeedback;
#define glIsTransformFeedback glow_debug_glIsTransformFeedback
GLOWDEF PFNGLBEGINQUERYINDEXEDPROC glow_debug_glBeginQueryIndexed;
#define glBeginQueryIndexed glow_debug_glBeginQueryIndexed
GLOWDEF PFNGLCOLOR4FPROC glow_debug_glColor4f;
#define glColor4f glow_debug_glColor4f
GLOWDEF PFNGLTEXCOORD3IPROC glow_debug_glTexCoord3i;
#define glTexCoord3i glow_debug_glTexCoord3i
GLOWDEF PFNGLMULTITEXCOORD3SVPROC glow_debug_glMultiTexCoord3sv;
#define glMultiTexCoord3sv glow_debug_glMultiTexCoord3sv
GLOWDEF PFNGLGETRENDERBUFFERPARAMETERIVPROC glow_debug_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv glow_debug_glGetRenderbufferParameteriv
GLOWDEF PFNGLRASTERPOS2FVPROC glow_debug_glRasterPos2fv;
#define glRasterPos2fv glow_debug_glRasterPos2fv
GLOWDEF PFNGLBINDBUFFERBASEPROC glow_debug_glBindBufferBase;
#define glBindBufferBase glow_debug_glBindBufferBase
GLOWDEF PFNGLCLEARBUFFERFIPROC glow_debug_glClearBufferfi;
#define glClearBufferfi glow_debug_glClearBufferfi
GLOWDEF PFNGLSCISSORINDEXEDPROC glow_debug_glScissorIndexed;
#define glScissorIndexed glow_debug_glScissorIndexed
GLOWDEF PFNGLMULTITEXCOORD2SVPROC glow_debug_glMultiTexCoord2sv;
#define glMultiTexCoord2sv glow_debug_glMultiTexCoord2sv
GLOWDEF PFNGLSECONDARYCOLOR3UIPROC glow_debug_glSecondaryColor3ui;
#define glSecondaryColor3ui glow_debug_glSecondaryColor3ui
GLOWDEF PFNGLTEXPARAMETERIIVPROC glow_debug_glTexParameterIiv;
#define glTexParameterIiv glow_debug_glTexParameterIiv
GLOWDEF PFNGLPROGRAMUNIFORM4FPROC glow_debug_glProgramUniform4f;
#define glProgramUniform4f glow_debug_glProgramUniform4f
GLOWDEF PFNGLGETTEXPARAMETERIVPROC glow_debug_glGetTexParameteriv;
#define glGetTexParameteriv glow_debug_glGetTexParameteriv
GLOWDEF PFNGLGETLIGHTIVPROC glow_debug_glGetLightiv;
#define glGetLightiv glow_debug_glGetLightiv
GLOWDEF PFNGLGETTEXGENDVPROC glow_debug_glGetTexGendv;
#define glGetTexGendv glow_debug_glGetTexGendv
GLOWDEF PFNGLVERTEXATTRIBP1UIPROC glow_debug_glVertexAttribP1ui;
#define glVertexAttribP1ui glow_debug_glVertexAttribP1ui
GLOWDEF PFNGLACTIVESHADERPROGRAMPROC glow_debug_glActiveShaderProgram;
#define glActiveShaderProgram glow_debug_glActiveShaderProgram
GLOWDEF PFNGLPROGRAMUNIFORM1UIVPROC glow_debug_glProgramUniform1uiv;
#define glProgramUniform1uiv glow_debug_glProgramUniform1uiv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glow_debug_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv glow_debug_glProgramUniformMatrix4x2dv
GLOWDEF PFNGLTEXSTORAGE3DMULTISAMPLEPROC glow_debug_glTexStorage3DMultisample;
#define glTexStorage3DMultisample glow_debug_glTexStorage3DMultisample
GLOWDEF PFNGLMAPGRID2FPROC glow_debug_glMapGrid2f;
#define glMapGrid2f glow_debug_glMapGrid2f
GLOWDEF PFNGLCOLORMATERIALPROC glow_debug_glColorMaterial;
#define glColorMaterial glow_debug_glColorMaterial
GLOWDEF PFNGLVERTEXATTRIB4USVPROC glow_debug_glVertexAttrib4usv;
#define glVertexAttrib4usv glow_debug_glVertexAttrib4usv
GLOWDEF PFNGLGETINTEGER64VPROC glow_debug_glGetInteger64v;
#define glGetInteger64v glow_debug_glGetInteger64v
GLOWDEF PFNGLTEXCOORD1SPROC glow_debug_glTexCoord1s;
#define glTexCoord1s glow_debug_glTexCoord1s
GLOWDEF PFNGLCLIPPLANEPROC glow_debug_glClipPlane;
#define glClipPlane glow_debug_glClipPlane
GLOWDEF PFNGLDRAWRANGEELEMENTSPROC glow_debug_glDrawRangeElements;
#define glDrawRangeElements glow_debug_glDrawRangeElements
GLOWDEF PFNGLMULTITEXCOORD2IVPROC glow_debug_glMultiTexCoord2iv;
#define glMultiTexCoord2iv glow_debug_glMultiTexCoord2iv
GLOWDEF PFNGLGETUNIFORMIVPROC glow_debug_glGetUniformiv;
#define glGetUniformiv glow_debug_glGetUniformiv
GLOWDEF PFNGLCALLLISTSPROC glow_debug_glCallLists;
#define glCallLists glow_debug_glCallLists
GLOWDEF PFNGLVERTEX2FVPROC glow_debug_glVertex2fv;
#define glVertex2fv glow_debug_glVertex2fv
GLOWDEF PFNGLPROVOKINGVERTEXPROC glow_debug_glProvokingVertex;
#define glProvokingVertex glow_debug_glProvokingVertex
GLOWDEF PFNGLDISPATCHCOMPUTEINDIRECTPROC glow_debug_glDispatchComputeIndirect;
#define glDispatchComputeIndirect glow_debug_glDispatchComputeIndirect
GLOWDEF PFNGLTEXCOORD4DPROC glow_debug_glTexCoord4d;
#define glTexCoord4d glow_debug_glTexCoord4d
GLOWDEF PFNGLTEXIMAGE3DMULTISAMPLEPROC glow_debug_glTexImage3DMultisample;
#define glTexImage3DMultisample glow_debug_glTexImage3DMultisample
GLOWDEF PFNGLVERTEX4SVPROC glow_debug_glVertex4sv;
#define glVertex4sv glow_debug_glVertex4sv
GLOWDEF PFNGLFOGFVPROC glow_debug_glFogfv;
#define glFogfv glow_debug_glFogfv
GLOWDEF PFNGLVERTEXATTRIBI4SVPROC glow_debug_glVertexAttribI4sv;
#define glVertexAttribI4sv glow_debug_glVertexAttribI4sv
GLOWDEF PFNGLGETACTIVEUNIFORMBLOCKIVPROC glow_debug_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv glow_debug_glGetActiveUniformBlockiv
GLOWDEF PFNGLGETSAMPLERPARAMETERIVPROC glow_debug_glGetSamplerParameteriv;
#define glGetSamplerParameteriv glow_debug_glGetSamplerParameteriv
GLOWDEF PFNGLFRAMEBUFFERPARAMETERIPROC glow_debug_glFramebufferParameteri;
#define glFramebufferParameteri glow_debug_glFramebufferParameteri
GLOWDEF PFNGLCOLOR4FVPROC glow_debug_glColor4fv;
#define glColor4fv glow_debug_glColor4fv
GLOWDEF PFNGLDRAWELEMENTSPROC glow_debug_glDrawElements;
#define glDrawElements glow_debug_glDrawElements
GLOWDEF PFNGLSAMPLECOVERAGEPROC glow_debug_glSampleCoverage;
#define glSampleCoverage glow_debug_glSampleCoverage
GLOWDEF PFNGLVERTEXATTRIBL4DVPROC glow_debug_glVertexAttribL4dv;
#define glVertexAttribL4dv glow_debug_glVertexAttribL4dv
GLOWDEF PFNGLNORMAL3IVPROC glow_debug_glNormal3iv;
#define glNormal3iv glow_debug_glNormal3iv
GLOWDEF PFNGLISSAMPLERPROC glow_debug_glIsSampler;
#define glIsSampler glow_debug_glIsSampler
GLOWDEF PFNGLGETPROGRAMPIPELINEIVPROC glow_debug_glGetProgramPipelineiv;
#define glGetProgramPipelineiv glow_debug_glGetProgramPipelineiv
GLOWDEF PFNGLINVALIDATETEXIMAGEPROC glow_debug_glInvalidateTexImage;
#define glInvalidateTexImage glow_debug_glInvalidateTexImage
GLOWDEF PFNGLUNIFORM1UIPROC glow_debug_glUniform1ui;
#define glUniform1ui glow_debug_glUniform1ui
GLOWDEF PFNGLBUFFERDATAPROC glow_debug_glBufferData;
#define glBufferData glow_debug_glBufferData
GLOWDEF PFNGLUNIFORMMATRIX4FVPROC glow_debug_glUniformMatrix4fv;
#define glUniformMatrix4fv glow_debug_glUniformMatrix4fv
GLOWDEF PFNGLDRAWARRAYSINDIRECTPROC glow_debug_glDrawArraysIndirect;
#define glDrawArraysIndirect glow_debug_glDrawArraysIndirect
GLOWDEF PFNGLPROGRAMUNIFORM1DVPROC glow_debug_glProgramUniform1dv;
#define glProgramUniform1dv glow_debug_glProgramUniform1dv
GLOWDEF PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glow_debug_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance glow_debug_glDrawElementsInstancedBaseVertexBaseInstance
GLOWDEF PFNGLLOADMATRIXDPROC glow_debug_glLoadMatrixd;
#define glLoadMatrixd glow_debug_glLoadMatrixd
GLOWDEF PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glow_debug_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D glow_debug_glCompressedTexSubImage2D
GLOWDEF PFNGLUNIFORMMATRIX4X2FVPROC glow_debug_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv glow_debug_glUniformMatrix4x2fv
GLOWDEF PFNGLBINDFRAMEBUFFERPROC glow_debug_glBindFramebuffer;
#define glBindFramebuffer glow_debug_glBindFramebuffer
GLOWDEF PFNGLFRAMEBUFFERTEXTURELAYERPROC glow_debug_glFramebufferTextureLayer;
#define glFramebufferTextureLayer glow_debug_glFramebufferTextureLayer
GLOWDEF PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glow_debug_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv glow_debug_glGetActiveSubroutineUniformiv
GLOWDEF PFNGLRASTERPOS4DPROC glow_debug_glRasterPos4d;
#define glRasterPos4d glow_debug_glRasterPos4d
GLOWDEF PFNGLWINDOWPOS2DVPROC glow_debug_glWindowPos2dv;
#define glWindowPos2dv glow_debug_glWindowPos2dv
GLOWDEF PFNGLCOLOR3BPROC glow_debug_glColor3b;
#define glColor3b glow_debug_glColor3b
GLOWDEF PFNGLMULTMATRIXDPROC glow_debug_glMultMatrixd;
#define glMultMatrixd glow_debug_glMultMatrixd
GLOWDEF PFNGLTEXENVFPROC glow_debug_glTexEnvf;
#define glTexEnvf glow_debug_glTexEnvf
GLOWDEF PFNGLVERTEXATTRIB2DPROC glow_debug_glVertexAttrib2d;
#define glVertexAttrib2d glow_debug_glVertexAttrib2d
GLOWDEF PFNGLMULTITEXCOORDP2UIPROC glow_debug_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui glow_debug_glMultiTexCoordP2ui
GLOWDEF PFNGLPROGRAMUNIFORM3FPROC glow_debug_glProgramUniform3f;
#define glProgramUniform3f glow_debug_glProgramUniform3f
GLOWDEF PFNGLMATERIALIPROC glow_debug_glMateriali;
#define glMateriali glow_debug_glMateriali
GLOWDEF PFNGLMAPGRID1FPROC glow_debug_glMapGrid1f;
#define glMapGrid1f glow_debug_glMapGrid1f
GLOWDEF PFNGLMAPGRID2DPROC glow_debug_glMapGrid2d;
#define glMapGrid2d glow_debug_glMapGrid2d
GLOWDEF PFNGLGETUNIFORMUIVPROC glow_debug_glGetUniformuiv;
#define glGetUniformuiv glow_debug_glGetUniformuiv
GLOWDEF PFNGLUNIFORM3DVPROC glow_debug_glUniform3dv;
#define glUniform3dv glow_debug_glUniform3dv
GLOWDEF PFNGLUSEPROGRAMSTAGESPROC glow_debug_glUseProgramStages;
#define glUseProgramStages glow_debug_glUseProgramStages
GLOWDEF PFNGLRASTERPOS4IVPROC glow_debug_glRasterPos4iv;
#define glRasterPos4iv glow_debug_glRasterPos4iv
GLOWDEF PFNGLRASTERPOS4SPROC glow_debug_glRasterPos4s;
#define glRasterPos4s glow_debug_glRasterPos4s
GLOWDEF PFNGLRASTERPOS3FVPROC glow_debug_glRasterPos3fv;
#define glRasterPos3fv glow_debug_glRasterPos3fv
GLOWDEF PFNGLNORMAL3FVPROC glow_debug_glNormal3fv;
#define glNormal3fv glow_debug_glNormal3fv
GLOWDEF PFNGLGETSHADERINFOLOGPROC glow_debug_glGetShaderInfoLog;
#define glGetShaderInfoLog glow_debug_glGetShaderInfoLog
GLOWDEF PFNGLVERTEXATTRIB1FPROC glow_debug_glVertexAttrib1f;
#define glVertexAttrib1f glow_debug_glVertexAttrib1f
GLOWDEF PFNGLDISABLEIPROC glow_debug_glDisablei;
#define glDisablei glow_debug_glDisablei
GLOWDEF PFNGLVERTEXATTRIBI4USVPROC glow_debug_glVertexAttribI4usv;
#define glVertexAttribI4usv glow_debug_glVertexAttribI4usv
GLOWDEF PFNGLDELETETRANSFORMFEEDBACKSPROC glow_debug_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks glow_debug_glDeleteTransformFeedbacks
GLOWDEF PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glow_debug_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance glow_debug_glDrawArraysInstancedBaseInstance
GLOWDEF PFNGLCOLOR4USVPROC glow_debug_glColor4usv;
#define glColor4usv glow_debug_glColor4usv
GLOWDEF PFNGLCOLOR3UBPROC glow_debug_glColor3ub;
#define glColor3ub glow_debug_glColor3ub
GLOWDEF PFNGLFOGIPROC glow_debug_glFogi;
#define glFogi glow_debug_glFogi
GLOWDEF PFNGLACCUMPROC glow_debug_glAccum;
#define glAccum glow_debug_glAccum
GLOWDEF PFNGLUNIFORMMATRIX2X3FVPROC glow_debug_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv glow_debug_glUniformMatrix2x3fv
GLOWDEF PFNGLTEXCOORDP2UIVPROC glow_debug_glTexCoordP2uiv;
#define glTexCoordP2uiv glow_debug_glTexCoordP2uiv
GLOWDEF PFNGLTEXIMAGE2DPROC glow_debug_glTexImage2D;
#define glTexImage2D glow_debug_glTexImage2D
GLOWDEF PFNGLMATRIXMODEPROC glow_debug_glMatrixMode;
#define glMatrixMode glow_debug_glMatrixMode
GLOWDEF PFNGLTEXSUBIMAGE2DPROC glow_debug_glTexSubImage2D;
#define glTexSubImage2D glow_debug_glTexSubImage2D
GLOWDEF PFNGLFOGCOORDPOINTERPROC glow_debug_glFogCoordPointer;
#define glFogCoordPointer glow_debug_glFogCoordPointer
GLOWDEF PFNGLUNMAPBUFFERPROC glow_debug_glUnmapBuffer;
#define glUnmapBuffer glow_debug_glUnmapBuffer
GLOWDEF PFNGLTEXCOORDP2UIPROC glow_debug_glTexCoordP2ui;
#define glTexCoordP2ui glow_debug_glTexCoordP2ui
GLOWDEF PFNGLTEXSTORAGE1DPROC glow_debug_glTexStorage1D;
#define glTexStorage1D glow_debug_glTexStorage1D
GLOWDEF PFNGLGETPROGRAMRESOURCEIVPROC glow_debug_glGetProgramResourceiv;
#define glGetProgramResourceiv glow_debug_glGetProgramResourceiv
GLOWDEF PFNGLCOLOR3IPROC glow_debug_glColor3i;
#define glColor3i glow_debug_glColor3i
GLOWDEF PFNGLMAPGRID1DPROC glow_debug_glMapGrid1d;
#define glMapGrid1d glow_debug_glMapGrid1d
GLOWDEF PFNGLBINDBUFFERPROC glow_debug_glBindBuffer;
#define glBindBuffer glow_debug_glBindBuffer
GLOWDEF PFNGLUNIFORM2IVPROC glow_debug_glUniform2iv;
#define glUniform2iv glow_debug_glUniform2iv
GLOWDEF PFNGLSAMPLERPARAMETERIIVPROC glow_debug_glSamplerParameterIiv;
#define glSamplerParameterIiv glow_debug_glSamplerParameterIiv
GLOWDEF PFNGLVERTEX3IPROC glow_debug_glVertex3i;
#define glVertex3i glow_debug_glVertex3i
GLOWDEF PFNGLVERTEX4FVPROC glow_debug_glVertex4fv;
#define glVertex4fv glow_debug_glVertex4fv
GLOWDEF PFNGLLOADMATRIXFPROC glow_debug_glLoadMatrixf;
#define glLoadMatrixf glow_debug_glLoadMatrixf
GLOWDEF PFNGLMULTITEXCOORD4SPROC glow_debug_glMultiTexCoord4s;
#define glMultiTexCoord4s glow_debug_glMultiTexCoord4s
GLOWDEF PFNGLVERTEXATTRIB3FPROC glow_debug_glVertexAttrib3f;
#define glVertexAttrib3f glow_debug_glVertexAttrib3f
GLOWDEF PFNGLGETINTEGER64I_VPROC glow_debug_glGetInteger64i_v;
#define glGetInteger64i_v glow_debug_glGetInteger64i_v
GLOWDEF PFNGLGETSTRINGPROC glow_debug_glGetString;
#define glGetString glow_debug_glGetString
GLOWDEF PFNGLENDQUERYPROC glow_debug_glEndQuery;
#define glEndQuery glow_debug_glEndQuery
GLOWDEF PFNGLRENDERBUFFERSTORAGEPROC glow_debug_glRenderbufferStorage;
#define glRenderbufferStorage glow_debug_glRenderbufferStorage
GLOWDEF PFNGLGETPROGRAMRESOURCENAMEPROC glow_debug_glGetProgramResourceName;
#define glGetProgramResourceName glow_debug_glGetProgramResourceName
GLOWDEF PFNGLMULTITEXCOORD2IPROC glow_debug_glMultiTexCoord2i;
#define glMultiTexCoord2i glow_debug_glMultiTexCoord2i
GLOWDEF PFNGLTEXCOORD1DPROC glow_debug_glTexCoord1d;
#define glTexCoord1d glow_debug_glTexCoord1d
GLOWDEF PFNGLTEXCOORD2DPROC glow_debug_glTexCoord2d;
#define glTexCoord2d glow_debug_glTexCoord2d
GLOWDEF PFNGLPIXELTRANSFERFPROC glow_debug_glPixelTransferf;
#define glPixelTransferf glow_debug_glPixelTransferf
GLOWDEF PFNGLPIXELMAPUSVPROC glow_debug_glPixelMapusv;
#define glPixelMapusv glow_debug_glPixelMapusv
GLOWDEF PFNGLRASTERPOS2IPROC glow_debug_glRasterPos2i;
#define glRasterPos2i glow_debug_glRasterPos2i
GLOWDEF PFNGLRASTERPOS2DPROC glow_debug_glRasterPos2d;
#define glRasterPos2d glow_debug_glRasterPos2d
GLOWDEF PFNGLPOLYGONSTIPPLEPROC glow_debug_glPolygonStipple;
#define glPolygonStipple glow_debug_glPolygonStipple
GLOWDEF PFNGLGETCLIPPLANEPROC glow_debug_glGetClipPlane;
#define glGetClipPlane glow_debug_glGetClipPlane
GLOWDEF PFNGLGETBUFFERSUBDATAPROC glow_debug_glGetBufferSubData;
#define glGetBufferSubData glow_debug_glGetBufferSubData
GLOWDEF PFNGLPATCHPARAMETERFVPROC glow_debug_glPatchParameterfv;
#define glPatchParameterfv glow_debug_glPatchParameterfv
GLOWDEF PFNGLVERTEXATTRIBIFORMATPROC glow_debug_glVertexAttribIFormat;
#define glVertexAttribIFormat glow_debug_glVertexAttribIFormat
GLOWDEF PFNGLDISABLEPROC glow_debug_glDisable;
#define glDisable glow_debug_glDisable
GLOWDEF PFNGLTEXGENDVPROC glow_debug_glTexGendv;
#define glTexGendv glow_debug_glTexGendv
GLOWDEF PFNGLTRANSFORMFEEDBACKVARYINGSPROC glow_debug_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings glow_debug_glTransformFeedbackVaryings
GLOWDEF PFNGLGETVERTEXATTRIBIUIVPROC glow_debug_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv glow_debug_glGetVertexAttribIuiv
GLOWDEF PFNGLBINDFRAGDATALOCATIONPROC glow_debug_glBindFragDataLocation;
#define glBindFragDataLocation glow_debug_glBindFragDataLocation
GLOWDEF PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glow_debug_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample glow_debug_glRenderbufferStorageMultisample
GLOWDEF PFNGLCOLORP3UIVPROC glow_debug_glColorP3uiv;
#define glColorP3uiv glow_debug_glColorP3uiv
GLOWDEF PFNGLENABLEPROC glow_debug_glEnable;
#define glEnable glow_debug_glEnable
GLOWDEF PFNGLTEXGENIPROC glow_debug_glTexGeni;
#define glTexGeni glow_debug_glTexGeni
GLOWDEF PFNGLMULTITEXCOORD3FPROC glow_debug_glMultiTexCoord3f;
#define glMultiTexCoord3f glow_debug_glMultiTexCoord3f
GLOWDEF PFNGLPOINTPARAMETERIPROC glow_debug_glPointParameteri;
#define glPointParameteri glow_debug_glPointParameteri
GLOWDEF PFNGLSAMPLERPARAMETERIPROC glow_debug_glSamplerParameteri;
#define glSamplerParameteri glow_debug_glSamplerParameteri
GLOWDEF PFNGLINVALIDATESUBFRAMEBUFFERPROC glow_debug_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer glow_debug_glInvalidateSubFramebuffer
GLOWDEF PFNGLMULTIDRAWARRAYSINDIRECTPROC glow_debug_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect glow_debug_glMultiDrawArraysIndirect
GLOWDEF PFNGLTEXCOORD3DVPROC glow_debug_glTexCoord3dv;
#define glTexCoord3dv glow_debug_glTexCoord3dv
GLOWDEF PFNGLTEXCOORD2SVPROC glow_debug_glTexCoord2sv;
#define glTexCoord2sv glow_debug_glTexCoord2sv
GLOWDEF PFNGLGETSYNCIVPROC glow_debug_glGetSynciv;
#define glGetSynciv glow_debug_glGetSynciv
GLOWDEF PFNGLUNIFORM3DPROC glow_debug_glUniform3d;
#define glUniform3d glow_debug_glUniform3d
GLOWDEF PFNGLSECONDARYCOLOR3IPROC glow_debug_glSecondaryColor3i;
#define glSecondaryColor3i glow_debug_glSecondaryColor3i
GLOWDEF PFNGLMAPBUFFERPROC glow_debug_glMapBuffer;
#define glMapBuffer glow_debug_glMapBuffer
GLOWDEF PFNGLNORMALP3UIVPROC glow_debug_glNormalP3uiv;
#define glNormalP3uiv glow_debug_glNormalP3uiv
GLOWDEF PFNGLINVALIDATEBUFFERDATAPROC glow_debug_glInvalidateBufferData;
#define glInvalidateBufferData glow_debug_glInvalidateBufferData
GLOWDEF PFNGLBLENDCOLORPROC glow_debug_glBlendColor;
#define glBlendColor glow_debug_glBlendColor
GLOWDEF PFNGLPUSHNAMEPROC glow_debug_glPushName;
#define glPushName glow_debug_glPushName
GLOWDEF PFNGLWINDOWPOS3FPROC glow_debug_glWindowPos3f;
#define glWindowPos3f glow_debug_glWindowPos3f
GLOWDEF PFNGLGETSAMPLERPARAMETERIIVPROC glow_debug_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv glow_debug_glGetSamplerParameterIiv
GLOWDEF PFNGLCLEARCOLORPROC glow_debug_glClearColor;
#define glClearColor glow_debug_glClearColor
GLOWDEF PFNGLMULTMATRIXFPROC glow_debug_glMultMatrixf;
#define glMultMatrixf glow_debug_glMultMatrixf
GLOWDEF PFNGLINITNAMESPROC glow_debug_glInitNames;
#define glInitNames glow_debug_glInitNames
GLOWDEF PFNGLCOPYBUFFERSUBDATAPROC glow_debug_glCopyBufferSubData;
#define glCopyBufferSubData glow_debug_glCopyBufferSubData
GLOWDEF PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glow_debug_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName glow_debug_glGetActiveSubroutineUniformName
GLOWDEF PFNGLRECTDVPROC glow_debug_glRectdv;
#define glRectdv glow_debug_glRectdv
GLOWDEF PFNGLRASTERPOS4FVPROC glow_debug_glRasterPos4fv;
#define glRasterPos4fv glow_debug_glRasterPos4fv
GLOWDEF PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glow_debug_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv glow_debug_glProgramUniformMatrix2x3fv
GLOWDEF PFNGLVERTEXATTRIBLPOINTERPROC glow_debug_glVertexAttribLPointer;
#define glVertexAttribLPointer glow_debug_glVertexAttribLPointer
GLOWDEF PFNGLNORMAL3SVPROC glow_debug_glNormal3sv;
#define glNormal3sv glow_debug_glNormal3sv
GLOWDEF PFNGLEDGEFLAGVPROC glow_debug_glEdgeFlagv;
#define glEdgeFlagv glow_debug_glEdgeFlagv
GLOWDEF PFNGLPOINTPARAMETERFVPROC glow_debug_glPointParameterfv;
#define glPointParameterfv glow_debug_glPointParameterfv
GLOWDEF PFNGLSECONDARYCOLOR3DVPROC glow_debug_glSecondaryColor3dv;
#define glSecondaryColor3dv glow_debug_glSecondaryColor3dv
GLOWDEF PFNGLGETSAMPLERPARAMETERIUIVPROC glow_debug_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv glow_debug_glGetSamplerParameterIuiv
GLOWDEF PFNGLMULTITEXCOORD1IVPROC glow_debug_glMultiTexCoord1iv;
#define glMultiTexCoord1iv glow_debug_glMultiTexCoord1iv
GLOWDEF PFNGLPOPNAMEPROC glow_debug_glPopName;
#define glPopName glow_debug_glPopName
GLOWDEF PFNGLGETTEXGENFVPROC glow_debug_glGetTexGenfv;
#define glGetTexGenfv glow_debug_glGetTexGenfv
GLOWDEF PFNGLSHADERSOURCEPROC glow_debug_glShaderSource;
#define glShaderSource glow_debug_glShaderSource
GLOWDEF PFNGLCULLFACEPROC glow_debug_glCullFace;
#define glCullFace glow_debug_glCullFace
#endif /* GLOW_DEBUG */


#ifdef __cplusplus
}
#endif
#endif  /* GLOW_INCLUDE_GLOW_H */
/*
 * END HEADER, BEGIN IMPLEMENTATION
 */
#ifdef GLOW_IMPLEMENTATION

#include <stddef.h> /* for size_t */

#ifndef GLOW_NO_STDIO
#include <stdio.h>
#endif /* GLOW_NO_STDIO */

#ifndef GLOW_ASSERT
#include <assert.h>
#define GLOW_ASSERT(x) assert(x)
#endif /* GLOW_ASSERT */

#if defined(__APPLE__)
#include <dlfcn.h>
void *glow_get_proc(char const *name) {
  static void *lib = NULL;
  if (lib == NULL) {
    lib = dlopen("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", RTLD_LAZY);
  }
  GLOW_ASSERT(lib && "Can't open OpenGL shared library for function loading!");
  return lib ? dlsym(lib, name) : NULL;
}
#else
void *glow_get_proc(char const *name) {
  GLOW_ASSERT(0! && "Platform not supported. You must call glow_init_with.");
  return NULL;
}
#endif


static void glow_lazy_glIndexf(GLfloat c) {
  glow_glIndexf = (PFNGLINDEXFPROC)((ptrdiff_t)(glow_get_proc("glIndexf")));
  if (glow_glIndexf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexf\n");
#endif
  }
  glow_glIndexf(c);
}
PFNGLINDEXFPROC glow_glIndexf = glow_lazy_glIndexf;
static void glow_lazy_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)((ptrdiff_t)(glow_get_proc("glGetTexParameterIiv")));
  if (glow_glGetTexParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameterIiv\n");
#endif
  }
  glow_glGetTexParameterIiv(target, pname, params);
}
PFNGLGETTEXPARAMETERIIVPROC glow_glGetTexParameterIiv = glow_lazy_glGetTexParameterIiv;
static GLboolean glow_lazy_glIsSync(GLsync sync) {
  glow_glIsSync = (PFNGLISSYNCPROC)((ptrdiff_t)(glow_get_proc("glIsSync")));
  if (glow_glIsSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsSync\n");
#endif
  }
  return glow_glIsSync(sync);
}
PFNGLISSYNCPROC glow_glIsSync = glow_lazy_glIsSync;
static void glow_lazy_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix3dv")));
  if (glow_glUniformMatrix3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3dv\n");
#endif
  }
  glow_glUniformMatrix3dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3DVPROC glow_glUniformMatrix3dv = glow_lazy_glUniformMatrix3dv;
static void glow_lazy_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  glow_glRotatef = (PFNGLROTATEFPROC)((ptrdiff_t)(glow_get_proc("glRotatef")));
  if (glow_glRotatef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRotatef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRotatef\n");
#endif
  }
  glow_glRotatef(angle, x, y, z);
}
PFNGLROTATEFPROC glow_glRotatef = glow_lazy_glRotatef;
static void glow_lazy_glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {
  glow_glTexGeniv = (PFNGLTEXGENIVPROC)((ptrdiff_t)(glow_get_proc("glTexGeniv")));
  if (glow_glTexGeniv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGeniv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGeniv\n");
#endif
  }
  glow_glTexGeniv(coord, pname, params);
}
PFNGLTEXGENIVPROC glow_glTexGeniv = glow_lazy_glTexGeniv;
static void glow_lazy_glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {
  glow_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)((ptrdiff_t)(glow_get_proc("glUniform1uiv")));
  if (glow_glUniform1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1uiv\n");
#endif
  }
  glow_glUniform1uiv(location, count, value);
}
PFNGLUNIFORM1UIVPROC glow_glUniform1uiv = glow_lazy_glUniform1uiv;
static void glow_lazy_glRasterPos3i(GLint x, GLint y, GLint z) {
  glow_glRasterPos3i = (PFNGLRASTERPOS3IPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3i")));
  if (glow_glRasterPos3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3i\n");
#endif
  }
  glow_glRasterPos3i(x, y, z);
}
PFNGLRASTERPOS3IPROC glow_glRasterPos3i = glow_lazy_glRasterPos3i;
static void glow_lazy_glVertex2f(GLfloat x, GLfloat y) {
  glow_glVertex2f = (PFNGLVERTEX2FPROC)((ptrdiff_t)(glow_get_proc("glVertex2f")));
  if (glow_glVertex2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2f\n");
#endif
  }
  glow_glVertex2f(x, y);
}
PFNGLVERTEX2FPROC glow_glVertex2f = glow_lazy_glVertex2f;
static void glow_lazy_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
  glow_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)((ptrdiff_t)(glow_get_proc("glCompressedTexImage3D")));
  if (glow_glCompressedTexImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexImage3D\n");
#endif
  }
  glow_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE3DPROC glow_glCompressedTexImage3D = glow_lazy_glCompressedTexImage3D;
static void glow_lazy_glEndList() {
  glow_glEndList = (PFNGLENDLISTPROC)((ptrdiff_t)(glow_get_proc("glEndList")));
  if (glow_glEndList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndList\n");
#endif
  }
  glow_glEndList();
}
PFNGLENDLISTPROC glow_glEndList = glow_lazy_glEndList;
static void glow_lazy_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
  glow_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2d")));
  if (glow_glProgramUniform2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2d\n");
#endif
  }
  glow_glProgramUniform2d(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2DPROC glow_glProgramUniform2d = glow_lazy_glProgramUniform2d;
static void glow_lazy_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetFramebufferParameteriv")));
  if (glow_glGetFramebufferParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFramebufferParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFramebufferParameteriv\n");
#endif
  }
  glow_glGetFramebufferParameteriv(target, pname, params);
}
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glow_glGetFramebufferParameteriv = glow_lazy_glGetFramebufferParameteriv;
static void glow_lazy_glMultiTexCoord4dv(GLenum target, const GLdouble *v) {
  glow_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4dv")));
  if (glow_glMultiTexCoord4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4dv\n");
#endif
  }
  glow_glMultiTexCoord4dv(target, v);
}
PFNGLMULTITEXCOORD4DVPROC glow_glMultiTexCoord4dv = glow_lazy_glMultiTexCoord4dv;
static void glow_lazy_glBegin(GLenum mode) {
  glow_glBegin = (PFNGLBEGINPROC)((ptrdiff_t)(glow_get_proc("glBegin")));
  if (glow_glBegin == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBegin\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBegin\n");
#endif
  }
  glow_glBegin(mode);
}
PFNGLBEGINPROC glow_glBegin = glow_lazy_glBegin;
static void glow_lazy_glSecondaryColor3fv(const GLfloat *v) {
  glow_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3fv")));
  if (glow_glSecondaryColor3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3fv\n");
#endif
  }
  glow_glSecondaryColor3fv(v);
}
PFNGLSECONDARYCOLOR3FVPROC glow_glSecondaryColor3fv = glow_lazy_glSecondaryColor3fv;
static void glow_lazy_glUniform3iv(GLint location, GLsizei count, const GLint *value) {
  glow_glUniform3iv = (PFNGLUNIFORM3IVPROC)((ptrdiff_t)(glow_get_proc("glUniform3iv")));
  if (glow_glUniform3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3iv\n");
#endif
  }
  glow_glUniform3iv(location, count, value);
}
PFNGLUNIFORM3IVPROC glow_glUniform3iv = glow_lazy_glUniform3iv;
static void glow_lazy_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {
  glow_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)((ptrdiff_t)(glow_get_proc("glGetQueryIndexediv")));
  if (glow_glGetQueryIndexediv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryIndexediv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryIndexediv\n");
#endif
  }
  glow_glGetQueryIndexediv(target, index, pname, params);
}
PFNGLGETQUERYINDEXEDIVPROC glow_glGetQueryIndexediv = glow_lazy_glGetQueryIndexediv;
static void glow_lazy_glPolygonMode(GLenum face, GLenum mode) {
  glow_glPolygonMode = (PFNGLPOLYGONMODEPROC)((ptrdiff_t)(glow_get_proc("glPolygonMode")));
  if (glow_glPolygonMode == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPolygonMode\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPolygonMode\n");
#endif
  }
  glow_glPolygonMode(face, mode);
}
PFNGLPOLYGONMODEPROC glow_glPolygonMode = glow_lazy_glPolygonMode;
static void glow_lazy_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  glow_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)((ptrdiff_t)(glow_get_proc("glDispatchCompute")));
  if (glow_glDispatchCompute == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDispatchCompute\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDispatchCompute\n");
#endif
  }
  glow_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}
PFNGLDISPATCHCOMPUTEPROC glow_glDispatchCompute = glow_lazy_glDispatchCompute;
static void glow_lazy_glBindTexture(GLenum target, GLuint texture) {
  glow_glBindTexture = (PFNGLBINDTEXTUREPROC)((ptrdiff_t)(glow_get_proc("glBindTexture")));
  if (glow_glBindTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindTexture\n");
#endif
  }
  glow_glBindTexture(target, texture);
}
PFNGLBINDTEXTUREPROC glow_glBindTexture = glow_lazy_glBindTexture;
static void glow_lazy_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLfloat *priorities) {
  glow_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)((ptrdiff_t)(glow_get_proc("glPrioritizeTextures")));
  if (glow_glPrioritizeTextures == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPrioritizeTextures\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPrioritizeTextures\n");
#endif
  }
  glow_glPrioritizeTextures(n, textures, priorities);
}
PFNGLPRIORITIZETEXTURESPROC glow_glPrioritizeTextures = glow_lazy_glPrioritizeTextures;
static void glow_lazy_glIndexubv(const GLubyte *c) {
  glow_glIndexubv = (PFNGLINDEXUBVPROC)((ptrdiff_t)(glow_get_proc("glIndexubv")));
  if (glow_glIndexubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexubv\n");
#endif
  }
  glow_glIndexubv(c);
}
PFNGLINDEXUBVPROC glow_glIndexubv = glow_lazy_glIndexubv;
static void glow_lazy_glDepthMask(GLboolean flag) {
  glow_glDepthMask = (PFNGLDEPTHMASKPROC)((ptrdiff_t)(glow_get_proc("glDepthMask")));
  if (glow_glDepthMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthMask\n");
#endif
  }
  glow_glDepthMask(flag);
}
PFNGLDEPTHMASKPROC glow_glDepthMask = glow_lazy_glDepthMask;
static void glow_lazy_glEnableClientState(GLenum array) {
  glow_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)((ptrdiff_t)(glow_get_proc("glEnableClientState")));
  if (glow_glEnableClientState == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnableClientState\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnableClientState\n");
#endif
  }
  glow_glEnableClientState(array);
}
PFNGLENABLECLIENTSTATEPROC glow_glEnableClientState = glow_lazy_glEnableClientState;
static void glow_lazy_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
  glow_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)((ptrdiff_t)(glow_get_proc("glGetAttachedShaders")));
  if (glow_glGetAttachedShaders == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetAttachedShaders\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetAttachedShaders\n");
#endif
  }
  glow_glGetAttachedShaders(program, maxCount, count, shaders);
}
PFNGLGETATTACHEDSHADERSPROC glow_glGetAttachedShaders = glow_lazy_glGetAttachedShaders;
static void glow_lazy_glColorP4ui(GLenum type, GLuint color) {
  glow_glColorP4ui = (PFNGLCOLORP4UIPROC)((ptrdiff_t)(glow_get_proc("glColorP4ui")));
  if (glow_glColorP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP4ui\n");
#endif
  }
  glow_glColorP4ui(type, color);
}
PFNGLCOLORP4UIPROC glow_glColorP4ui = glow_lazy_glColorP4ui;
static void glow_lazy_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {
  glow_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)((ptrdiff_t)(glow_get_proc("glFeedbackBuffer")));
  if (glow_glFeedbackBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFeedbackBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFeedbackBuffer\n");
#endif
  }
  glow_glFeedbackBuffer(size, type, buffer);
}
PFNGLFEEDBACKBUFFERPROC glow_glFeedbackBuffer = glow_lazy_glFeedbackBuffer;
static void glow_lazy_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
  glow_glRasterPos3f = (PFNGLRASTERPOS3FPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3f")));
  if (glow_glRasterPos3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3f\n");
#endif
  }
  glow_glRasterPos3f(x, y, z);
}
PFNGLRASTERPOS3FPROC glow_glRasterPos3f = glow_lazy_glRasterPos3f;
static void glow_lazy_glTexCoord1f(GLfloat s) {
  glow_glTexCoord1f = (PFNGLTEXCOORD1FPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1f")));
  if (glow_glTexCoord1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1f\n");
#endif
  }
  glow_glTexCoord1f(s);
}
PFNGLTEXCOORD1FPROC glow_glTexCoord1f = glow_lazy_glTexCoord1f;
static void glow_lazy_glTexCoord4sv(const GLshort *v) {
  glow_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4sv")));
  if (glow_glTexCoord4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4sv\n");
#endif
  }
  glow_glTexCoord4sv(v);
}
PFNGLTEXCOORD4SVPROC glow_glTexCoord4sv = glow_lazy_glTexCoord4sv;
static void glow_lazy_glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetQueryiv = (PFNGLGETQUERYIVPROC)((ptrdiff_t)(glow_get_proc("glGetQueryiv")));
  if (glow_glGetQueryiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryiv\n");
#endif
  }
  glow_glGetQueryiv(target, pname, params);
}
PFNGLGETQUERYIVPROC glow_glGetQueryiv = glow_lazy_glGetQueryiv;
static void glow_lazy_glClearDepth(GLdouble depth) {
  glow_glClearDepth = (PFNGLCLEARDEPTHPROC)((ptrdiff_t)(glow_get_proc("glClearDepth")));
  if (glow_glClearDepth == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearDepth\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearDepth\n");
#endif
  }
  glow_glClearDepth(depth);
}
PFNGLCLEARDEPTHPROC glow_glClearDepth = glow_lazy_glClearDepth;
static void glow_lazy_glTexEnvi(GLenum target, GLenum pname, GLint param) {
  glow_glTexEnvi = (PFNGLTEXENVIPROC)((ptrdiff_t)(glow_get_proc("glTexEnvi")));
  if (glow_glTexEnvi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnvi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnvi\n");
#endif
  }
  glow_glTexEnvi(target, pname, param);
}
PFNGLTEXENVIPROC glow_glTexEnvi = glow_lazy_glTexEnvi;
static void glow_lazy_glPopMatrix() {
  glow_glPopMatrix = (PFNGLPOPMATRIXPROC)((ptrdiff_t)(glow_get_proc("glPopMatrix")));
  if (glow_glPopMatrix == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopMatrix\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopMatrix\n");
#endif
  }
  glow_glPopMatrix();
}
PFNGLPOPMATRIXPROC glow_glPopMatrix = glow_lazy_glPopMatrix;
static void glow_lazy_glEdgeFlagPointer(GLsizei stride, const void *pointer) {
  glow_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)((ptrdiff_t)(glow_get_proc("glEdgeFlagPointer")));
  if (glow_glEdgeFlagPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEdgeFlagPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEdgeFlagPointer\n");
#endif
  }
  glow_glEdgeFlagPointer(stride, pointer);
}
PFNGLEDGEFLAGPOINTERPROC glow_glEdgeFlagPointer = glow_lazy_glEdgeFlagPointer;
static void glow_lazy_glTexCoord4dv(const GLdouble *v) {
  glow_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4dv")));
  if (glow_glTexCoord4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4dv\n");
#endif
  }
  glow_glTexCoord4dv(v);
}
PFNGLTEXCOORD4DVPROC glow_glTexCoord4dv = glow_lazy_glTexCoord4dv;
static void glow_lazy_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  glow_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)((ptrdiff_t)(glow_get_proc("glBindVertexBuffer")));
  if (glow_glBindVertexBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindVertexBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindVertexBuffer\n");
#endif
  }
  glow_glBindVertexBuffer(bindingindex, buffer, offset, stride);
}
PFNGLBINDVERTEXBUFFERPROC glow_glBindVertexBuffer = glow_lazy_glBindVertexBuffer;
static void glow_lazy_glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
  glow_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)((ptrdiff_t)(glow_get_proc("glGetObjectPtrLabel")));
  if (glow_glGetObjectPtrLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetObjectPtrLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetObjectPtrLabel\n");
#endif
  }
  glow_glGetObjectPtrLabel(ptr, bufSize, length, label);
}
PFNGLGETOBJECTPTRLABELPROC glow_glGetObjectPtrLabel = glow_lazy_glGetObjectPtrLabel;
static void glow_lazy_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  glow_glTexParameterf = (PFNGLTEXPARAMETERFPROC)((ptrdiff_t)(glow_get_proc("glTexParameterf")));
  if (glow_glTexParameterf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterf\n");
#endif
  }
  glow_glTexParameterf(target, pname, param);
}
PFNGLTEXPARAMETERFPROC glow_glTexParameterf = glow_lazy_glTexParameterf;
static void glow_lazy_glVertexAttrib1sv(GLuint index, const GLshort *v) {
  glow_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib1sv")));
  if (glow_glVertexAttrib1sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1sv\n");
#endif
  }
  glow_glVertexAttrib1sv(index, v);
}
PFNGLVERTEXATTRIB1SVPROC glow_glVertexAttrib1sv = glow_lazy_glVertexAttrib1sv;
static void glow_lazy_glTexCoord3fv(const GLfloat *v) {
  glow_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3fv")));
  if (glow_glTexCoord3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3fv\n");
#endif
  }
  glow_glTexCoord3fv(v);
}
PFNGLTEXCOORD3FVPROC glow_glTexCoord3fv = glow_lazy_glTexCoord3fv;
static void glow_lazy_glLightModeliv(GLenum pname, const GLint *params) {
  glow_glLightModeliv = (PFNGLLIGHTMODELIVPROC)((ptrdiff_t)(glow_get_proc("glLightModeliv")));
  if (glow_glLightModeliv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModeliv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModeliv\n");
#endif
  }
  glow_glLightModeliv(pname, params);
}
PFNGLLIGHTMODELIVPROC glow_glLightModeliv = glow_lazy_glLightModeliv;
static void glow_lazy_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
  glow_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)((ptrdiff_t)(glow_get_proc("glGetQueryObjectuiv")));
  if (glow_glGetQueryObjectuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjectuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjectuiv\n");
#endif
  }
  glow_glGetQueryObjectuiv(id, pname, params);
}
PFNGLGETQUERYOBJECTUIVPROC glow_glGetQueryObjectuiv = glow_lazy_glGetQueryObjectuiv;
static void glow_lazy_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {
  glow_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribLdv")));
  if (glow_glGetVertexAttribLdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribLdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribLdv\n");
#endif
  }
  glow_glGetVertexAttribLdv(index, pname, params);
}
PFNGLGETVERTEXATTRIBLDVPROC glow_glGetVertexAttribLdv = glow_lazy_glGetVertexAttribLdv;
static void glow_lazy_glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {
  glow_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)((ptrdiff_t)(glow_get_proc("glDebugMessageCallback")));
  if (glow_glDebugMessageCallback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDebugMessageCallback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDebugMessageCallback\n");
#endif
  }
  glow_glDebugMessageCallback(callback, userParam);
}
PFNGLDEBUGMESSAGECALLBACKPROC glow_glDebugMessageCallback = glow_lazy_glDebugMessageCallback;
static void glow_lazy_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  glow_glStencilOp = (PFNGLSTENCILOPPROC)((ptrdiff_t)(glow_get_proc("glStencilOp")));
  if (glow_glStencilOp == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilOp\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilOp\n");
#endif
  }
  glow_glStencilOp(fail, zfail, zpass);
}
PFNGLSTENCILOPPROC glow_glStencilOp = glow_lazy_glStencilOp;
static void glow_lazy_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
  glow_glCopyPixels = (PFNGLCOPYPIXELSPROC)((ptrdiff_t)(glow_get_proc("glCopyPixels")));
  if (glow_glCopyPixels == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyPixels\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyPixels\n");
#endif
  }
  glow_glCopyPixels(x, y, width, height, type);
}
PFNGLCOPYPIXELSPROC glow_glCopyPixels = glow_lazy_glCopyPixels;
static GLboolean glow_lazy_glIsVertexArray(GLuint array) {
  glow_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)((ptrdiff_t)(glow_get_proc("glIsVertexArray")));
  if (glow_glIsVertexArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsVertexArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsVertexArray\n");
#endif
  }
  return glow_glIsVertexArray(array);
}
PFNGLISVERTEXARRAYPROC glow_glIsVertexArray = glow_lazy_glIsVertexArray;
static void glow_lazy_glSampleMaski(GLuint maskNumber, GLbitfield mask) {
  glow_glSampleMaski = (PFNGLSAMPLEMASKIPROC)((ptrdiff_t)(glow_get_proc("glSampleMaski")));
  if (glow_glSampleMaski == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSampleMaski\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSampleMaski\n");
#endif
  }
  glow_glSampleMaski(maskNumber, mask);
}
PFNGLSAMPLEMASKIPROC glow_glSampleMaski = glow_lazy_glSampleMaski;
static void glow_lazy_glLightiv(GLenum light, GLenum pname, const GLint *params) {
  glow_glLightiv = (PFNGLLIGHTIVPROC)((ptrdiff_t)(glow_get_proc("glLightiv")));
  if (glow_glLightiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightiv\n");
#endif
  }
  glow_glLightiv(light, pname, params);
}
PFNGLLIGHTIVPROC glow_glLightiv = glow_lazy_glLightiv;
static void glow_lazy_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  glow_glTexBuffer = (PFNGLTEXBUFFERPROC)((ptrdiff_t)(glow_get_proc("glTexBuffer")));
  if (glow_glTexBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexBuffer\n");
#endif
  }
  glow_glTexBuffer(target, internalformat, buffer);
}
PFNGLTEXBUFFERPROC glow_glTexBuffer = glow_lazy_glTexBuffer;
static void glow_lazy_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {
  glow_glShaderBinary = (PFNGLSHADERBINARYPROC)((ptrdiff_t)(glow_get_proc("glShaderBinary")));
  if (glow_glShaderBinary == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShaderBinary\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShaderBinary\n");
#endif
  }
  glow_glShaderBinary(count, shaders, binaryformat, binary, length);
}
PFNGLSHADERBINARYPROC glow_glShaderBinary = glow_lazy_glShaderBinary;
static void glow_lazy_glMaterialiv(GLenum face, GLenum pname, const GLint *params) {
  glow_glMaterialiv = (PFNGLMATERIALIVPROC)((ptrdiff_t)(glow_get_proc("glMaterialiv")));
  if (glow_glMaterialiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMaterialiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMaterialiv\n");
#endif
  }
  glow_glMaterialiv(face, pname, params);
}
PFNGLMATERIALIVPROC glow_glMaterialiv = glow_lazy_glMaterialiv;
static void glow_lazy_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
  glow_glNormal3b = (PFNGLNORMAL3BPROC)((ptrdiff_t)(glow_get_proc("glNormal3b")));
  if (glow_glNormal3b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3b\n");
#endif
  }
  glow_glNormal3b(nx, ny, nz);
}
PFNGLNORMAL3BPROC glow_glNormal3b = glow_lazy_glNormal3b;
static void glow_lazy_glGetMapiv(GLenum target, GLenum query, GLint *v) {
  glow_glGetMapiv = (PFNGLGETMAPIVPROC)((ptrdiff_t)(glow_get_proc("glGetMapiv")));
  if (glow_glGetMapiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMapiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMapiv\n");
#endif
  }
  glow_glGetMapiv(target, query, v);
}
PFNGLGETMAPIVPROC glow_glGetMapiv = glow_lazy_glGetMapiv;
static void glow_lazy_glBindTransformFeedback(GLenum target, GLuint id) {
  glow_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glBindTransformFeedback")));
  if (glow_glBindTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindTransformFeedback\n");
#endif
  }
  glow_glBindTransformFeedback(target, id);
}
PFNGLBINDTRANSFORMFEEDBACKPROC glow_glBindTransformFeedback = glow_lazy_glBindTransformFeedback;
static GLuint glow_lazy_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  glow_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)((ptrdiff_t)(glow_get_proc("glGetDebugMessageLog")));
  if (glow_glGetDebugMessageLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetDebugMessageLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetDebugMessageLog\n");
#endif
  }
  return glow_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
PFNGLGETDEBUGMESSAGELOGPROC glow_glGetDebugMessageLog = glow_lazy_glGetDebugMessageLog;
static void glow_lazy_glGetBooleanv(GLenum pname, GLboolean *data) {
  glow_glGetBooleanv = (PFNGLGETBOOLEANVPROC)((ptrdiff_t)(glow_get_proc("glGetBooleanv")));
  if (glow_glGetBooleanv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBooleanv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBooleanv\n");
#endif
  }
  glow_glGetBooleanv(pname, data);
}
PFNGLGETBOOLEANVPROC glow_glGetBooleanv = glow_lazy_glGetBooleanv;
static void glow_lazy_glIndexub(GLubyte c) {
  glow_glIndexub = (PFNGLINDEXUBPROC)((ptrdiff_t)(glow_get_proc("glIndexub")));
  if (glow_glIndexub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexub\n");
#endif
  }
  glow_glIndexub(c);
}
PFNGLINDEXUBPROC glow_glIndexub = glow_lazy_glIndexub;
static void glow_lazy_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  glow_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)((ptrdiff_t)(glow_get_proc("glBlitFramebuffer")));
  if (glow_glBlitFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlitFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlitFramebuffer\n");
#endif
  }
  glow_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
PFNGLBLITFRAMEBUFFERPROC glow_glBlitFramebuffer = glow_lazy_glBlitFramebuffer;
static void glow_lazy_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {
  glow_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)((ptrdiff_t)(glow_get_proc("glGetMultisamplefv")));
  if (glow_glGetMultisamplefv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMultisamplefv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMultisamplefv\n");
#endif
  }
  glow_glGetMultisamplefv(pname, index, val);
}
PFNGLGETMULTISAMPLEFVPROC glow_glGetMultisamplefv = glow_lazy_glGetMultisamplefv;
static void glow_lazy_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glow_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3iv")));
  if (glow_glProgramUniform3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3iv\n");
#endif
  }
  glow_glProgramUniform3iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3IVPROC glow_glProgramUniform3iv = glow_lazy_glProgramUniform3iv;
static GLuint glow_lazy_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  glow_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)((ptrdiff_t)(glow_get_proc("glGetProgramResourceIndex")));
  if (glow_glGetProgramResourceIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceIndex\n");
#endif
  }
  return glow_glGetProgramResourceIndex(program, programInterface, name);
}
PFNGLGETPROGRAMRESOURCEINDEXPROC glow_glGetProgramResourceIndex = glow_lazy_glGetProgramResourceIndex;
static void glow_lazy_glIndexfv(const GLfloat *c) {
  glow_glIndexfv = (PFNGLINDEXFVPROC)((ptrdiff_t)(glow_get_proc("glIndexfv")));
  if (glow_glIndexfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexfv\n");
#endif
  }
  glow_glIndexfv(c);
}
PFNGLINDEXFVPROC glow_glIndexfv = glow_lazy_glIndexfv;
static void glow_lazy_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  glow_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribFormat")));
  if (glow_glVertexAttribFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribFormat\n");
#endif
  }
  glow_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}
PFNGLVERTEXATTRIBFORMATPROC glow_glVertexAttribFormat = glow_lazy_glVertexAttribFormat;
static void glow_lazy_glRasterPos4dv(const GLdouble *v) {
  glow_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4dv")));
  if (glow_glRasterPos4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4dv\n");
#endif
  }
  glow_glRasterPos4dv(v);
}
PFNGLRASTERPOS4DVPROC glow_glRasterPos4dv = glow_lazy_glRasterPos4dv;
static void glow_lazy_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
  glow_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)((ptrdiff_t)(glow_get_proc("glDrawTransformFeedbackInstanced")));
  if (glow_glDrawTransformFeedbackInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedbackInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedbackInstanced\n");
#endif
  }
  glow_glDrawTransformFeedbackInstanced(mode, id, instancecount);
}
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glow_glDrawTransformFeedbackInstanced = glow_lazy_glDrawTransformFeedbackInstanced;
static void glow_lazy_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  glow_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)((ptrdiff_t)(glow_get_proc("glViewportIndexedf")));
  if (glow_glViewportIndexedf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewportIndexedf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewportIndexedf\n");
#endif
  }
  glow_glViewportIndexedf(index, x, y, w, h);
}
PFNGLVIEWPORTINDEXEDFPROC glow_glViewportIndexedf = glow_lazy_glViewportIndexedf;
static GLboolean glow_lazy_glIsBuffer(GLuint buffer) {
  glow_glIsBuffer = (PFNGLISBUFFERPROC)((ptrdiff_t)(glow_get_proc("glIsBuffer")));
  if (glow_glIsBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsBuffer\n");
#endif
  }
  return glow_glIsBuffer(buffer);
}
PFNGLISBUFFERPROC glow_glIsBuffer = glow_lazy_glIsBuffer;
static void glow_lazy_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix3x2fv")));
  if (glow_glUniformMatrix3x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x2fv\n");
#endif
  }
  glow_glUniformMatrix3x2fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X2FVPROC glow_glUniformMatrix3x2fv = glow_lazy_glUniformMatrix3x2fv;
static void glow_lazy_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
  glow_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)((ptrdiff_t)(glow_get_proc("glDepthRangeIndexed")));
  if (glow_glDepthRangeIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRangeIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRangeIndexed\n");
#endif
  }
  glow_glDepthRangeIndexed(index, n, f);
}
PFNGLDEPTHRANGEINDEXEDPROC glow_glDepthRangeIndexed = glow_lazy_glDepthRangeIndexed;
static void glow_lazy_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
  glow_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glGetTexLevelParameterfv")));
  if (glow_glGetTexLevelParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexLevelParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexLevelParameterfv\n");
#endif
  }
  glow_glGetTexLevelParameterfv(target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERFVPROC glow_glGetTexLevelParameterfv = glow_lazy_glGetTexLevelParameterfv;
static void glow_lazy_glSecondaryColor3iv(const GLint *v) {
  glow_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3iv")));
  if (glow_glSecondaryColor3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3iv\n");
#endif
  }
  glow_glSecondaryColor3iv(v);
}
PFNGLSECONDARYCOLOR3IVPROC glow_glSecondaryColor3iv = glow_lazy_glSecondaryColor3iv;
static void glow_lazy_glUniform1iv(GLint location, GLsizei count, const GLint *value) {
  glow_glUniform1iv = (PFNGLUNIFORM1IVPROC)((ptrdiff_t)(glow_get_proc("glUniform1iv")));
  if (glow_glUniform1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1iv\n");
#endif
  }
  glow_glUniform1iv(location, count, value);
}
PFNGLUNIFORM1IVPROC glow_glUniform1iv = glow_lazy_glUniform1iv;
static void glow_lazy_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glow_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4d")));
  if (glow_glVertexAttrib4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4d\n");
#endif
  }
  glow_glVertexAttrib4d(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4DPROC glow_glVertexAttrib4d = glow_lazy_glVertexAttrib4d;
static void glow_lazy_glSecondaryColorP3ui(GLenum type, GLuint color) {
  glow_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColorP3ui")));
  if (glow_glSecondaryColorP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColorP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColorP3ui\n");
#endif
  }
  glow_glSecondaryColorP3ui(type, color);
}
PFNGLSECONDARYCOLORP3UIPROC glow_glSecondaryColorP3ui = glow_lazy_glSecondaryColorP3ui;
static void glow_lazy_glRectsv(const GLshort *v1, const GLshort *v2) {
  glow_glRectsv = (PFNGLRECTSVPROC)((ptrdiff_t)(glow_get_proc("glRectsv")));
  if (glow_glRectsv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectsv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectsv\n");
#endif
  }
  glow_glRectsv(v1, v2);
}
PFNGLRECTSVPROC glow_glRectsv = glow_lazy_glRectsv;
static void glow_lazy_glRasterPos2sv(const GLshort *v) {
  glow_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2sv")));
  if (glow_glRasterPos2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2sv\n");
#endif
  }
  glow_glRasterPos2sv(v);
}
PFNGLRASTERPOS2SVPROC glow_glRasterPos2sv = glow_lazy_glRasterPos2sv;
static void glow_lazy_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
  glow_glEvalMesh1 = (PFNGLEVALMESH1PROC)((ptrdiff_t)(glow_get_proc("glEvalMesh1")));
  if (glow_glEvalMesh1 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalMesh1\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalMesh1\n");
#endif
  }
  glow_glEvalMesh1(mode, i1, i2);
}
PFNGLEVALMESH1PROC glow_glEvalMesh1 = glow_lazy_glEvalMesh1;
static void glow_lazy_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  glow_glOrtho = (PFNGLORTHOPROC)((ptrdiff_t)(glow_get_proc("glOrtho")));
  if (glow_glOrtho == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glOrtho\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glOrtho\n");
#endif
  }
  glow_glOrtho(left, right, bottom, top, zNear, zFar);
}
PFNGLORTHOPROC glow_glOrtho = glow_lazy_glOrtho;
static void glow_lazy_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {
  glow_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)((ptrdiff_t)(glow_get_proc("glMultiDrawElements")));
  if (glow_glMultiDrawElements == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawElements\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawElements\n");
#endif
  }
  glow_glMultiDrawElements(mode, count, type, indices, drawcount);
}
PFNGLMULTIDRAWELEMENTSPROC glow_glMultiDrawElements = glow_lazy_glMultiDrawElements;
static void glow_lazy_glDisableVertexAttribArray(GLuint index) {
  glow_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)((ptrdiff_t)(glow_get_proc("glDisableVertexAttribArray")));
  if (glow_glDisableVertexAttribArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisableVertexAttribArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisableVertexAttribArray\n");
#endif
  }
  glow_glDisableVertexAttribArray(index);
}
PFNGLDISABLEVERTEXATTRIBARRAYPROC glow_glDisableVertexAttribArray = glow_lazy_glDisableVertexAttribArray;
static void glow_lazy_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glow_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4fv")));
  if (glow_glProgramUniform4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4fv\n");
#endif
  }
  glow_glProgramUniform4fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4FVPROC glow_glProgramUniform4fv = glow_lazy_glProgramUniform4fv;
static void glow_lazy_glColor4uiv(const GLuint *v) {
  glow_glColor4uiv = (PFNGLCOLOR4UIVPROC)((ptrdiff_t)(glow_get_proc("glColor4uiv")));
  if (glow_glColor4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4uiv\n");
#endif
  }
  glow_glColor4uiv(v);
}
PFNGLCOLOR4UIVPROC glow_glColor4uiv = glow_lazy_glColor4uiv;
static void glow_lazy_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
  glow_glTexGenf = (PFNGLTEXGENFPROC)((ptrdiff_t)(glow_get_proc("glTexGenf")));
  if (glow_glTexGenf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGenf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGenf\n");
#endif
  }
  glow_glTexGenf(coord, pname, param);
}
PFNGLTEXGENFPROC glow_glTexGenf = glow_lazy_glTexGenf;
static void glow_lazy_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  glow_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4i")));
  if (glow_glVertexAttribI4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4i\n");
#endif
  }
  glow_glVertexAttribI4i(index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4IPROC glow_glVertexAttribI4i = glow_lazy_glVertexAttribI4i;
static void glow_lazy_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
  glow_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)((ptrdiff_t)(glow_get_proc("glGetActiveUniformBlockName")));
  if (glow_glGetActiveUniformBlockName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformBlockName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformBlockName\n");
#endif
  }
  glow_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glow_glGetActiveUniformBlockName = glow_lazy_glGetActiveUniformBlockName;
static void glow_lazy_glDeleteSamplers(GLsizei count, const GLuint *samplers) {
  glow_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)((ptrdiff_t)(glow_get_proc("glDeleteSamplers")));
  if (glow_glDeleteSamplers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteSamplers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteSamplers\n");
#endif
  }
  glow_glDeleteSamplers(count, samplers);
}
PFNGLDELETESAMPLERSPROC glow_glDeleteSamplers = glow_lazy_glDeleteSamplers;
static void glow_lazy_glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {
  glow_glUniform4dv = (PFNGLUNIFORM4DVPROC)((ptrdiff_t)(glow_get_proc("glUniform4dv")));
  if (glow_glUniform4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4dv\n");
#endif
  }
  glow_glUniform4dv(location, count, value);
}
PFNGLUNIFORM4DVPROC glow_glUniform4dv = glow_lazy_glUniform4dv;
static void glow_lazy_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
  glow_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2ui")));
  if (glow_glProgramUniform2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2ui\n");
#endif
  }
  glow_glProgramUniform2ui(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2UIPROC glow_glProgramUniform2ui = glow_lazy_glProgramUniform2ui;
static void glow_lazy_glRectfv(const GLfloat *v1, const GLfloat *v2) {
  glow_glRectfv = (PFNGLRECTFVPROC)((ptrdiff_t)(glow_get_proc("glRectfv")));
  if (glow_glRectfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectfv\n");
#endif
  }
  glow_glRectfv(v1, v2);
}
PFNGLRECTFVPROC glow_glRectfv = glow_lazy_glRectfv;
static void glow_lazy_glEnablei(GLenum target, GLuint index) {
  glow_glEnablei = (PFNGLENABLEIPROC)((ptrdiff_t)(glow_get_proc("glEnablei")));
  if (glow_glEnablei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnablei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnablei\n");
#endif
  }
  glow_glEnablei(target, index);
}
PFNGLENABLEIPROC glow_glEnablei = glow_lazy_glEnablei;
static void glow_lazy_glVertexAttribI1iv(GLuint index, const GLint *v) {
  glow_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI1iv")));
  if (glow_glVertexAttribI1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1iv\n");
#endif
  }
  glow_glVertexAttribI1iv(index, v);
}
PFNGLVERTEXATTRIBI1IVPROC glow_glVertexAttribI1iv = glow_lazy_glVertexAttribI1iv;
static void glow_lazy_glClientActiveTexture(GLenum texture) {
  glow_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)((ptrdiff_t)(glow_get_proc("glClientActiveTexture")));
  if (glow_glClientActiveTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClientActiveTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClientActiveTexture\n");
#endif
  }
  glow_glClientActiveTexture(texture);
}
PFNGLCLIENTACTIVETEXTUREPROC glow_glClientActiveTexture = glow_lazy_glClientActiveTexture;
static void glow_lazy_glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
  glow_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Nbv")));
  if (glow_glVertexAttrib4Nbv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nbv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nbv\n");
#endif
  }
  glow_glVertexAttrib4Nbv(index, v);
}
PFNGLVERTEXATTRIB4NBVPROC glow_glVertexAttrib4Nbv = glow_lazy_glVertexAttrib4Nbv;
static void glow_lazy_glWindowPos3i(GLint x, GLint y, GLint z) {
  glow_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3i")));
  if (glow_glWindowPos3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3i\n");
#endif
  }
  glow_glWindowPos3i(x, y, z);
}
PFNGLWINDOWPOS3IPROC glow_glWindowPos3i = glow_lazy_glWindowPos3i;
static void glow_lazy_glGetBufferPointerv(GLenum target, GLenum pname, void **params) {
  glow_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)((ptrdiff_t)(glow_get_proc("glGetBufferPointerv")));
  if (glow_glGetBufferPointerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferPointerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferPointerv\n");
#endif
  }
  glow_glGetBufferPointerv(target, pname, params);
}
PFNGLGETBUFFERPOINTERVPROC glow_glGetBufferPointerv = glow_lazy_glGetBufferPointerv;
static void glow_lazy_glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {
  glow_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribPointerv")));
  if (glow_glGetVertexAttribPointerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribPointerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribPointerv\n");
#endif
  }
  glow_glGetVertexAttribPointerv(index, pname, pointer);
}
PFNGLGETVERTEXATTRIBPOINTERVPROC glow_glGetVertexAttribPointerv = glow_lazy_glGetVertexAttribPointerv;
static void glow_lazy_glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {
  glow_glUniform1dv = (PFNGLUNIFORM1DVPROC)((ptrdiff_t)(glow_get_proc("glUniform1dv")));
  if (glow_glUniform1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1dv\n");
#endif
  }
  glow_glUniform1dv(location, count, value);
}
PFNGLUNIFORM1DVPROC glow_glUniform1dv = glow_lazy_glUniform1dv;
static void glow_lazy_glVertexAttribL1d(GLuint index, GLdouble x) {
  glow_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL1d")));
  if (glow_glVertexAttribL1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL1d\n");
#endif
  }
  glow_glVertexAttribL1d(index, x);
}
PFNGLVERTEXATTRIBL1DPROC glow_glVertexAttribL1d = glow_lazy_glVertexAttribL1d;
static void glow_lazy_glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetTexEnviv = (PFNGLGETTEXENVIVPROC)((ptrdiff_t)(glow_get_proc("glGetTexEnviv")));
  if (glow_glGetTexEnviv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexEnviv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexEnviv\n");
#endif
  }
  glow_glGetTexEnviv(target, pname, params);
}
PFNGLGETTEXENVIVPROC glow_glGetTexEnviv = glow_lazy_glGetTexEnviv;
static void glow_lazy_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glow_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1iv")));
  if (glow_glProgramUniform1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1iv\n");
#endif
  }
  glow_glProgramUniform1iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1IVPROC glow_glProgramUniform1iv = glow_lazy_glProgramUniform1iv;
static void glow_lazy_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  glow_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3ui")));
  if (glow_glProgramUniform3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3ui\n");
#endif
  }
  glow_glProgramUniform3ui(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3UIPROC glow_glProgramUniform3ui = glow_lazy_glProgramUniform3ui;
static void glow_lazy_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
  glow_glMap2d = (PFNGLMAP2DPROC)((ptrdiff_t)(glow_get_proc("glMap2d")));
  if (glow_glMap2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap2d\n");
#endif
  }
  glow_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2DPROC glow_glMap2d = glow_lazy_glMap2d;
static void glow_lazy_glPolygonOffset(GLfloat factor, GLfloat units) {
  glow_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)((ptrdiff_t)(glow_get_proc("glPolygonOffset")));
  if (glow_glPolygonOffset == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPolygonOffset\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPolygonOffset\n");
#endif
  }
  glow_glPolygonOffset(factor, units);
}
PFNGLPOLYGONOFFSETPROC glow_glPolygonOffset = glow_lazy_glPolygonOffset;
static void glow_lazy_glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glow_glColorPointer = (PFNGLCOLORPOINTERPROC)((ptrdiff_t)(glow_get_proc("glColorPointer")));
  if (glow_glColorPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorPointer\n");
#endif
  }
  glow_glColorPointer(size, type, stride, pointer);
}
PFNGLCOLORPOINTERPROC glow_glColorPointer = glow_lazy_glColorPointer;
static void glow_lazy_glBindSampler(GLuint unit, GLuint sampler) {
  glow_glBindSampler = (PFNGLBINDSAMPLERPROC)((ptrdiff_t)(glow_get_proc("glBindSampler")));
  if (glow_glBindSampler == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindSampler\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindSampler\n");
#endif
  }
  glow_glBindSampler(unit, sampler);
}
PFNGLBINDSAMPLERPROC glow_glBindSampler = glow_lazy_glBindSampler;
static void glow_lazy_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  glow_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)((ptrdiff_t)(glow_get_proc("glInvalidateTexSubImage")));
  if (glow_glInvalidateTexSubImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateTexSubImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateTexSubImage\n");
#endif
  }
  glow_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
PFNGLINVALIDATETEXSUBIMAGEPROC glow_glInvalidateTexSubImage = glow_lazy_glInvalidateTexSubImage;
static void glow_lazy_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  glow_glColor4ui = (PFNGLCOLOR4UIPROC)((ptrdiff_t)(glow_get_proc("glColor4ui")));
  if (glow_glColor4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4ui\n");
#endif
  }
  glow_glColor4ui(red, green, blue, alpha);
}
PFNGLCOLOR4UIPROC glow_glColor4ui = glow_lazy_glColor4ui;
static void glow_lazy_glClearIndex(GLfloat c) {
  glow_glClearIndex = (PFNGLCLEARINDEXPROC)((ptrdiff_t)(glow_get_proc("glClearIndex")));
  if (glow_glClearIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearIndex\n");
#endif
  }
  glow_glClearIndex(c);
}
PFNGLCLEARINDEXPROC glow_glClearIndex = glow_lazy_glClearIndex;
static void glow_lazy_glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {
  glow_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)((ptrdiff_t)(glow_get_proc("glDeleteVertexArrays")));
  if (glow_glDeleteVertexArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteVertexArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteVertexArrays\n");
#endif
  }
  glow_glDeleteVertexArrays(n, arrays);
}
PFNGLDELETEVERTEXARRAYSPROC glow_glDeleteVertexArrays = glow_lazy_glDeleteVertexArrays;
static void glow_lazy_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  glow_glWaitSync = (PFNGLWAITSYNCPROC)((ptrdiff_t)(glow_get_proc("glWaitSync")));
  if (glow_glWaitSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWaitSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWaitSync\n");
#endif
  }
  glow_glWaitSync(sync, flags, timeout);
}
PFNGLWAITSYNCPROC glow_glWaitSync = glow_lazy_glWaitSync;
static void glow_lazy_glResumeTransformFeedback() {
  glow_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glResumeTransformFeedback")));
  if (glow_glResumeTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glResumeTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glResumeTransformFeedback\n");
#endif
  }
  glow_glResumeTransformFeedback();
}
PFNGLRESUMETRANSFORMFEEDBACKPROC glow_glResumeTransformFeedback = glow_lazy_glResumeTransformFeedback;
static void glow_lazy_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  glow_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)((ptrdiff_t)(glow_get_proc("glCopyImageSubData")));
  if (glow_glCopyImageSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyImageSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyImageSubData\n");
#endif
  }
  glow_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
PFNGLCOPYIMAGESUBDATAPROC glow_glCopyImageSubData = glow_lazy_glCopyImageSubData;
static void glow_lazy_glShadeModel(GLenum mode) {
  glow_glShadeModel = (PFNGLSHADEMODELPROC)((ptrdiff_t)(glow_get_proc("glShadeModel")));
  if (glow_glShadeModel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShadeModel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShadeModel\n");
#endif
  }
  glow_glShadeModel(mode);
}
PFNGLSHADEMODELPROC glow_glShadeModel = glow_lazy_glShadeModel;
static void glow_lazy_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {
  glow_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glSamplerParameteriv")));
  if (glow_glSamplerParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameteriv\n");
#endif
  }
  glow_glSamplerParameteriv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIVPROC glow_glSamplerParameteriv = glow_lazy_glSamplerParameteriv;
static void glow_lazy_glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  glow_glUniform2ui = (PFNGLUNIFORM2UIPROC)((ptrdiff_t)(glow_get_proc("glUniform2ui")));
  if (glow_glUniform2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2ui\n");
#endif
  }
  glow_glUniform2ui(location, v0, v1);
}
PFNGLUNIFORM2UIPROC glow_glUniform2ui = glow_lazy_glUniform2ui;
static void glow_lazy_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {
  glow_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)((ptrdiff_t)(glow_get_proc("glGetQueryObjectui64v")));
  if (glow_glGetQueryObjectui64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjectui64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjectui64v\n");
#endif
  }
  glow_glGetQueryObjectui64v(id, pname, params);
}
PFNGLGETQUERYOBJECTUI64VPROC glow_glGetQueryObjectui64v = glow_lazy_glGetQueryObjectui64v;
static void glow_lazy_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {
  glow_glGetMaterialfv = (PFNGLGETMATERIALFVPROC)((ptrdiff_t)(glow_get_proc("glGetMaterialfv")));
  if (glow_glGetMaterialfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMaterialfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMaterialfv\n");
#endif
  }
  glow_glGetMaterialfv(face, pname, params);
}
PFNGLGETMATERIALFVPROC glow_glGetMaterialfv = glow_lazy_glGetMaterialfv;
static void glow_lazy_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {
  glow_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)((ptrdiff_t)(glow_get_proc("glClearBufferuiv")));
  if (glow_glClearBufferuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferuiv\n");
#endif
  }
  glow_glClearBufferuiv(buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERUIVPROC glow_glClearBufferuiv = glow_lazy_glClearBufferuiv;
static void glow_lazy_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  glow_glColor3f = (PFNGLCOLOR3FPROC)((ptrdiff_t)(glow_get_proc("glColor3f")));
  if (glow_glColor3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3f\n");
#endif
  }
  glow_glColor3f(red, green, blue);
}
PFNGLCOLOR3FPROC glow_glColor3f = glow_lazy_glColor3f;
static void glow_lazy_glSecondaryColor3usv(const GLushort *v) {
  glow_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3usv")));
  if (glow_glSecondaryColor3usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3usv\n");
#endif
  }
  glow_glSecondaryColor3usv(v);
}
PFNGLSECONDARYCOLOR3USVPROC glow_glSecondaryColor3usv = glow_lazy_glSecondaryColor3usv;
static void glow_lazy_glVertexAttrib4Niv(GLuint index, const GLint *v) {
  glow_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Niv")));
  if (glow_glVertexAttrib4Niv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Niv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Niv\n");
#endif
  }
  glow_glVertexAttrib4Niv(index, v);
}
PFNGLVERTEXATTRIB4NIVPROC glow_glVertexAttrib4Niv = glow_lazy_glVertexAttrib4Niv;
static void glow_lazy_glVertexAttrib4sv(GLuint index, const GLshort *v) {
  glow_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4sv")));
  if (glow_glVertexAttrib4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4sv\n");
#endif
  }
  glow_glVertexAttrib4sv(index, v);
}
PFNGLVERTEXATTRIB4SVPROC glow_glVertexAttrib4sv = glow_lazy_glVertexAttrib4sv;
static void glow_lazy_glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {
  glow_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)((ptrdiff_t)(glow_get_proc("glGetIntegeri_v")));
  if (glow_glGetIntegeri_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetIntegeri_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetIntegeri_v\n");
#endif
  }
  glow_glGetIntegeri_v(target, index, data);
}
PFNGLGETINTEGERI_VPROC glow_glGetIntegeri_v = glow_lazy_glGetIntegeri_v;
static void glow_lazy_glVertexAttribI4iv(GLuint index, const GLint *v) {
  glow_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4iv")));
  if (glow_glVertexAttribI4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4iv\n");
#endif
  }
  glow_glVertexAttribI4iv(index, v);
}
PFNGLVERTEXATTRIBI4IVPROC glow_glVertexAttribI4iv = glow_lazy_glVertexAttribI4iv;
static void glow_lazy_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  glow_glUniform3ui = (PFNGLUNIFORM3UIPROC)((ptrdiff_t)(glow_get_proc("glUniform3ui")));
  if (glow_glUniform3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3ui\n");
#endif
  }
  glow_glUniform3ui(location, v0, v1, v2);
}
PFNGLUNIFORM3UIPROC glow_glUniform3ui = glow_lazy_glUniform3ui;
static void glow_lazy_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
  glow_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)((ptrdiff_t)(glow_get_proc("glGetActiveSubroutineName")));
  if (glow_glGetActiveSubroutineName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveSubroutineName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveSubroutineName\n");
#endif
  }
  glow_glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
}
PFNGLGETACTIVESUBROUTINENAMEPROC glow_glGetActiveSubroutineName = glow_lazy_glGetActiveSubroutineName;
static void glow_lazy_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
  glow_glRects = (PFNGLRECTSPROC)((ptrdiff_t)(glow_get_proc("glRects")));
  if (glow_glRects == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRects\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRects\n");
#endif
  }
  glow_glRects(x1, y1, x2, y2);
}
PFNGLRECTSPROC glow_glRects = glow_lazy_glRects;
static void glow_lazy_glVertexAttribL1dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL1dv")));
  if (glow_glVertexAttribL1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL1dv\n");
#endif
  }
  glow_glVertexAttribL1dv(index, v);
}
PFNGLVERTEXATTRIBL1DVPROC glow_glVertexAttribL1dv = glow_lazy_glVertexAttribL1dv;
static void glow_lazy_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  glow_glUniform2f = (PFNGLUNIFORM2FPROC)((ptrdiff_t)(glow_get_proc("glUniform2f")));
  if (glow_glUniform2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2f\n");
#endif
  }
  glow_glUniform2f(location, v0, v1);
}
PFNGLUNIFORM2FPROC glow_glUniform2f = glow_lazy_glUniform2f;
static void glow_lazy_glFlush() {
  glow_glFlush = (PFNGLFLUSHPROC)((ptrdiff_t)(glow_get_proc("glFlush")));
  if (glow_glFlush == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFlush\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFlush\n");
#endif
  }
  glow_glFlush();
}
PFNGLFLUSHPROC glow_glFlush = glow_lazy_glFlush;
static void glow_lazy_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {
  glow_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)((ptrdiff_t)(glow_get_proc("glMultiDrawElementsBaseVertex")));
  if (glow_glMultiDrawElementsBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawElementsBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawElementsBaseVertex\n");
#endif
  }
  glow_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
}
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glow_glMultiDrawElementsBaseVertex = glow_lazy_glMultiDrawElementsBaseVertex;
static void glow_lazy_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix3x2dv")));
  if (glow_glUniformMatrix3x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x2dv\n");
#endif
  }
  glow_glUniformMatrix3x2dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X2DVPROC glow_glUniformMatrix3x2dv = glow_lazy_glUniformMatrix3x2dv;
static void glow_lazy_glPatchParameteri(GLenum pname, GLint value) {
  glow_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)((ptrdiff_t)(glow_get_proc("glPatchParameteri")));
  if (glow_glPatchParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPatchParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPatchParameteri\n");
#endif
  }
  glow_glPatchParameteri(pname, value);
}
PFNGLPATCHPARAMETERIPROC glow_glPatchParameteri = glow_lazy_glPatchParameteri;
static void glow_lazy_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
  glow_glTranslatef = (PFNGLTRANSLATEFPROC)((ptrdiff_t)(glow_get_proc("glTranslatef")));
  if (glow_glTranslatef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTranslatef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTranslatef\n");
#endif
  }
  glow_glTranslatef(x, y, z);
}
PFNGLTRANSLATEFPROC glow_glTranslatef = glow_lazy_glTranslatef;
static void glow_lazy_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  glow_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)((ptrdiff_t)(glow_get_proc("glTexImage2DMultisample")));
  if (glow_glTexImage2DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage2DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage2DMultisample\n");
#endif
  }
  glow_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXIMAGE2DMULTISAMPLEPROC glow_glTexImage2DMultisample = glow_lazy_glTexImage2DMultisample;
static void glow_lazy_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
  glow_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP3ui")));
  if (glow_glMultiTexCoordP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP3ui\n");
#endif
  }
  glow_glMultiTexCoordP3ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP3UIPROC glow_glMultiTexCoordP3ui = glow_lazy_glMultiTexCoordP3ui;
static GLint glow_lazy_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {
  glow_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)((ptrdiff_t)(glow_get_proc("glGetProgramResourceLocation")));
  if (glow_glGetProgramResourceLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceLocation\n");
#endif
  }
  return glow_glGetProgramResourceLocation(program, programInterface, name);
}
PFNGLGETPROGRAMRESOURCELOCATIONPROC glow_glGetProgramResourceLocation = glow_lazy_glGetProgramResourceLocation;
static void glow_lazy_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  glow_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib3d")));
  if (glow_glVertexAttrib3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3d\n");
#endif
  }
  glow_glVertexAttrib3d(index, x, y, z);
}
PFNGLVERTEXATTRIB3DPROC glow_glVertexAttrib3d = glow_lazy_glVertexAttrib3d;
static void glow_lazy_glTexCoord2s(GLshort s, GLshort t) {
  glow_glTexCoord2s = (PFNGLTEXCOORD2SPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2s")));
  if (glow_glTexCoord2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2s\n");
#endif
  }
  glow_glTexCoord2s(s, t);
}
PFNGLTEXCOORD2SPROC glow_glTexCoord2s = glow_lazy_glTexCoord2s;
static void glow_lazy_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  glow_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)((ptrdiff_t)(glow_get_proc("glFramebufferTexture1D")));
  if (glow_glFramebufferTexture1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture1D\n");
#endif
  }
  glow_glFramebufferTexture1D(target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE1DPROC glow_glFramebufferTexture1D = glow_lazy_glFramebufferTexture1D;
static void glow_lazy_glColor3us(GLushort red, GLushort green, GLushort blue) {
  glow_glColor3us = (PFNGLCOLOR3USPROC)((ptrdiff_t)(glow_get_proc("glColor3us")));
  if (glow_glColor3us == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3us\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3us\n");
#endif
  }
  glow_glColor3us(red, green, blue);
}
PFNGLCOLOR3USPROC glow_glColor3us = glow_lazy_glColor3us;
static void glow_lazy_glTexCoord1fv(const GLfloat *v) {
  glow_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1fv")));
  if (glow_glTexCoord1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1fv\n");
#endif
  }
  glow_glTexCoord1fv(v);
}
PFNGLTEXCOORD1FVPROC glow_glTexCoord1fv = glow_lazy_glTexCoord1fv;
static void glow_lazy_glPushClientAttrib(GLbitfield mask) {
  glow_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)((ptrdiff_t)(glow_get_proc("glPushClientAttrib")));
  if (glow_glPushClientAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushClientAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushClientAttrib\n");
#endif
  }
  glow_glPushClientAttrib(mask);
}
PFNGLPUSHCLIENTATTRIBPROC glow_glPushClientAttrib = glow_lazy_glPushClientAttrib;
static void glow_lazy_glVertexAttrib2dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib2dv")));
  if (glow_glVertexAttrib2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2dv\n");
#endif
  }
  glow_glVertexAttrib2dv(index, v);
}
PFNGLVERTEXATTRIB2DVPROC glow_glVertexAttrib2dv = glow_lazy_glVertexAttrib2dv;
static void glow_lazy_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
  glow_glGetTexImage = (PFNGLGETTEXIMAGEPROC)((ptrdiff_t)(glow_get_proc("glGetTexImage")));
  if (glow_glGetTexImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexImage\n");
#endif
  }
  glow_glGetTexImage(target, level, format, type, pixels);
}
PFNGLGETTEXIMAGEPROC glow_glGetTexImage = glow_lazy_glGetTexImage;
static void glow_lazy_glVertex4dv(const GLdouble *v) {
  glow_glVertex4dv = (PFNGLVERTEX4DVPROC)((ptrdiff_t)(glow_get_proc("glVertex4dv")));
  if (glow_glVertex4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4dv\n");
#endif
  }
  glow_glVertex4dv(v);
}
PFNGLVERTEX4DVPROC glow_glVertex4dv = glow_lazy_glVertex4dv;
static void glow_lazy_glIndexPointer(GLenum type, GLsizei stride, const void *pointer) {
  glow_glIndexPointer = (PFNGLINDEXPOINTERPROC)((ptrdiff_t)(glow_get_proc("glIndexPointer")));
  if (glow_glIndexPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexPointer\n");
#endif
  }
  glow_glIndexPointer(type, stride, pointer);
}
PFNGLINDEXPOINTERPROC glow_glIndexPointer = glow_lazy_glIndexPointer;
static void glow_lazy_glVertexAttribI4uiv(GLuint index, const GLuint *v) {
  glow_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4uiv")));
  if (glow_glVertexAttribI4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4uiv\n");
#endif
  }
  glow_glVertexAttribI4uiv(index, v);
}
PFNGLVERTEXATTRIBI4UIVPROC glow_glVertexAttribI4uiv = glow_lazy_glVertexAttribI4uiv;
static void glow_lazy_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix2x4fv")));
  if (glow_glProgramUniformMatrix2x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x4fv\n");
#endif
  }
  glow_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glow_glProgramUniformMatrix2x4fv = glow_lazy_glProgramUniformMatrix2x4fv;
static void glow_lazy_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glow_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP4uiv")));
  if (glow_glVertexAttribP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP4uiv\n");
#endif
  }
  glow_glVertexAttribP4uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP4UIVPROC glow_glVertexAttribP4uiv = glow_lazy_glVertexAttribP4uiv;
static void glow_lazy_glRasterPos3dv(const GLdouble *v) {
  glow_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3dv")));
  if (glow_glRasterPos3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3dv\n");
#endif
  }
  glow_glRasterPos3dv(v);
}
PFNGLRASTERPOS3DVPROC glow_glRasterPos3dv = glow_lazy_glRasterPos3dv;
static void glow_lazy_glVertexAttrib1fv(GLuint index, const GLfloat *v) {
  glow_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib1fv")));
  if (glow_glVertexAttrib1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1fv\n");
#endif
  }
  glow_glVertexAttrib1fv(index, v);
}
PFNGLVERTEXATTRIB1FVPROC glow_glVertexAttrib1fv = glow_lazy_glVertexAttrib1fv;
static GLint glow_lazy_glGetFragDataIndex(GLuint program, const GLchar *name) {
  glow_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)((ptrdiff_t)(glow_get_proc("glGetFragDataIndex")));
  if (glow_glGetFragDataIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFragDataIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFragDataIndex\n");
#endif
  }
  return glow_glGetFragDataIndex(program, name);
}
PFNGLGETFRAGDATAINDEXPROC glow_glGetFragDataIndex = glow_lazy_glGetFragDataIndex;
static void glow_lazy_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix2x3dv")));
  if (glow_glProgramUniformMatrix2x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x3dv\n");
#endif
  }
  glow_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glow_glProgramUniformMatrix2x3dv = glow_lazy_glProgramUniformMatrix2x3dv;
static void glow_lazy_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix3x4dv")));
  if (glow_glProgramUniformMatrix3x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x4dv\n");
#endif
  }
  glow_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glow_glProgramUniformMatrix3x4dv = glow_lazy_glProgramUniformMatrix3x4dv;
static void glow_lazy_glNormalP3ui(GLenum type, GLuint coords) {
  glow_glNormalP3ui = (PFNGLNORMALP3UIPROC)((ptrdiff_t)(glow_get_proc("glNormalP3ui")));
  if (glow_glNormalP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormalP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormalP3ui\n");
#endif
  }
  glow_glNormalP3ui(type, coords);
}
PFNGLNORMALP3UIPROC glow_glNormalP3ui = glow_lazy_glNormalP3ui;
static void glow_lazy_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix3fv")));
  if (glow_glProgramUniformMatrix3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3fv\n");
#endif
  }
  glow_glProgramUniformMatrix3fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glow_glProgramUniformMatrix3fv = glow_lazy_glProgramUniformMatrix3fv;
static void glow_lazy_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  glow_glClearAccum = (PFNGLCLEARACCUMPROC)((ptrdiff_t)(glow_get_proc("glClearAccum")));
  if (glow_glClearAccum == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearAccum\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearAccum\n");
#endif
  }
  glow_glClearAccum(red, green, blue, alpha);
}
PFNGLCLEARACCUMPROC glow_glClearAccum = glow_lazy_glClearAccum;
static void glow_lazy_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  glow_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribLFormat")));
  if (glow_glVertexAttribLFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribLFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribLFormat\n");
#endif
  }
  glow_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}
PFNGLVERTEXATTRIBLFORMATPROC glow_glVertexAttribLFormat = glow_lazy_glVertexAttribLFormat;
static void glow_lazy_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
  glow_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1f")));
  if (glow_glProgramUniform1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1f\n");
#endif
  }
  glow_glProgramUniform1f(program, location, v0);
}
PFNGLPROGRAMUNIFORM1FPROC glow_glProgramUniform1f = glow_lazy_glProgramUniform1f;
static void glow_lazy_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {
  glow_glTexEnvfv = (PFNGLTEXENVFVPROC)((ptrdiff_t)(glow_get_proc("glTexEnvfv")));
  if (glow_glTexEnvfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnvfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnvfv\n");
#endif
  }
  glow_glTexEnvfv(target, pname, params);
}
PFNGLTEXENVFVPROC glow_glTexEnvfv = glow_lazy_glTexEnvfv;
static void glow_lazy_glMultiTexCoord3iv(GLenum target, const GLint *v) {
  glow_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3iv")));
  if (glow_glMultiTexCoord3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3iv\n");
#endif
  }
  glow_glMultiTexCoord3iv(target, v);
}
PFNGLMULTITEXCOORD3IVPROC glow_glMultiTexCoord3iv = glow_lazy_glMultiTexCoord3iv;
static void glow_lazy_glSecondaryColor3sv(const GLshort *v) {
  glow_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3sv")));
  if (glow_glSecondaryColor3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3sv\n");
#endif
  }
  glow_glSecondaryColor3sv(v);
}
PFNGLSECONDARYCOLOR3SVPROC glow_glSecondaryColor3sv = glow_lazy_glSecondaryColor3sv;
static GLuint glow_lazy_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {
  glow_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)((ptrdiff_t)(glow_get_proc("glCreateShaderProgramv")));
  if (glow_glCreateShaderProgramv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCreateShaderProgramv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCreateShaderProgramv\n");
#endif
  }
  return glow_glCreateShaderProgramv(type, count, strings);
}
PFNGLCREATESHADERPROGRAMVPROC glow_glCreateShaderProgramv = glow_lazy_glCreateShaderProgramv;
static void glow_lazy_glColor3iv(const GLint *v) {
  glow_glColor3iv = (PFNGLCOLOR3IVPROC)((ptrdiff_t)(glow_get_proc("glColor3iv")));
  if (glow_glColor3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3iv\n");
#endif
  }
  glow_glColor3iv(v);
}
PFNGLCOLOR3IVPROC glow_glColor3iv = glow_lazy_glColor3iv;
static void glow_lazy_glEvalCoord1d(GLdouble u) {
  glow_glEvalCoord1d = (PFNGLEVALCOORD1DPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord1d")));
  if (glow_glEvalCoord1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1d\n");
#endif
  }
  glow_glEvalCoord1d(u);
}
PFNGLEVALCOORD1DPROC glow_glEvalCoord1d = glow_lazy_glEvalCoord1d;
static void glow_lazy_glPushAttrib(GLbitfield mask) {
  glow_glPushAttrib = (PFNGLPUSHATTRIBPROC)((ptrdiff_t)(glow_get_proc("glPushAttrib")));
  if (glow_glPushAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushAttrib\n");
#endif
  }
  glow_glPushAttrib(mask);
}
PFNGLPUSHATTRIBPROC glow_glPushAttrib = glow_lazy_glPushAttrib;
static void glow_lazy_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  glow_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)((ptrdiff_t)(glow_get_proc("glBlendFuncSeparate")));
  if (glow_glBlendFuncSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFuncSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFuncSeparate\n");
#endif
  }
  glow_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
PFNGLBLENDFUNCSEPARATEPROC glow_glBlendFuncSeparate = glow_lazy_glBlendFuncSeparate;
static void glow_lazy_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  glow_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4f")));
  if (glow_glVertexAttrib4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4f\n");
#endif
  }
  glow_glVertexAttrib4f(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4FPROC glow_glVertexAttrib4f = glow_lazy_glVertexAttrib4f;
static void glow_lazy_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {
  glow_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)((ptrdiff_t)(glow_get_proc("glGetUniformIndices")));
  if (glow_glGetUniformIndices == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformIndices\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformIndices\n");
#endif
  }
  glow_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}
PFNGLGETUNIFORMINDICESPROC glow_glGetUniformIndices = glow_lazy_glGetUniformIndices;
static void glow_lazy_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
  glow_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP1ui")));
  if (glow_glMultiTexCoordP1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP1ui\n");
#endif
  }
  glow_glMultiTexCoordP1ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP1UIPROC glow_glMultiTexCoordP1ui = glow_lazy_glMultiTexCoordP1ui;
static void glow_lazy_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {
  glow_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)((ptrdiff_t)(glow_get_proc("glClearBufferData")));
  if (glow_glClearBufferData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferData\n");
#endif
  }
  glow_glClearBufferData(target, internalformat, format, type, data);
}
PFNGLCLEARBUFFERDATAPROC glow_glClearBufferData = glow_lazy_glClearBufferData;
static void glow_lazy_glIndexMask(GLuint mask) {
  glow_glIndexMask = (PFNGLINDEXMASKPROC)((ptrdiff_t)(glow_get_proc("glIndexMask")));
  if (glow_glIndexMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexMask\n");
#endif
  }
  glow_glIndexMask(mask);
}
PFNGLINDEXMASKPROC glow_glIndexMask = glow_lazy_glIndexMask;
static void glow_lazy_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  glow_glDrawPixels = (PFNGLDRAWPIXELSPROC)((ptrdiff_t)(glow_get_proc("glDrawPixels")));
  if (glow_glDrawPixels == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawPixels\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawPixels\n");
#endif
  }
  glow_glDrawPixels(width, height, format, type, pixels);
}
PFNGLDRAWPIXELSPROC glow_glDrawPixels = glow_lazy_glDrawPixels;
static void glow_lazy_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
  glow_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)((ptrdiff_t)(glow_get_proc("glCompressedTexSubImage3D")));
  if (glow_glCompressedTexSubImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexSubImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexSubImage3D\n");
#endif
  }
  glow_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glow_glCompressedTexSubImage3D = glow_lazy_glCompressedTexSubImage3D;
static void glow_lazy_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  glow_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4d")));
  if (glow_glMultiTexCoord4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4d\n");
#endif
  }
  glow_glMultiTexCoord4d(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4DPROC glow_glMultiTexCoord4d = glow_lazy_glMultiTexCoord4d;
static void glow_lazy_glColorP4uiv(GLenum type, const GLuint *color) {
  glow_glColorP4uiv = (PFNGLCOLORP4UIVPROC)((ptrdiff_t)(glow_get_proc("glColorP4uiv")));
  if (glow_glColorP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP4uiv\n");
#endif
  }
  glow_glColorP4uiv(type, color);
}
PFNGLCOLORP4UIVPROC glow_glColorP4uiv = glow_lazy_glColorP4uiv;
static void glow_lazy_glColor3bv(const GLbyte *v) {
  glow_glColor3bv = (PFNGLCOLOR3BVPROC)((ptrdiff_t)(glow_get_proc("glColor3bv")));
  if (glow_glColor3bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3bv\n");
#endif
  }
  glow_glColor3bv(v);
}
PFNGLCOLOR3BVPROC glow_glColor3bv = glow_lazy_glColor3bv;
static void glow_lazy_glNewList(GLuint list, GLenum mode) {
  glow_glNewList = (PFNGLNEWLISTPROC)((ptrdiff_t)(glow_get_proc("glNewList")));
  if (glow_glNewList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNewList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNewList\n");
#endif
  }
  glow_glNewList(list, mode);
}
PFNGLNEWLISTPROC glow_glNewList = glow_lazy_glNewList;
static void glow_lazy_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
  glow_glTexCoord3s = (PFNGLTEXCOORD3SPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3s")));
  if (glow_glTexCoord3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3s\n");
#endif
  }
  glow_glTexCoord3s(s, t, r);
}
PFNGLTEXCOORD3SPROC glow_glTexCoord3s = glow_lazy_glTexCoord3s;
static void glow_lazy_glBlendFunc(GLenum sfactor, GLenum dfactor) {
  glow_glBlendFunc = (PFNGLBLENDFUNCPROC)((ptrdiff_t)(glow_get_proc("glBlendFunc")));
  if (glow_glBlendFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFunc\n");
#endif
  }
  glow_glBlendFunc(sfactor, dfactor);
}
PFNGLBLENDFUNCPROC glow_glBlendFunc = glow_lazy_glBlendFunc;
static void glow_lazy_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
  glow_glMap1d = (PFNGLMAP1DPROC)((ptrdiff_t)(glow_get_proc("glMap1d")));
  if (glow_glMap1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap1d\n");
#endif
  }
  glow_glMap1d(target, u1, u2, stride, order, points);
}
PFNGLMAP1DPROC glow_glMap1d = glow_lazy_glMap1d;
static void glow_lazy_glDeleteBuffers(GLsizei n, const GLuint *buffers) {
  glow_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glDeleteBuffers")));
  if (glow_glDeleteBuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteBuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteBuffers\n");
#endif
  }
  glow_glDeleteBuffers(n, buffers);
}
PFNGLDELETEBUFFERSPROC glow_glDeleteBuffers = glow_lazy_glDeleteBuffers;
static GLboolean glow_lazy_glIsProgram(GLuint program) {
  glow_glIsProgram = (PFNGLISPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glIsProgram")));
  if (glow_glIsProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsProgram\n");
#endif
  }
  return glow_glIsProgram(program);
}
PFNGLISPROGRAMPROC glow_glIsProgram = glow_lazy_glIsProgram;
static void glow_lazy_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
  glow_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribPointer")));
  if (glow_glVertexAttribPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribPointer\n");
#endif
  }
  glow_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}
PFNGLVERTEXATTRIBPOINTERPROC glow_glVertexAttribPointer = glow_lazy_glVertexAttribPointer;
static void glow_lazy_glVertex3s(GLshort x, GLshort y, GLshort z) {
  glow_glVertex3s = (PFNGLVERTEX3SPROC)((ptrdiff_t)(glow_get_proc("glVertex3s")));
  if (glow_glVertex3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3s\n");
#endif
  }
  glow_glVertex3s(x, y, z);
}
PFNGLVERTEX3SPROC glow_glVertex3s = glow_lazy_glVertex3s;
static void glow_lazy_glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {
  glow_glUniform2dv = (PFNGLUNIFORM2DVPROC)((ptrdiff_t)(glow_get_proc("glUniform2dv")));
  if (glow_glUniform2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2dv\n");
#endif
  }
  glow_glUniform2dv(location, count, value);
}
PFNGLUNIFORM2DVPROC glow_glUniform2dv = glow_lazy_glUniform2dv;
static void glow_lazy_glLightfv(GLenum light, GLenum pname, const GLfloat *params) {
  glow_glLightfv = (PFNGLLIGHTFVPROC)((ptrdiff_t)(glow_get_proc("glLightfv")));
  if (glow_glLightfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightfv\n");
#endif
  }
  glow_glLightfv(light, pname, params);
}
PFNGLLIGHTFVPROC glow_glLightfv = glow_lazy_glLightfv;
static void glow_lazy_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  glow_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3b")));
  if (glow_glSecondaryColor3b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3b\n");
#endif
  }
  glow_glSecondaryColor3b(red, green, blue);
}
PFNGLSECONDARYCOLOR3BPROC glow_glSecondaryColor3b = glow_lazy_glSecondaryColor3b;
static void glow_lazy_glBlendEquation(GLenum mode) {
  glow_glBlendEquation = (PFNGLBLENDEQUATIONPROC)((ptrdiff_t)(glow_get_proc("glBlendEquation")));
  if (glow_glBlendEquation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquation\n");
#endif
  }
  glow_glBlendEquation(mode);
}
PFNGLBLENDEQUATIONPROC glow_glBlendEquation = glow_lazy_glBlendEquation;
static void glow_lazy_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glow_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribIPointer")));
  if (glow_glVertexAttribIPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribIPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribIPointer\n");
#endif
  }
  glow_glVertexAttribIPointer(index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBIPOINTERPROC glow_glVertexAttribIPointer = glow_lazy_glVertexAttribIPointer;
static void glow_lazy_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
  glow_glMap2f = (PFNGLMAP2FPROC)((ptrdiff_t)(glow_get_proc("glMap2f")));
  if (glow_glMap2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap2f\n");
#endif
  }
  glow_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2FPROC glow_glMap2f = glow_lazy_glMap2f;
static void glow_lazy_glVertexAttribI1uiv(GLuint index, const GLuint *v) {
  glow_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI1uiv")));
  if (glow_glVertexAttribI1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1uiv\n");
#endif
  }
  glow_glVertexAttribI1uiv(index, v);
}
PFNGLVERTEXATTRIBI1UIVPROC glow_glVertexAttribI1uiv = glow_lazy_glVertexAttribI1uiv;
static GLuint glow_lazy_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {
  glow_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)((ptrdiff_t)(glow_get_proc("glGetUniformBlockIndex")));
  if (glow_glGetUniformBlockIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformBlockIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformBlockIndex\n");
#endif
  }
  return glow_glGetUniformBlockIndex(program, uniformBlockName);
}
PFNGLGETUNIFORMBLOCKINDEXPROC glow_glGetUniformBlockIndex = glow_lazy_glGetUniformBlockIndex;
static void glow_lazy_glTexCoord4iv(const GLint *v) {
  glow_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4iv")));
  if (glow_glTexCoord4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4iv\n");
#endif
  }
  glow_glTexCoord4iv(v);
}
PFNGLTEXCOORD4IVPROC glow_glTexCoord4iv = glow_lazy_glTexCoord4iv;
static void glow_lazy_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  glow_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)((ptrdiff_t)(glow_get_proc("glCopyTexSubImage1D")));
  if (glow_glCopyTexSubImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexSubImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexSubImage1D\n");
#endif
  }
  glow_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}
PFNGLCOPYTEXSUBIMAGE1DPROC glow_glCopyTexSubImage1D = glow_lazy_glCopyTexSubImage1D;
static void glow_lazy_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  glow_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)((ptrdiff_t)(glow_get_proc("glCopyTexSubImage2D")));
  if (glow_glCopyTexSubImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexSubImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexSubImage2D\n");
#endif
  }
  glow_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE2DPROC glow_glCopyTexSubImage2D = glow_lazy_glCopyTexSubImage2D;
static void glow_lazy_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
  glow_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3d")));
  if (glow_glWindowPos3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3d\n");
#endif
  }
  glow_glWindowPos3d(x, y, z);
}
PFNGLWINDOWPOS3DPROC glow_glWindowPos3d = glow_lazy_glWindowPos3d;
static void glow_lazy_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {
  glow_glBitmap = (PFNGLBITMAPPROC)((ptrdiff_t)(glow_get_proc("glBitmap")));
  if (glow_glBitmap == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBitmap\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBitmap\n");
#endif
  }
  glow_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}
PFNGLBITMAPPROC glow_glBitmap = glow_lazy_glBitmap;
static void glow_lazy_glColor4dv(const GLdouble *v) {
  glow_glColor4dv = (PFNGLCOLOR4DVPROC)((ptrdiff_t)(glow_get_proc("glColor4dv")));
  if (glow_glColor4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4dv\n");
#endif
  }
  glow_glColor4dv(v);
}
PFNGLCOLOR4DVPROC glow_glColor4dv = glow_lazy_glColor4dv;
static void glow_lazy_glFogf(GLenum pname, GLfloat param) {
  glow_glFogf = (PFNGLFOGFPROC)((ptrdiff_t)(glow_get_proc("glFogf")));
  if (glow_glFogf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogf\n");
#endif
  }
  glow_glFogf(pname, param);
}
PFNGLFOGFPROC glow_glFogf = glow_lazy_glFogf;
static void glow_lazy_glPassThrough(GLfloat token) {
  glow_glPassThrough = (PFNGLPASSTHROUGHPROC)((ptrdiff_t)(glow_get_proc("glPassThrough")));
  if (glow_glPassThrough == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPassThrough\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPassThrough\n");
#endif
  }
  glow_glPassThrough(token);
}
PFNGLPASSTHROUGHPROC glow_glPassThrough = glow_lazy_glPassThrough;
static void glow_lazy_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
  glow_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2f")));
  if (glow_glMultiTexCoord2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2f\n");
#endif
  }
  glow_glMultiTexCoord2f(target, s, t);
}
PFNGLMULTITEXCOORD2FPROC glow_glMultiTexCoord2f = glow_lazy_glMultiTexCoord2f;
static void glow_lazy_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
  glow_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3s")));
  if (glow_glSecondaryColor3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3s\n");
#endif
  }
  glow_glSecondaryColor3s(red, green, blue);
}
PFNGLSECONDARYCOLOR3SPROC glow_glSecondaryColor3s = glow_lazy_glSecondaryColor3s;
static void glow_lazy_glGetFloatv(GLenum pname, GLfloat *data) {
  glow_glGetFloatv = (PFNGLGETFLOATVPROC)((ptrdiff_t)(glow_get_proc("glGetFloatv")));
  if (glow_glGetFloatv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFloatv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFloatv\n");
#endif
  }
  glow_glGetFloatv(pname, data);
}
PFNGLGETFLOATVPROC glow_glGetFloatv = glow_lazy_glGetFloatv;
static void glow_lazy_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix2x4fv")));
  if (glow_glUniformMatrix2x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x4fv\n");
#endif
  }
  glow_glUniformMatrix2x4fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X4FVPROC glow_glUniformMatrix2x4fv = glow_lazy_glUniformMatrix2x4fv;
static void glow_lazy_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glow_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP1uiv")));
  if (glow_glVertexAttribP1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP1uiv\n");
#endif
  }
  glow_glVertexAttribP1uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP1UIVPROC glow_glVertexAttribP1uiv = glow_lazy_glVertexAttribP1uiv;
static void glow_lazy_glEndQueryIndexed(GLenum target, GLuint index) {
  glow_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)((ptrdiff_t)(glow_get_proc("glEndQueryIndexed")));
  if (glow_glEndQueryIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndQueryIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndQueryIndexed\n");
#endif
  }
  glow_glEndQueryIndexed(target, index);
}
PFNGLENDQUERYINDEXEDPROC glow_glEndQueryIndexed = glow_lazy_glEndQueryIndexed;
static void glow_lazy_glGenQueries(GLsizei n, GLuint *ids) {
  glow_glGenQueries = (PFNGLGENQUERIESPROC)((ptrdiff_t)(glow_get_proc("glGenQueries")));
  if (glow_glGenQueries == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenQueries\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenQueries\n");
#endif
  }
  glow_glGenQueries(n, ids);
}
PFNGLGENQUERIESPROC glow_glGenQueries = glow_lazy_glGenQueries;
static void glow_lazy_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix2x3dv")));
  if (glow_glUniformMatrix2x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x3dv\n");
#endif
  }
  glow_glUniformMatrix2x3dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X3DVPROC glow_glUniformMatrix2x3dv = glow_lazy_glUniformMatrix2x3dv;
static void glow_lazy_glTexCoord2iv(const GLint *v) {
  glow_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2iv")));
  if (glow_glTexCoord2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2iv\n");
#endif
  }
  glow_glTexCoord2iv(v);
}
PFNGLTEXCOORD2IVPROC glow_glTexCoord2iv = glow_lazy_glTexCoord2iv;
static void glow_lazy_glGetMapfv(GLenum target, GLenum query, GLfloat *v) {
  glow_glGetMapfv = (PFNGLGETMAPFVPROC)((ptrdiff_t)(glow_get_proc("glGetMapfv")));
  if (glow_glGetMapfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMapfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMapfv\n");
#endif
  }
  glow_glGetMapfv(target, query, v);
}
PFNGLGETMAPFVPROC glow_glGetMapfv = glow_lazy_glGetMapfv;
static void glow_lazy_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {
  glow_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)((ptrdiff_t)(glow_get_proc("glGetTexEnvfv")));
  if (glow_glGetTexEnvfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexEnvfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexEnvfv\n");
#endif
  }
  glow_glGetTexEnvfv(target, pname, params);
}
PFNGLGETTEXENVFVPROC glow_glGetTexEnvfv = glow_lazy_glGetTexEnvfv;
static void glow_lazy_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  glow_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1ui")));
  if (glow_glProgramUniform1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1ui\n");
#endif
  }
  glow_glProgramUniform1ui(program, location, v0);
}
PFNGLPROGRAMUNIFORM1UIPROC glow_glProgramUniform1ui = glow_lazy_glProgramUniform1ui;
static void glow_lazy_glDepthFunc(GLenum func) {
  glow_glDepthFunc = (PFNGLDEPTHFUNCPROC)((ptrdiff_t)(glow_get_proc("glDepthFunc")));
  if (glow_glDepthFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthFunc\n");
#endif
  }
  glow_glDepthFunc(func);
}
PFNGLDEPTHFUNCPROC glow_glDepthFunc = glow_lazy_glDepthFunc;
static void glow_lazy_glGetCompressedTexImage(GLenum target, GLint level, void *img) {
  glow_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)((ptrdiff_t)(glow_get_proc("glGetCompressedTexImage")));
  if (glow_glGetCompressedTexImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetCompressedTexImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetCompressedTexImage\n");
#endif
  }
  glow_glGetCompressedTexImage(target, level, img);
}
PFNGLGETCOMPRESSEDTEXIMAGEPROC glow_glGetCompressedTexImage = glow_lazy_glGetCompressedTexImage;
static GLint glow_lazy_glRenderMode(GLenum mode) {
  glow_glRenderMode = (PFNGLRENDERMODEPROC)((ptrdiff_t)(glow_get_proc("glRenderMode")));
  if (glow_glRenderMode == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRenderMode\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRenderMode\n");
#endif
  }
  return glow_glRenderMode(mode);
}
PFNGLRENDERMODEPROC glow_glRenderMode = glow_lazy_glRenderMode;
static void glow_lazy_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  glow_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)((ptrdiff_t)(glow_get_proc("glCopyTexImage1D")));
  if (glow_glCopyTexImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexImage1D\n");
#endif
  }
  glow_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}
PFNGLCOPYTEXIMAGE1DPROC glow_glCopyTexImage1D = glow_lazy_glCopyTexImage1D;
static void glow_lazy_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
  glow_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)((ptrdiff_t)(glow_get_proc("glGetActiveUniformsiv")));
  if (glow_glGetActiveUniformsiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformsiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformsiv\n");
#endif
  }
  glow_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}
PFNGLGETACTIVEUNIFORMSIVPROC glow_glGetActiveUniformsiv = glow_lazy_glGetActiveUniformsiv;
static void glow_lazy_glPopAttrib() {
  glow_glPopAttrib = (PFNGLPOPATTRIBPROC)((ptrdiff_t)(glow_get_proc("glPopAttrib")));
  if (glow_glPopAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopAttrib\n");
#endif
  }
  glow_glPopAttrib();
}
PFNGLPOPATTRIBPROC glow_glPopAttrib = glow_lazy_glPopAttrib;
static void glow_lazy_glGetMapdv(GLenum target, GLenum query, GLdouble *v) {
  glow_glGetMapdv = (PFNGLGETMAPDVPROC)((ptrdiff_t)(glow_get_proc("glGetMapdv")));
  if (glow_glGetMapdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMapdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMapdv\n");
#endif
  }
  glow_glGetMapdv(target, query, v);
}
PFNGLGETMAPDVPROC glow_glGetMapdv = glow_lazy_glGetMapdv;
static void glow_lazy_glGenTextures(GLsizei n, GLuint *textures) {
  glow_glGenTextures = (PFNGLGENTEXTURESPROC)((ptrdiff_t)(glow_get_proc("glGenTextures")));
  if (glow_glGenTextures == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenTextures\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenTextures\n");
#endif
  }
  glow_glGenTextures(n, textures);
}
PFNGLGENTEXTURESPROC glow_glGenTextures = glow_lazy_glGenTextures;
static void glow_lazy_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
  glow_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)((ptrdiff_t)(glow_get_proc("glCompressedTexImage2D")));
  if (glow_glCompressedTexImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexImage2D\n");
#endif
  }
  glow_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE2DPROC glow_glCompressedTexImage2D = glow_lazy_glCompressedTexImage2D;
static void glow_lazy_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  glow_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)((ptrdiff_t)(glow_get_proc("glFramebufferTexture2D")));
  if (glow_glFramebufferTexture2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture2D\n");
#endif
  }
  glow_glFramebufferTexture2D(target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE2DPROC glow_glFramebufferTexture2D = glow_lazy_glFramebufferTexture2D;
static void glow_lazy_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {
  glow_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)((ptrdiff_t)(glow_get_proc("glGetInternalformati64v")));
  if (glow_glGetInternalformati64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInternalformati64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInternalformati64v\n");
#endif
  }
  glow_glGetInternalformati64v(target, internalformat, pname, bufSize, params);
}
PFNGLGETINTERNALFORMATI64VPROC glow_glGetInternalformati64v = glow_lazy_glGetInternalformati64v;
static void glow_lazy_glLighti(GLenum light, GLenum pname, GLint param) {
  glow_glLighti = (PFNGLLIGHTIPROC)((ptrdiff_t)(glow_get_proc("glLighti")));
  if (glow_glLighti == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLighti\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLighti\n");
#endif
  }
  glow_glLighti(light, pname, param);
}
PFNGLLIGHTIPROC glow_glLighti = glow_lazy_glLighti;
static void glow_lazy_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix3x4fv")));
  if (glow_glUniformMatrix3x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x4fv\n");
#endif
  }
  glow_glUniformMatrix3x4fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X4FVPROC glow_glUniformMatrix3x4fv = glow_lazy_glUniformMatrix3x4fv;
static GLubyte glow_lazy_glGetStringi(GLenum name, GLuint index) {
  glow_glGetStringi = (PFNGLGETSTRINGIPROC)((ptrdiff_t)(glow_get_proc("glGetStringi")));
  if (glow_glGetStringi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetStringi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetStringi\n");
#endif
  }
  return glow_glGetStringi(name, index);
}
PFNGLGETSTRINGIPROC glow_glGetStringi = glow_lazy_glGetStringi;
static void glow_lazy_glVertexP3uiv(GLenum type, const GLuint *value) {
  glow_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexP3uiv")));
  if (glow_glVertexP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP3uiv\n");
#endif
  }
  glow_glVertexP3uiv(type, value);
}
PFNGLVERTEXP3UIVPROC glow_glVertexP3uiv = glow_lazy_glVertexP3uiv;
static void glow_lazy_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {
  glow_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)((ptrdiff_t)(glow_get_proc("glMultiDrawArrays")));
  if (glow_glMultiDrawArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawArrays\n");
#endif
  }
  glow_glMultiDrawArrays(mode, first, count, drawcount);
}
PFNGLMULTIDRAWARRAYSPROC glow_glMultiDrawArrays = glow_lazy_glMultiDrawArrays;
static void glow_lazy_glAttachShader(GLuint program, GLuint shader) {
  glow_glAttachShader = (PFNGLATTACHSHADERPROC)((ptrdiff_t)(glow_get_proc("glAttachShader")));
  if (glow_glAttachShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAttachShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAttachShader\n");
#endif
  }
  glow_glAttachShader(program, shader);
}
PFNGLATTACHSHADERPROC glow_glAttachShader = glow_lazy_glAttachShader;
static GLboolean glow_lazy_glIsList(GLuint list) {
  glow_glIsList = (PFNGLISLISTPROC)((ptrdiff_t)(glow_get_proc("glIsList")));
  if (glow_glIsList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsList\n");
#endif
  }
  return glow_glIsList(list);
}
PFNGLISLISTPROC glow_glIsList = glow_lazy_glIsList;
static void glow_lazy_glDeleteQueries(GLsizei n, const GLuint *ids) {
  glow_glDeleteQueries = (PFNGLDELETEQUERIESPROC)((ptrdiff_t)(glow_get_proc("glDeleteQueries")));
  if (glow_glDeleteQueries == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteQueries\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteQueries\n");
#endif
  }
  glow_glDeleteQueries(n, ids);
}
PFNGLDELETEQUERIESPROC glow_glDeleteQueries = glow_lazy_glDeleteQueries;
static void glow_lazy_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  glow_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4ui")));
  if (glow_glVertexAttribI4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4ui\n");
#endif
  }
  glow_glVertexAttribI4ui(index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4UIPROC glow_glVertexAttribI4ui = glow_lazy_glVertexAttribI4ui;
static void glow_lazy_glVertexAttrib4iv(GLuint index, const GLint *v) {
  glow_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4iv")));
  if (glow_glVertexAttrib4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4iv\n");
#endif
  }
  glow_glVertexAttrib4iv(index, v);
}
PFNGLVERTEXATTRIB4IVPROC glow_glVertexAttrib4iv = glow_lazy_glVertexAttrib4iv;
static void glow_lazy_glEdgeFlag(GLboolean flag) {
  glow_glEdgeFlag = (PFNGLEDGEFLAGPROC)((ptrdiff_t)(glow_get_proc("glEdgeFlag")));
  if (glow_glEdgeFlag == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEdgeFlag\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEdgeFlag\n");
#endif
  }
  glow_glEdgeFlag(flag);
}
PFNGLEDGEFLAGPROC glow_glEdgeFlag = glow_lazy_glEdgeFlag;
static void glow_lazy_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  glow_glRotated = (PFNGLROTATEDPROC)((ptrdiff_t)(glow_get_proc("glRotated")));
  if (glow_glRotated == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRotated\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRotated\n");
#endif
  }
  glow_glRotated(angle, x, y, z);
}
PFNGLROTATEDPROC glow_glRotated = glow_lazy_glRotated;
static void glow_lazy_glPointSize(GLfloat size) {
  glow_glPointSize = (PFNGLPOINTSIZEPROC)((ptrdiff_t)(glow_get_proc("glPointSize")));
  if (glow_glPointSize == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointSize\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointSize\n");
#endif
  }
  glow_glPointSize(size);
}
PFNGLPOINTSIZEPROC glow_glPointSize = glow_lazy_glPointSize;
static void glow_lazy_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {
  glow_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)((ptrdiff_t)(glow_get_proc("glDepthRangeArrayv")));
  if (glow_glDepthRangeArrayv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRangeArrayv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRangeArrayv\n");
#endif
  }
  glow_glDepthRangeArrayv(first, count, v);
}
PFNGLDEPTHRANGEARRAYVPROC glow_glDepthRangeArrayv = glow_lazy_glDepthRangeArrayv;
static void glow_lazy_glLoadIdentity() {
  glow_glLoadIdentity = (PFNGLLOADIDENTITYPROC)((ptrdiff_t)(glow_get_proc("glLoadIdentity")));
  if (glow_glLoadIdentity == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadIdentity\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadIdentity\n");
#endif
  }
  glow_glLoadIdentity();
}
PFNGLLOADIDENTITYPROC glow_glLoadIdentity = glow_lazy_glLoadIdentity;
static void glow_lazy_glVertex3sv(const GLshort *v) {
  glow_glVertex3sv = (PFNGLVERTEX3SVPROC)((ptrdiff_t)(glow_get_proc("glVertex3sv")));
  if (glow_glVertex3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3sv\n");
#endif
  }
  glow_glVertex3sv(v);
}
PFNGLVERTEX3SVPROC glow_glVertex3sv = glow_lazy_glVertex3sv;
static void glow_lazy_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix4x3fv")));
  if (glow_glProgramUniformMatrix4x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x3fv\n");
#endif
  }
  glow_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glow_glProgramUniformMatrix4x3fv = glow_lazy_glProgramUniformMatrix4x3fv;
static void glow_lazy_glDisableClientState(GLenum array) {
  glow_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)((ptrdiff_t)(glow_get_proc("glDisableClientState")));
  if (glow_glDisableClientState == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisableClientState\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisableClientState\n");
#endif
  }
  glow_glDisableClientState(array);
}
PFNGLDISABLECLIENTSTATEPROC glow_glDisableClientState = glow_lazy_glDisableClientState;
static void glow_lazy_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  glow_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3f")));
  if (glow_glSecondaryColor3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3f\n");
#endif
  }
  glow_glSecondaryColor3f(red, green, blue);
}
PFNGLSECONDARYCOLOR3FPROC glow_glSecondaryColor3f = glow_lazy_glSecondaryColor3f;
static void glow_lazy_glVertexAttrib3sv(GLuint index, const GLshort *v) {
  glow_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib3sv")));
  if (glow_glVertexAttrib3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3sv\n");
#endif
  }
  glow_glVertexAttrib3sv(index, v);
}
PFNGLVERTEXATTRIB3SVPROC glow_glVertexAttrib3sv = glow_lazy_glVertexAttrib3sv;
static void glow_lazy_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glow_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP3uiv")));
  if (glow_glVertexAttribP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP3uiv\n");
#endif
  }
  glow_glVertexAttribP3uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP3UIVPROC glow_glVertexAttribP3uiv = glow_lazy_glVertexAttribP3uiv;
static void glow_lazy_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  glow_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)((ptrdiff_t)(glow_get_proc("glProgramParameteri")));
  if (glow_glProgramParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramParameteri\n");
#endif
  }
  glow_glProgramParameteri(program, pname, value);
}
PFNGLPROGRAMPARAMETERIPROC glow_glProgramParameteri = glow_lazy_glProgramParameteri;
static void glow_lazy_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {
  glow_glGetTexGeniv = (PFNGLGETTEXGENIVPROC)((ptrdiff_t)(glow_get_proc("glGetTexGeniv")));
  if (glow_glGetTexGeniv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexGeniv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexGeniv\n");
#endif
  }
  glow_glGetTexGeniv(coord, pname, params);
}
PFNGLGETTEXGENIVPROC glow_glGetTexGeniv = glow_lazy_glGetTexGeniv;
static void glow_lazy_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  glow_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4s")));
  if (glow_glVertexAttrib4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4s\n");
#endif
  }
  glow_glVertexAttrib4s(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4SPROC glow_glVertexAttrib4s = glow_lazy_glVertexAttrib4s;
static void glow_lazy_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix2dv")));
  if (glow_glUniformMatrix2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2dv\n");
#endif
  }
  glow_glUniformMatrix2dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2DVPROC glow_glUniformMatrix2dv = glow_lazy_glUniformMatrix2dv;
static void glow_lazy_glViewportIndexedfv(GLuint index, const GLfloat *v) {
  glow_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)((ptrdiff_t)(glow_get_proc("glViewportIndexedfv")));
  if (glow_glViewportIndexedfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewportIndexedfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewportIndexedfv\n");
#endif
  }
  glow_glViewportIndexedfv(index, v);
}
PFNGLVIEWPORTINDEXEDFVPROC glow_glViewportIndexedfv = glow_lazy_glViewportIndexedfv;
static void glow_lazy_glVertexAttrib2fv(GLuint index, const GLfloat *v) {
  glow_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib2fv")));
  if (glow_glVertexAttrib2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2fv\n");
#endif
  }
  glow_glVertexAttrib2fv(index, v);
}
PFNGLVERTEXATTRIB2FVPROC glow_glVertexAttrib2fv = glow_lazy_glVertexAttrib2fv;
static void glow_lazy_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glow_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP1uiv")));
  if (glow_glMultiTexCoordP1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP1uiv\n");
#endif
  }
  glow_glMultiTexCoordP1uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP1UIVPROC glow_glMultiTexCoordP1uiv = glow_lazy_glMultiTexCoordP1uiv;
static void glow_lazy_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix4x3dv")));
  if (glow_glUniformMatrix4x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x3dv\n");
#endif
  }
  glow_glUniformMatrix4x3dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X3DVPROC glow_glUniformMatrix4x3dv = glow_lazy_glUniformMatrix4x3dv;
static void glow_lazy_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix2dv")));
  if (glow_glProgramUniformMatrix2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2dv\n");
#endif
  }
  glow_glProgramUniformMatrix2dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glow_glProgramUniformMatrix2dv = glow_lazy_glProgramUniformMatrix2dv;
static void glow_lazy_glListBase(GLuint base) {
  glow_glListBase = (PFNGLLISTBASEPROC)((ptrdiff_t)(glow_get_proc("glListBase")));
  if (glow_glListBase == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glListBase\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glListBase\n");
#endif
  }
  glow_glListBase(base);
}
PFNGLLISTBASEPROC glow_glListBase = glow_lazy_glListBase;
static void glow_lazy_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  glow_glUniform3f = (PFNGLUNIFORM3FPROC)((ptrdiff_t)(glow_get_proc("glUniform3f")));
  if (glow_glUniform3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3f\n");
#endif
  }
  glow_glUniform3f(location, v0, v1, v2);
}
PFNGLUNIFORM3FPROC glow_glUniform3f = glow_lazy_glUniform3f;
static void glow_lazy_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
  glow_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)((ptrdiff_t)(glow_get_proc("glGetActiveUniformName")));
  if (glow_glGetActiveUniformName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformName\n");
#endif
  }
  glow_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}
PFNGLGETACTIVEUNIFORMNAMEPROC glow_glGetActiveUniformName = glow_lazy_glGetActiveUniformName;
static void glow_lazy_glGetPointerv(GLenum pname, void **params) {
  glow_glGetPointerv = (PFNGLGETPOINTERVPROC)((ptrdiff_t)(glow_get_proc("glGetPointerv")));
  if (glow_glGetPointerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPointerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPointerv\n");
#endif
  }
  glow_glGetPointerv(pname, params);
}
PFNGLGETPOINTERVPROC glow_glGetPointerv = glow_lazy_glGetPointerv;
static void glow_lazy_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
  glow_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)((ptrdiff_t)(glow_get_proc("glTexSubImage1D")));
  if (glow_glTexSubImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexSubImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexSubImage1D\n");
#endif
  }
  glow_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}
PFNGLTEXSUBIMAGE1DPROC glow_glTexSubImage1D = glow_lazy_glTexSubImage1D;
static void glow_lazy_glArrayElement(GLint i) {
  glow_glArrayElement = (PFNGLARRAYELEMENTPROC)((ptrdiff_t)(glow_get_proc("glArrayElement")));
  if (glow_glArrayElement == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glArrayElement\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glArrayElement\n");
#endif
  }
  glow_glArrayElement(i);
}
PFNGLARRAYELEMENTPROC glow_glArrayElement = glow_lazy_glArrayElement;
static void glow_lazy_glUniform2i(GLint location, GLint v0, GLint v1) {
  glow_glUniform2i = (PFNGLUNIFORM2IPROC)((ptrdiff_t)(glow_get_proc("glUniform2i")));
  if (glow_glUniform2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2i\n");
#endif
  }
  glow_glUniform2i(location, v0, v1);
}
PFNGLUNIFORM2IPROC glow_glUniform2i = glow_lazy_glUniform2i;
static void glow_lazy_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  glow_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Nub")));
  if (glow_glVertexAttrib4Nub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nub\n");
#endif
  }
  glow_glVertexAttrib4Nub(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4NUBPROC glow_glVertexAttrib4Nub = glow_lazy_glVertexAttrib4Nub;
static void glow_lazy_glGenFramebuffers(GLsizei n, GLuint *framebuffers) {
  glow_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glGenFramebuffers")));
  if (glow_glGenFramebuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenFramebuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenFramebuffers\n");
#endif
  }
  glow_glGenFramebuffers(n, framebuffers);
}
PFNGLGENFRAMEBUFFERSPROC glow_glGenFramebuffers = glow_lazy_glGenFramebuffers;
static void glow_lazy_glEvalCoord2f(GLfloat u, GLfloat v) {
  glow_glEvalCoord2f = (PFNGLEVALCOORD2FPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord2f")));
  if (glow_glEvalCoord2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2f\n");
#endif
  }
  glow_glEvalCoord2f(u, v);
}
PFNGLEVALCOORD2FPROC glow_glEvalCoord2f = glow_lazy_glEvalCoord2f;
static void glow_lazy_glVertex3dv(const GLdouble *v) {
  glow_glVertex3dv = (PFNGLVERTEX3DVPROC)((ptrdiff_t)(glow_get_proc("glVertex3dv")));
  if (glow_glVertex3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3dv\n");
#endif
  }
  glow_glVertex3dv(v);
}
PFNGLVERTEX3DVPROC glow_glVertex3dv = glow_lazy_glVertex3dv;
static void glow_lazy_glWindowPos2iv(const GLint *v) {
  glow_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2iv")));
  if (glow_glWindowPos2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2iv\n");
#endif
  }
  glow_glWindowPos2iv(v);
}
PFNGLWINDOWPOS2IVPROC glow_glWindowPos2iv = glow_lazy_glWindowPos2iv;
static void glow_lazy_glQueryCounter(GLuint id, GLenum target) {
  glow_glQueryCounter = (PFNGLQUERYCOUNTERPROC)((ptrdiff_t)(glow_get_proc("glQueryCounter")));
  if (glow_glQueryCounter == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glQueryCounter\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glQueryCounter\n");
#endif
  }
  glow_glQueryCounter(id, target);
}
PFNGLQUERYCOUNTERPROC glow_glQueryCounter = glow_lazy_glQueryCounter;
static void glow_lazy_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
  glow_glTexCoord3d = (PFNGLTEXCOORD3DPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3d")));
  if (glow_glTexCoord3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3d\n");
#endif
  }
  glow_glTexCoord3d(s, t, r);
}
PFNGLTEXCOORD3DPROC glow_glTexCoord3d = glow_lazy_glTexCoord3d;
static void glow_lazy_glLightModelfv(GLenum pname, const GLfloat *params) {
  glow_glLightModelfv = (PFNGLLIGHTMODELFVPROC)((ptrdiff_t)(glow_get_proc("glLightModelfv")));
  if (glow_glLightModelfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModelfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModelfv\n");
#endif
  }
  glow_glLightModelfv(pname, params);
}
PFNGLLIGHTMODELFVPROC glow_glLightModelfv = glow_lazy_glLightModelfv;
static void glow_lazy_glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
  glow_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)((ptrdiff_t)(glow_get_proc("glGetUniformfv")));
  if (glow_glGetUniformfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformfv\n");
#endif
  }
  glow_glGetUniformfv(program, location, params);
}
PFNGLGETUNIFORMFVPROC glow_glGetUniformfv = glow_lazy_glGetUniformfv;
static void glow_lazy_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  glow_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)((ptrdiff_t)(glow_get_proc("glFramebufferTexture3D")));
  if (glow_glFramebufferTexture3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture3D\n");
#endif
  }
  glow_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
}
PFNGLFRAMEBUFFERTEXTURE3DPROC glow_glFramebufferTexture3D = glow_lazy_glFramebufferTexture3D;
static void glow_lazy_glPixelStoref(GLenum pname, GLfloat param) {
  glow_glPixelStoref = (PFNGLPIXELSTOREFPROC)((ptrdiff_t)(glow_get_proc("glPixelStoref")));
  if (glow_glPixelStoref == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelStoref\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelStoref\n");
#endif
  }
  glow_glPixelStoref(pname, param);
}
PFNGLPIXELSTOREFPROC glow_glPixelStoref = glow_lazy_glPixelStoref;
static void glow_lazy_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {
  glow_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)((ptrdiff_t)(glow_get_proc("glBindFragDataLocationIndexed")));
  if (glow_glBindFragDataLocationIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindFragDataLocationIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindFragDataLocationIndexed\n");
#endif
  }
  glow_glBindFragDataLocationIndexed(program, colorNumber, index, name);
}
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glow_glBindFragDataLocationIndexed = glow_lazy_glBindFragDataLocationIndexed;
static void glow_lazy_glColorP3ui(GLenum type, GLuint color) {
  glow_glColorP3ui = (PFNGLCOLORP3UIPROC)((ptrdiff_t)(glow_get_proc("glColorP3ui")));
  if (glow_glColorP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP3ui\n");
#endif
  }
  glow_glColorP3ui(type, color);
}
PFNGLCOLORP3UIPROC glow_glColorP3ui = glow_lazy_glColorP3ui;
static void glow_lazy_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
  glow_glTexCoord4i = (PFNGLTEXCOORD4IPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4i")));
  if (glow_glTexCoord4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4i\n");
#endif
  }
  glow_glTexCoord4i(s, t, r, q);
}
PFNGLTEXCOORD4IPROC glow_glTexCoord4i = glow_lazy_glTexCoord4i;
static void glow_lazy_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  glow_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3d")));
  if (glow_glSecondaryColor3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3d\n");
#endif
  }
  glow_glSecondaryColor3d(red, green, blue);
}
PFNGLSECONDARYCOLOR3DPROC glow_glSecondaryColor3d = glow_lazy_glSecondaryColor3d;
static void glow_lazy_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  glow_glUniform4ui = (PFNGLUNIFORM4UIPROC)((ptrdiff_t)(glow_get_proc("glUniform4ui")));
  if (glow_glUniform4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4ui\n");
#endif
  }
  glow_glUniform4ui(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4UIPROC glow_glUniform4ui = glow_lazy_glUniform4ui;
static void glow_lazy_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
  glow_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)((ptrdiff_t)(glow_get_proc("glDrawTransformFeedbackStream")));
  if (glow_glDrawTransformFeedbackStream == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedbackStream\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedbackStream\n");
#endif
  }
  glow_glDrawTransformFeedbackStream(mode, id, stream);
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glow_glDrawTransformFeedbackStream = glow_lazy_glDrawTransformFeedbackStream;
static void glow_lazy_glDepthRangef(GLfloat n, GLfloat f) {
  glow_glDepthRangef = (PFNGLDEPTHRANGEFPROC)((ptrdiff_t)(glow_get_proc("glDepthRangef")));
  if (glow_glDepthRangef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRangef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRangef\n");
#endif
  }
  glow_glDepthRangef(n, f);
}
PFNGLDEPTHRANGEFPROC glow_glDepthRangef = glow_lazy_glDepthRangef;
static void glow_lazy_glRasterPos2dv(const GLdouble *v) {
  glow_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2dv")));
  if (glow_glRasterPos2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2dv\n");
#endif
  }
  glow_glRasterPos2dv(v);
}
PFNGLRASTERPOS2DVPROC glow_glRasterPos2dv = glow_lazy_glRasterPos2dv;
static void glow_lazy_glVertex2s(GLshort x, GLshort y) {
  glow_glVertex2s = (PFNGLVERTEX2SPROC)((ptrdiff_t)(glow_get_proc("glVertex2s")));
  if (glow_glVertex2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2s\n");
#endif
  }
  glow_glVertex2s(x, y);
}
PFNGLVERTEX2SPROC glow_glVertex2s = glow_lazy_glVertex2s;
static void glow_lazy_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  glow_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)((ptrdiff_t)(glow_get_proc("glBindBufferRange")));
  if (glow_glBindBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindBufferRange\n");
#endif
  }
  glow_glBindBufferRange(target, index, buffer, offset, size);
}
PFNGLBINDBUFFERRANGEPROC glow_glBindBufferRange = glow_lazy_glBindBufferRange;
static void glow_lazy_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
  glow_glNormal3s = (PFNGLNORMAL3SPROC)((ptrdiff_t)(glow_get_proc("glNormal3s")));
  if (glow_glNormal3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3s\n");
#endif
  }
  glow_glNormal3s(nx, ny, nz);
}
PFNGLNORMAL3SPROC glow_glNormal3s = glow_lazy_glNormal3s;
static void glow_lazy_glIndexi(GLint c) {
  glow_glIndexi = (PFNGLINDEXIPROC)((ptrdiff_t)(glow_get_proc("glIndexi")));
  if (glow_glIndexi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexi\n");
#endif
  }
  glow_glIndexi(c);
}
PFNGLINDEXIPROC glow_glIndexi = glow_lazy_glIndexi;
static void glow_lazy_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glow_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3fv")));
  if (glow_glProgramUniform3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3fv\n");
#endif
  }
  glow_glProgramUniform3fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3FVPROC glow_glProgramUniform3fv = glow_lazy_glProgramUniform3fv;
static void glow_lazy_glValidateProgramPipeline(GLuint pipeline) {
  glow_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)((ptrdiff_t)(glow_get_proc("glValidateProgramPipeline")));
  if (glow_glValidateProgramPipeline == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glValidateProgramPipeline\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glValidateProgramPipeline\n");
#endif
  }
  glow_glValidateProgramPipeline(pipeline);
}
PFNGLVALIDATEPROGRAMPIPELINEPROC glow_glValidateProgramPipeline = glow_lazy_glValidateProgramPipeline;
static void glow_lazy_glColor3s(GLshort red, GLshort green, GLshort blue) {
  glow_glColor3s = (PFNGLCOLOR3SPROC)((ptrdiff_t)(glow_get_proc("glColor3s")));
  if (glow_glColor3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3s\n");
#endif
  }
  glow_glColor3s(red, green, blue);
}
PFNGLCOLOR3SPROC glow_glColor3s = glow_lazy_glColor3s;
static void glow_lazy_glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
  glow_glUniform3fv = (PFNGLUNIFORM3FVPROC)((ptrdiff_t)(glow_get_proc("glUniform3fv")));
  if (glow_glUniform3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3fv\n");
#endif
  }
  glow_glUniform3fv(location, count, value);
}
PFNGLUNIFORM3FVPROC glow_glUniform3fv = glow_lazy_glUniform3fv;
static GLboolean glow_lazy_glIsRenderbuffer(GLuint renderbuffer) {
  glow_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)((ptrdiff_t)(glow_get_proc("glIsRenderbuffer")));
  if (glow_glIsRenderbuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsRenderbuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsRenderbuffer\n");
#endif
  }
  return glow_glIsRenderbuffer(renderbuffer);
}
PFNGLISRENDERBUFFERPROC glow_glIsRenderbuffer = glow_lazy_glIsRenderbuffer;
static void glow_lazy_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix4dv")));
  if (glow_glUniformMatrix4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4dv\n");
#endif
  }
  glow_glUniformMatrix4dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4DVPROC glow_glUniformMatrix4dv = glow_lazy_glUniformMatrix4dv;
static void glow_lazy_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
  glow_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)((ptrdiff_t)(glow_get_proc("glClearBufferSubData")));
  if (glow_glClearBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferSubData\n");
#endif
  }
  glow_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
}
PFNGLCLEARBUFFERSUBDATAPROC glow_glClearBufferSubData = glow_lazy_glClearBufferSubData;
static void glow_lazy_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glow_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColorPointer")));
  if (glow_glSecondaryColorPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColorPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColorPointer\n");
#endif
  }
  glow_glSecondaryColorPointer(size, type, stride, pointer);
}
PFNGLSECONDARYCOLORPOINTERPROC glow_glSecondaryColorPointer = glow_lazy_glSecondaryColorPointer;
static void glow_lazy_glEndConditionalRender() {
  glow_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)((ptrdiff_t)(glow_get_proc("glEndConditionalRender")));
  if (glow_glEndConditionalRender == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndConditionalRender\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndConditionalRender\n");
#endif
  }
  glow_glEndConditionalRender();
}
PFNGLENDCONDITIONALRENDERPROC glow_glEndConditionalRender = glow_lazy_glEndConditionalRender;
static void glow_lazy_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  glow_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)((ptrdiff_t)(glow_get_proc("glVertexBindingDivisor")));
  if (glow_glVertexBindingDivisor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexBindingDivisor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexBindingDivisor\n");
#endif
  }
  glow_glVertexBindingDivisor(bindingindex, divisor);
}
PFNGLVERTEXBINDINGDIVISORPROC glow_glVertexBindingDivisor = glow_lazy_glVertexBindingDivisor;
static void glow_lazy_glRasterPos2f(GLfloat x, GLfloat y) {
  glow_glRasterPos2f = (PFNGLRASTERPOS2FPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2f")));
  if (glow_glRasterPos2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2f\n");
#endif
  }
  glow_glRasterPos2f(x, y);
}
PFNGLRASTERPOS2FPROC glow_glRasterPos2f = glow_lazy_glRasterPos2f;
static void glow_lazy_glVertexP4uiv(GLenum type, const GLuint *value) {
  glow_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexP4uiv")));
  if (glow_glVertexP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP4uiv\n");
#endif
  }
  glow_glVertexP4uiv(type, value);
}
PFNGLVERTEXP4UIVPROC glow_glVertexP4uiv = glow_lazy_glVertexP4uiv;
static void glow_lazy_glGetPolygonStipple(GLubyte *mask) {
  glow_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)((ptrdiff_t)(glow_get_proc("glGetPolygonStipple")));
  if (glow_glGetPolygonStipple == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPolygonStipple\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPolygonStipple\n");
#endif
  }
  glow_glGetPolygonStipple(mask);
}
PFNGLGETPOLYGONSTIPPLEPROC glow_glGetPolygonStipple = glow_lazy_glGetPolygonStipple;
static void glow_lazy_glRasterPos3sv(const GLshort *v) {
  glow_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3sv")));
  if (glow_glRasterPos3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3sv\n");
#endif
  }
  glow_glRasterPos3sv(v);
}
PFNGLRASTERPOS3SVPROC glow_glRasterPos3sv = glow_lazy_glRasterPos3sv;
static void glow_lazy_glMultiTexCoord1dv(GLenum target, const GLdouble *v) {
  glow_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1dv")));
  if (glow_glMultiTexCoord1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1dv\n");
#endif
  }
  glow_glMultiTexCoord1dv(target, v);
}
PFNGLMULTITEXCOORD1DVPROC glow_glMultiTexCoord1dv = glow_lazy_glMultiTexCoord1dv;
static void glow_lazy_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix2x4dv")));
  if (glow_glProgramUniformMatrix2x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x4dv\n");
#endif
  }
  glow_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glow_glProgramUniformMatrix2x4dv = glow_lazy_glProgramUniformMatrix2x4dv;
static void glow_lazy_glNormal3bv(const GLbyte *v) {
  glow_glNormal3bv = (PFNGLNORMAL3BVPROC)((ptrdiff_t)(glow_get_proc("glNormal3bv")));
  if (glow_glNormal3bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3bv\n");
#endif
  }
  glow_glNormal3bv(v);
}
PFNGLNORMAL3BVPROC glow_glNormal3bv = glow_lazy_glNormal3bv;
static void glow_lazy_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  glow_glColorMask = (PFNGLCOLORMASKPROC)((ptrdiff_t)(glow_get_proc("glColorMask")));
  if (glow_glColorMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorMask\n");
#endif
  }
  glow_glColorMask(red, green, blue, alpha);
}
PFNGLCOLORMASKPROC glow_glColorMask = glow_lazy_glColorMask;
static void glow_lazy_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
  glow_glColor4b = (PFNGLCOLOR4BPROC)((ptrdiff_t)(glow_get_proc("glColor4b")));
  if (glow_glColor4b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4b\n");
#endif
  }
  glow_glColor4b(red, green, blue, alpha);
}
PFNGLCOLOR4BPROC glow_glColor4b = glow_lazy_glColor4b;
static void glow_lazy_glClearStencil(GLint s) {
  glow_glClearStencil = (PFNGLCLEARSTENCILPROC)((ptrdiff_t)(glow_get_proc("glClearStencil")));
  if (glow_glClearStencil == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearStencil\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearStencil\n");
#endif
  }
  glow_glClearStencil(s);
}
PFNGLCLEARSTENCILPROC glow_glClearStencil = glow_lazy_glClearStencil;
static void glow_lazy_glVertexAttribI2uiv(GLuint index, const GLuint *v) {
  glow_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI2uiv")));
  if (glow_glVertexAttribI2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2uiv\n");
#endif
  }
  glow_glVertexAttribI2uiv(index, v);
}
PFNGLVERTEXATTRIBI2UIVPROC glow_glVertexAttribI2uiv = glow_lazy_glVertexAttribI2uiv;
static void glow_lazy_glUniform4iv(GLint location, GLsizei count, const GLint *value) {
  glow_glUniform4iv = (PFNGLUNIFORM4IVPROC)((ptrdiff_t)(glow_get_proc("glUniform4iv")));
  if (glow_glUniform4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4iv\n");
#endif
  }
  glow_glUniform4iv(location, count, value);
}
PFNGLUNIFORM4IVPROC glow_glUniform4iv = glow_lazy_glUniform4iv;
static void glow_lazy_glTexCoord1dv(const GLdouble *v) {
  glow_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1dv")));
  if (glow_glTexCoord1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1dv\n");
#endif
  }
  glow_glTexCoord1dv(v);
}
PFNGLTEXCOORD1DVPROC glow_glTexCoord1dv = glow_lazy_glTexCoord1dv;
static void glow_lazy_glScalef(GLfloat x, GLfloat y, GLfloat z) {
  glow_glScalef = (PFNGLSCALEFPROC)((ptrdiff_t)(glow_get_proc("glScalef")));
  if (glow_glScalef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScalef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScalef\n");
#endif
  }
  glow_glScalef(x, y, z);
}
PFNGLSCALEFPROC glow_glScalef = glow_lazy_glScalef;
static void glow_lazy_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  glow_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)((ptrdiff_t)(glow_get_proc("glCopyTexImage2D")));
  if (glow_glCopyTexImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexImage2D\n");
#endif
  }
  glow_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYTEXIMAGE2DPROC glow_glCopyTexImage2D = glow_lazy_glCopyTexImage2D;
static void glow_lazy_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
  glow_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3us")));
  if (glow_glSecondaryColor3us == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3us\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3us\n");
#endif
  }
  glow_glSecondaryColor3us(red, green, blue);
}
PFNGLSECONDARYCOLOR3USPROC glow_glSecondaryColor3us = glow_lazy_glSecondaryColor3us;
static void glow_lazy_glIndexsv(const GLshort *c) {
  glow_glIndexsv = (PFNGLINDEXSVPROC)((ptrdiff_t)(glow_get_proc("glIndexsv")));
  if (glow_glIndexsv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexsv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexsv\n");
#endif
  }
  glow_glIndexsv(c);
}
PFNGLINDEXSVPROC glow_glIndexsv = glow_lazy_glIndexsv;
static void glow_lazy_glRasterPos3iv(const GLint *v) {
  glow_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3iv")));
  if (glow_glRasterPos3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3iv\n");
#endif
  }
  glow_glRasterPos3iv(v);
}
PFNGLRASTERPOS3IVPROC glow_glRasterPos3iv = glow_lazy_glRasterPos3iv;
static GLuint glow_lazy_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {
  glow_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)((ptrdiff_t)(glow_get_proc("glGetSubroutineIndex")));
  if (glow_glGetSubroutineIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSubroutineIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSubroutineIndex\n");
#endif
  }
  return glow_glGetSubroutineIndex(program, shadertype, name);
}
PFNGLGETSUBROUTINEINDEXPROC glow_glGetSubroutineIndex = glow_lazy_glGetSubroutineIndex;
static void glow_lazy_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
  glow_glColor4ub = (PFNGLCOLOR4UBPROC)((ptrdiff_t)(glow_get_proc("glColor4ub")));
  if (glow_glColor4ub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4ub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4ub\n");
#endif
  }
  glow_glColor4ub(red, green, blue, alpha);
}
PFNGLCOLOR4UBPROC glow_glColor4ub = glow_lazy_glColor4ub;
static void glow_lazy_glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
  glow_glUniform2fv = (PFNGLUNIFORM2FVPROC)((ptrdiff_t)(glow_get_proc("glUniform2fv")));
  if (glow_glUniform2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2fv\n");
#endif
  }
  glow_glUniform2fv(location, count, value);
}
PFNGLUNIFORM2FVPROC glow_glUniform2fv = glow_lazy_glUniform2fv;
static GLint glow_lazy_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {
  glow_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)((ptrdiff_t)(glow_get_proc("glGetSubroutineUniformLocation")));
  if (glow_glGetSubroutineUniformLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSubroutineUniformLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSubroutineUniformLocation\n");
#endif
  }
  return glow_glGetSubroutineUniformLocation(program, shadertype, name);
}
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glow_glGetSubroutineUniformLocation = glow_lazy_glGetSubroutineUniformLocation;
static void glow_lazy_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  glow_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)((ptrdiff_t)(glow_get_proc("glShaderStorageBlockBinding")));
  if (glow_glShaderStorageBlockBinding == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShaderStorageBlockBinding\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShaderStorageBlockBinding\n");
#endif
  }
  glow_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glow_glShaderStorageBlockBinding = glow_lazy_glShaderStorageBlockBinding;
static void glow_lazy_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
  glow_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)((ptrdiff_t)(glow_get_proc("glTexSubImage3D")));
  if (glow_glTexSubImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexSubImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexSubImage3D\n");
#endif
  }
  glow_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLTEXSUBIMAGE3DPROC glow_glTexSubImage3D = glow_lazy_glTexSubImage3D;
static void glow_lazy_glLightModelf(GLenum pname, GLfloat param) {
  glow_glLightModelf = (PFNGLLIGHTMODELFPROC)((ptrdiff_t)(glow_get_proc("glLightModelf")));
  if (glow_glLightModelf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModelf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModelf\n");
#endif
  }
  glow_glLightModelf(pname, param);
}
PFNGLLIGHTMODELFPROC glow_glLightModelf = glow_lazy_glLightModelf;
static void glow_lazy_glWindowPos3fv(const GLfloat *v) {
  glow_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3fv")));
  if (glow_glWindowPos3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3fv\n");
#endif
  }
  glow_glWindowPos3fv(v);
}
PFNGLWINDOWPOS3FVPROC glow_glWindowPos3fv = glow_lazy_glWindowPos3fv;
static void glow_lazy_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  glow_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)((ptrdiff_t)(glow_get_proc("glStencilFuncSeparate")));
  if (glow_glStencilFuncSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilFuncSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilFuncSeparate\n");
#endif
  }
  glow_glStencilFuncSeparate(face, func, ref, mask);
}
PFNGLSTENCILFUNCSEPARATEPROC glow_glStencilFuncSeparate = glow_lazy_glStencilFuncSeparate;
static void glow_lazy_glReadBuffer(GLenum src) {
  glow_glReadBuffer = (PFNGLREADBUFFERPROC)((ptrdiff_t)(glow_get_proc("glReadBuffer")));
  if (glow_glReadBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glReadBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glReadBuffer\n");
#endif
  }
  glow_glReadBuffer(src);
}
PFNGLREADBUFFERPROC glow_glReadBuffer = glow_lazy_glReadBuffer;
static void glow_lazy_glMultiTexCoord3fv(GLenum target, const GLfloat *v) {
  glow_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3fv")));
  if (glow_glMultiTexCoord3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3fv\n");
#endif
  }
  glow_glMultiTexCoord3fv(target, v);
}
PFNGLMULTITEXCOORD3FVPROC glow_glMultiTexCoord3fv = glow_lazy_glMultiTexCoord3fv;
static GLenum glow_lazy_glCheckFramebufferStatus(GLenum target) {
  glow_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)((ptrdiff_t)(glow_get_proc("glCheckFramebufferStatus")));
  if (glow_glCheckFramebufferStatus == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCheckFramebufferStatus\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCheckFramebufferStatus\n");
#endif
  }
  return glow_glCheckFramebufferStatus(target);
}
PFNGLCHECKFRAMEBUFFERSTATUSPROC glow_glCheckFramebufferStatus = glow_lazy_glCheckFramebufferStatus;
static void glow_lazy_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glow_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4uiv")));
  if (glow_glProgramUniform4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4uiv\n");
#endif
  }
  glow_glProgramUniform4uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4UIVPROC glow_glProgramUniform4uiv = glow_lazy_glProgramUniform4uiv;
static void glow_lazy_glVertex2i(GLint x, GLint y) {
  glow_glVertex2i = (PFNGLVERTEX2IPROC)((ptrdiff_t)(glow_get_proc("glVertex2i")));
  if (glow_glVertex2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2i\n");
#endif
  }
  glow_glVertex2i(x, y);
}
PFNGLVERTEX2IPROC glow_glVertex2i = glow_lazy_glVertex2i;
static void glow_lazy_glAlphaFunc(GLenum func, GLfloat ref) {
  glow_glAlphaFunc = (PFNGLALPHAFUNCPROC)((ptrdiff_t)(glow_get_proc("glAlphaFunc")));
  if (glow_glAlphaFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAlphaFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAlphaFunc\n");
#endif
  }
  glow_glAlphaFunc(func, ref);
}
PFNGLALPHAFUNCPROC glow_glAlphaFunc = glow_lazy_glAlphaFunc;
static void glow_lazy_glDrawBuffers(GLsizei n, const GLenum *bufs) {
  glow_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glDrawBuffers")));
  if (glow_glDrawBuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawBuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawBuffers\n");
#endif
  }
  glow_glDrawBuffers(n, bufs);
}
PFNGLDRAWBUFFERSPROC glow_glDrawBuffers = glow_lazy_glDrawBuffers;
static void glow_lazy_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  glow_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib2f")));
  if (glow_glVertexAttrib2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2f\n");
#endif
  }
  glow_glVertexAttrib2f(index, x, y);
}
PFNGLVERTEXATTRIB2FPROC glow_glVertexAttrib2f = glow_lazy_glVertexAttrib2f;
static void glow_lazy_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix3x2fv")));
  if (glow_glProgramUniformMatrix3x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x2fv\n");
#endif
  }
  glow_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glow_glProgramUniformMatrix3x2fv = glow_lazy_glProgramUniformMatrix3x2fv;
static void glow_lazy_glVertex2iv(const GLint *v) {
  glow_glVertex2iv = (PFNGLVERTEX2IVPROC)((ptrdiff_t)(glow_get_proc("glVertex2iv")));
  if (glow_glVertex2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2iv\n");
#endif
  }
  glow_glVertex2iv(v);
}
PFNGLVERTEX2IVPROC glow_glVertex2iv = glow_lazy_glVertex2iv;
static void glow_lazy_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
  glow_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)((ptrdiff_t)(glow_get_proc("glCompressedTexImage1D")));
  if (glow_glCompressedTexImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexImage1D\n");
#endif
  }
  glow_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE1DPROC glow_glCompressedTexImage1D = glow_lazy_glCompressedTexImage1D;
static void glow_lazy_glVertex2d(GLdouble x, GLdouble y) {
  glow_glVertex2d = (PFNGLVERTEX2DPROC)((ptrdiff_t)(glow_get_proc("glVertex2d")));
  if (glow_glVertex2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2d\n");
#endif
  }
  glow_glVertex2d(x, y);
}
PFNGLVERTEX2DPROC glow_glVertex2d = glow_lazy_glVertex2d;
static void glow_lazy_glLightf(GLenum light, GLenum pname, GLfloat param) {
  glow_glLightf = (PFNGLLIGHTFPROC)((ptrdiff_t)(glow_get_proc("glLightf")));
  if (glow_glLightf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightf\n");
#endif
  }
  glow_glLightf(light, pname, param);
}
PFNGLLIGHTFPROC glow_glLightf = glow_lazy_glLightf;
static GLsync glow_lazy_glFenceSync(GLenum condition, GLbitfield flags) {
  glow_glFenceSync = (PFNGLFENCESYNCPROC)((ptrdiff_t)(glow_get_proc("glFenceSync")));
  if (glow_glFenceSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFenceSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFenceSync\n");
#endif
  }
  return glow_glFenceSync(condition, flags);
}
PFNGLFENCESYNCPROC glow_glFenceSync = glow_lazy_glFenceSync;
static void glow_lazy_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glow_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP4ui")));
  if (glow_glVertexAttribP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP4ui\n");
#endif
  }
  glow_glVertexAttribP4ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP4UIPROC glow_glVertexAttribP4ui = glow_lazy_glVertexAttribP4ui;
static void glow_lazy_glTexCoordP3ui(GLenum type, GLuint coords) {
  glow_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP3ui")));
  if (glow_glTexCoordP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP3ui\n");
#endif
  }
  glow_glTexCoordP3ui(type, coords);
}
PFNGLTEXCOORDP3UIPROC glow_glTexCoordP3ui = glow_lazy_glTexCoordP3ui;
static void glow_lazy_glTexCoordP4ui(GLenum type, GLuint coords) {
  glow_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP4ui")));
  if (glow_glTexCoordP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP4ui\n");
#endif
  }
  glow_glTexCoordP4ui(type, coords);
}
PFNGLTEXCOORDP4UIPROC glow_glTexCoordP4ui = glow_lazy_glTexCoordP4ui;
static void glow_lazy_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  glow_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)((ptrdiff_t)(glow_get_proc("glTexBufferRange")));
  if (glow_glTexBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexBufferRange\n");
#endif
  }
  glow_glTexBufferRange(target, internalformat, buffer, offset, size);
}
PFNGLTEXBUFFERRANGEPROC glow_glTexBufferRange = glow_lazy_glTexBufferRange;
static void glow_lazy_glRectiv(const GLint *v1, const GLint *v2) {
  glow_glRectiv = (PFNGLRECTIVPROC)((ptrdiff_t)(glow_get_proc("glRectiv")));
  if (glow_glRectiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectiv\n");
#endif
  }
  glow_glRectiv(v1, v2);
}
PFNGLRECTIVPROC glow_glRectiv = glow_lazy_glRectiv;
static void glow_lazy_glLinkProgram(GLuint program) {
  glow_glLinkProgram = (PFNGLLINKPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glLinkProgram")));
  if (glow_glLinkProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLinkProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLinkProgram\n");
#endif
  }
  glow_glLinkProgram(program);
}
PFNGLLINKPROGRAMPROC glow_glLinkProgram = glow_lazy_glLinkProgram;
static GLboolean glow_lazy_glIsTexture(GLuint texture) {
  glow_glIsTexture = (PFNGLISTEXTUREPROC)((ptrdiff_t)(glow_get_proc("glIsTexture")));
  if (glow_glIsTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsTexture\n");
#endif
  }
  return glow_glIsTexture(texture);
}
PFNGLISTEXTUREPROC glow_glIsTexture = glow_lazy_glIsTexture;
static void glow_lazy_glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
  glow_glGetProgramiv = (PFNGLGETPROGRAMIVPROC)((ptrdiff_t)(glow_get_proc("glGetProgramiv")));
  if (glow_glGetProgramiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramiv\n");
#endif
  }
  glow_glGetProgramiv(program, pname, params);
}
PFNGLGETPROGRAMIVPROC glow_glGetProgramiv = glow_lazy_glGetProgramiv;
static void glow_lazy_glUniform1f(GLint location, GLfloat v0) {
  glow_glUniform1f = (PFNGLUNIFORM1FPROC)((ptrdiff_t)(glow_get_proc("glUniform1f")));
  if (glow_glUniform1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1f\n");
#endif
  }
  glow_glUniform1f(location, v0);
}
PFNGLUNIFORM1FPROC glow_glUniform1f = glow_lazy_glUniform1f;
static void glow_lazy_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
  glow_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)((ptrdiff_t)(glow_get_proc("glGetProgramInterfaceiv")));
  if (glow_glGetProgramInterfaceiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramInterfaceiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramInterfaceiv\n");
#endif
  }
  glow_glGetProgramInterfaceiv(program, programInterface, pname, params);
}
PFNGLGETPROGRAMINTERFACEIVPROC glow_glGetProgramInterfaceiv = glow_lazy_glGetProgramInterfaceiv;
static GLint glow_lazy_glGetUniformLocation(GLuint program, const GLchar *name) {
  glow_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)((ptrdiff_t)(glow_get_proc("glGetUniformLocation")));
  if (glow_glGetUniformLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformLocation\n");
#endif
  }
  return glow_glGetUniformLocation(program, name);
}
PFNGLGETUNIFORMLOCATIONPROC glow_glGetUniformLocation = glow_lazy_glGetUniformLocation;
static void glow_lazy_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {
  glow_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)((ptrdiff_t)(glow_get_proc("glDrawElementsInstancedBaseVertex")));
  if (glow_glDrawElementsInstancedBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstancedBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstancedBaseVertex\n");
#endif
  }
  glow_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glow_glDrawElementsInstancedBaseVertex = glow_lazy_glDrawElementsInstancedBaseVertex;
static void glow_lazy_glColor3dv(const GLdouble *v) {
  glow_glColor3dv = (PFNGLCOLOR3DVPROC)((ptrdiff_t)(glow_get_proc("glColor3dv")));
  if (glow_glColor3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3dv\n");
#endif
  }
  glow_glColor3dv(v);
}
PFNGLCOLOR3DVPROC glow_glColor3dv = glow_lazy_glColor3dv;
static void glow_lazy_glWindowPos2sv(const GLshort *v) {
  glow_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2sv")));
  if (glow_glWindowPos2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2sv\n");
#endif
  }
  glow_glWindowPos2sv(v);
}
PFNGLWINDOWPOS2SVPROC glow_glWindowPos2sv = glow_lazy_glWindowPos2sv;
static void glow_lazy_glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
  glow_glUniform1fv = (PFNGLUNIFORM1FVPROC)((ptrdiff_t)(glow_get_proc("glUniform1fv")));
  if (glow_glUniform1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1fv\n");
#endif
  }
  glow_glUniform1fv(location, count, value);
}
PFNGLUNIFORM1FVPROC glow_glUniform1fv = glow_lazy_glUniform1fv;
static void glow_lazy_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {
  glow_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)((ptrdiff_t)(glow_get_proc("glSamplerParameterIuiv")));
  if (glow_glSamplerParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterIuiv\n");
#endif
  }
  glow_glSamplerParameterIuiv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIUIVPROC glow_glSamplerParameterIuiv = glow_lazy_glSamplerParameterIuiv;
static void glow_lazy_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  glow_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)((ptrdiff_t)(glow_get_proc("glCopyTexSubImage3D")));
  if (glow_glCopyTexSubImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexSubImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexSubImage3D\n");
#endif
  }
  glow_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE3DPROC glow_glCopyTexSubImage3D = glow_lazy_glCopyTexSubImage3D;
static GLint glow_lazy_glGetAttribLocation(GLuint program, const GLchar *name) {
  glow_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)((ptrdiff_t)(glow_get_proc("glGetAttribLocation")));
  if (glow_glGetAttribLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetAttribLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetAttribLocation\n");
#endif
  }
  return glow_glGetAttribLocation(program, name);
}
PFNGLGETATTRIBLOCATIONPROC glow_glGetAttribLocation = glow_lazy_glGetAttribLocation;
static void glow_lazy_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix4x3fv")));
  if (glow_glUniformMatrix4x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x3fv\n");
#endif
  }
  glow_glUniformMatrix4x3fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X3FVPROC glow_glUniformMatrix4x3fv = glow_lazy_glUniformMatrix4x3fv;
static void glow_lazy_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
  glow_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI2ui")));
  if (glow_glVertexAttribI2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2ui\n");
#endif
  }
  glow_glVertexAttribI2ui(index, x, y);
}
PFNGLVERTEXATTRIBI2UIPROC glow_glVertexAttribI2ui = glow_lazy_glVertexAttribI2ui;
static void glow_lazy_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  glow_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)((ptrdiff_t)(glow_get_proc("glBlendEquationSeparatei")));
  if (glow_glBlendEquationSeparatei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquationSeparatei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquationSeparatei\n");
#endif
  }
  glow_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEIPROC glow_glBlendEquationSeparatei = glow_lazy_glBlendEquationSeparatei;
static void glow_lazy_glWindowPos2fv(const GLfloat *v) {
  glow_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2fv")));
  if (glow_glWindowPos2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2fv\n");
#endif
  }
  glow_glWindowPos2fv(v);
}
PFNGLWINDOWPOS2FVPROC glow_glWindowPos2fv = glow_lazy_glWindowPos2fv;
static void glow_lazy_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {
  glow_glPixelMapfv = (PFNGLPIXELMAPFVPROC)((ptrdiff_t)(glow_get_proc("glPixelMapfv")));
  if (glow_glPixelMapfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelMapfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelMapfv\n");
#endif
  }
  glow_glPixelMapfv(map, mapsize, values);
}
PFNGLPIXELMAPFVPROC glow_glPixelMapfv = glow_lazy_glPixelMapfv;
static void glow_lazy_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  glow_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)((ptrdiff_t)(glow_get_proc("glGetActiveAttrib")));
  if (glow_glGetActiveAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveAttrib\n");
#endif
  }
  glow_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEATTRIBPROC glow_glGetActiveAttrib = glow_lazy_glGetActiveAttrib;
static void glow_lazy_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {
  glow_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)((ptrdiff_t)(glow_get_proc("glGetUniformSubroutineuiv")));
  if (glow_glGetUniformSubroutineuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformSubroutineuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformSubroutineuiv\n");
#endif
  }
  glow_glGetUniformSubroutineuiv(shadertype, location, params);
}
PFNGLGETUNIFORMSUBROUTINEUIVPROC glow_glGetUniformSubroutineuiv = glow_lazy_glGetUniformSubroutineuiv;
static void glow_lazy_glTexCoord1sv(const GLshort *v) {
  glow_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1sv")));
  if (glow_glTexCoord1sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1sv\n");
#endif
  }
  glow_glTexCoord1sv(v);
}
PFNGLTEXCOORD1SVPROC glow_glTexCoord1sv = glow_lazy_glTexCoord1sv;
static void glow_lazy_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
  glow_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL2d")));
  if (glow_glVertexAttribL2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL2d\n");
#endif
  }
  glow_glVertexAttribL2d(index, x, y);
}
PFNGLVERTEXATTRIBL2DPROC glow_glVertexAttribL2d = glow_lazy_glVertexAttribL2d;
static void glow_lazy_glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {
  glow_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)((ptrdiff_t)(glow_get_proc("glUniform2uiv")));
  if (glow_glUniform2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2uiv\n");
#endif
  }
  glow_glUniform2uiv(location, count, value);
}
PFNGLUNIFORM2UIVPROC glow_glUniform2uiv = glow_lazy_glUniform2uiv;
static void glow_lazy_glInterleavedArrays(GLenum format, GLsizei stride, const void *pointer) {
  glow_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)((ptrdiff_t)(glow_get_proc("glInterleavedArrays")));
  if (glow_glInterleavedArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInterleavedArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInterleavedArrays\n");
#endif
  }
  glow_glInterleavedArrays(format, stride, pointer);
}
PFNGLINTERLEAVEDARRAYSPROC glow_glInterleavedArrays = glow_lazy_glInterleavedArrays;
static GLboolean glow_lazy_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {
  glow_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)((ptrdiff_t)(glow_get_proc("glAreTexturesResident")));
  if (glow_glAreTexturesResident == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAreTexturesResident\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAreTexturesResident\n");
#endif
  }
  return glow_glAreTexturesResident(n, textures, residences);
}
PFNGLARETEXTURESRESIDENTPROC glow_glAreTexturesResident = glow_lazy_glAreTexturesResident;
static void glow_lazy_glMultiTexCoord1s(GLenum target, GLshort s) {
  glow_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1s")));
  if (glow_glMultiTexCoord1s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1s\n");
#endif
  }
  glow_glMultiTexCoord1s(target, s);
}
PFNGLMULTITEXCOORD1SPROC glow_glMultiTexCoord1s = glow_lazy_glMultiTexCoord1s;
static void glow_lazy_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glow_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP3ui")));
  if (glow_glVertexAttribP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP3ui\n");
#endif
  }
  glow_glVertexAttribP3ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP3UIPROC glow_glVertexAttribP3ui = glow_lazy_glVertexAttribP3ui;
static void glow_lazy_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix4x3dv")));
  if (glow_glProgramUniformMatrix4x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x3dv\n");
#endif
  }
  glow_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glow_glProgramUniformMatrix4x3dv = glow_lazy_glProgramUniformMatrix4x3dv;
static void glow_lazy_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
  glow_glTexCoord3f = (PFNGLTEXCOORD3FPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3f")));
  if (glow_glTexCoord3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3f\n");
#endif
  }
  glow_glTexCoord3f(s, t, r);
}
PFNGLTEXCOORD3FPROC glow_glTexCoord3f = glow_lazy_glTexCoord3f;
static void glow_lazy_glVertexAttribL3dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL3dv")));
  if (glow_glVertexAttribL3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL3dv\n");
#endif
  }
  glow_glVertexAttribL3dv(index, v);
}
PFNGLVERTEXATTRIBL3DVPROC glow_glVertexAttribL3dv = glow_lazy_glVertexAttribL3dv;
static void glow_lazy_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  glow_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4f")));
  if (glow_glMultiTexCoord4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4f\n");
#endif
  }
  glow_glMultiTexCoord4f(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4FPROC glow_glMultiTexCoord4f = glow_lazy_glMultiTexCoord4f;
static void glow_lazy_glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
  glow_glGetShaderiv = (PFNGLGETSHADERIVPROC)((ptrdiff_t)(glow_get_proc("glGetShaderiv")));
  if (glow_glGetShaderiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderiv\n");
#endif
  }
  glow_glGetShaderiv(shader, pname, params);
}
PFNGLGETSHADERIVPROC glow_glGetShaderiv = glow_lazy_glGetShaderiv;
static void glow_lazy_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {
  glow_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glGetSamplerParameterfv")));
  if (glow_glGetSamplerParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameterfv\n");
#endif
  }
  glow_glGetSamplerParameterfv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERFVPROC glow_glGetSamplerParameterfv = glow_lazy_glGetSamplerParameterfv;
static void glow_lazy_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {
  glow_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)((ptrdiff_t)(glow_get_proc("glMultiDrawElementsIndirect")));
  if (glow_glMultiDrawElementsIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawElementsIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawElementsIndirect\n");
#endif
  }
  glow_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glow_glMultiDrawElementsIndirect = glow_lazy_glMultiDrawElementsIndirect;
static void glow_lazy_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
  glow_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)((ptrdiff_t)(glow_get_proc("glDebugMessageInsert")));
  if (glow_glDebugMessageInsert == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDebugMessageInsert\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDebugMessageInsert\n");
#endif
  }
  glow_glDebugMessageInsert(source, type, id, severity, length, buf);
}
PFNGLDEBUGMESSAGEINSERTPROC glow_glDebugMessageInsert = glow_lazy_glDebugMessageInsert;
static void glow_lazy_glMultiTexCoord1d(GLenum target, GLdouble s) {
  glow_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1d")));
  if (glow_glMultiTexCoord1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1d\n");
#endif
  }
  glow_glMultiTexCoord1d(target, s);
}
PFNGLMULTITEXCOORD1DPROC glow_glMultiTexCoord1d = glow_lazy_glMultiTexCoord1d;
static void glow_lazy_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
  glow_glColor4i = (PFNGLCOLOR4IPROC)((ptrdiff_t)(glow_get_proc("glColor4i")));
  if (glow_glColor4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4i\n");
#endif
  }
  glow_glColor4i(red, green, blue, alpha);
}
PFNGLCOLOR4IPROC glow_glColor4i = glow_lazy_glColor4i;
static void glow_lazy_glVertex2dv(const GLdouble *v) {
  glow_glVertex2dv = (PFNGLVERTEX2DVPROC)((ptrdiff_t)(glow_get_proc("glVertex2dv")));
  if (glow_glVertex2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2dv\n");
#endif
  }
  glow_glVertex2dv(v);
}
PFNGLVERTEX2DVPROC glow_glVertex2dv = glow_lazy_glVertex2dv;
static void glow_lazy_glDeleteTextures(GLsizei n, const GLuint *textures) {
  glow_glDeleteTextures = (PFNGLDELETETEXTURESPROC)((ptrdiff_t)(glow_get_proc("glDeleteTextures")));
  if (glow_glDeleteTextures == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteTextures\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteTextures\n");
#endif
  }
  glow_glDeleteTextures(n, textures);
}
PFNGLDELETETEXTURESPROC glow_glDeleteTextures = glow_lazy_glDeleteTextures;
static void glow_lazy_glTexParameteri(GLenum target, GLenum pname, GLint param) {
  glow_glTexParameteri = (PFNGLTEXPARAMETERIPROC)((ptrdiff_t)(glow_get_proc("glTexParameteri")));
  if (glow_glTexParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameteri\n");
#endif
  }
  glow_glTexParameteri(target, pname, param);
}
PFNGLTEXPARAMETERIPROC glow_glTexParameteri = glow_lazy_glTexParameteri;
static void glow_lazy_glRasterPos4sv(const GLshort *v) {
  glow_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4sv")));
  if (glow_glRasterPos4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4sv\n");
#endif
  }
  glow_glRasterPos4sv(v);
}
PFNGLRASTERPOS4SVPROC glow_glRasterPos4sv = glow_lazy_glRasterPos4sv;
static void glow_lazy_glPauseTransformFeedback() {
  glow_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glPauseTransformFeedback")));
  if (glow_glPauseTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPauseTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPauseTransformFeedback\n");
#endif
  }
  glow_glPauseTransformFeedback();
}
PFNGLPAUSETRANSFORMFEEDBACKPROC glow_glPauseTransformFeedback = glow_lazy_glPauseTransformFeedback;
static void glow_lazy_glIndexd(GLdouble c) {
  glow_glIndexd = (PFNGLINDEXDPROC)((ptrdiff_t)(glow_get_proc("glIndexd")));
  if (glow_glIndexd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexd\n");
#endif
  }
  glow_glIndexd(c);
}
PFNGLINDEXDPROC glow_glIndexd = glow_lazy_glIndexd;
static void glow_lazy_glVertexAttribI1i(GLuint index, GLint x) {
  glow_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI1i")));
  if (glow_glVertexAttribI1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1i\n");
#endif
  }
  glow_glVertexAttribI1i(index, x);
}
PFNGLVERTEXATTRIBI1IPROC glow_glVertexAttribI1i = glow_lazy_glVertexAttribI1i;
static void glow_lazy_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {
  glow_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)((ptrdiff_t)(glow_get_proc("glDrawElementsInstancedBaseInstance")));
  if (glow_glDrawElementsInstancedBaseInstance == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstancedBaseInstance\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstancedBaseInstance\n");
#endif
  }
  glow_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glow_glDrawElementsInstancedBaseInstance = glow_lazy_glDrawElementsInstancedBaseInstance;
static void glow_lazy_glClampColor(GLenum target, GLenum clamp) {
  glow_glClampColor = (PFNGLCLAMPCOLORPROC)((ptrdiff_t)(glow_get_proc("glClampColor")));
  if (glow_glClampColor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClampColor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClampColor\n");
#endif
  }
  glow_glClampColor(target, clamp);
}
PFNGLCLAMPCOLORPROC glow_glClampColor = glow_lazy_glClampColor;
static void glow_lazy_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {
  glow_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)((ptrdiff_t)(glow_get_proc("glDrawElementsInstanced")));
  if (glow_glDrawElementsInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstanced\n");
#endif
  }
  glow_glDrawElementsInstanced(mode, count, type, indices, instancecount);
}
PFNGLDRAWELEMENTSINSTANCEDPROC glow_glDrawElementsInstanced = glow_lazy_glDrawElementsInstanced;
static void glow_lazy_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  glow_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)((ptrdiff_t)(glow_get_proc("glBindImageTexture")));
  if (glow_glBindImageTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindImageTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindImageTexture\n");
#endif
  }
  glow_glBindImageTexture(unit, texture, level, layered, layer, access, format);
}
PFNGLBINDIMAGETEXTUREPROC glow_glBindImageTexture = glow_lazy_glBindImageTexture;
static void glow_lazy_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
  glow_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)((ptrdiff_t)(glow_get_proc("glDrawTransformFeedbackStreamInstanced")));
  if (glow_glDrawTransformFeedbackStreamInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedbackStreamInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedbackStreamInstanced\n");
#endif
  }
  glow_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glow_glDrawTransformFeedbackStreamInstanced = glow_lazy_glDrawTransformFeedbackStreamInstanced;
static void glow_lazy_glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {
  glow_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)((ptrdiff_t)(glow_get_proc("glObjectPtrLabel")));
  if (glow_glObjectPtrLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glObjectPtrLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glObjectPtrLabel\n");
#endif
  }
  glow_glObjectPtrLabel(ptr, length, label);
}
PFNGLOBJECTPTRLABELPROC glow_glObjectPtrLabel = glow_lazy_glObjectPtrLabel;
static void glow_lazy_glColor4iv(const GLint *v) {
  glow_glColor4iv = (PFNGLCOLOR4IVPROC)((ptrdiff_t)(glow_get_proc("glColor4iv")));
  if (glow_glColor4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4iv\n");
#endif
  }
  glow_glColor4iv(v);
}
PFNGLCOLOR4IVPROC glow_glColor4iv = glow_lazy_glColor4iv;
static void glow_lazy_glWindowPos3sv(const GLshort *v) {
  glow_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3sv")));
  if (glow_glWindowPos3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3sv\n");
#endif
  }
  glow_glWindowPos3sv(v);
}
PFNGLWINDOWPOS3SVPROC glow_glWindowPos3sv = glow_lazy_glWindowPos3sv;
static void glow_lazy_glVertexAttrib3dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib3dv")));
  if (glow_glVertexAttrib3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3dv\n");
#endif
  }
  glow_glVertexAttrib3dv(index, v);
}
PFNGLVERTEXATTRIB3DVPROC glow_glVertexAttrib3dv = glow_lazy_glVertexAttrib3dv;
static void glow_lazy_glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {
  glow_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)((ptrdiff_t)(glow_get_proc("glUniform3uiv")));
  if (glow_glUniform3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3uiv\n");
#endif
  }
  glow_glUniform3uiv(location, count, value);
}
PFNGLUNIFORM3UIVPROC glow_glUniform3uiv = glow_lazy_glUniform3uiv;
static void glow_lazy_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  glow_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)((ptrdiff_t)(glow_get_proc("glFramebufferTexture")));
  if (glow_glFramebufferTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture\n");
#endif
  }
  glow_glFramebufferTexture(target, attachment, texture, level);
}
PFNGLFRAMEBUFFERTEXTUREPROC glow_glFramebufferTexture = glow_lazy_glFramebufferTexture;
static void glow_lazy_glActiveTexture(GLenum texture) {
  glow_glActiveTexture = (PFNGLACTIVETEXTUREPROC)((ptrdiff_t)(glow_get_proc("glActiveTexture")));
  if (glow_glActiveTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glActiveTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glActiveTexture\n");
#endif
  }
  glow_glActiveTexture(texture);
}
PFNGLACTIVETEXTUREPROC glow_glActiveTexture = glow_lazy_glActiveTexture;
static void glow_lazy_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
  glow_glMap1f = (PFNGLMAP1FPROC)((ptrdiff_t)(glow_get_proc("glMap1f")));
  if (glow_glMap1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap1f\n");
#endif
  }
  glow_glMap1f(target, u1, u2, stride, order, points);
}
PFNGLMAP1FPROC glow_glMap1f = glow_lazy_glMap1f;
static void glow_lazy_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {
  glow_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)((ptrdiff_t)(glow_get_proc("glPixelMapuiv")));
  if (glow_glPixelMapuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelMapuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelMapuiv\n");
#endif
  }
  glow_glPixelMapuiv(map, mapsize, values);
}
PFNGLPIXELMAPUIVPROC glow_glPixelMapuiv = glow_lazy_glPixelMapuiv;
static void glow_lazy_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  glow_glViewport = (PFNGLVIEWPORTPROC)((ptrdiff_t)(glow_get_proc("glViewport")));
  if (glow_glViewport == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewport\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewport\n");
#endif
  }
  glow_glViewport(x, y, width, height);
}
PFNGLVIEWPORTPROC glow_glViewport = glow_lazy_glViewport;
static void glow_lazy_glBeginConditionalRender(GLuint id, GLenum mode) {
  glow_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)((ptrdiff_t)(glow_get_proc("glBeginConditionalRender")));
  if (glow_glBeginConditionalRender == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginConditionalRender\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginConditionalRender\n");
#endif
  }
  glow_glBeginConditionalRender(id, mode);
}
PFNGLBEGINCONDITIONALRENDERPROC glow_glBeginConditionalRender = glow_lazy_glBeginConditionalRender;
static void glow_lazy_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {
  glow_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)((ptrdiff_t)(glow_get_proc("glUniformSubroutinesuiv")));
  if (glow_glUniformSubroutinesuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformSubroutinesuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformSubroutinesuiv\n");
#endif
  }
  glow_glUniformSubroutinesuiv(shadertype, count, indices);
}
PFNGLUNIFORMSUBROUTINESUIVPROC glow_glUniformSubroutinesuiv = glow_lazy_glUniformSubroutinesuiv;
static void glow_lazy_glFrontFace(GLenum mode) {
  glow_glFrontFace = (PFNGLFRONTFACEPROC)((ptrdiff_t)(glow_get_proc("glFrontFace")));
  if (glow_glFrontFace == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFrontFace\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFrontFace\n");
#endif
  }
  glow_glFrontFace(mode);
}
PFNGLFRONTFACEPROC glow_glFrontFace = glow_lazy_glFrontFace;
static void glow_lazy_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  glow_glScissor = (PFNGLSCISSORPROC)((ptrdiff_t)(glow_get_proc("glScissor")));
  if (glow_glScissor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissor\n");
#endif
  }
  glow_glScissor(x, y, width, height);
}
PFNGLSCISSORPROC glow_glScissor = glow_lazy_glScissor;
static void glow_lazy_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
  glow_glRasterPos3d = (PFNGLRASTERPOS3DPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3d")));
  if (glow_glRasterPos3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3d\n");
#endif
  }
  glow_glRasterPos3d(x, y, z);
}
PFNGLRASTERPOS3DPROC glow_glRasterPos3d = glow_lazy_glRasterPos3d;
static void glow_lazy_glTexCoord2i(GLint s, GLint t) {
  glow_glTexCoord2i = (PFNGLTEXCOORD2IPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2i")));
  if (glow_glTexCoord2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2i\n");
#endif
  }
  glow_glTexCoord2i(s, t);
}
PFNGLTEXCOORD2IPROC glow_glTexCoord2i = glow_lazy_glTexCoord2i;
static void glow_lazy_glLightModeli(GLenum pname, GLint param) {
  glow_glLightModeli = (PFNGLLIGHTMODELIPROC)((ptrdiff_t)(glow_get_proc("glLightModeli")));
  if (glow_glLightModeli == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModeli\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModeli\n");
#endif
  }
  glow_glLightModeli(pname, param);
}
PFNGLLIGHTMODELIPROC glow_glLightModeli = glow_lazy_glLightModeli;
static void glow_lazy_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {
  glow_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)((ptrdiff_t)(glow_get_proc("glGetBooleani_v")));
  if (glow_glGetBooleani_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBooleani_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBooleani_v\n");
#endif
  }
  glow_glGetBooleani_v(target, index, data);
}
PFNGLGETBOOLEANI_VPROC glow_glGetBooleani_v = glow_lazy_glGetBooleani_v;
static void glow_lazy_glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {
  glow_glGetFloati_v = (PFNGLGETFLOATI_VPROC)((ptrdiff_t)(glow_get_proc("glGetFloati_v")));
  if (glow_glGetFloati_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFloati_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFloati_v\n");
#endif
  }
  glow_glGetFloati_v(target, index, data);
}
PFNGLGETFLOATI_VPROC glow_glGetFloati_v = glow_lazy_glGetFloati_v;
static void glow_lazy_glHint(GLenum target, GLenum mode) {
  glow_glHint = (PFNGLHINTPROC)((ptrdiff_t)(glow_get_proc("glHint")));
  if (glow_glHint == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glHint\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glHint\n");
#endif
  }
  glow_glHint(target, mode);
}
PFNGLHINTPROC glow_glHint = glow_lazy_glHint;
static void glow_lazy_glLoadTransposeMatrixf(const GLfloat *m) {
  glow_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)((ptrdiff_t)(glow_get_proc("glLoadTransposeMatrixf")));
  if (glow_glLoadTransposeMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadTransposeMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadTransposeMatrixf\n");
#endif
  }
  glow_glLoadTransposeMatrixf(m);
}
PFNGLLOADTRANSPOSEMATRIXFPROC glow_glLoadTransposeMatrixf = glow_lazy_glLoadTransposeMatrixf;
static void glow_lazy_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
  glow_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2i")));
  if (glow_glProgramUniform2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2i\n");
#endif
  }
  glow_glProgramUniform2i(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2IPROC glow_glProgramUniform2i = glow_lazy_glProgramUniform2i;
static void glow_lazy_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix4fv")));
  if (glow_glProgramUniformMatrix4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4fv\n");
#endif
  }
  glow_glProgramUniformMatrix4fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glow_glProgramUniformMatrix4fv = glow_lazy_glProgramUniformMatrix4fv;
static void glow_lazy_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {
  glow_glTexGenfv = (PFNGLTEXGENFVPROC)((ptrdiff_t)(glow_get_proc("glTexGenfv")));
  if (glow_glTexGenfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGenfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGenfv\n");
#endif
  }
  glow_glTexGenfv(coord, pname, params);
}
PFNGLTEXGENFVPROC glow_glTexGenfv = glow_lazy_glTexGenfv;
static void glow_lazy_glVertexAttribI3iv(GLuint index, const GLint *v) {
  glow_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI3iv")));
  if (glow_glVertexAttribI3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3iv\n");
#endif
  }
  glow_glVertexAttribI3iv(index, v);
}
PFNGLVERTEXATTRIBI3IVPROC glow_glVertexAttribI3iv = glow_lazy_glVertexAttribI3iv;
static void glow_lazy_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
  glow_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)((ptrdiff_t)(glow_get_proc("glDrawElementsBaseVertex")));
  if (glow_glDrawElementsBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsBaseVertex\n");
#endif
  }
  glow_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}
PFNGLDRAWELEMENTSBASEVERTEXPROC glow_glDrawElementsBaseVertex = glow_lazy_glDrawElementsBaseVertex;
static void glow_lazy_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glow_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP4uiv")));
  if (glow_glMultiTexCoordP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP4uiv\n");
#endif
  }
  glow_glMultiTexCoordP4uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP4UIVPROC glow_glMultiTexCoordP4uiv = glow_lazy_glMultiTexCoordP4uiv;
static void glow_lazy_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {
  glow_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)((ptrdiff_t)(glow_get_proc("glDeleteProgramPipelines")));
  if (glow_glDeleteProgramPipelines == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteProgramPipelines\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteProgramPipelines\n");
#endif
  }
  glow_glDeleteProgramPipelines(n, pipelines);
}
PFNGLDELETEPROGRAMPIPELINESPROC glow_glDeleteProgramPipelines = glow_lazy_glDeleteProgramPipelines;
static void glow_lazy_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
  glow_glNormal3d = (PFNGLNORMAL3DPROC)((ptrdiff_t)(glow_get_proc("glNormal3d")));
  if (glow_glNormal3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3d\n");
#endif
  }
  glow_glNormal3d(nx, ny, nz);
}
PFNGLNORMAL3DPROC glow_glNormal3d = glow_lazy_glNormal3d;
static void glow_lazy_glDrawTransformFeedback(GLenum mode, GLuint id) {
  glow_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glDrawTransformFeedback")));
  if (glow_glDrawTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedback\n");
#endif
  }
  glow_glDrawTransformFeedback(mode, id);
}
PFNGLDRAWTRANSFORMFEEDBACKPROC glow_glDrawTransformFeedback = glow_lazy_glDrawTransformFeedback;
static void glow_lazy_glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {
  glow_glGetMaterialiv = (PFNGLGETMATERIALIVPROC)((ptrdiff_t)(glow_get_proc("glGetMaterialiv")));
  if (glow_glGetMaterialiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMaterialiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMaterialiv\n");
#endif
  }
  glow_glGetMaterialiv(face, pname, params);
}
PFNGLGETMATERIALIVPROC glow_glGetMaterialiv = glow_lazy_glGetMaterialiv;
static void glow_lazy_glMultTransposeMatrixd(const GLdouble *m) {
  glow_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)((ptrdiff_t)(glow_get_proc("glMultTransposeMatrixd")));
  if (glow_glMultTransposeMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultTransposeMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultTransposeMatrixd\n");
#endif
  }
  glow_glMultTransposeMatrixd(m);
}
PFNGLMULTTRANSPOSEMATRIXDPROC glow_glMultTransposeMatrixd = glow_lazy_glMultTransposeMatrixd;
static GLboolean glow_lazy_glIsShader(GLuint shader) {
  glow_glIsShader = (PFNGLISSHADERPROC)((ptrdiff_t)(glow_get_proc("glIsShader")));
  if (glow_glIsShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsShader\n");
#endif
  }
  return glow_glIsShader(shader);
}
PFNGLISSHADERPROC glow_glIsShader = glow_lazy_glIsShader;
static void glow_lazy_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  glow_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)((ptrdiff_t)(glow_get_proc("glDebugMessageControl")));
  if (glow_glDebugMessageControl == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDebugMessageControl\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDebugMessageControl\n");
#endif
  }
  glow_glDebugMessageControl(source, type, severity, count, ids, enabled);
}
PFNGLDEBUGMESSAGECONTROLPROC glow_glDebugMessageControl = glow_lazy_glDebugMessageControl;
static void glow_lazy_glRasterPos2s(GLshort x, GLshort y) {
  glow_glRasterPos2s = (PFNGLRASTERPOS2SPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2s")));
  if (glow_glRasterPos2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2s\n");
#endif
  }
  glow_glRasterPos2s(x, y);
}
PFNGLRASTERPOS2SPROC glow_glRasterPos2s = glow_lazy_glRasterPos2s;
static void glow_lazy_glFogCoordfv(const GLfloat *coord) {
  glow_glFogCoordfv = (PFNGLFOGCOORDFVPROC)((ptrdiff_t)(glow_get_proc("glFogCoordfv")));
  if (glow_glFogCoordfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordfv\n");
#endif
  }
  glow_glFogCoordfv(coord);
}
PFNGLFOGCOORDFVPROC glow_glFogCoordfv = glow_lazy_glFogCoordfv;
static void glow_lazy_glWindowPos3iv(const GLint *v) {
  glow_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3iv")));
  if (glow_glWindowPos3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3iv\n");
#endif
  }
  glow_glWindowPos3iv(v);
}
PFNGLWINDOWPOS3IVPROC glow_glWindowPos3iv = glow_lazy_glWindowPos3iv;
static void glow_lazy_glBindProgramPipeline(GLuint pipeline) {
  glow_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)((ptrdiff_t)(glow_get_proc("glBindProgramPipeline")));
  if (glow_glBindProgramPipeline == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindProgramPipeline\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindProgramPipeline\n");
#endif
  }
  glow_glBindProgramPipeline(pipeline);
}
PFNGLBINDPROGRAMPIPELINEPROC glow_glBindProgramPipeline = glow_lazy_glBindProgramPipeline;
static void glow_lazy_glTexCoord3sv(const GLshort *v) {
  glow_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3sv")));
  if (glow_glTexCoord3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3sv\n");
#endif
  }
  glow_glTexCoord3sv(v);
}
PFNGLTEXCOORD3SVPROC glow_glTexCoord3sv = glow_lazy_glTexCoord3sv;
static void glow_lazy_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  glow_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL3d")));
  if (glow_glVertexAttribL3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL3d\n");
#endif
  }
  glow_glVertexAttribL3d(index, x, y, z);
}
PFNGLVERTEXATTRIBL3DPROC glow_glVertexAttribL3d = glow_lazy_glVertexAttribL3d;
static void glow_lazy_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
  glow_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)((ptrdiff_t)(glow_get_proc("glGetQueryObjectiv")));
  if (glow_glGetQueryObjectiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjectiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjectiv\n");
#endif
  }
  glow_glGetQueryObjectiv(id, pname, params);
}
PFNGLGETQUERYOBJECTIVPROC glow_glGetQueryObjectiv = glow_lazy_glGetQueryObjectiv;
static void glow_lazy_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
  glow_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribfv")));
  if (glow_glGetVertexAttribfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribfv\n");
#endif
  }
  glow_glGetVertexAttribfv(index, pname, params);
}
PFNGLGETVERTEXATTRIBFVPROC glow_glGetVertexAttribfv = glow_lazy_glGetVertexAttribfv;
static GLint glow_lazy_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  glow_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)((ptrdiff_t)(glow_get_proc("glGetProgramResourceLocationIndex")));
  if (glow_glGetProgramResourceLocationIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceLocationIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceLocationIndex\n");
#endif
  }
  return glow_glGetProgramResourceLocationIndex(program, programInterface, name);
}
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glow_glGetProgramResourceLocationIndex = glow_lazy_glGetProgramResourceLocationIndex;
static void glow_lazy_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
  glow_glVertex4i = (PFNGLVERTEX4IPROC)((ptrdiff_t)(glow_get_proc("glVertex4i")));
  if (glow_glVertex4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4i\n");
#endif
  }
  glow_glVertex4i(x, y, z, w);
}
PFNGLVERTEX4IPROC glow_glVertex4i = glow_lazy_glVertex4i;
static void glow_lazy_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  glow_glVertex4s = (PFNGLVERTEX4SPROC)((ptrdiff_t)(glow_get_proc("glVertex4s")));
  if (glow_glVertex4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4s\n");
#endif
  }
  glow_glVertex4s(x, y, z, w);
}
PFNGLVERTEX4SPROC glow_glVertex4s = glow_lazy_glVertex4s;
static void glow_lazy_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  glow_glBlendFunci = (PFNGLBLENDFUNCIPROC)((ptrdiff_t)(glow_get_proc("glBlendFunci")));
  if (glow_glBlendFunci == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFunci\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFunci\n");
#endif
  }
  glow_glBlendFunci(buf, src, dst);
}
PFNGLBLENDFUNCIPROC glow_glBlendFunci = glow_lazy_glBlendFunci;
static void glow_lazy_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
  glow_glRasterPos3s = (PFNGLRASTERPOS3SPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3s")));
  if (glow_glRasterPos3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3s\n");
#endif
  }
  glow_glRasterPos3s(x, y, z);
}
PFNGLRASTERPOS3SPROC glow_glRasterPos3s = glow_lazy_glRasterPos3s;
static void glow_lazy_glDeleteShader(GLuint shader) {
  glow_glDeleteShader = (PFNGLDELETESHADERPROC)((ptrdiff_t)(glow_get_proc("glDeleteShader")));
  if (glow_glDeleteShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteShader\n");
#endif
  }
  glow_glDeleteShader(shader);
}
PFNGLDELETESHADERPROC glow_glDeleteShader = glow_lazy_glDeleteShader;
static void glow_lazy_glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
  glow_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Nsv")));
  if (glow_glVertexAttrib4Nsv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nsv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nsv\n");
#endif
  }
  glow_glVertexAttrib4Nsv(index, v);
}
PFNGLVERTEXATTRIB4NSVPROC glow_glVertexAttrib4Nsv = glow_lazy_glVertexAttrib4Nsv;
static void glow_lazy_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glow_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP2uiv")));
  if (glow_glMultiTexCoordP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP2uiv\n");
#endif
  }
  glow_glMultiTexCoordP2uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP2UIVPROC glow_glMultiTexCoordP2uiv = glow_lazy_glMultiTexCoordP2uiv;
static void glow_lazy_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  glow_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)((ptrdiff_t)(glow_get_proc("glTexStorage2DMultisample")));
  if (glow_glTexStorage2DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage2DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage2DMultisample\n");
#endif
  }
  glow_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glow_glTexStorage2DMultisample = glow_lazy_glTexStorage2DMultisample;
static void glow_lazy_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  glow_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glGetTexParameterfv")));
  if (glow_glGetTexParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameterfv\n");
#endif
  }
  glow_glGetTexParameterfv(target, pname, params);
}
PFNGLGETTEXPARAMETERFVPROC glow_glGetTexParameterfv = glow_lazy_glGetTexParameterfv;
static void glow_lazy_glValidateProgram(GLuint program) {
  glow_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glValidateProgram")));
  if (glow_glValidateProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glValidateProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glValidateProgram\n");
#endif
  }
  glow_glValidateProgram(program);
}
PFNGLVALIDATEPROGRAMPROC glow_glValidateProgram = glow_lazy_glValidateProgram;
static void glow_lazy_glVertexAttribI1ui(GLuint index, GLuint x) {
  glow_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI1ui")));
  if (glow_glVertexAttribI1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1ui\n");
#endif
  }
  glow_glVertexAttribI1ui(index, x);
}
PFNGLVERTEXATTRIBI1UIPROC glow_glVertexAttribI1ui = glow_lazy_glVertexAttribI1ui;
static void glow_lazy_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {
  glow_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)((ptrdiff_t)(glow_get_proc("glGetBufferParameteri64v")));
  if (glow_glGetBufferParameteri64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferParameteri64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferParameteri64v\n");
#endif
  }
  glow_glGetBufferParameteri64v(target, pname, params);
}
PFNGLGETBUFFERPARAMETERI64VPROC glow_glGetBufferParameteri64v = glow_lazy_glGetBufferParameteri64v;
static void glow_lazy_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
  glow_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP4ui")));
  if (glow_glMultiTexCoordP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP4ui\n");
#endif
  }
  glow_glMultiTexCoordP4ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP4UIPROC glow_glMultiTexCoordP4ui = glow_lazy_glMultiTexCoordP4ui;
static void glow_lazy_glMultiTexCoord1fv(GLenum target, const GLfloat *v) {
  glow_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1fv")));
  if (glow_glMultiTexCoord1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1fv\n");
#endif
  }
  glow_glMultiTexCoord1fv(target, v);
}
PFNGLMULTITEXCOORD1FVPROC glow_glMultiTexCoord1fv = glow_lazy_glMultiTexCoord1fv;
static void glow_lazy_glTexCoord4fv(const GLfloat *v) {
  glow_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4fv")));
  if (glow_glTexCoord4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4fv\n");
#endif
  }
  glow_glTexCoord4fv(v);
}
PFNGLTEXCOORD4FVPROC glow_glTexCoord4fv = glow_lazy_glTexCoord4fv;
static void glow_lazy_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  glow_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)((ptrdiff_t)(glow_get_proc("glUniformBlockBinding")));
  if (glow_glUniformBlockBinding == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformBlockBinding\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformBlockBinding\n");
#endif
  }
  glow_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}
PFNGLUNIFORMBLOCKBINDINGPROC glow_glUniformBlockBinding = glow_lazy_glUniformBlockBinding;
static void glow_lazy_glTexCoordP1ui(GLenum type, GLuint coords) {
  glow_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP1ui")));
  if (glow_glTexCoordP1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP1ui\n");
#endif
  }
  glow_glTexCoordP1ui(type, coords);
}
PFNGLTEXCOORDP1UIPROC glow_glTexCoordP1ui = glow_lazy_glTexCoordP1ui;
static void glow_lazy_glIndexdv(const GLdouble *c) {
  glow_glIndexdv = (PFNGLINDEXDVPROC)((ptrdiff_t)(glow_get_proc("glIndexdv")));
  if (glow_glIndexdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexdv\n");
#endif
  }
  glow_glIndexdv(c);
}
PFNGLINDEXDVPROC glow_glIndexdv = glow_lazy_glIndexdv;
static void glow_lazy_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {
  glow_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)((ptrdiff_t)(glow_get_proc("glTexParameterIuiv")));
  if (glow_glTexParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterIuiv\n");
#endif
  }
  glow_glTexParameterIuiv(target, pname, params);
}
PFNGLTEXPARAMETERIUIVPROC glow_glTexParameterIuiv = glow_lazy_glTexParameterIuiv;
static void glow_lazy_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
  glow_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)((ptrdiff_t)(glow_get_proc("glClearBufferfv")));
  if (glow_glClearBufferfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferfv\n");
#endif
  }
  glow_glClearBufferfv(buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERFVPROC glow_glClearBufferfv = glow_lazy_glClearBufferfv;
static void glow_lazy_glGenVertexArrays(GLsizei n, GLuint *arrays) {
  glow_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)((ptrdiff_t)(glow_get_proc("glGenVertexArrays")));
  if (glow_glGenVertexArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenVertexArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenVertexArrays\n");
#endif
  }
  glow_glGenVertexArrays(n, arrays);
}
PFNGLGENVERTEXARRAYSPROC glow_glGenVertexArrays = glow_lazy_glGenVertexArrays;
static void glow_lazy_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glow_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1fv")));
  if (glow_glProgramUniform1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1fv\n");
#endif
  }
  glow_glProgramUniform1fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1FVPROC glow_glProgramUniform1fv = glow_lazy_glProgramUniform1fv;
static void glow_lazy_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
  glow_glObjectLabel = (PFNGLOBJECTLABELPROC)((ptrdiff_t)(glow_get_proc("glObjectLabel")));
  if (glow_glObjectLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glObjectLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glObjectLabel\n");
#endif
  }
  glow_glObjectLabel(identifier, name, length, label);
}
PFNGLOBJECTLABELPROC glow_glObjectLabel = glow_lazy_glObjectLabel;
static void glow_lazy_glMultiTexCoord4iv(GLenum target, const GLint *v) {
  glow_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4iv")));
  if (glow_glMultiTexCoord4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4iv\n");
#endif
  }
  glow_glMultiTexCoord4iv(target, v);
}
PFNGLMULTITEXCOORD4IVPROC glow_glMultiTexCoord4iv = glow_lazy_glMultiTexCoord4iv;
static void glow_lazy_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  glow_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib3s")));
  if (glow_glVertexAttrib3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3s\n");
#endif
  }
  glow_glVertexAttrib3s(index, x, y, z);
}
PFNGLVERTEXATTRIB3SPROC glow_glVertexAttrib3s = glow_lazy_glVertexAttrib3s;
static void glow_lazy_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glow_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP2ui")));
  if (glow_glVertexAttribP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP2ui\n");
#endif
  }
  glow_glVertexAttribP2ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP2UIPROC glow_glVertexAttribP2ui = glow_lazy_glVertexAttribP2ui;
static void glow_lazy_glMinSampleShading(GLfloat value) {
  glow_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)((ptrdiff_t)(glow_get_proc("glMinSampleShading")));
  if (glow_glMinSampleShading == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMinSampleShading\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMinSampleShading\n");
#endif
  }
  glow_glMinSampleShading(value);
}
PFNGLMINSAMPLESHADINGPROC glow_glMinSampleShading = glow_lazy_glMinSampleShading;
static void glow_lazy_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glow_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL4d")));
  if (glow_glVertexAttribL4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL4d\n");
#endif
  }
  glow_glVertexAttribL4d(index, x, y, z, w);
}
PFNGLVERTEXATTRIBL4DPROC glow_glVertexAttribL4d = glow_lazy_glVertexAttribL4d;
static void glow_lazy_glFogCoorddv(const GLdouble *coord) {
  glow_glFogCoorddv = (PFNGLFOGCOORDDVPROC)((ptrdiff_t)(glow_get_proc("glFogCoorddv")));
  if (glow_glFogCoorddv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoorddv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoorddv\n");
#endif
  }
  glow_glFogCoorddv(coord);
}
PFNGLFOGCOORDDVPROC glow_glFogCoorddv = glow_lazy_glFogCoorddv;
static void glow_lazy_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
  glow_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)((ptrdiff_t)(glow_get_proc("glDrawRangeElementsBaseVertex")));
  if (glow_glDrawRangeElementsBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawRangeElementsBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawRangeElementsBaseVertex\n");
#endif
  }
  glow_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glow_glDrawRangeElementsBaseVertex = glow_lazy_glDrawRangeElementsBaseVertex;
static GLuint glow_lazy_glGenLists(GLsizei range) {
  glow_glGenLists = (PFNGLGENLISTSPROC)((ptrdiff_t)(glow_get_proc("glGenLists")));
  if (glow_glGenLists == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenLists\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenLists\n");
#endif
  }
  return glow_glGenLists(range);
}
PFNGLGENLISTSPROC glow_glGenLists = glow_lazy_glGenLists;
static void glow_lazy_glWindowPos2s(GLshort x, GLshort y) {
  glow_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2s")));
  if (glow_glWindowPos2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2s\n");
#endif
  }
  glow_glWindowPos2s(x, y);
}
PFNGLWINDOWPOS2SPROC glow_glWindowPos2s = glow_lazy_glWindowPos2s;
static void glow_lazy_glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {
  glow_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)((ptrdiff_t)(glow_get_proc("glUniform4uiv")));
  if (glow_glUniform4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4uiv\n");
#endif
  }
  glow_glUniform4uiv(location, count, value);
}
PFNGLUNIFORM4UIVPROC glow_glUniform4uiv = glow_lazy_glUniform4uiv;
static void glow_lazy_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  glow_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)((ptrdiff_t)(glow_get_proc("glSamplerParameterf")));
  if (glow_glSamplerParameterf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterf\n");
#endif
  }
  glow_glSamplerParameterf(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERFPROC glow_glSamplerParameterf = glow_lazy_glSamplerParameterf;
static void glow_lazy_glLineStipple(GLint factor, GLushort pattern) {
  glow_glLineStipple = (PFNGLLINESTIPPLEPROC)((ptrdiff_t)(glow_get_proc("glLineStipple")));
  if (glow_glLineStipple == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLineStipple\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLineStipple\n");
#endif
  }
  glow_glLineStipple(factor, pattern);
}
PFNGLLINESTIPPLEPROC glow_glLineStipple = glow_lazy_glLineStipple;
static void glow_lazy_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glow_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2uiv")));
  if (glow_glProgramUniform2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2uiv\n");
#endif
  }
  glow_glProgramUniform2uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2UIVPROC glow_glProgramUniform2uiv = glow_lazy_glProgramUniform2uiv;
static void glow_lazy_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
  glow_glVertex3d = (PFNGLVERTEX3DPROC)((ptrdiff_t)(glow_get_proc("glVertex3d")));
  if (glow_glVertex3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3d\n");
#endif
  }
  glow_glVertex3d(x, y, z);
}
PFNGLVERTEX3DPROC glow_glVertex3d = glow_lazy_glVertex3d;
static void glow_lazy_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
  glow_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)((ptrdiff_t)(glow_get_proc("glBindAttribLocation")));
  if (glow_glBindAttribLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindAttribLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindAttribLocation\n");
#endif
  }
  glow_glBindAttribLocation(program, index, name);
}
PFNGLBINDATTRIBLOCATIONPROC glow_glBindAttribLocation = glow_lazy_glBindAttribLocation;
static void glow_lazy_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix2x4dv")));
  if (glow_glUniformMatrix2x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x4dv\n");
#endif
  }
  glow_glUniformMatrix2x4dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X4DVPROC glow_glUniformMatrix2x4dv = glow_lazy_glUniformMatrix2x4dv;
static void glow_lazy_glEvalCoord1dv(const GLdouble *u) {
  glow_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord1dv")));
  if (glow_glEvalCoord1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1dv\n");
#endif
  }
  glow_glEvalCoord1dv(u);
}
PFNGLEVALCOORD1DVPROC glow_glEvalCoord1dv = glow_lazy_glEvalCoord1dv;
static void glow_lazy_glEvalCoord2d(GLdouble u, GLdouble v) {
  glow_glEvalCoord2d = (PFNGLEVALCOORD2DPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord2d")));
  if (glow_glEvalCoord2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2d\n");
#endif
  }
  glow_glEvalCoord2d(u, v);
}
PFNGLEVALCOORD2DPROC glow_glEvalCoord2d = glow_lazy_glEvalCoord2d;
static void glow_lazy_glGetPixelMapfv(GLenum map, GLfloat *values) {
  glow_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)((ptrdiff_t)(glow_get_proc("glGetPixelMapfv")));
  if (glow_glGetPixelMapfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPixelMapfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPixelMapfv\n");
#endif
  }
  glow_glGetPixelMapfv(map, values);
}
PFNGLGETPIXELMAPFVPROC glow_glGetPixelMapfv = glow_lazy_glGetPixelMapfv;
static void glow_lazy_glBindVertexArray(GLuint array) {
  glow_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)((ptrdiff_t)(glow_get_proc("glBindVertexArray")));
  if (glow_glBindVertexArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindVertexArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindVertexArray\n");
#endif
  }
  glow_glBindVertexArray(array);
}
PFNGLBINDVERTEXARRAYPROC glow_glBindVertexArray = glow_lazy_glBindVertexArray;
static void glow_lazy_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix3dv")));
  if (glow_glProgramUniformMatrix3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3dv\n");
#endif
  }
  glow_glProgramUniformMatrix3dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glow_glProgramUniformMatrix3dv = glow_lazy_glProgramUniformMatrix3dv;
static void glow_lazy_glPixelStorei(GLenum pname, GLint param) {
  glow_glPixelStorei = (PFNGLPIXELSTOREIPROC)((ptrdiff_t)(glow_get_proc("glPixelStorei")));
  if (glow_glPixelStorei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelStorei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelStorei\n");
#endif
  }
  glow_glPixelStorei(pname, param);
}
PFNGLPIXELSTOREIPROC glow_glPixelStorei = glow_lazy_glPixelStorei;
static void glow_lazy_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glow_glVertexPointer = (PFNGLVERTEXPOINTERPROC)((ptrdiff_t)(glow_get_proc("glVertexPointer")));
  if (glow_glVertexPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexPointer\n");
#endif
  }
  glow_glVertexPointer(size, type, stride, pointer);
}
PFNGLVERTEXPOINTERPROC glow_glVertexPointer = glow_lazy_glVertexPointer;
static void glow_lazy_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  glow_glFrustum = (PFNGLFRUSTUMPROC)((ptrdiff_t)(glow_get_proc("glFrustum")));
  if (glow_glFrustum == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFrustum\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFrustum\n");
#endif
  }
  glow_glFrustum(left, right, bottom, top, zNear, zFar);
}
PFNGLFRUSTUMPROC glow_glFrustum = glow_lazy_glFrustum;
static void glow_lazy_glLoadName(GLuint name) {
  glow_glLoadName = (PFNGLLOADNAMEPROC)((ptrdiff_t)(glow_get_proc("glLoadName")));
  if (glow_glLoadName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadName\n");
#endif
  }
  glow_glLoadName(name);
}
PFNGLLOADNAMEPROC glow_glLoadName = glow_lazy_glLoadName;
static void glow_lazy_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  glow_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3ub")));
  if (glow_glSecondaryColor3ub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3ub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3ub\n");
#endif
  }
  glow_glSecondaryColor3ub(red, green, blue);
}
PFNGLSECONDARYCOLOR3UBPROC glow_glSecondaryColor3ub = glow_lazy_glSecondaryColor3ub;
static void glow_lazy_glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
  glow_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Nusv")));
  if (glow_glVertexAttrib4Nusv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nusv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nusv\n");
#endif
  }
  glow_glVertexAttrib4Nusv(index, v);
}
PFNGLVERTEXATTRIB4NUSVPROC glow_glVertexAttrib4Nusv = glow_lazy_glVertexAttrib4Nusv;
static void glow_lazy_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  glow_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)((ptrdiff_t)(glow_get_proc("glFlushMappedBufferRange")));
  if (glow_glFlushMappedBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFlushMappedBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFlushMappedBufferRange\n");
#endif
  }
  glow_glFlushMappedBufferRange(target, offset, length);
}
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glow_glFlushMappedBufferRange = glow_lazy_glFlushMappedBufferRange;
static void glow_lazy_glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {
  glow_glProgramBinary = (PFNGLPROGRAMBINARYPROC)((ptrdiff_t)(glow_get_proc("glProgramBinary")));
  if (glow_glProgramBinary == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramBinary\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramBinary\n");
#endif
  }
  glow_glProgramBinary(program, binaryFormat, binary, length);
}
PFNGLPROGRAMBINARYPROC glow_glProgramBinary = glow_lazy_glProgramBinary;
static void glow_lazy_glTexCoord2fv(const GLfloat *v) {
  glow_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2fv")));
  if (glow_glTexCoord2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2fv\n");
#endif
  }
  glow_glTexCoord2fv(v);
}
PFNGLTEXCOORD2FVPROC glow_glTexCoord2fv = glow_lazy_glTexCoord2fv;
static void glow_lazy_glScissorIndexedv(GLuint index, const GLint *v) {
  glow_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)((ptrdiff_t)(glow_get_proc("glScissorIndexedv")));
  if (glow_glScissorIndexedv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissorIndexedv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissorIndexedv\n");
#endif
  }
  glow_glScissorIndexedv(index, v);
}
PFNGLSCISSORINDEXEDVPROC glow_glScissorIndexedv = glow_lazy_glScissorIndexedv;
static void glow_lazy_glEvalCoord1f(GLfloat u) {
  glow_glEvalCoord1f = (PFNGLEVALCOORD1FPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord1f")));
  if (glow_glEvalCoord1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1f\n");
#endif
  }
  glow_glEvalCoord1f(u);
}
PFNGLEVALCOORD1FPROC glow_glEvalCoord1f = glow_lazy_glEvalCoord1f;
static void glow_lazy_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  glow_glUniform4f = (PFNGLUNIFORM4FPROC)((ptrdiff_t)(glow_get_proc("glUniform4f")));
  if (glow_glUniform4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4f\n");
#endif
  }
  glow_glUniform4f(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4FPROC glow_glUniform4f = glow_lazy_glUniform4f;
static void glow_lazy_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  glow_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)((ptrdiff_t)(glow_get_proc("glInvalidateBufferSubData")));
  if (glow_glInvalidateBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateBufferSubData\n");
#endif
  }
  glow_glInvalidateBufferSubData(buffer, offset, length);
}
PFNGLINVALIDATEBUFFERSUBDATAPROC glow_glInvalidateBufferSubData = glow_lazy_glInvalidateBufferSubData;
static void glow_lazy_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  glow_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4i")));
  if (glow_glMultiTexCoord4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4i\n");
#endif
  }
  glow_glMultiTexCoord4i(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4IPROC glow_glMultiTexCoord4i = glow_lazy_glMultiTexCoord4i;
static void glow_lazy_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {
  glow_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glDeleteFramebuffers")));
  if (glow_glDeleteFramebuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteFramebuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteFramebuffers\n");
#endif
  }
  glow_glDeleteFramebuffers(n, framebuffers);
}
PFNGLDELETEFRAMEBUFFERSPROC glow_glDeleteFramebuffers = glow_lazy_glDeleteFramebuffers;
static void glow_lazy_glGetIntegerv(GLenum pname, GLint *data) {
  glow_glGetIntegerv = (PFNGLGETINTEGERVPROC)((ptrdiff_t)(glow_get_proc("glGetIntegerv")));
  if (glow_glGetIntegerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetIntegerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetIntegerv\n");
#endif
  }
  glow_glGetIntegerv(pname, data);
}
PFNGLGETINTEGERVPROC glow_glGetIntegerv = glow_lazy_glGetIntegerv;
static void glow_lazy_glLoadTransposeMatrixd(const GLdouble *m) {
  glow_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)((ptrdiff_t)(glow_get_proc("glLoadTransposeMatrixd")));
  if (glow_glLoadTransposeMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadTransposeMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadTransposeMatrixd\n");
#endif
  }
  glow_glLoadTransposeMatrixd(m);
}
PFNGLLOADTRANSPOSEMATRIXDPROC glow_glLoadTransposeMatrixd = glow_lazy_glLoadTransposeMatrixd;
static void glow_lazy_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glow_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3dv")));
  if (glow_glProgramUniform3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3dv\n");
#endif
  }
  glow_glProgramUniform3dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3DVPROC glow_glProgramUniform3dv = glow_lazy_glProgramUniform3dv;
static void glow_lazy_glColor4sv(const GLshort *v) {
  glow_glColor4sv = (PFNGLCOLOR4SVPROC)((ptrdiff_t)(glow_get_proc("glColor4sv")));
  if (glow_glColor4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4sv\n");
#endif
  }
  glow_glColor4sv(v);
}
PFNGLCOLOR4SVPROC glow_glColor4sv = glow_lazy_glColor4sv;
static void glow_lazy_glMultTransposeMatrixf(const GLfloat *m) {
  glow_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)((ptrdiff_t)(glow_get_proc("glMultTransposeMatrixf")));
  if (glow_glMultTransposeMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultTransposeMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultTransposeMatrixf\n");
#endif
  }
  glow_glMultTransposeMatrixf(m);
}
PFNGLMULTTRANSPOSEMATRIXFPROC glow_glMultTransposeMatrixf = glow_lazy_glMultTransposeMatrixf;
static void glow_lazy_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  glow_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)((ptrdiff_t)(glow_get_proc("glBlendEquationSeparate")));
  if (glow_glBlendEquationSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquationSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquationSeparate\n");
#endif
  }
  glow_glBlendEquationSeparate(modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEPROC glow_glBlendEquationSeparate = glow_lazy_glBlendEquationSeparate;
static void glow_lazy_glUniform1i(GLint location, GLint v0) {
  glow_glUniform1i = (PFNGLUNIFORM1IPROC)((ptrdiff_t)(glow_get_proc("glUniform1i")));
  if (glow_glUniform1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1i\n");
#endif
  }
  glow_glUniform1i(location, v0);
}
PFNGLUNIFORM1IPROC glow_glUniform1i = glow_lazy_glUniform1i;
static void glow_lazy_glBlendEquationi(GLuint buf, GLenum mode) {
  glow_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)((ptrdiff_t)(glow_get_proc("glBlendEquationi")));
  if (glow_glBlendEquationi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquationi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquationi\n");
#endif
  }
  glow_glBlendEquationi(buf, mode);
}
PFNGLBLENDEQUATIONIPROC glow_glBlendEquationi = glow_lazy_glBlendEquationi;
static void glow_lazy_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glow_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4dv")));
  if (glow_glProgramUniform4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4dv\n");
#endif
  }
  glow_glProgramUniform4dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4DVPROC glow_glProgramUniform4dv = glow_lazy_glProgramUniform4dv;
static void glow_lazy_glMemoryBarrier(GLbitfield barriers) {
  glow_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)((ptrdiff_t)(glow_get_proc("glMemoryBarrier")));
  if (glow_glMemoryBarrier == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMemoryBarrier\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMemoryBarrier\n");
#endif
  }
  glow_glMemoryBarrier(barriers);
}
PFNGLMEMORYBARRIERPROC glow_glMemoryBarrier = glow_lazy_glMemoryBarrier;
static void glow_lazy_glEvalCoord1fv(const GLfloat *u) {
  glow_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord1fv")));
  if (glow_glEvalCoord1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1fv\n");
#endif
  }
  glow_glEvalCoord1fv(u);
}
PFNGLEVALCOORD1FVPROC glow_glEvalCoord1fv = glow_lazy_glEvalCoord1fv;
static void glow_lazy_glWindowPos2i(GLint x, GLint y) {
  glow_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2i")));
  if (glow_glWindowPos2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2i\n");
#endif
  }
  glow_glWindowPos2i(x, y);
}
PFNGLWINDOWPOS2IPROC glow_glWindowPos2i = glow_lazy_glWindowPos2i;
static void glow_lazy_glDeleteProgram(GLuint program) {
  glow_glDeleteProgram = (PFNGLDELETEPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glDeleteProgram")));
  if (glow_glDeleteProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteProgram\n");
#endif
  }
  glow_glDeleteProgram(program);
}
PFNGLDELETEPROGRAMPROC glow_glDeleteProgram = glow_lazy_glDeleteProgram;
static void glow_lazy_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
  glow_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4d")));
  if (glow_glProgramUniform4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4d\n");
#endif
  }
  glow_glProgramUniform4d(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4DPROC glow_glProgramUniform4d = glow_lazy_glProgramUniform4d;
static void glow_lazy_glMultiTexCoord2fv(GLenum target, const GLfloat *v) {
  glow_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2fv")));
  if (glow_glMultiTexCoord2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2fv\n");
#endif
  }
  glow_glMultiTexCoord2fv(target, v);
}
PFNGLMULTITEXCOORD2FVPROC glow_glMultiTexCoord2fv = glow_lazy_glMultiTexCoord2fv;
static void glow_lazy_glVertexP4ui(GLenum type, GLuint value) {
  glow_glVertexP4ui = (PFNGLVERTEXP4UIPROC)((ptrdiff_t)(glow_get_proc("glVertexP4ui")));
  if (glow_glVertexP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP4ui\n");
#endif
  }
  glow_glVertexP4ui(type, value);
}
PFNGLVERTEXP4UIPROC glow_glVertexP4ui = glow_lazy_glVertexP4ui;
static void glow_lazy_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  glow_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)((ptrdiff_t)(glow_get_proc("glGetProgramPipelineInfoLog")));
  if (glow_glGetProgramPipelineInfoLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramPipelineInfoLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramPipelineInfoLog\n");
#endif
  }
  glow_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glow_glGetProgramPipelineInfoLog = glow_lazy_glGetProgramPipelineInfoLog;
static void glow_lazy_glVertexAttribI3uiv(GLuint index, const GLuint *v) {
  glow_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI3uiv")));
  if (glow_glVertexAttribI3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3uiv\n");
#endif
  }
  glow_glVertexAttribI3uiv(index, v);
}
PFNGLVERTEXATTRIBI3UIVPROC glow_glVertexAttribI3uiv = glow_lazy_glVertexAttribI3uiv;
static void glow_lazy_glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
  glow_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Nuiv")));
  if (glow_glVertexAttrib4Nuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nuiv\n");
#endif
  }
  glow_glVertexAttrib4Nuiv(index, v);
}
PFNGLVERTEXATTRIB4NUIVPROC glow_glVertexAttrib4Nuiv = glow_lazy_glVertexAttrib4Nuiv;
static void glow_lazy_glPixelTransferi(GLenum pname, GLint param) {
  glow_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)((ptrdiff_t)(glow_get_proc("glPixelTransferi")));
  if (glow_glPixelTransferi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelTransferi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelTransferi\n");
#endif
  }
  glow_glPixelTransferi(pname, param);
}
PFNGLPIXELTRANSFERIPROC glow_glPixelTransferi = glow_lazy_glPixelTransferi;
static void glow_lazy_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
  glow_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3i")));
  if (glow_glMultiTexCoord3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3i\n");
#endif
  }
  glow_glMultiTexCoord3i(target, s, t, r);
}
PFNGLMULTITEXCOORD3IPROC glow_glMultiTexCoord3i = glow_lazy_glMultiTexCoord3i;
static void glow_lazy_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
  glow_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI3ui")));
  if (glow_glVertexAttribI3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3ui\n");
#endif
  }
  glow_glVertexAttribI3ui(index, x, y, z);
}
PFNGLVERTEXATTRIBI3UIPROC glow_glVertexAttribI3ui = glow_lazy_glVertexAttribI3ui;
static GLboolean glow_lazy_glIsFramebuffer(GLuint framebuffer) {
  glow_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)((ptrdiff_t)(glow_get_proc("glIsFramebuffer")));
  if (glow_glIsFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsFramebuffer\n");
#endif
  }
  return glow_glIsFramebuffer(framebuffer);
}
PFNGLISFRAMEBUFFERPROC glow_glIsFramebuffer = glow_lazy_glIsFramebuffer;
static void glow_lazy_glVertexP3ui(GLenum type, GLuint value) {
  glow_glVertexP3ui = (PFNGLVERTEXP3UIPROC)((ptrdiff_t)(glow_get_proc("glVertexP3ui")));
  if (glow_glVertexP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP3ui\n");
#endif
  }
  glow_glVertexP3ui(type, value);
}
PFNGLVERTEXP3UIPROC glow_glVertexP3ui = glow_lazy_glVertexP3ui;
static GLboolean glow_lazy_glIsEnabled(GLenum cap) {
  glow_glIsEnabled = (PFNGLISENABLEDPROC)((ptrdiff_t)(glow_get_proc("glIsEnabled")));
  if (glow_glIsEnabled == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsEnabled\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsEnabled\n");
#endif
  }
  return glow_glIsEnabled(cap);
}
PFNGLISENABLEDPROC glow_glIsEnabled = glow_lazy_glIsEnabled;
static void glow_lazy_glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {
  glow_glScissorArrayv = (PFNGLSCISSORARRAYVPROC)((ptrdiff_t)(glow_get_proc("glScissorArrayv")));
  if (glow_glScissorArrayv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissorArrayv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissorArrayv\n");
#endif
  }
  glow_glScissorArrayv(first, count, v);
}
PFNGLSCISSORARRAYVPROC glow_glScissorArrayv = glow_lazy_glScissorArrayv;
static void glow_lazy_glSecondaryColor3bv(const GLbyte *v) {
  glow_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3bv")));
  if (glow_glSecondaryColor3bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3bv\n");
#endif
  }
  glow_glSecondaryColor3bv(v);
}
PFNGLSECONDARYCOLOR3BVPROC glow_glSecondaryColor3bv = glow_lazy_glSecondaryColor3bv;
static void glow_lazy_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
  glow_glVertex3f = (PFNGLVERTEX3FPROC)((ptrdiff_t)(glow_get_proc("glVertex3f")));
  if (glow_glVertex3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3f\n");
#endif
  }
  glow_glVertex3f(x, y, z);
}
PFNGLVERTEX3FPROC glow_glVertex3f = glow_lazy_glVertex3f;
static void glow_lazy_glMultiTexCoord2dv(GLenum target, const GLdouble *v) {
  glow_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2dv")));
  if (glow_glMultiTexCoord2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2dv\n");
#endif
  }
  glow_glMultiTexCoord2dv(target, v);
}
PFNGLMULTITEXCOORD2DVPROC glow_glMultiTexCoord2dv = glow_lazy_glMultiTexCoord2dv;
static void glow_lazy_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {
  glow_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)((ptrdiff_t)(glow_get_proc("glGetQueryObjecti64v")));
  if (glow_glGetQueryObjecti64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjecti64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjecti64v\n");
#endif
  }
  glow_glGetQueryObjecti64v(id, pname, params);
}
PFNGLGETQUERYOBJECTI64VPROC glow_glGetQueryObjecti64v = glow_lazy_glGetQueryObjecti64v;
static void glow_lazy_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
  glow_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetTexLevelParameteriv")));
  if (glow_glGetTexLevelParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexLevelParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexLevelParameteriv\n");
#endif
  }
  glow_glGetTexLevelParameteriv(target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERIVPROC glow_glGetTexLevelParameteriv = glow_lazy_glGetTexLevelParameteriv;
static void glow_lazy_glWindowPos3dv(const GLdouble *v) {
  glow_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3dv")));
  if (glow_glWindowPos3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3dv\n");
#endif
  }
  glow_glWindowPos3dv(v);
}
PFNGLWINDOWPOS3DVPROC glow_glWindowPos3dv = glow_lazy_glWindowPos3dv;
static void glow_lazy_glMultiTexCoord1f(GLenum target, GLfloat s) {
  glow_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1f")));
  if (glow_glMultiTexCoord1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1f\n");
#endif
  }
  glow_glMultiTexCoord1f(target, s);
}
PFNGLMULTITEXCOORD1FPROC glow_glMultiTexCoord1f = glow_lazy_glMultiTexCoord1f;
static void glow_lazy_glNormal3i(GLint nx, GLint ny, GLint nz) {
  glow_glNormal3i = (PFNGLNORMAL3IPROC)((ptrdiff_t)(glow_get_proc("glNormal3i")));
  if (glow_glNormal3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3i\n");
#endif
  }
  glow_glNormal3i(nx, ny, nz);
}
PFNGLNORMAL3IPROC glow_glNormal3i = glow_lazy_glNormal3i;
static void glow_lazy_glRasterPos2iv(const GLint *v) {
  glow_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2iv")));
  if (glow_glRasterPos2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2iv\n");
#endif
  }
  glow_glRasterPos2iv(v);
}
PFNGLRASTERPOS2IVPROC glow_glRasterPos2iv = glow_lazy_glRasterPos2iv;
static void glow_lazy_glVertex3iv(const GLint *v) {
  glow_glVertex3iv = (PFNGLVERTEX3IVPROC)((ptrdiff_t)(glow_get_proc("glVertex3iv")));
  if (glow_glVertex3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3iv\n");
#endif
  }
  glow_glVertex3iv(v);
}
PFNGLVERTEX3IVPROC glow_glVertex3iv = glow_lazy_glVertex3iv;
static void glow_lazy_glEvalCoord2fv(const GLfloat *u) {
  glow_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord2fv")));
  if (glow_glEvalCoord2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2fv\n");
#endif
  }
  glow_glEvalCoord2fv(u);
}
PFNGLEVALCOORD2FVPROC glow_glEvalCoord2fv = glow_lazy_glEvalCoord2fv;
static void glow_lazy_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix3fv")));
  if (glow_glUniformMatrix3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3fv\n");
#endif
  }
  glow_glUniformMatrix3fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3FVPROC glow_glUniformMatrix3fv = glow_lazy_glUniformMatrix3fv;
static void glow_lazy_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
  glow_glColor4s = (PFNGLCOLOR4SPROC)((ptrdiff_t)(glow_get_proc("glColor4s")));
  if (glow_glColor4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4s\n");
#endif
  }
  glow_glColor4s(red, green, blue, alpha);
}
PFNGLCOLOR4SPROC glow_glColor4s = glow_lazy_glColor4s;
static void glow_lazy_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glow_glVertex4d = (PFNGLVERTEX4DPROC)((ptrdiff_t)(glow_get_proc("glVertex4d")));
  if (glow_glVertex4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4d\n");
#endif
  }
  glow_glVertex4d(x, y, z, w);
}
PFNGLVERTEX4DPROC glow_glVertex4d = glow_lazy_glVertex4d;
static void glow_lazy_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {
  glow_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)((ptrdiff_t)(glow_get_proc("glGetInternalformativ")));
  if (glow_glGetInternalformativ == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInternalformativ\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInternalformativ\n");
#endif
  }
  glow_glGetInternalformativ(target, internalformat, pname, bufSize, params);
}
PFNGLGETINTERNALFORMATIVPROC glow_glGetInternalformativ = glow_lazy_glGetInternalformativ;
static void glow_lazy_glUniform2d(GLint location, GLdouble x, GLdouble y) {
  glow_glUniform2d = (PFNGLUNIFORM2DPROC)((ptrdiff_t)(glow_get_proc("glUniform2d")));
  if (glow_glUniform2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2d\n");
#endif
  }
  glow_glUniform2d(location, x, y);
}
PFNGLUNIFORM2DPROC glow_glUniform2d = glow_lazy_glUniform2d;
static GLboolean glow_lazy_glIsProgramPipeline(GLuint pipeline) {
  glow_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)((ptrdiff_t)(glow_get_proc("glIsProgramPipeline")));
  if (glow_glIsProgramPipeline == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsProgramPipeline\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsProgramPipeline\n");
#endif
  }
  return glow_glIsProgramPipeline(pipeline);
}
PFNGLISPROGRAMPIPELINEPROC glow_glIsProgramPipeline = glow_lazy_glIsProgramPipeline;
static void glow_lazy_glVertexAttrib2sv(GLuint index, const GLshort *v) {
  glow_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib2sv")));
  if (glow_glVertexAttrib2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2sv\n");
#endif
  }
  glow_glVertexAttrib2sv(index, v);
}
PFNGLVERTEXATTRIB2SVPROC glow_glVertexAttrib2sv = glow_lazy_glVertexAttrib2sv;
static void glow_lazy_glColor4bv(const GLbyte *v) {
  glow_glColor4bv = (PFNGLCOLOR4BVPROC)((ptrdiff_t)(glow_get_proc("glColor4bv")));
  if (glow_glColor4bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4bv\n");
#endif
  }
  glow_glColor4bv(v);
}
PFNGLCOLOR4BVPROC glow_glColor4bv = glow_lazy_glColor4bv;
static void glow_lazy_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  glow_glVertex4f = (PFNGLVERTEX4FPROC)((ptrdiff_t)(glow_get_proc("glVertex4f")));
  if (glow_glVertex4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4f\n");
#endif
  }
  glow_glVertex4f(x, y, z, w);
}
PFNGLVERTEX4FPROC glow_glVertex4f = glow_lazy_glVertex4f;
static void glow_lazy_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
  glow_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribdv")));
  if (glow_glGetVertexAttribdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribdv\n");
#endif
  }
  glow_glGetVertexAttribdv(index, pname, params);
}
PFNGLGETVERTEXATTRIBDVPROC glow_glGetVertexAttribdv = glow_lazy_glGetVertexAttribdv;
static void glow_lazy_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  glow_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4i")));
  if (glow_glProgramUniform4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4i\n");
#endif
  }
  glow_glProgramUniform4i(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4IPROC glow_glProgramUniform4i = glow_lazy_glProgramUniform4i;
static void glow_lazy_glGetDoublev(GLenum pname, GLdouble *data) {
  glow_glGetDoublev = (PFNGLGETDOUBLEVPROC)((ptrdiff_t)(glow_get_proc("glGetDoublev")));
  if (glow_glGetDoublev == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetDoublev\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetDoublev\n");
#endif
  }
  glow_glGetDoublev(pname, data);
}
PFNGLGETDOUBLEVPROC glow_glGetDoublev = glow_lazy_glGetDoublev;
static void glow_lazy_glGetPixelMapusv(GLenum map, GLushort *values) {
  glow_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)((ptrdiff_t)(glow_get_proc("glGetPixelMapusv")));
  if (glow_glGetPixelMapusv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPixelMapusv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPixelMapusv\n");
#endif
  }
  glow_glGetPixelMapusv(map, values);
}
PFNGLGETPIXELMAPUSVPROC glow_glGetPixelMapusv = glow_lazy_glGetPixelMapusv;
static void glow_lazy_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glow_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4iv")));
  if (glow_glProgramUniform4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4iv\n");
#endif
  }
  glow_glProgramUniform4iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4IVPROC glow_glProgramUniform4iv = glow_lazy_glProgramUniform4iv;
static void glow_lazy_glPopDebugGroup() {
  glow_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)((ptrdiff_t)(glow_get_proc("glPopDebugGroup")));
  if (glow_glPopDebugGroup == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopDebugGroup\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopDebugGroup\n");
#endif
  }
  glow_glPopDebugGroup();
}
PFNGLPOPDEBUGGROUPPROC glow_glPopDebugGroup = glow_lazy_glPopDebugGroup;
static void glow_lazy_glLogicOp(GLenum opcode) {
  glow_glLogicOp = (PFNGLLOGICOPPROC)((ptrdiff_t)(glow_get_proc("glLogicOp")));
  if (glow_glLogicOp == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLogicOp\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLogicOp\n");
#endif
  }
  glow_glLogicOp(opcode);
}
PFNGLLOGICOPPROC glow_glLogicOp = glow_lazy_glLogicOp;
static void glow_lazy_glWindowPos2d(GLdouble x, GLdouble y) {
  glow_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2d")));
  if (glow_glWindowPos2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2d\n");
#endif
  }
  glow_glWindowPos2d(x, y);
}
PFNGLWINDOWPOS2DPROC glow_glWindowPos2d = glow_lazy_glWindowPos2d;
static void * glow_lazy_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  glow_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)((ptrdiff_t)(glow_get_proc("glMapBufferRange")));
  if (glow_glMapBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapBufferRange\n");
#endif
  }
  return glow_glMapBufferRange(target, offset, length, access);
}
PFNGLMAPBUFFERRANGEPROC glow_glMapBufferRange = glow_lazy_glMapBufferRange;
static void glow_lazy_glFogCoordf(GLfloat coord) {
  glow_glFogCoordf = (PFNGLFOGCOORDFPROC)((ptrdiff_t)(glow_get_proc("glFogCoordf")));
  if (glow_glFogCoordf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordf\n");
#endif
  }
  glow_glFogCoordf(coord);
}
PFNGLFOGCOORDFPROC glow_glFogCoordf = glow_lazy_glFogCoordf;
static void glow_lazy_glNormal3dv(const GLdouble *v) {
  glow_glNormal3dv = (PFNGLNORMAL3DVPROC)((ptrdiff_t)(glow_get_proc("glNormal3dv")));
  if (glow_glNormal3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3dv\n");
#endif
  }
  glow_glNormal3dv(v);
}
PFNGLNORMAL3DVPROC glow_glNormal3dv = glow_lazy_glNormal3dv;
static void glow_lazy_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
  glow_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)((ptrdiff_t)(glow_get_proc("glGetShaderPrecisionFormat")));
  if (glow_glGetShaderPrecisionFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderPrecisionFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderPrecisionFormat\n");
#endif
  }
  glow_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}
PFNGLGETSHADERPRECISIONFORMATPROC glow_glGetShaderPrecisionFormat = glow_lazy_glGetShaderPrecisionFormat;
static void glow_lazy_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
  glow_glColor4d = (PFNGLCOLOR4DPROC)((ptrdiff_t)(glow_get_proc("glColor4d")));
  if (glow_glColor4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4d\n");
#endif
  }
  glow_glColor4d(red, green, blue, alpha);
}
PFNGLCOLOR4DPROC glow_glColor4d = glow_lazy_glColor4d;
static void glow_lazy_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix2fv")));
  if (glow_glProgramUniformMatrix2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2fv\n");
#endif
  }
  glow_glProgramUniformMatrix2fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glow_glProgramUniformMatrix2fv = glow_lazy_glProgramUniformMatrix2fv;
static void glow_lazy_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  glow_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)((ptrdiff_t)(glow_get_proc("glTexStorage3D")));
  if (glow_glTexStorage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage3D\n");
#endif
  }
  glow_glTexStorage3D(target, levels, internalformat, width, height, depth);
}
PFNGLTEXSTORAGE3DPROC glow_glTexStorage3D = glow_lazy_glTexStorage3D;
static void glow_lazy_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {
  glow_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)((ptrdiff_t)(glow_get_proc("glClearBufferiv")));
  if (glow_glClearBufferiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferiv\n");
#endif
  }
  glow_glClearBufferiv(buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERIVPROC glow_glClearBufferiv = glow_lazy_glClearBufferiv;
static void glow_lazy_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
  glow_glRectf = (PFNGLRECTFPROC)((ptrdiff_t)(glow_get_proc("glRectf")));
  if (glow_glRectf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectf\n");
#endif
  }
  glow_glRectf(x1, y1, x2, y2);
}
PFNGLRECTFPROC glow_glRectf = glow_lazy_glRectf;
static void glow_lazy_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  glow_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)((ptrdiff_t)(glow_get_proc("glGetTransformFeedbackVarying")));
  if (glow_glGetTransformFeedbackVarying == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTransformFeedbackVarying\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTransformFeedbackVarying\n");
#endif
  }
  glow_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glow_glGetTransformFeedbackVarying = glow_lazy_glGetTransformFeedbackVarying;
static void glow_lazy_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {
  glow_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP3uiv")));
  if (glow_glMultiTexCoordP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP3uiv\n");
#endif
  }
  glow_glMultiTexCoordP3uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP3UIVPROC glow_glMultiTexCoordP3uiv = glow_lazy_glMultiTexCoordP3uiv;
static void glow_lazy_glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {
  glow_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)((ptrdiff_t)(glow_get_proc("glGetDoublei_v")));
  if (glow_glGetDoublei_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetDoublei_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetDoublei_v\n");
#endif
  }
  glow_glGetDoublei_v(target, index, data);
}
PFNGLGETDOUBLEI_VPROC glow_glGetDoublei_v = glow_lazy_glGetDoublei_v;
static void glow_lazy_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  glow_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glTexParameterfv")));
  if (glow_glTexParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterfv\n");
#endif
  }
  glow_glTexParameterfv(target, pname, params);
}
PFNGLTEXPARAMETERFVPROC glow_glTexParameterfv = glow_lazy_glTexParameterfv;
static void glow_lazy_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix2fv")));
  if (glow_glUniformMatrix2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2fv\n");
#endif
  }
  glow_glUniformMatrix2fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2FVPROC glow_glUniformMatrix2fv = glow_lazy_glUniformMatrix2fv;
static GLint glow_lazy_glGetFragDataLocation(GLuint program, const GLchar *name) {
  glow_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)((ptrdiff_t)(glow_get_proc("glGetFragDataLocation")));
  if (glow_glGetFragDataLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFragDataLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFragDataLocation\n");
#endif
  }
  return glow_glGetFragDataLocation(program, name);
}
PFNGLGETFRAGDATALOCATIONPROC glow_glGetFragDataLocation = glow_lazy_glGetFragDataLocation;
static void glow_lazy_glVertexP2uiv(GLenum type, const GLuint *value) {
  glow_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexP2uiv")));
  if (glow_glVertexP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP2uiv\n");
#endif
  }
  glow_glVertexP2uiv(type, value);
}
PFNGLVERTEXP2UIVPROC glow_glVertexP2uiv = glow_lazy_glVertexP2uiv;
static void glow_lazy_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glow_glUniform4d = (PFNGLUNIFORM4DPROC)((ptrdiff_t)(glow_get_proc("glUniform4d")));
  if (glow_glUniform4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4d\n");
#endif
  }
  glow_glUniform4d(location, x, y, z, w);
}
PFNGLUNIFORM4DPROC glow_glUniform4d = glow_lazy_glUniform4d;
static void glow_lazy_glGetUniformdv(GLuint program, GLint location, GLdouble *params) {
  glow_glGetUniformdv = (PFNGLGETUNIFORMDVPROC)((ptrdiff_t)(glow_get_proc("glGetUniformdv")));
  if (glow_glGetUniformdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformdv\n");
#endif
  }
  glow_glGetUniformdv(program, location, params);
}
PFNGLGETUNIFORMDVPROC glow_glGetUniformdv = glow_lazy_glGetUniformdv;
static void glow_lazy_glIndexs(GLshort c) {
  glow_glIndexs = (PFNGLINDEXSPROC)((ptrdiff_t)(glow_get_proc("glIndexs")));
  if (glow_glIndexs == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexs\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexs\n");
#endif
  }
  glow_glIndexs(c);
}
PFNGLINDEXSPROC glow_glIndexs = glow_lazy_glIndexs;
static void glow_lazy_glPushMatrix() {
  glow_glPushMatrix = (PFNGLPUSHMATRIXPROC)((ptrdiff_t)(glow_get_proc("glPushMatrix")));
  if (glow_glPushMatrix == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushMatrix\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushMatrix\n");
#endif
  }
  glow_glPushMatrix();
}
PFNGLPUSHMATRIXPROC glow_glPushMatrix = glow_lazy_glPushMatrix;
static void glow_lazy_glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
  glow_glUniform4fv = (PFNGLUNIFORM4FVPROC)((ptrdiff_t)(glow_get_proc("glUniform4fv")));
  if (glow_glUniform4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4fv\n");
#endif
  }
  glow_glUniform4fv(location, count, value);
}
PFNGLUNIFORM4FVPROC glow_glUniform4fv = glow_lazy_glUniform4fv;
static void glow_lazy_glTexCoordP3uiv(GLenum type, const GLuint *coords) {
  glow_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP3uiv")));
  if (glow_glTexCoordP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP3uiv\n");
#endif
  }
  glow_glTexCoordP3uiv(type, coords);
}
PFNGLTEXCOORDP3UIVPROC glow_glTexCoordP3uiv = glow_lazy_glTexCoordP3uiv;
static void glow_lazy_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  glow_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2iv")));
  if (glow_glProgramUniform2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2iv\n");
#endif
  }
  glow_glProgramUniform2iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2IVPROC glow_glProgramUniform2iv = glow_lazy_glProgramUniform2iv;
static void glow_lazy_glColor4ubv(const GLubyte *v) {
  glow_glColor4ubv = (PFNGLCOLOR4UBVPROC)((ptrdiff_t)(glow_get_proc("glColor4ubv")));
  if (glow_glColor4ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4ubv\n");
#endif
  }
  glow_glColor4ubv(v);
}
PFNGLCOLOR4UBVPROC glow_glColor4ubv = glow_lazy_glColor4ubv;
static void glow_lazy_glMultiTexCoord4fv(GLenum target, const GLfloat *v) {
  glow_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4fv")));
  if (glow_glMultiTexCoord4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4fv\n");
#endif
  }
  glow_glMultiTexCoord4fv(target, v);
}
PFNGLMULTITEXCOORD4FVPROC glow_glMultiTexCoord4fv = glow_lazy_glMultiTexCoord4fv;
static void glow_lazy_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
  glow_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)((ptrdiff_t)(glow_get_proc("glGetShaderSource")));
  if (glow_glGetShaderSource == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderSource\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderSource\n");
#endif
  }
  glow_glGetShaderSource(shader, bufSize, length, source);
}
PFNGLGETSHADERSOURCEPROC glow_glGetShaderSource = glow_lazy_glGetShaderSource;
static void glow_lazy_glVertexAttribI2iv(GLuint index, const GLint *v) {
  glow_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI2iv")));
  if (glow_glVertexAttribI2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2iv\n");
#endif
  }
  glow_glVertexAttribI2iv(index, v);
}
PFNGLVERTEXATTRIBI2IVPROC glow_glVertexAttribI2iv = glow_lazy_glVertexAttribI2iv;
static void glow_lazy_glVertexAttribI4ubv(GLuint index, const GLubyte *v) {
  glow_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4ubv")));
  if (glow_glVertexAttribI4ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4ubv\n");
#endif
  }
  glow_glVertexAttribI4ubv(index, v);
}
PFNGLVERTEXATTRIBI4UBVPROC glow_glVertexAttribI4ubv = glow_lazy_glVertexAttribI4ubv;
static void glow_lazy_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  glow_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2f")));
  if (glow_glProgramUniform2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2f\n");
#endif
  }
  glow_glProgramUniform2f(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2FPROC glow_glProgramUniform2f = glow_lazy_glProgramUniform2f;
static void glow_lazy_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
  glow_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)((ptrdiff_t)(glow_get_proc("glPushDebugGroup")));
  if (glow_glPushDebugGroup == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushDebugGroup\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushDebugGroup\n");
#endif
  }
  glow_glPushDebugGroup(source, id, length, message);
}
PFNGLPUSHDEBUGGROUPPROC glow_glPushDebugGroup = glow_lazy_glPushDebugGroup;
static void glow_lazy_glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
  glow_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glTexParameteriv")));
  if (glow_glTexParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameteriv\n");
#endif
  }
  glow_glTexParameteriv(target, pname, params);
}
PFNGLTEXPARAMETERIVPROC glow_glTexParameteriv = glow_lazy_glTexParameteriv;
static void glow_lazy_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  glow_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)((ptrdiff_t)(glow_get_proc("glDrawArraysInstanced")));
  if (glow_glDrawArraysInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArraysInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArraysInstanced\n");
#endif
  }
  glow_glDrawArraysInstanced(mode, first, count, instancecount);
}
PFNGLDRAWARRAYSINSTANCEDPROC glow_glDrawArraysInstanced = glow_lazy_glDrawArraysInstanced;
static void glow_lazy_glClearDepthf(GLfloat d) {
  glow_glClearDepthf = (PFNGLCLEARDEPTHFPROC)((ptrdiff_t)(glow_get_proc("glClearDepthf")));
  if (glow_glClearDepthf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearDepthf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearDepthf\n");
#endif
  }
  glow_glClearDepthf(d);
}
PFNGLCLEARDEPTHFPROC glow_glClearDepthf = glow_lazy_glClearDepthf;
static void glow_lazy_glGenProgramPipelines(GLsizei n, GLuint *pipelines) {
  glow_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)((ptrdiff_t)(glow_get_proc("glGenProgramPipelines")));
  if (glow_glGenProgramPipelines == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenProgramPipelines\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenProgramPipelines\n");
#endif
  }
  glow_glGenProgramPipelines(n, pipelines);
}
PFNGLGENPROGRAMPIPELINESPROC glow_glGenProgramPipelines = glow_lazy_glGenProgramPipelines;
static void glow_lazy_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
  glow_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)((ptrdiff_t)(glow_get_proc("glInvalidateFramebuffer")));
  if (glow_glInvalidateFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateFramebuffer\n");
#endif
  }
  glow_glInvalidateFramebuffer(target, numAttachments, attachments);
}
PFNGLINVALIDATEFRAMEBUFFERPROC glow_glInvalidateFramebuffer = glow_lazy_glInvalidateFramebuffer;
static void glow_lazy_glMultiTexCoord4sv(GLenum target, const GLshort *v) {
  glow_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4sv")));
  if (glow_glMultiTexCoord4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4sv\n");
#endif
  }
  glow_glMultiTexCoord4sv(target, v);
}
PFNGLMULTITEXCOORD4SVPROC glow_glMultiTexCoord4sv = glow_lazy_glMultiTexCoord4sv;
static void glow_lazy_glGetPixelMapuiv(GLenum map, GLuint *values) {
  glow_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)((ptrdiff_t)(glow_get_proc("glGetPixelMapuiv")));
  if (glow_glGetPixelMapuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPixelMapuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPixelMapuiv\n");
#endif
  }
  glow_glGetPixelMapuiv(map, values);
}
PFNGLGETPIXELMAPUIVPROC glow_glGetPixelMapuiv = glow_lazy_glGetPixelMapuiv;
static void glow_lazy_glColor3sv(const GLshort *v) {
  glow_glColor3sv = (PFNGLCOLOR3SVPROC)((ptrdiff_t)(glow_get_proc("glColor3sv")));
  if (glow_glColor3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3sv\n");
#endif
  }
  glow_glColor3sv(v);
}
PFNGLCOLOR3SVPROC glow_glColor3sv = glow_lazy_glColor3sv;
static void glow_lazy_glEvalPoint1(GLint i) {
  glow_glEvalPoint1 = (PFNGLEVALPOINT1PROC)((ptrdiff_t)(glow_get_proc("glEvalPoint1")));
  if (glow_glEvalPoint1 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalPoint1\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalPoint1\n");
#endif
  }
  glow_glEvalPoint1(i);
}
PFNGLEVALPOINT1PROC glow_glEvalPoint1 = glow_lazy_glEvalPoint1;
static void glow_lazy_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
  glow_glTranslated = (PFNGLTRANSLATEDPROC)((ptrdiff_t)(glow_get_proc("glTranslated")));
  if (glow_glTranslated == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTranslated\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTranslated\n");
#endif
  }
  glow_glTranslated(x, y, z);
}
PFNGLTRANSLATEDPROC glow_glTranslated = glow_lazy_glTranslated;
static void glow_lazy_glVertexAttribI2i(GLuint index, GLint x, GLint y) {
  glow_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI2i")));
  if (glow_glVertexAttribI2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2i\n");
#endif
  }
  glow_glVertexAttribI2i(index, x, y);
}
PFNGLVERTEXATTRIBI2IPROC glow_glVertexAttribI2i = glow_lazy_glVertexAttribI2i;
static void glow_lazy_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {
  glow_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)((ptrdiff_t)(glow_get_proc("glGetTexParameterIuiv")));
  if (glow_glGetTexParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameterIuiv\n");
#endif
  }
  glow_glGetTexParameterIuiv(target, pname, params);
}
PFNGLGETTEXPARAMETERIUIVPROC glow_glGetTexParameterIuiv = glow_lazy_glGetTexParameterIuiv;
static void glow_lazy_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
  glow_glColor4us = (PFNGLCOLOR4USPROC)((ptrdiff_t)(glow_get_proc("glColor4us")));
  if (glow_glColor4us == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4us\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4us\n");
#endif
  }
  glow_glColor4us(red, green, blue, alpha);
}
PFNGLCOLOR4USPROC glow_glColor4us = glow_lazy_glColor4us;
static void glow_lazy_glVertexAttribI4bv(GLuint index, const GLbyte *v) {
  glow_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4bv")));
  if (glow_glVertexAttribI4bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4bv\n");
#endif
  }
  glow_glVertexAttribI4bv(index, v);
}
PFNGLVERTEXATTRIBI4BVPROC glow_glVertexAttribI4bv = glow_lazy_glVertexAttribI4bv;
static void glow_lazy_glReleaseShaderCompiler() {
  glow_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)((ptrdiff_t)(glow_get_proc("glReleaseShaderCompiler")));
  if (glow_glReleaseShaderCompiler == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glReleaseShaderCompiler\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glReleaseShaderCompiler\n");
#endif
  }
  glow_glReleaseShaderCompiler();
}
PFNGLRELEASESHADERCOMPILERPROC glow_glReleaseShaderCompiler = glow_lazy_glReleaseShaderCompiler;
static void glow_lazy_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
  glow_glTexImage1D = (PFNGLTEXIMAGE1DPROC)((ptrdiff_t)(glow_get_proc("glTexImage1D")));
  if (glow_glTexImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage1D\n");
#endif
  }
  glow_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}
PFNGLTEXIMAGE1DPROC glow_glTexImage1D = glow_lazy_glTexImage1D;
static void glow_lazy_glColor3ui(GLuint red, GLuint green, GLuint blue) {
  glow_glColor3ui = (PFNGLCOLOR3UIPROC)((ptrdiff_t)(glow_get_proc("glColor3ui")));
  if (glow_glColor3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3ui\n");
#endif
  }
  glow_glColor3ui(red, green, blue);
}
PFNGLCOLOR3UIPROC glow_glColor3ui = glow_lazy_glColor3ui;
static void glow_lazy_glTexCoord1i(GLint s) {
  glow_glTexCoord1i = (PFNGLTEXCOORD1IPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1i")));
  if (glow_glTexCoord1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1i\n");
#endif
  }
  glow_glTexCoord1i(s);
}
PFNGLTEXCOORD1IPROC glow_glTexCoord1i = glow_lazy_glTexCoord1i;
static void glow_lazy_glVertexAttrib4fv(GLuint index, const GLfloat *v) {
  glow_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4fv")));
  if (glow_glVertexAttrib4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4fv\n");
#endif
  }
  glow_glVertexAttrib4fv(index, v);
}
PFNGLVERTEXATTRIB4FVPROC glow_glVertexAttrib4fv = glow_lazy_glVertexAttrib4fv;
static void glow_lazy_glBeginTransformFeedback(GLenum primitiveMode) {
  glow_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glBeginTransformFeedback")));
  if (glow_glBeginTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginTransformFeedback\n");
#endif
  }
  glow_glBeginTransformFeedback(primitiveMode);
}
PFNGLBEGINTRANSFORMFEEDBACKPROC glow_glBeginTransformFeedback = glow_lazy_glBeginTransformFeedback;
static GLenum glow_lazy_glGetError() {
  glow_glGetError = (PFNGLGETERRORPROC)((ptrdiff_t)(glow_get_proc("glGetError")));
  if (glow_glGetError == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetError\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetError\n");
#endif
  }
  return glow_glGetError();
}
PFNGLGETERRORPROC glow_glGetError = glow_lazy_glGetError;
static void glow_lazy_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix4dv")));
  if (glow_glProgramUniformMatrix4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4dv\n");
#endif
  }
  glow_glProgramUniformMatrix4dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glow_glProgramUniformMatrix4dv = glow_lazy_glProgramUniformMatrix4dv;
static void glow_lazy_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
  glow_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)((ptrdiff_t)(glow_get_proc("glGetProgramBinary")));
  if (glow_glGetProgramBinary == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramBinary\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramBinary\n");
#endif
  }
  glow_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}
PFNGLGETPROGRAMBINARYPROC glow_glGetProgramBinary = glow_lazy_glGetProgramBinary;
static void glow_lazy_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glow_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2dv")));
  if (glow_glProgramUniform2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2dv\n");
#endif
  }
  glow_glProgramUniform2dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2DVPROC glow_glProgramUniform2dv = glow_lazy_glProgramUniform2dv;
static void glow_lazy_glDrawBuffer(GLenum buf) {
  glow_glDrawBuffer = (PFNGLDRAWBUFFERPROC)((ptrdiff_t)(glow_get_proc("glDrawBuffer")));
  if (glow_glDrawBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawBuffer\n");
#endif
  }
  glow_glDrawBuffer(buf);
}
PFNGLDRAWBUFFERPROC glow_glDrawBuffer = glow_lazy_glDrawBuffer;
static void glow_lazy_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
  glow_glPixelZoom = (PFNGLPIXELZOOMPROC)((ptrdiff_t)(glow_get_proc("glPixelZoom")));
  if (glow_glPixelZoom == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelZoom\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelZoom\n");
#endif
  }
  glow_glPixelZoom(xfactor, yfactor);
}
PFNGLPIXELZOOMPROC glow_glPixelZoom = glow_lazy_glPixelZoom;
static void glow_lazy_glMultiTexCoord1i(GLenum target, GLint s) {
  glow_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1i")));
  if (glow_glMultiTexCoord1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1i\n");
#endif
  }
  glow_glMultiTexCoord1i(target, s);
}
PFNGLMULTITEXCOORD1IPROC glow_glMultiTexCoord1i = glow_lazy_glMultiTexCoord1i;
static void glow_lazy_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  glow_glUniform3i = (PFNGLUNIFORM3IPROC)((ptrdiff_t)(glow_get_proc("glUniform3i")));
  if (glow_glUniform3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3i\n");
#endif
  }
  glow_glUniform3i(location, v0, v1, v2);
}
PFNGLUNIFORM3IPROC glow_glUniform3i = glow_lazy_glUniform3i;
static void glow_lazy_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
  glow_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)((ptrdiff_t)(glow_get_proc("glGetObjectLabel")));
  if (glow_glGetObjectLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetObjectLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetObjectLabel\n");
#endif
  }
  glow_glGetObjectLabel(identifier, name, bufSize, length, label);
}
PFNGLGETOBJECTLABELPROC glow_glGetObjectLabel = glow_lazy_glGetObjectLabel;
static void glow_lazy_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
  glow_glRasterPos4i = (PFNGLRASTERPOS4IPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4i")));
  if (glow_glRasterPos4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4i\n");
#endif
  }
  glow_glRasterPos4i(x, y, z, w);
}
PFNGLRASTERPOS4IPROC glow_glRasterPos4i = glow_lazy_glRasterPos4i;
static void glow_lazy_glPointParameterf(GLenum pname, GLfloat param) {
  glow_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)((ptrdiff_t)(glow_get_proc("glPointParameterf")));
  if (glow_glPointParameterf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameterf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameterf\n");
#endif
  }
  glow_glPointParameterf(pname, param);
}
PFNGLPOINTPARAMETERFPROC glow_glPointParameterf = glow_lazy_glPointParameterf;
static void glow_lazy_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {
  glow_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glSamplerParameterfv")));
  if (glow_glSamplerParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterfv\n");
#endif
  }
  glow_glSamplerParameterfv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERFVPROC glow_glSamplerParameterfv = glow_lazy_glSamplerParameterfv;
static void glow_lazy_glIndexiv(const GLint *c) {
  glow_glIndexiv = (PFNGLINDEXIVPROC)((ptrdiff_t)(glow_get_proc("glIndexiv")));
  if (glow_glIndexiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexiv\n");
#endif
  }
  glow_glIndexiv(c);
}
PFNGLINDEXIVPROC glow_glIndexiv = glow_lazy_glIndexiv;
static void glow_lazy_glWindowPos3s(GLshort x, GLshort y, GLshort z) {
  glow_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3s")));
  if (glow_glWindowPos3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3s\n");
#endif
  }
  glow_glWindowPos3s(x, y, z);
}
PFNGLWINDOWPOS3SPROC glow_glWindowPos3s = glow_lazy_glWindowPos3s;
static void glow_lazy_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetBufferParameteriv")));
  if (glow_glGetBufferParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferParameteriv\n");
#endif
  }
  glow_glGetBufferParameteriv(target, pname, params);
}
PFNGLGETBUFFERPARAMETERIVPROC glow_glGetBufferParameteriv = glow_lazy_glGetBufferParameteriv;
static void glow_lazy_glVertexAttribL2dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL2dv")));
  if (glow_glVertexAttribL2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL2dv\n");
#endif
  }
  glow_glVertexAttribL2dv(index, v);
}
PFNGLVERTEXATTRIBL2DVPROC glow_glVertexAttribL2dv = glow_lazy_glVertexAttribL2dv;
static void glow_lazy_glLineWidth(GLfloat width) {
  glow_glLineWidth = (PFNGLLINEWIDTHPROC)((ptrdiff_t)(glow_get_proc("glLineWidth")));
  if (glow_glLineWidth == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLineWidth\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLineWidth\n");
#endif
  }
  glow_glLineWidth(width);
}
PFNGLLINEWIDTHPROC glow_glLineWidth = glow_lazy_glLineWidth;
static void glow_lazy_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  glow_glUniform4i = (PFNGLUNIFORM4IPROC)((ptrdiff_t)(glow_get_proc("glUniform4i")));
  if (glow_glUniform4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4i\n");
#endif
  }
  glow_glUniform4i(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4IPROC glow_glUniform4i = glow_lazy_glUniform4i;
static void glow_lazy_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  glow_glRasterPos4f = (PFNGLRASTERPOS4FPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4f")));
  if (glow_glRasterPos4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4f\n");
#endif
  }
  glow_glRasterPos4f(x, y, z, w);
}
PFNGLRASTERPOS4FPROC glow_glRasterPos4f = glow_lazy_glRasterPos4f;
static void glow_lazy_glTexCoord3iv(const GLint *v) {
  glow_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3iv")));
  if (glow_glTexCoord3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3iv\n");
#endif
  }
  glow_glTexCoord3iv(v);
}
PFNGLTEXCOORD3IVPROC glow_glTexCoord3iv = glow_lazy_glTexCoord3iv;
static void glow_lazy_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {
  glow_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribIiv")));
  if (glow_glGetVertexAttribIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribIiv\n");
#endif
  }
  glow_glGetVertexAttribIiv(index, pname, params);
}
PFNGLGETVERTEXATTRIBIIVPROC glow_glGetVertexAttribIiv = glow_lazy_glGetVertexAttribIiv;
static void glow_lazy_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  glow_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)((ptrdiff_t)(glow_get_proc("glFramebufferRenderbuffer")));
  if (glow_glFramebufferRenderbuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferRenderbuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferRenderbuffer\n");
#endif
  }
  glow_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}
PFNGLFRAMEBUFFERRENDERBUFFERPROC glow_glFramebufferRenderbuffer = glow_lazy_glFramebufferRenderbuffer;
static void glow_lazy_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  glow_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetFramebufferAttachmentParameteriv")));
  if (glow_glGetFramebufferAttachmentParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFramebufferAttachmentParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFramebufferAttachmentParameteriv\n");
#endif
  }
  glow_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glow_glGetFramebufferAttachmentParameteriv = glow_lazy_glGetFramebufferAttachmentParameteriv;
static void glow_lazy_glEnd() {
  glow_glEnd = (PFNGLENDPROC)((ptrdiff_t)(glow_get_proc("glEnd")));
  if (glow_glEnd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnd\n");
#endif
  }
  glow_glEnd();
}
PFNGLENDPROC glow_glEnd = glow_lazy_glEnd;
static void glow_lazy_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix3x4fv")));
  if (glow_glProgramUniformMatrix3x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x4fv\n");
#endif
  }
  glow_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glow_glProgramUniformMatrix3x4fv = glow_lazy_glProgramUniformMatrix3x4fv;
static void glow_lazy_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  glow_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)((ptrdiff_t)(glow_get_proc("glBlendFuncSeparatei")));
  if (glow_glBlendFuncSeparatei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFuncSeparatei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFuncSeparatei\n");
#endif
  }
  glow_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
PFNGLBLENDFUNCSEPARATEIPROC glow_glBlendFuncSeparatei = glow_lazy_glBlendFuncSeparatei;
static void glow_lazy_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  glow_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)((ptrdiff_t)(glow_get_proc("glStencilOpSeparate")));
  if (glow_glStencilOpSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilOpSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilOpSeparate\n");
#endif
  }
  glow_glStencilOpSeparate(face, sfail, dpfail, dppass);
}
PFNGLSTENCILOPSEPARATEPROC glow_glStencilOpSeparate = glow_lazy_glStencilOpSeparate;
static void glow_lazy_glBeginQuery(GLenum target, GLuint id) {
  glow_glBeginQuery = (PFNGLBEGINQUERYPROC)((ptrdiff_t)(glow_get_proc("glBeginQuery")));
  if (glow_glBeginQuery == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginQuery\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginQuery\n");
#endif
  }
  glow_glBeginQuery(target, id);
}
PFNGLBEGINQUERYPROC glow_glBeginQuery = glow_lazy_glBeginQuery;
static void glow_lazy_glVertexAttrib1d(GLuint index, GLdouble x) {
  glow_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib1d")));
  if (glow_glVertexAttrib1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1d\n");
#endif
  }
  glow_glVertexAttrib1d(index, x);
}
PFNGLVERTEXATTRIB1DPROC glow_glVertexAttrib1d = glow_lazy_glVertexAttrib1d;
static void glow_lazy_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
  glow_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3d")));
  if (glow_glProgramUniform3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3d\n");
#endif
  }
  glow_glProgramUniform3d(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3DPROC glow_glProgramUniform3d = glow_lazy_glProgramUniform3d;
static void glow_lazy_glVertexAttrib4dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4dv")));
  if (glow_glVertexAttrib4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4dv\n");
#endif
  }
  glow_glVertexAttrib4dv(index, v);
}
PFNGLVERTEXATTRIB4DVPROC glow_glVertexAttrib4dv = glow_lazy_glVertexAttrib4dv;
static void glow_lazy_glScaled(GLdouble x, GLdouble y, GLdouble z) {
  glow_glScaled = (PFNGLSCALEDPROC)((ptrdiff_t)(glow_get_proc("glScaled")));
  if (glow_glScaled == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScaled\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScaled\n");
#endif
  }
  glow_glScaled(x, y, z);
}
PFNGLSCALEDPROC glow_glScaled = glow_lazy_glScaled;
static void glow_lazy_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  glow_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)((ptrdiff_t)(glow_get_proc("glGetActiveUniform")));
  if (glow_glGetActiveUniform == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniform\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniform\n");
#endif
  }
  glow_glGetActiveUniform(program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEUNIFORMPROC glow_glGetActiveUniform = glow_lazy_glGetActiveUniform;
static void glow_lazy_glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
  glow_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4Nubv")));
  if (glow_glVertexAttrib4Nubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nubv\n");
#endif
  }
  glow_glVertexAttrib4Nubv(index, v);
}
PFNGLVERTEXATTRIB4NUBVPROC glow_glVertexAttrib4Nubv = glow_lazy_glVertexAttrib4Nubv;
static void glow_lazy_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix3x4dv")));
  if (glow_glUniformMatrix3x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x4dv\n");
#endif
  }
  glow_glUniformMatrix3x4dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X4DVPROC glow_glUniformMatrix3x4dv = glow_lazy_glUniformMatrix3x4dv;
static void glow_lazy_glPointParameteriv(GLenum pname, const GLint *params) {
  glow_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glPointParameteriv")));
  if (glow_glPointParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameteriv\n");
#endif
  }
  glow_glPointParameteriv(pname, params);
}
PFNGLPOINTPARAMETERIVPROC glow_glPointParameteriv = glow_lazy_glPointParameteriv;
static void glow_lazy_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix4x2dv")));
  if (glow_glUniformMatrix4x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x2dv\n");
#endif
  }
  glow_glUniformMatrix4x2dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X2DVPROC glow_glUniformMatrix4x2dv = glow_lazy_glUniformMatrix4x2dv;
static void glow_lazy_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  glow_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform2fv")));
  if (glow_glProgramUniform2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2fv\n");
#endif
  }
  glow_glProgramUniform2fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2FVPROC glow_glProgramUniform2fv = glow_lazy_glProgramUniform2fv;
static void glow_lazy_glStencilMask(GLuint mask) {
  glow_glStencilMask = (PFNGLSTENCILMASKPROC)((ptrdiff_t)(glow_get_proc("glStencilMask")));
  if (glow_glStencilMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilMask\n");
#endif
  }
  glow_glStencilMask(mask);
}
PFNGLSTENCILMASKPROC glow_glStencilMask = glow_lazy_glStencilMask;
static void glow_lazy_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {
  glow_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)((ptrdiff_t)(glow_get_proc("glGetProgramStageiv")));
  if (glow_glGetProgramStageiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramStageiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramStageiv\n");
#endif
  }
  glow_glGetProgramStageiv(program, shadertype, pname, values);
}
PFNGLGETPROGRAMSTAGEIVPROC glow_glGetProgramStageiv = glow_lazy_glGetProgramStageiv;
static void glow_lazy_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glow_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3uiv")));
  if (glow_glProgramUniform3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3uiv\n");
#endif
  }
  glow_glProgramUniform3uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3UIVPROC glow_glProgramUniform3uiv = glow_lazy_glProgramUniform3uiv;
static void glow_lazy_glVertexP2ui(GLenum type, GLuint value) {
  glow_glVertexP2ui = (PFNGLVERTEXP2UIPROC)((ptrdiff_t)(glow_get_proc("glVertexP2ui")));
  if (glow_glVertexP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP2ui\n");
#endif
  }
  glow_glVertexP2ui(type, value);
}
PFNGLVERTEXP2UIPROC glow_glVertexP2ui = glow_lazy_glVertexP2ui;
static void glow_lazy_glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
  glow_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1d")));
  if (glow_glProgramUniform1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1d\n");
#endif
  }
  glow_glProgramUniform1d(program, location, v0);
}
PFNGLPROGRAMUNIFORM1DPROC glow_glProgramUniform1d = glow_lazy_glProgramUniform1d;
static void glow_lazy_glVertexAttrib1dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib1dv")));
  if (glow_glVertexAttrib1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1dv\n");
#endif
  }
  glow_glVertexAttrib1dv(index, v);
}
PFNGLVERTEXATTRIB1DVPROC glow_glVertexAttrib1dv = glow_lazy_glVertexAttrib1dv;
static void glow_lazy_glCallList(GLuint list) {
  glow_glCallList = (PFNGLCALLLISTPROC)((ptrdiff_t)(glow_get_proc("glCallList")));
  if (glow_glCallList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCallList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCallList\n");
#endif
  }
  glow_glCallList(list);
}
PFNGLCALLLISTPROC glow_glCallList = glow_lazy_glCallList;
static void glow_lazy_glWindowPos2f(GLfloat x, GLfloat y) {
  glow_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2f")));
  if (glow_glWindowPos2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2f\n");
#endif
  }
  glow_glWindowPos2f(x, y);
}
PFNGLWINDOWPOS2FPROC glow_glWindowPos2f = glow_lazy_glWindowPos2f;
static void glow_lazy_glGenBuffers(GLsizei n, GLuint *buffers) {
  glow_glGenBuffers = (PFNGLGENBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glGenBuffers")));
  if (glow_glGenBuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenBuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenBuffers\n");
#endif
  }
  glow_glGenBuffers(n, buffers);
}
PFNGLGENBUFFERSPROC glow_glGenBuffers = glow_lazy_glGenBuffers;
static void glow_lazy_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
  glow_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)((ptrdiff_t)(glow_get_proc("glBufferSubData")));
  if (glow_glBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBufferSubData\n");
#endif
  }
  glow_glBufferSubData(target, offset, size, data);
}
PFNGLBUFFERSUBDATAPROC glow_glBufferSubData = glow_lazy_glBufferSubData;
static void glow_lazy_glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
  glow_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4ubv")));
  if (glow_glVertexAttrib4ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4ubv\n");
#endif
  }
  glow_glVertexAttrib4ubv(index, v);
}
PFNGLVERTEXATTRIB4UBVPROC glow_glVertexAttrib4ubv = glow_lazy_glVertexAttrib4ubv;
static void glow_lazy_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
  glow_glRecti = (PFNGLRECTIPROC)((ptrdiff_t)(glow_get_proc("glRecti")));
  if (glow_glRecti == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRecti\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRecti\n");
#endif
  }
  glow_glRecti(x1, y1, x2, y2);
}
PFNGLRECTIPROC glow_glRecti = glow_lazy_glRecti;
static void glow_lazy_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glow_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)((ptrdiff_t)(glow_get_proc("glTexCoordPointer")));
  if (glow_glTexCoordPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordPointer\n");
#endif
  }
  glow_glTexCoordPointer(size, type, stride, pointer);
}
PFNGLTEXCOORDPOINTERPROC glow_glTexCoordPointer = glow_lazy_glTexCoordPointer;
static void glow_lazy_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
  glow_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2s")));
  if (glow_glMultiTexCoord2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2s\n");
#endif
  }
  glow_glMultiTexCoord2s(target, s, t);
}
PFNGLMULTITEXCOORD2SPROC glow_glMultiTexCoord2s = glow_lazy_glMultiTexCoord2s;
static void glow_lazy_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
  glow_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI3i")));
  if (glow_glVertexAttribI3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3i\n");
#endif
  }
  glow_glVertexAttribI3i(index, x, y, z);
}
PFNGLVERTEXATTRIBI3IPROC glow_glVertexAttribI3i = glow_lazy_glVertexAttribI3i;
static void glow_lazy_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {
  glow_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)((ptrdiff_t)(glow_get_proc("glViewportArrayv")));
  if (glow_glViewportArrayv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewportArrayv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewportArrayv\n");
#endif
  }
  glow_glViewportArrayv(first, count, v);
}
PFNGLVIEWPORTARRAYVPROC glow_glViewportArrayv = glow_lazy_glViewportArrayv;
static void glow_lazy_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
  glow_glRectd = (PFNGLRECTDPROC)((ptrdiff_t)(glow_get_proc("glRectd")));
  if (glow_glRectd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectd\n");
#endif
  }
  glow_glRectd(x1, y1, x2, y2);
}
PFNGLRECTDPROC glow_glRectd = glow_lazy_glRectd;
static void glow_lazy_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  glow_glDrawArrays = (PFNGLDRAWARRAYSPROC)((ptrdiff_t)(glow_get_proc("glDrawArrays")));
  if (glow_glDrawArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArrays\n");
#endif
  }
  glow_glDrawArrays(mode, first, count);
}
PFNGLDRAWARRAYSPROC glow_glDrawArrays = glow_lazy_glDrawArrays;
static GLuint glow_lazy_glCreateShader(GLenum type) {
  glow_glCreateShader = (PFNGLCREATESHADERPROC)((ptrdiff_t)(glow_get_proc("glCreateShader")));
  if (glow_glCreateShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCreateShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCreateShader\n");
#endif
  }
  return glow_glCreateShader(type);
}
PFNGLCREATESHADERPROC glow_glCreateShader = glow_lazy_glCreateShader;
static void glow_lazy_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  glow_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3i")));
  if (glow_glProgramUniform3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3i\n");
#endif
  }
  glow_glProgramUniform3i(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3IPROC glow_glProgramUniform3i = glow_lazy_glProgramUniform3i;
static void glow_lazy_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  glow_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribBinding")));
  if (glow_glVertexAttribBinding == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribBinding\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribBinding\n");
#endif
  }
  glow_glVertexAttribBinding(attribindex, bindingindex);
}
PFNGLVERTEXATTRIBBINDINGPROC glow_glVertexAttribBinding = glow_lazy_glVertexAttribBinding;
static void glow_lazy_glTexCoord2dv(const GLdouble *v) {
  glow_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2dv")));
  if (glow_glTexCoord2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2dv\n");
#endif
  }
  glow_glTexCoord2dv(v);
}
PFNGLTEXCOORD2DVPROC glow_glTexCoord2dv = glow_lazy_glTexCoord2dv;
static GLuint glow_lazy_glCreateProgram() {
  glow_glCreateProgram = (PFNGLCREATEPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glCreateProgram")));
  if (glow_glCreateProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCreateProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCreateProgram\n");
#endif
  }
  return glow_glCreateProgram();
}
PFNGLCREATEPROGRAMPROC glow_glCreateProgram = glow_lazy_glCreateProgram;
static void glow_lazy_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  glow_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)((ptrdiff_t)(glow_get_proc("glTexStorage2D")));
  if (glow_glTexStorage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage2D\n");
#endif
  }
  glow_glTexStorage2D(target, levels, internalformat, width, height);
}
PFNGLTEXSTORAGE2DPROC glow_glTexStorage2D = glow_lazy_glTexStorage2D;
static void glow_lazy_glTexCoord2f(GLfloat s, GLfloat t) {
  glow_glTexCoord2f = (PFNGLTEXCOORD2FPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2f")));
  if (glow_glTexCoord2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2f\n");
#endif
  }
  glow_glTexCoord2f(s, t);
}
PFNGLTEXCOORD2FPROC glow_glTexCoord2f = glow_lazy_glTexCoord2f;
static void glow_lazy_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
  glow_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3s")));
  if (glow_glMultiTexCoord3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3s\n");
#endif
  }
  glow_glMultiTexCoord3s(target, s, t, r);
}
PFNGLMULTITEXCOORD3SPROC glow_glMultiTexCoord3s = glow_lazy_glMultiTexCoord3s;
static void glow_lazy_glVertexAttrib4bv(GLuint index, const GLbyte *v) {
  glow_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4bv")));
  if (glow_glVertexAttrib4bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4bv\n");
#endif
  }
  glow_glVertexAttrib4bv(index, v);
}
PFNGLVERTEXATTRIB4BVPROC glow_glVertexAttrib4bv = glow_lazy_glVertexAttrib4bv;
static void glow_lazy_glColor3fv(const GLfloat *v) {
  glow_glColor3fv = (PFNGLCOLOR3FVPROC)((ptrdiff_t)(glow_get_proc("glColor3fv")));
  if (glow_glColor3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3fv\n");
#endif
  }
  glow_glColor3fv(v);
}
PFNGLCOLOR3FVPROC glow_glColor3fv = glow_lazy_glColor3fv;
static void glow_lazy_glFogiv(GLenum pname, const GLint *params) {
  glow_glFogiv = (PFNGLFOGIVPROC)((ptrdiff_t)(glow_get_proc("glFogiv")));
  if (glow_glFogiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogiv\n");
#endif
  }
  glow_glFogiv(pname, params);
}
PFNGLFOGIVPROC glow_glFogiv = glow_lazy_glFogiv;
static void glow_lazy_glTexEnviv(GLenum target, GLenum pname, const GLint *params) {
  glow_glTexEnviv = (PFNGLTEXENVIVPROC)((ptrdiff_t)(glow_get_proc("glTexEnviv")));
  if (glow_glTexEnviv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnviv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnviv\n");
#endif
  }
  glow_glTexEnviv(target, pname, params);
}
PFNGLTEXENVIVPROC glow_glTexEnviv = glow_lazy_glTexEnviv;
static void glow_lazy_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
  glow_glTexGend = (PFNGLTEXGENDPROC)((ptrdiff_t)(glow_get_proc("glTexGend")));
  if (glow_glTexGend == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGend\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGend\n");
#endif
  }
  glow_glTexGend(coord, pname, param);
}
PFNGLTEXGENDPROC glow_glTexGend = glow_lazy_glTexGend;
static void glow_lazy_glPopClientAttrib() {
  glow_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)((ptrdiff_t)(glow_get_proc("glPopClientAttrib")));
  if (glow_glPopClientAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopClientAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopClientAttrib\n");
#endif
  }
  glow_glPopClientAttrib();
}
PFNGLPOPCLIENTATTRIBPROC glow_glPopClientAttrib = glow_lazy_glPopClientAttrib;
static void glow_lazy_glStencilMaskSeparate(GLenum face, GLuint mask) {
  glow_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)((ptrdiff_t)(glow_get_proc("glStencilMaskSeparate")));
  if (glow_glStencilMaskSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilMaskSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilMaskSeparate\n");
#endif
  }
  glow_glStencilMaskSeparate(face, mask);
}
PFNGLSTENCILMASKSEPARATEPROC glow_glStencilMaskSeparate = glow_lazy_glStencilMaskSeparate;
static void glow_lazy_glSecondaryColorP3uiv(GLenum type, const GLuint *color) {
  glow_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColorP3uiv")));
  if (glow_glSecondaryColorP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColorP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColorP3uiv\n");
#endif
  }
  glow_glSecondaryColorP3uiv(type, color);
}
PFNGLSECONDARYCOLORP3UIVPROC glow_glSecondaryColorP3uiv = glow_lazy_glSecondaryColorP3uiv;
static void glow_lazy_glFinish() {
  glow_glFinish = (PFNGLFINISHPROC)((ptrdiff_t)(glow_get_proc("glFinish")));
  if (glow_glFinish == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFinish\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFinish\n");
#endif
  }
  glow_glFinish();
}
PFNGLFINISHPROC glow_glFinish = glow_lazy_glFinish;
static void glow_lazy_glVertexAttrib1s(GLuint index, GLshort x) {
  glow_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib1s")));
  if (glow_glVertexAttrib1s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1s\n");
#endif
  }
  glow_glVertexAttrib1s(index, x);
}
PFNGLVERTEXATTRIB1SPROC glow_glVertexAttrib1s = glow_lazy_glVertexAttrib1s;
static void glow_lazy_glColor3ubv(const GLubyte *v) {
  glow_glColor3ubv = (PFNGLCOLOR3UBVPROC)((ptrdiff_t)(glow_get_proc("glColor3ubv")));
  if (glow_glColor3ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3ubv\n");
#endif
  }
  glow_glColor3ubv(v);
}
PFNGLCOLOR3UBVPROC glow_glColor3ubv = glow_lazy_glColor3ubv;
static void glow_lazy_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  glow_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP2uiv")));
  if (glow_glVertexAttribP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP2uiv\n");
#endif
  }
  glow_glVertexAttribP2uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP2UIVPROC glow_glVertexAttribP2uiv = glow_lazy_glVertexAttribP2uiv;
static void glow_lazy_glMultiTexCoord3dv(GLenum target, const GLdouble *v) {
  glow_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3dv")));
  if (glow_glMultiTexCoord3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3dv\n");
#endif
  }
  glow_glMultiTexCoord3dv(target, v);
}
PFNGLMULTITEXCOORD3DVPROC glow_glMultiTexCoord3dv = glow_lazy_glMultiTexCoord3dv;
static void glow_lazy_glUniform1d(GLint location, GLdouble x) {
  glow_glUniform1d = (PFNGLUNIFORM1DPROC)((ptrdiff_t)(glow_get_proc("glUniform1d")));
  if (glow_glUniform1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1d\n");
#endif
  }
  glow_glUniform1d(location, x);
}
PFNGLUNIFORM1DPROC glow_glUniform1d = glow_lazy_glUniform1d;
static void glow_lazy_glVertex3fv(const GLfloat *v) {
  glow_glVertex3fv = (PFNGLVERTEX3FVPROC)((ptrdiff_t)(glow_get_proc("glVertex3fv")));
  if (glow_glVertex3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3fv\n");
#endif
  }
  glow_glVertex3fv(v);
}
PFNGLVERTEX3FVPROC glow_glVertex3fv = glow_lazy_glVertex3fv;
static void glow_lazy_glEndTransformFeedback() {
  glow_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glEndTransformFeedback")));
  if (glow_glEndTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndTransformFeedback\n");
#endif
  }
  glow_glEndTransformFeedback();
}
PFNGLENDTRANSFORMFEEDBACKPROC glow_glEndTransformFeedback = glow_lazy_glEndTransformFeedback;
static void glow_lazy_glVertex2sv(const GLshort *v) {
  glow_glVertex2sv = (PFNGLVERTEX2SVPROC)((ptrdiff_t)(glow_get_proc("glVertex2sv")));
  if (glow_glVertex2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2sv\n");
#endif
  }
  glow_glVertex2sv(v);
}
PFNGLVERTEX2SVPROC glow_glVertex2sv = glow_lazy_glVertex2sv;
static void glow_lazy_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
  glow_glNormal3f = (PFNGLNORMAL3FPROC)((ptrdiff_t)(glow_get_proc("glNormal3f")));
  if (glow_glNormal3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3f\n");
#endif
  }
  glow_glNormal3f(nx, ny, nz);
}
PFNGLNORMAL3FPROC glow_glNormal3f = glow_lazy_glNormal3f;
static void glow_lazy_glFogCoordd(GLdouble coord) {
  glow_glFogCoordd = (PFNGLFOGCOORDDPROC)((ptrdiff_t)(glow_get_proc("glFogCoordd")));
  if (glow_glFogCoordd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordd\n");
#endif
  }
  glow_glFogCoordd(coord);
}
PFNGLFOGCOORDDPROC glow_glFogCoordd = glow_lazy_glFogCoordd;
static void glow_lazy_glDetachShader(GLuint program, GLuint shader) {
  glow_glDetachShader = (PFNGLDETACHSHADERPROC)((ptrdiff_t)(glow_get_proc("glDetachShader")));
  if (glow_glDetachShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDetachShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDetachShader\n");
#endif
  }
  glow_glDetachShader(program, shader);
}
PFNGLDETACHSHADERPROC glow_glDetachShader = glow_lazy_glDetachShader;
static void glow_lazy_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix4x2fv")));
  if (glow_glProgramUniformMatrix4x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x2fv\n");
#endif
  }
  glow_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glow_glProgramUniformMatrix4x2fv = glow_lazy_glProgramUniformMatrix4x2fv;
static void glow_lazy_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
  glow_glEvalMesh2 = (PFNGLEVALMESH2PROC)((ptrdiff_t)(glow_get_proc("glEvalMesh2")));
  if (glow_glEvalMesh2 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalMesh2\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalMesh2\n");
#endif
  }
  glow_glEvalMesh2(mode, i1, i2, j1, j2);
}
PFNGLEVALMESH2PROC glow_glEvalMesh2 = glow_lazy_glEvalMesh2;
static void glow_lazy_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
  glow_glTexImage3D = (PFNGLTEXIMAGE3DPROC)((ptrdiff_t)(glow_get_proc("glTexImage3D")));
  if (glow_glTexImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage3D\n");
#endif
  }
  glow_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
PFNGLTEXIMAGE3DPROC glow_glTexImage3D = glow_lazy_glTexImage3D;
static void glow_lazy_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  glow_glColorMaski = (PFNGLCOLORMASKIPROC)((ptrdiff_t)(glow_get_proc("glColorMaski")));
  if (glow_glColorMaski == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorMaski\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorMaski\n");
#endif
  }
  glow_glColorMaski(index, r, g, b, a);
}
PFNGLCOLORMASKIPROC glow_glColorMaski = glow_lazy_glColorMaski;
static void glow_lazy_glClear(GLbitfield mask) {
  glow_glClear = (PFNGLCLEARPROC)((ptrdiff_t)(glow_get_proc("glClear")));
  if (glow_glClear == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClear\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClear\n");
#endif
  }
  glow_glClear(mask);
}
PFNGLCLEARPROC glow_glClear = glow_lazy_glClear;
static GLboolean glow_lazy_glIsEnabledi(GLenum target, GLuint index) {
  glow_glIsEnabledi = (PFNGLISENABLEDIPROC)((ptrdiff_t)(glow_get_proc("glIsEnabledi")));
  if (glow_glIsEnabledi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsEnabledi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsEnabledi\n");
#endif
  }
  return glow_glIsEnabledi(target, index);
}
PFNGLISENABLEDIPROC glow_glIsEnabledi = glow_lazy_glIsEnabledi;
static void glow_lazy_glTexCoordP1uiv(GLenum type, const GLuint *coords) {
  glow_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP1uiv")));
  if (glow_glTexCoordP1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP1uiv\n");
#endif
  }
  glow_glTexCoordP1uiv(type, coords);
}
PFNGLTEXCOORDP1UIVPROC glow_glTexCoordP1uiv = glow_lazy_glTexCoordP1uiv;
static void glow_lazy_glTexCoordP4uiv(GLenum type, const GLuint *coords) {
  glow_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP4uiv")));
  if (glow_glTexCoordP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP4uiv\n");
#endif
  }
  glow_glTexCoordP4uiv(type, coords);
}
PFNGLTEXCOORDP4UIVPROC glow_glTexCoordP4uiv = glow_lazy_glTexCoordP4uiv;
static void glow_lazy_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  glow_glTexCoord4f = (PFNGLTEXCOORD4FPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4f")));
  if (glow_glTexCoord4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4f\n");
#endif
  }
  glow_glTexCoord4f(s, t, r, q);
}
PFNGLTEXCOORD4FPROC glow_glTexCoord4f = glow_lazy_glTexCoord4f;
static void glow_lazy_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
  glow_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)((ptrdiff_t)(glow_get_proc("glBindRenderbuffer")));
  if (glow_glBindRenderbuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindRenderbuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindRenderbuffer\n");
#endif
  }
  glow_glBindRenderbuffer(target, renderbuffer);
}
PFNGLBINDRENDERBUFFERPROC glow_glBindRenderbuffer = glow_lazy_glBindRenderbuffer;
static void glow_lazy_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  glow_glTextureView = (PFNGLTEXTUREVIEWPROC)((ptrdiff_t)(glow_get_proc("glTextureView")));
  if (glow_glTextureView == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTextureView\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTextureView\n");
#endif
  }
  glow_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
PFNGLTEXTUREVIEWPROC glow_glTextureView = glow_lazy_glTextureView;
static void glow_lazy_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  glow_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib2s")));
  if (glow_glVertexAttrib2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2s\n");
#endif
  }
  glow_glVertexAttrib2s(index, x, y);
}
PFNGLVERTEXATTRIB2SPROC glow_glVertexAttrib2s = glow_lazy_glVertexAttrib2s;
static void glow_lazy_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
  glow_glMaterialf = (PFNGLMATERIALFPROC)((ptrdiff_t)(glow_get_proc("glMaterialf")));
  if (glow_glMaterialf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMaterialf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMaterialf\n");
#endif
  }
  glow_glMaterialf(face, pname, param);
}
PFNGLMATERIALFPROC glow_glMaterialf = glow_lazy_glMaterialf;
static void glow_lazy_glEvalCoord2dv(const GLdouble *u) {
  glow_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)((ptrdiff_t)(glow_get_proc("glEvalCoord2dv")));
  if (glow_glEvalCoord2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2dv\n");
#endif
  }
  glow_glEvalCoord2dv(u);
}
PFNGLEVALCOORD2DVPROC glow_glEvalCoord2dv = glow_lazy_glEvalCoord2dv;
static void glow_lazy_glVertexAttribDivisor(GLuint index, GLuint divisor) {
  glow_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribDivisor")));
  if (glow_glVertexAttribDivisor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribDivisor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribDivisor\n");
#endif
  }
  glow_glVertexAttribDivisor(index, divisor);
}
PFNGLVERTEXATTRIBDIVISORPROC glow_glVertexAttribDivisor = glow_lazy_glVertexAttribDivisor;
static void glow_lazy_glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {
  glow_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)((ptrdiff_t)(glow_get_proc("glDrawElementsIndirect")));
  if (glow_glDrawElementsIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsIndirect\n");
#endif
  }
  glow_glDrawElementsIndirect(mode, type, indirect);
}
PFNGLDRAWELEMENTSINDIRECTPROC glow_glDrawElementsIndirect = glow_lazy_glDrawElementsIndirect;
static void glow_lazy_glDepthRange(GLdouble near, GLdouble far) {
  glow_glDepthRange = (PFNGLDEPTHRANGEPROC)((ptrdiff_t)(glow_get_proc("glDepthRange")));
  if (glow_glDepthRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRange\n");
#endif
  }
  glow_glDepthRange(near, far);
}
PFNGLDEPTHRANGEPROC glow_glDepthRange = glow_lazy_glDepthRange;
static void glow_lazy_glSecondaryColor3uiv(const GLuint *v) {
  glow_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3uiv")));
  if (glow_glSecondaryColor3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3uiv\n");
#endif
  }
  glow_glSecondaryColor3uiv(v);
}
PFNGLSECONDARYCOLOR3UIVPROC glow_glSecondaryColor3uiv = glow_lazy_glSecondaryColor3uiv;
static GLenum glow_lazy_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  glow_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)((ptrdiff_t)(glow_get_proc("glClientWaitSync")));
  if (glow_glClientWaitSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClientWaitSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClientWaitSync\n");
#endif
  }
  return glow_glClientWaitSync(sync, flags, timeout);
}
PFNGLCLIENTWAITSYNCPROC glow_glClientWaitSync = glow_lazy_glClientWaitSync;
static void glow_lazy_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  glow_glColor3d = (PFNGLCOLOR3DPROC)((ptrdiff_t)(glow_get_proc("glColor3d")));
  if (glow_glColor3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3d\n");
#endif
  }
  glow_glColor3d(red, green, blue);
}
PFNGLCOLOR3DPROC glow_glColor3d = glow_lazy_glColor3d;
static void glow_lazy_glVertex4iv(const GLint *v) {
  glow_glVertex4iv = (PFNGLVERTEX4IVPROC)((ptrdiff_t)(glow_get_proc("glVertex4iv")));
  if (glow_glVertex4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4iv\n");
#endif
  }
  glow_glVertex4iv(v);
}
PFNGLVERTEX4IVPROC glow_glVertex4iv = glow_lazy_glVertex4iv;
static void glow_lazy_glNormalPointer(GLenum type, GLsizei stride, const void *pointer) {
  glow_glNormalPointer = (PFNGLNORMALPOINTERPROC)((ptrdiff_t)(glow_get_proc("glNormalPointer")));
  if (glow_glNormalPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormalPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormalPointer\n");
#endif
  }
  glow_glNormalPointer(type, stride, pointer);
}
PFNGLNORMALPOINTERPROC glow_glNormalPointer = glow_lazy_glNormalPointer;
static void glow_lazy_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
  glow_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)((ptrdiff_t)(glow_get_proc("glCompressedTexSubImage1D")));
  if (glow_glCompressedTexSubImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexSubImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexSubImage1D\n");
#endif
  }
  glow_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glow_glCompressedTexSubImage1D = glow_lazy_glCompressedTexSubImage1D;
static void glow_lazy_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {
  glow_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glDeleteRenderbuffers")));
  if (glow_glDeleteRenderbuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteRenderbuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteRenderbuffers\n");
#endif
  }
  glow_glDeleteRenderbuffers(n, renderbuffers);
}
PFNGLDELETERENDERBUFFERSPROC glow_glDeleteRenderbuffers = glow_lazy_glDeleteRenderbuffers;
static void glow_lazy_glTexCoord1iv(const GLint *v) {
  glow_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1iv")));
  if (glow_glTexCoord1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1iv\n");
#endif
  }
  glow_glTexCoord1iv(v);
}
PFNGLTEXCOORD1IVPROC glow_glTexCoord1iv = glow_lazy_glTexCoord1iv;
static void glow_lazy_glColor3usv(const GLushort *v) {
  glow_glColor3usv = (PFNGLCOLOR3USVPROC)((ptrdiff_t)(glow_get_proc("glColor3usv")));
  if (glow_glColor3usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3usv\n");
#endif
  }
  glow_glColor3usv(v);
}
PFNGLCOLOR3USVPROC glow_glColor3usv = glow_lazy_glColor3usv;
static void glow_lazy_glSelectBuffer(GLsizei size, GLuint *buffer) {
  glow_glSelectBuffer = (PFNGLSELECTBUFFERPROC)((ptrdiff_t)(glow_get_proc("glSelectBuffer")));
  if (glow_glSelectBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSelectBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSelectBuffer\n");
#endif
  }
  glow_glSelectBuffer(size, buffer);
}
PFNGLSELECTBUFFERPROC glow_glSelectBuffer = glow_lazy_glSelectBuffer;
static void glow_lazy_glProgramUniform1i(GLuint program, GLint location, GLint v0) {
  glow_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1i")));
  if (glow_glProgramUniform1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1i\n");
#endif
  }
  glow_glProgramUniform1i(program, location, v0);
}
PFNGLPROGRAMUNIFORM1IPROC glow_glProgramUniform1i = glow_lazy_glProgramUniform1i;
static void glow_lazy_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  glow_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3d")));
  if (glow_glMultiTexCoord3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3d\n");
#endif
  }
  glow_glMultiTexCoord3d(target, s, t, r);
}
PFNGLMULTITEXCOORD3DPROC glow_glMultiTexCoord3d = glow_lazy_glMultiTexCoord3d;
static void glow_lazy_glDeleteSync(GLsync sync) {
  glow_glDeleteSync = (PFNGLDELETESYNCPROC)((ptrdiff_t)(glow_get_proc("glDeleteSync")));
  if (glow_glDeleteSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteSync\n");
#endif
  }
  glow_glDeleteSync(sync);
}
PFNGLDELETESYNCPROC glow_glDeleteSync = glow_lazy_glDeleteSync;
static void glow_lazy_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  glow_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4ui")));
  if (glow_glProgramUniform4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4ui\n");
#endif
  }
  glow_glProgramUniform4ui(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4UIPROC glow_glProgramUniform4ui = glow_lazy_glProgramUniform4ui;
static void glow_lazy_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {
  glow_glMaterialfv = (PFNGLMATERIALFVPROC)((ptrdiff_t)(glow_get_proc("glMaterialfv")));
  if (glow_glMaterialfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMaterialfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMaterialfv\n");
#endif
  }
  glow_glMaterialfv(face, pname, params);
}
PFNGLMATERIALFVPROC glow_glMaterialfv = glow_lazy_glMaterialfv;
static void glow_lazy_glGenSamplers(GLsizei count, GLuint *samplers) {
  glow_glGenSamplers = (PFNGLGENSAMPLERSPROC)((ptrdiff_t)(glow_get_proc("glGenSamplers")));
  if (glow_glGenSamplers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenSamplers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenSamplers\n");
#endif
  }
  glow_glGenSamplers(count, samplers);
}
PFNGLGENSAMPLERSPROC glow_glGenSamplers = glow_lazy_glGenSamplers;
static void glow_lazy_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix3x2dv")));
  if (glow_glProgramUniformMatrix3x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x2dv\n");
#endif
  }
  glow_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glow_glProgramUniformMatrix3x2dv = glow_lazy_glProgramUniformMatrix3x2dv;
static void glow_lazy_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
  glow_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribiv")));
  if (glow_glGetVertexAttribiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribiv\n");
#endif
  }
  glow_glGetVertexAttribiv(index, pname, params);
}
PFNGLGETVERTEXATTRIBIVPROC glow_glGetVertexAttribiv = glow_lazy_glGetVertexAttribiv;
static void glow_lazy_glColor3uiv(const GLuint *v) {
  glow_glColor3uiv = (PFNGLCOLOR3UIVPROC)((ptrdiff_t)(glow_get_proc("glColor3uiv")));
  if (glow_glColor3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3uiv\n");
#endif
  }
  glow_glColor3uiv(v);
}
PFNGLCOLOR3UIVPROC glow_glColor3uiv = glow_lazy_glColor3uiv;
static GLboolean glow_lazy_glIsQuery(GLuint id) {
  glow_glIsQuery = (PFNGLISQUERYPROC)((ptrdiff_t)(glow_get_proc("glIsQuery")));
  if (glow_glIsQuery == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsQuery\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsQuery\n");
#endif
  }
  return glow_glIsQuery(id);
}
PFNGLISQUERYPROC glow_glIsQuery = glow_lazy_glIsQuery;
static void glow_lazy_glGenTransformFeedbacks(GLsizei n, GLuint *ids) {
  glow_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)((ptrdiff_t)(glow_get_proc("glGenTransformFeedbacks")));
  if (glow_glGenTransformFeedbacks == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenTransformFeedbacks\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenTransformFeedbacks\n");
#endif
  }
  glow_glGenTransformFeedbacks(n, ids);
}
PFNGLGENTRANSFORMFEEDBACKSPROC glow_glGenTransformFeedbacks = glow_lazy_glGenTransformFeedbacks;
static void glow_lazy_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  glow_glStencilFunc = (PFNGLSTENCILFUNCPROC)((ptrdiff_t)(glow_get_proc("glStencilFunc")));
  if (glow_glStencilFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilFunc\n");
#endif
  }
  glow_glStencilFunc(func, ref, mask);
}
PFNGLSTENCILFUNCPROC glow_glStencilFunc = glow_lazy_glStencilFunc;
static void glow_lazy_glEvalPoint2(GLint i, GLint j) {
  glow_glEvalPoint2 = (PFNGLEVALPOINT2PROC)((ptrdiff_t)(glow_get_proc("glEvalPoint2")));
  if (glow_glEvalPoint2 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalPoint2\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalPoint2\n");
#endif
  }
  glow_glEvalPoint2(i, j);
}
PFNGLEVALPOINT2PROC glow_glEvalPoint2 = glow_lazy_glEvalPoint2;
static void glow_lazy_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  glow_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)((ptrdiff_t)(glow_get_proc("glGetProgramInfoLog")));
  if (glow_glGetProgramInfoLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramInfoLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramInfoLog\n");
#endif
  }
  glow_glGetProgramInfoLog(program, bufSize, length, infoLog);
}
PFNGLGETPROGRAMINFOLOGPROC glow_glGetProgramInfoLog = glow_lazy_glGetProgramInfoLog;
static void glow_lazy_glVertexAttrib4uiv(GLuint index, const GLuint *v) {
  glow_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4uiv")));
  if (glow_glVertexAttrib4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4uiv\n");
#endif
  }
  glow_glVertexAttrib4uiv(index, v);
}
PFNGLVERTEXATTRIB4UIVPROC glow_glVertexAttrib4uiv = glow_lazy_glVertexAttrib4uiv;
static void glow_lazy_glGenerateMipmap(GLenum target) {
  glow_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)((ptrdiff_t)(glow_get_proc("glGenerateMipmap")));
  if (glow_glGenerateMipmap == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenerateMipmap\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenerateMipmap\n");
#endif
  }
  glow_glGenerateMipmap(target);
}
PFNGLGENERATEMIPMAPPROC glow_glGenerateMipmap = glow_lazy_glGenerateMipmap;
static void glow_lazy_glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {
  glow_glGetLightfv = (PFNGLGETLIGHTFVPROC)((ptrdiff_t)(glow_get_proc("glGetLightfv")));
  if (glow_glGetLightfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetLightfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetLightfv\n");
#endif
  }
  glow_glGetLightfv(light, pname, params);
}
PFNGLGETLIGHTFVPROC glow_glGetLightfv = glow_lazy_glGetLightfv;
static void glow_lazy_glPrimitiveRestartIndex(GLuint index) {
  glow_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)((ptrdiff_t)(glow_get_proc("glPrimitiveRestartIndex")));
  if (glow_glPrimitiveRestartIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPrimitiveRestartIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPrimitiveRestartIndex\n");
#endif
  }
  glow_glPrimitiveRestartIndex(index);
}
PFNGLPRIMITIVERESTARTINDEXPROC glow_glPrimitiveRestartIndex = glow_lazy_glPrimitiveRestartIndex;
static void glow_lazy_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {
  glow_glReadPixels = (PFNGLREADPIXELSPROC)((ptrdiff_t)(glow_get_proc("glReadPixels")));
  if (glow_glReadPixels == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glReadPixels\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glReadPixels\n");
#endif
  }
  glow_glReadPixels(x, y, width, height, format, type, pixels);
}
PFNGLREADPIXELSPROC glow_glReadPixels = glow_lazy_glReadPixels;
static void glow_lazy_glEnableVertexAttribArray(GLuint index) {
  glow_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)((ptrdiff_t)(glow_get_proc("glEnableVertexAttribArray")));
  if (glow_glEnableVertexAttribArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnableVertexAttribArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnableVertexAttribArray\n");
#endif
  }
  glow_glEnableVertexAttribArray(index);
}
PFNGLENABLEVERTEXATTRIBARRAYPROC glow_glEnableVertexAttribArray = glow_lazy_glEnableVertexAttribArray;
static void glow_lazy_glUseProgram(GLuint program) {
  glow_glUseProgram = (PFNGLUSEPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glUseProgram")));
  if (glow_glUseProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUseProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUseProgram\n");
#endif
  }
  glow_glUseProgram(program);
}
PFNGLUSEPROGRAMPROC glow_glUseProgram = glow_lazy_glUseProgram;
static void glow_lazy_glVertexAttrib3fv(GLuint index, const GLfloat *v) {
  glow_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib3fv")));
  if (glow_glVertexAttrib3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3fv\n");
#endif
  }
  glow_glVertexAttrib3fv(index, v);
}
PFNGLVERTEXATTRIB3FVPROC glow_glVertexAttrib3fv = glow_lazy_glVertexAttrib3fv;
static void glow_lazy_glMultiTexCoord1sv(GLenum target, const GLshort *v) {
  glow_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1sv")));
  if (glow_glMultiTexCoord1sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1sv\n");
#endif
  }
  glow_glMultiTexCoord1sv(target, v);
}
PFNGLMULTITEXCOORD1SVPROC glow_glMultiTexCoord1sv = glow_lazy_glMultiTexCoord1sv;
static void glow_lazy_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
  glow_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2d")));
  if (glow_glMultiTexCoord2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2d\n");
#endif
  }
  glow_glMultiTexCoord2d(target, s, t);
}
PFNGLMULTITEXCOORD2DPROC glow_glMultiTexCoord2d = glow_lazy_glMultiTexCoord2d;
static void glow_lazy_glSecondaryColor3ubv(const GLubyte *v) {
  glow_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3ubv")));
  if (glow_glSecondaryColor3ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3ubv\n");
#endif
  }
  glow_glSecondaryColor3ubv(v);
}
PFNGLSECONDARYCOLOR3UBVPROC glow_glSecondaryColor3ubv = glow_lazy_glSecondaryColor3ubv;
static void glow_lazy_glCompileShader(GLuint shader) {
  glow_glCompileShader = (PFNGLCOMPILESHADERPROC)((ptrdiff_t)(glow_get_proc("glCompileShader")));
  if (glow_glCompileShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompileShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompileShader\n");
#endif
  }
  glow_glCompileShader(shader);
}
PFNGLCOMPILESHADERPROC glow_glCompileShader = glow_lazy_glCompileShader;
static void glow_lazy_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
  glow_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)((ptrdiff_t)(glow_get_proc("glGetActiveAtomicCounterBufferiv")));
  if (glow_glGetActiveAtomicCounterBufferiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveAtomicCounterBufferiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveAtomicCounterBufferiv\n");
#endif
  }
  glow_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glow_glGetActiveAtomicCounterBufferiv = glow_lazy_glGetActiveAtomicCounterBufferiv;
static void glow_lazy_glDeleteLists(GLuint list, GLsizei range) {
  glow_glDeleteLists = (PFNGLDELETELISTSPROC)((ptrdiff_t)(glow_get_proc("glDeleteLists")));
  if (glow_glDeleteLists == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteLists\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteLists\n");
#endif
  }
  glow_glDeleteLists(list, range);
}
PFNGLDELETELISTSPROC glow_glDeleteLists = glow_lazy_glDeleteLists;
static void glow_lazy_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
  glow_glTexCoord4s = (PFNGLTEXCOORD4SPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4s")));
  if (glow_glTexCoord4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4s\n");
#endif
  }
  glow_glTexCoord4s(s, t, r, q);
}
PFNGLTEXCOORD4SPROC glow_glTexCoord4s = glow_lazy_glTexCoord4s;
static void glow_lazy_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {
  glow_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)((ptrdiff_t)(glow_get_proc("glGenRenderbuffers")));
  if (glow_glGenRenderbuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenRenderbuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenRenderbuffers\n");
#endif
  }
  glow_glGenRenderbuffers(n, renderbuffers);
}
PFNGLGENRENDERBUFFERSPROC glow_glGenRenderbuffers = glow_lazy_glGenRenderbuffers;
static GLboolean glow_lazy_glIsTransformFeedback(GLuint id) {
  glow_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)((ptrdiff_t)(glow_get_proc("glIsTransformFeedback")));
  if (glow_glIsTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsTransformFeedback\n");
#endif
  }
  return glow_glIsTransformFeedback(id);
}
PFNGLISTRANSFORMFEEDBACKPROC glow_glIsTransformFeedback = glow_lazy_glIsTransformFeedback;
static void glow_lazy_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
  glow_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)((ptrdiff_t)(glow_get_proc("glBeginQueryIndexed")));
  if (glow_glBeginQueryIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginQueryIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginQueryIndexed\n");
#endif
  }
  glow_glBeginQueryIndexed(target, index, id);
}
PFNGLBEGINQUERYINDEXEDPROC glow_glBeginQueryIndexed = glow_lazy_glBeginQueryIndexed;
static void glow_lazy_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  glow_glColor4f = (PFNGLCOLOR4FPROC)((ptrdiff_t)(glow_get_proc("glColor4f")));
  if (glow_glColor4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4f\n");
#endif
  }
  glow_glColor4f(red, green, blue, alpha);
}
PFNGLCOLOR4FPROC glow_glColor4f = glow_lazy_glColor4f;
static void glow_lazy_glTexCoord3i(GLint s, GLint t, GLint r) {
  glow_glTexCoord3i = (PFNGLTEXCOORD3IPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3i")));
  if (glow_glTexCoord3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3i\n");
#endif
  }
  glow_glTexCoord3i(s, t, r);
}
PFNGLTEXCOORD3IPROC glow_glTexCoord3i = glow_lazy_glTexCoord3i;
static void glow_lazy_glMultiTexCoord3sv(GLenum target, const GLshort *v) {
  glow_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3sv")));
  if (glow_glMultiTexCoord3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3sv\n");
#endif
  }
  glow_glMultiTexCoord3sv(target, v);
}
PFNGLMULTITEXCOORD3SVPROC glow_glMultiTexCoord3sv = glow_lazy_glMultiTexCoord3sv;
static void glow_lazy_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetRenderbufferParameteriv")));
  if (glow_glGetRenderbufferParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetRenderbufferParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetRenderbufferParameteriv\n");
#endif
  }
  glow_glGetRenderbufferParameteriv(target, pname, params);
}
PFNGLGETRENDERBUFFERPARAMETERIVPROC glow_glGetRenderbufferParameteriv = glow_lazy_glGetRenderbufferParameteriv;
static void glow_lazy_glRasterPos2fv(const GLfloat *v) {
  glow_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2fv")));
  if (glow_glRasterPos2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2fv\n");
#endif
  }
  glow_glRasterPos2fv(v);
}
PFNGLRASTERPOS2FVPROC glow_glRasterPos2fv = glow_lazy_glRasterPos2fv;
static void glow_lazy_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  glow_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)((ptrdiff_t)(glow_get_proc("glBindBufferBase")));
  if (glow_glBindBufferBase == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindBufferBase\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindBufferBase\n");
#endif
  }
  glow_glBindBufferBase(target, index, buffer);
}
PFNGLBINDBUFFERBASEPROC glow_glBindBufferBase = glow_lazy_glBindBufferBase;
static void glow_lazy_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  glow_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)((ptrdiff_t)(glow_get_proc("glClearBufferfi")));
  if (glow_glClearBufferfi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferfi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferfi\n");
#endif
  }
  glow_glClearBufferfi(buffer, drawbuffer, depth, stencil);
}
PFNGLCLEARBUFFERFIPROC glow_glClearBufferfi = glow_lazy_glClearBufferfi;
static void glow_lazy_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  glow_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)((ptrdiff_t)(glow_get_proc("glScissorIndexed")));
  if (glow_glScissorIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissorIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissorIndexed\n");
#endif
  }
  glow_glScissorIndexed(index, left, bottom, width, height);
}
PFNGLSCISSORINDEXEDPROC glow_glScissorIndexed = glow_lazy_glScissorIndexed;
static void glow_lazy_glMultiTexCoord2sv(GLenum target, const GLshort *v) {
  glow_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2sv")));
  if (glow_glMultiTexCoord2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2sv\n");
#endif
  }
  glow_glMultiTexCoord2sv(target, v);
}
PFNGLMULTITEXCOORD2SVPROC glow_glMultiTexCoord2sv = glow_lazy_glMultiTexCoord2sv;
static void glow_lazy_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
  glow_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3ui")));
  if (glow_glSecondaryColor3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3ui\n");
#endif
  }
  glow_glSecondaryColor3ui(red, green, blue);
}
PFNGLSECONDARYCOLOR3UIPROC glow_glSecondaryColor3ui = glow_lazy_glSecondaryColor3ui;
static void glow_lazy_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {
  glow_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)((ptrdiff_t)(glow_get_proc("glTexParameterIiv")));
  if (glow_glTexParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterIiv\n");
#endif
  }
  glow_glTexParameterIiv(target, pname, params);
}
PFNGLTEXPARAMETERIIVPROC glow_glTexParameterIiv = glow_lazy_glTexParameterIiv;
static void glow_lazy_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  glow_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform4f")));
  if (glow_glProgramUniform4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4f\n");
#endif
  }
  glow_glProgramUniform4f(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4FPROC glow_glProgramUniform4f = glow_lazy_glProgramUniform4f;
static void glow_lazy_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
  glow_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetTexParameteriv")));
  if (glow_glGetTexParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameteriv\n");
#endif
  }
  glow_glGetTexParameteriv(target, pname, params);
}
PFNGLGETTEXPARAMETERIVPROC glow_glGetTexParameteriv = glow_lazy_glGetTexParameteriv;
static void glow_lazy_glGetLightiv(GLenum light, GLenum pname, GLint *params) {
  glow_glGetLightiv = (PFNGLGETLIGHTIVPROC)((ptrdiff_t)(glow_get_proc("glGetLightiv")));
  if (glow_glGetLightiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetLightiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetLightiv\n");
#endif
  }
  glow_glGetLightiv(light, pname, params);
}
PFNGLGETLIGHTIVPROC glow_glGetLightiv = glow_lazy_glGetLightiv;
static void glow_lazy_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {
  glow_glGetTexGendv = (PFNGLGETTEXGENDVPROC)((ptrdiff_t)(glow_get_proc("glGetTexGendv")));
  if (glow_glGetTexGendv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexGendv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexGendv\n");
#endif
  }
  glow_glGetTexGendv(coord, pname, params);
}
PFNGLGETTEXGENDVPROC glow_glGetTexGendv = glow_lazy_glGetTexGendv;
static void glow_lazy_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  glow_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribP1ui")));
  if (glow_glVertexAttribP1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP1ui\n");
#endif
  }
  glow_glVertexAttribP1ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP1UIPROC glow_glVertexAttribP1ui = glow_lazy_glVertexAttribP1ui;
static void glow_lazy_glActiveShaderProgram(GLuint pipeline, GLuint program) {
  glow_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)((ptrdiff_t)(glow_get_proc("glActiveShaderProgram")));
  if (glow_glActiveShaderProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glActiveShaderProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glActiveShaderProgram\n");
#endif
  }
  glow_glActiveShaderProgram(pipeline, program);
}
PFNGLACTIVESHADERPROGRAMPROC glow_glActiveShaderProgram = glow_lazy_glActiveShaderProgram;
static void glow_lazy_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  glow_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1uiv")));
  if (glow_glProgramUniform1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1uiv\n");
#endif
  }
  glow_glProgramUniform1uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1UIVPROC glow_glProgramUniform1uiv = glow_lazy_glProgramUniform1uiv;
static void glow_lazy_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  glow_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix4x2dv")));
  if (glow_glProgramUniformMatrix4x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x2dv\n");
#endif
  }
  glow_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glow_glProgramUniformMatrix4x2dv = glow_lazy_glProgramUniformMatrix4x2dv;
static void glow_lazy_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  glow_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)((ptrdiff_t)(glow_get_proc("glTexStorage3DMultisample")));
  if (glow_glTexStorage3DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage3DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage3DMultisample\n");
#endif
  }
  glow_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glow_glTexStorage3DMultisample = glow_lazy_glTexStorage3DMultisample;
static void glow_lazy_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
  glow_glMapGrid2f = (PFNGLMAPGRID2FPROC)((ptrdiff_t)(glow_get_proc("glMapGrid2f")));
  if (glow_glMapGrid2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid2f\n");
#endif
  }
  glow_glMapGrid2f(un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2FPROC glow_glMapGrid2f = glow_lazy_glMapGrid2f;
static void glow_lazy_glColorMaterial(GLenum face, GLenum mode) {
  glow_glColorMaterial = (PFNGLCOLORMATERIALPROC)((ptrdiff_t)(glow_get_proc("glColorMaterial")));
  if (glow_glColorMaterial == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorMaterial\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorMaterial\n");
#endif
  }
  glow_glColorMaterial(face, mode);
}
PFNGLCOLORMATERIALPROC glow_glColorMaterial = glow_lazy_glColorMaterial;
static void glow_lazy_glVertexAttrib4usv(GLuint index, const GLushort *v) {
  glow_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib4usv")));
  if (glow_glVertexAttrib4usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4usv\n");
#endif
  }
  glow_glVertexAttrib4usv(index, v);
}
PFNGLVERTEXATTRIB4USVPROC glow_glVertexAttrib4usv = glow_lazy_glVertexAttrib4usv;
static void glow_lazy_glGetInteger64v(GLenum pname, GLint64 *data) {
  glow_glGetInteger64v = (PFNGLGETINTEGER64VPROC)((ptrdiff_t)(glow_get_proc("glGetInteger64v")));
  if (glow_glGetInteger64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInteger64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInteger64v\n");
#endif
  }
  glow_glGetInteger64v(pname, data);
}
PFNGLGETINTEGER64VPROC glow_glGetInteger64v = glow_lazy_glGetInteger64v;
static void glow_lazy_glTexCoord1s(GLshort s) {
  glow_glTexCoord1s = (PFNGLTEXCOORD1SPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1s")));
  if (glow_glTexCoord1s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1s\n");
#endif
  }
  glow_glTexCoord1s(s);
}
PFNGLTEXCOORD1SPROC glow_glTexCoord1s = glow_lazy_glTexCoord1s;
static void glow_lazy_glClipPlane(GLenum plane, const GLdouble *equation) {
  glow_glClipPlane = (PFNGLCLIPPLANEPROC)((ptrdiff_t)(glow_get_proc("glClipPlane")));
  if (glow_glClipPlane == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClipPlane\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClipPlane\n");
#endif
  }
  glow_glClipPlane(plane, equation);
}
PFNGLCLIPPLANEPROC glow_glClipPlane = glow_lazy_glClipPlane;
static void glow_lazy_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
  glow_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)((ptrdiff_t)(glow_get_proc("glDrawRangeElements")));
  if (glow_glDrawRangeElements == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawRangeElements\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawRangeElements\n");
#endif
  }
  glow_glDrawRangeElements(mode, start, end, count, type, indices);
}
PFNGLDRAWRANGEELEMENTSPROC glow_glDrawRangeElements = glow_lazy_glDrawRangeElements;
static void glow_lazy_glMultiTexCoord2iv(GLenum target, const GLint *v) {
  glow_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2iv")));
  if (glow_glMultiTexCoord2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2iv\n");
#endif
  }
  glow_glMultiTexCoord2iv(target, v);
}
PFNGLMULTITEXCOORD2IVPROC glow_glMultiTexCoord2iv = glow_lazy_glMultiTexCoord2iv;
static void glow_lazy_glGetUniformiv(GLuint program, GLint location, GLint *params) {
  glow_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)((ptrdiff_t)(glow_get_proc("glGetUniformiv")));
  if (glow_glGetUniformiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformiv\n");
#endif
  }
  glow_glGetUniformiv(program, location, params);
}
PFNGLGETUNIFORMIVPROC glow_glGetUniformiv = glow_lazy_glGetUniformiv;
static void glow_lazy_glCallLists(GLsizei n, GLenum type, const void *lists) {
  glow_glCallLists = (PFNGLCALLLISTSPROC)((ptrdiff_t)(glow_get_proc("glCallLists")));
  if (glow_glCallLists == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCallLists\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCallLists\n");
#endif
  }
  glow_glCallLists(n, type, lists);
}
PFNGLCALLLISTSPROC glow_glCallLists = glow_lazy_glCallLists;
static void glow_lazy_glVertex2fv(const GLfloat *v) {
  glow_glVertex2fv = (PFNGLVERTEX2FVPROC)((ptrdiff_t)(glow_get_proc("glVertex2fv")));
  if (glow_glVertex2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2fv\n");
#endif
  }
  glow_glVertex2fv(v);
}
PFNGLVERTEX2FVPROC glow_glVertex2fv = glow_lazy_glVertex2fv;
static void glow_lazy_glProvokingVertex(GLenum mode) {
  glow_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)((ptrdiff_t)(glow_get_proc("glProvokingVertex")));
  if (glow_glProvokingVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProvokingVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProvokingVertex\n");
#endif
  }
  glow_glProvokingVertex(mode);
}
PFNGLPROVOKINGVERTEXPROC glow_glProvokingVertex = glow_lazy_glProvokingVertex;
static void glow_lazy_glDispatchComputeIndirect(GLintptr indirect) {
  glow_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)((ptrdiff_t)(glow_get_proc("glDispatchComputeIndirect")));
  if (glow_glDispatchComputeIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDispatchComputeIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDispatchComputeIndirect\n");
#endif
  }
  glow_glDispatchComputeIndirect(indirect);
}
PFNGLDISPATCHCOMPUTEINDIRECTPROC glow_glDispatchComputeIndirect = glow_lazy_glDispatchComputeIndirect;
static void glow_lazy_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  glow_glTexCoord4d = (PFNGLTEXCOORD4DPROC)((ptrdiff_t)(glow_get_proc("glTexCoord4d")));
  if (glow_glTexCoord4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4d\n");
#endif
  }
  glow_glTexCoord4d(s, t, r, q);
}
PFNGLTEXCOORD4DPROC glow_glTexCoord4d = glow_lazy_glTexCoord4d;
static void glow_lazy_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  glow_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)((ptrdiff_t)(glow_get_proc("glTexImage3DMultisample")));
  if (glow_glTexImage3DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage3DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage3DMultisample\n");
#endif
  }
  glow_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXIMAGE3DMULTISAMPLEPROC glow_glTexImage3DMultisample = glow_lazy_glTexImage3DMultisample;
static void glow_lazy_glVertex4sv(const GLshort *v) {
  glow_glVertex4sv = (PFNGLVERTEX4SVPROC)((ptrdiff_t)(glow_get_proc("glVertex4sv")));
  if (glow_glVertex4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4sv\n");
#endif
  }
  glow_glVertex4sv(v);
}
PFNGLVERTEX4SVPROC glow_glVertex4sv = glow_lazy_glVertex4sv;
static void glow_lazy_glFogfv(GLenum pname, const GLfloat *params) {
  glow_glFogfv = (PFNGLFOGFVPROC)((ptrdiff_t)(glow_get_proc("glFogfv")));
  if (glow_glFogfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogfv\n");
#endif
  }
  glow_glFogfv(pname, params);
}
PFNGLFOGFVPROC glow_glFogfv = glow_lazy_glFogfv;
static void glow_lazy_glVertexAttribI4sv(GLuint index, const GLshort *v) {
  glow_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4sv")));
  if (glow_glVertexAttribI4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4sv\n");
#endif
  }
  glow_glVertexAttribI4sv(index, v);
}
PFNGLVERTEXATTRIBI4SVPROC glow_glVertexAttribI4sv = glow_lazy_glVertexAttribI4sv;
static void glow_lazy_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
  glow_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)((ptrdiff_t)(glow_get_proc("glGetActiveUniformBlockiv")));
  if (glow_glGetActiveUniformBlockiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformBlockiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformBlockiv\n");
#endif
  }
  glow_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glow_glGetActiveUniformBlockiv = glow_lazy_glGetActiveUniformBlockiv;
static void glow_lazy_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {
  glow_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)((ptrdiff_t)(glow_get_proc("glGetSamplerParameteriv")));
  if (glow_glGetSamplerParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameteriv\n");
#endif
  }
  glow_glGetSamplerParameteriv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIVPROC glow_glGetSamplerParameteriv = glow_lazy_glGetSamplerParameteriv;
static void glow_lazy_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  glow_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)((ptrdiff_t)(glow_get_proc("glFramebufferParameteri")));
  if (glow_glFramebufferParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferParameteri\n");
#endif
  }
  glow_glFramebufferParameteri(target, pname, param);
}
PFNGLFRAMEBUFFERPARAMETERIPROC glow_glFramebufferParameteri = glow_lazy_glFramebufferParameteri;
static void glow_lazy_glColor4fv(const GLfloat *v) {
  glow_glColor4fv = (PFNGLCOLOR4FVPROC)((ptrdiff_t)(glow_get_proc("glColor4fv")));
  if (glow_glColor4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4fv\n");
#endif
  }
  glow_glColor4fv(v);
}
PFNGLCOLOR4FVPROC glow_glColor4fv = glow_lazy_glColor4fv;
static void glow_lazy_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices) {
  glow_glDrawElements = (PFNGLDRAWELEMENTSPROC)((ptrdiff_t)(glow_get_proc("glDrawElements")));
  if (glow_glDrawElements == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElements\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElements\n");
#endif
  }
  glow_glDrawElements(mode, count, type, indices);
}
PFNGLDRAWELEMENTSPROC glow_glDrawElements = glow_lazy_glDrawElements;
static void glow_lazy_glSampleCoverage(GLfloat value, GLboolean invert) {
  glow_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)((ptrdiff_t)(glow_get_proc("glSampleCoverage")));
  if (glow_glSampleCoverage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSampleCoverage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSampleCoverage\n");
#endif
  }
  glow_glSampleCoverage(value, invert);
}
PFNGLSAMPLECOVERAGEPROC glow_glSampleCoverage = glow_lazy_glSampleCoverage;
static void glow_lazy_glVertexAttribL4dv(GLuint index, const GLdouble *v) {
  glow_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribL4dv")));
  if (glow_glVertexAttribL4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL4dv\n");
#endif
  }
  glow_glVertexAttribL4dv(index, v);
}
PFNGLVERTEXATTRIBL4DVPROC glow_glVertexAttribL4dv = glow_lazy_glVertexAttribL4dv;
static void glow_lazy_glNormal3iv(const GLint *v) {
  glow_glNormal3iv = (PFNGLNORMAL3IVPROC)((ptrdiff_t)(glow_get_proc("glNormal3iv")));
  if (glow_glNormal3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3iv\n");
#endif
  }
  glow_glNormal3iv(v);
}
PFNGLNORMAL3IVPROC glow_glNormal3iv = glow_lazy_glNormal3iv;
static GLboolean glow_lazy_glIsSampler(GLuint sampler) {
  glow_glIsSampler = (PFNGLISSAMPLERPROC)((ptrdiff_t)(glow_get_proc("glIsSampler")));
  if (glow_glIsSampler == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsSampler\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsSampler\n");
#endif
  }
  return glow_glIsSampler(sampler);
}
PFNGLISSAMPLERPROC glow_glIsSampler = glow_lazy_glIsSampler;
static void glow_lazy_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {
  glow_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)((ptrdiff_t)(glow_get_proc("glGetProgramPipelineiv")));
  if (glow_glGetProgramPipelineiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramPipelineiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramPipelineiv\n");
#endif
  }
  glow_glGetProgramPipelineiv(pipeline, pname, params);
}
PFNGLGETPROGRAMPIPELINEIVPROC glow_glGetProgramPipelineiv = glow_lazy_glGetProgramPipelineiv;
static void glow_lazy_glInvalidateTexImage(GLuint texture, GLint level) {
  glow_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)((ptrdiff_t)(glow_get_proc("glInvalidateTexImage")));
  if (glow_glInvalidateTexImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateTexImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateTexImage\n");
#endif
  }
  glow_glInvalidateTexImage(texture, level);
}
PFNGLINVALIDATETEXIMAGEPROC glow_glInvalidateTexImage = glow_lazy_glInvalidateTexImage;
static void glow_lazy_glUniform1ui(GLint location, GLuint v0) {
  glow_glUniform1ui = (PFNGLUNIFORM1UIPROC)((ptrdiff_t)(glow_get_proc("glUniform1ui")));
  if (glow_glUniform1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1ui\n");
#endif
  }
  glow_glUniform1ui(location, v0);
}
PFNGLUNIFORM1UIPROC glow_glUniform1ui = glow_lazy_glUniform1ui;
static void glow_lazy_glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
  glow_glBufferData = (PFNGLBUFFERDATAPROC)((ptrdiff_t)(glow_get_proc("glBufferData")));
  if (glow_glBufferData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBufferData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBufferData\n");
#endif
  }
  glow_glBufferData(target, size, data, usage);
}
PFNGLBUFFERDATAPROC glow_glBufferData = glow_lazy_glBufferData;
static void glow_lazy_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix4fv")));
  if (glow_glUniformMatrix4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4fv\n");
#endif
  }
  glow_glUniformMatrix4fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4FVPROC glow_glUniformMatrix4fv = glow_lazy_glUniformMatrix4fv;
static void glow_lazy_glDrawArraysIndirect(GLenum mode, const void *indirect) {
  glow_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)((ptrdiff_t)(glow_get_proc("glDrawArraysIndirect")));
  if (glow_glDrawArraysIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArraysIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArraysIndirect\n");
#endif
  }
  glow_glDrawArraysIndirect(mode, indirect);
}
PFNGLDRAWARRAYSINDIRECTPROC glow_glDrawArraysIndirect = glow_lazy_glDrawArraysIndirect;
static void glow_lazy_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  glow_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform1dv")));
  if (glow_glProgramUniform1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1dv\n");
#endif
  }
  glow_glProgramUniform1dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1DVPROC glow_glProgramUniform1dv = glow_lazy_glProgramUniform1dv;
static void glow_lazy_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  glow_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)((ptrdiff_t)(glow_get_proc("glDrawElementsInstancedBaseVertexBaseInstance")));
  if (glow_glDrawElementsInstancedBaseVertexBaseInstance == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstancedBaseVertexBaseInstance\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstancedBaseVertexBaseInstance\n");
#endif
  }
  glow_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glow_glDrawElementsInstancedBaseVertexBaseInstance = glow_lazy_glDrawElementsInstancedBaseVertexBaseInstance;
static void glow_lazy_glLoadMatrixd(const GLdouble *m) {
  glow_glLoadMatrixd = (PFNGLLOADMATRIXDPROC)((ptrdiff_t)(glow_get_proc("glLoadMatrixd")));
  if (glow_glLoadMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadMatrixd\n");
#endif
  }
  glow_glLoadMatrixd(m);
}
PFNGLLOADMATRIXDPROC glow_glLoadMatrixd = glow_lazy_glLoadMatrixd;
static void glow_lazy_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
  glow_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)((ptrdiff_t)(glow_get_proc("glCompressedTexSubImage2D")));
  if (glow_glCompressedTexSubImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexSubImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexSubImage2D\n");
#endif
  }
  glow_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glow_glCompressedTexSubImage2D = glow_lazy_glCompressedTexSubImage2D;
static void glow_lazy_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix4x2fv")));
  if (glow_glUniformMatrix4x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x2fv\n");
#endif
  }
  glow_glUniformMatrix4x2fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X2FVPROC glow_glUniformMatrix4x2fv = glow_lazy_glUniformMatrix4x2fv;
static void glow_lazy_glBindFramebuffer(GLenum target, GLuint framebuffer) {
  glow_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)((ptrdiff_t)(glow_get_proc("glBindFramebuffer")));
  if (glow_glBindFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindFramebuffer\n");
#endif
  }
  glow_glBindFramebuffer(target, framebuffer);
}
PFNGLBINDFRAMEBUFFERPROC glow_glBindFramebuffer = glow_lazy_glBindFramebuffer;
static void glow_lazy_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  glow_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)((ptrdiff_t)(glow_get_proc("glFramebufferTextureLayer")));
  if (glow_glFramebufferTextureLayer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTextureLayer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTextureLayer\n");
#endif
  }
  glow_glFramebufferTextureLayer(target, attachment, texture, level, layer);
}
PFNGLFRAMEBUFFERTEXTURELAYERPROC glow_glFramebufferTextureLayer = glow_lazy_glFramebufferTextureLayer;
static void glow_lazy_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {
  glow_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)((ptrdiff_t)(glow_get_proc("glGetActiveSubroutineUniformiv")));
  if (glow_glGetActiveSubroutineUniformiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveSubroutineUniformiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveSubroutineUniformiv\n");
#endif
  }
  glow_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glow_glGetActiveSubroutineUniformiv = glow_lazy_glGetActiveSubroutineUniformiv;
static void glow_lazy_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  glow_glRasterPos4d = (PFNGLRASTERPOS4DPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4d")));
  if (glow_glRasterPos4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4d\n");
#endif
  }
  glow_glRasterPos4d(x, y, z, w);
}
PFNGLRASTERPOS4DPROC glow_glRasterPos4d = glow_lazy_glRasterPos4d;
static void glow_lazy_glWindowPos2dv(const GLdouble *v) {
  glow_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)((ptrdiff_t)(glow_get_proc("glWindowPos2dv")));
  if (glow_glWindowPos2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2dv\n");
#endif
  }
  glow_glWindowPos2dv(v);
}
PFNGLWINDOWPOS2DVPROC glow_glWindowPos2dv = glow_lazy_glWindowPos2dv;
static void glow_lazy_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  glow_glColor3b = (PFNGLCOLOR3BPROC)((ptrdiff_t)(glow_get_proc("glColor3b")));
  if (glow_glColor3b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3b\n");
#endif
  }
  glow_glColor3b(red, green, blue);
}
PFNGLCOLOR3BPROC glow_glColor3b = glow_lazy_glColor3b;
static void glow_lazy_glMultMatrixd(const GLdouble *m) {
  glow_glMultMatrixd = (PFNGLMULTMATRIXDPROC)((ptrdiff_t)(glow_get_proc("glMultMatrixd")));
  if (glow_glMultMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultMatrixd\n");
#endif
  }
  glow_glMultMatrixd(m);
}
PFNGLMULTMATRIXDPROC glow_glMultMatrixd = glow_lazy_glMultMatrixd;
static void glow_lazy_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
  glow_glTexEnvf = (PFNGLTEXENVFPROC)((ptrdiff_t)(glow_get_proc("glTexEnvf")));
  if (glow_glTexEnvf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnvf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnvf\n");
#endif
  }
  glow_glTexEnvf(target, pname, param);
}
PFNGLTEXENVFPROC glow_glTexEnvf = glow_lazy_glTexEnvf;
static void glow_lazy_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  glow_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib2d")));
  if (glow_glVertexAttrib2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2d\n");
#endif
  }
  glow_glVertexAttrib2d(index, x, y);
}
PFNGLVERTEXATTRIB2DPROC glow_glVertexAttrib2d = glow_lazy_glVertexAttrib2d;
static void glow_lazy_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
  glow_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoordP2ui")));
  if (glow_glMultiTexCoordP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP2ui\n");
#endif
  }
  glow_glMultiTexCoordP2ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP2UIPROC glow_glMultiTexCoordP2ui = glow_lazy_glMultiTexCoordP2ui;
static void glow_lazy_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  glow_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)((ptrdiff_t)(glow_get_proc("glProgramUniform3f")));
  if (glow_glProgramUniform3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3f\n");
#endif
  }
  glow_glProgramUniform3f(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3FPROC glow_glProgramUniform3f = glow_lazy_glProgramUniform3f;
static void glow_lazy_glMateriali(GLenum face, GLenum pname, GLint param) {
  glow_glMateriali = (PFNGLMATERIALIPROC)((ptrdiff_t)(glow_get_proc("glMateriali")));
  if (glow_glMateriali == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMateriali\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMateriali\n");
#endif
  }
  glow_glMateriali(face, pname, param);
}
PFNGLMATERIALIPROC glow_glMateriali = glow_lazy_glMateriali;
static void glow_lazy_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
  glow_glMapGrid1f = (PFNGLMAPGRID1FPROC)((ptrdiff_t)(glow_get_proc("glMapGrid1f")));
  if (glow_glMapGrid1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid1f\n");
#endif
  }
  glow_glMapGrid1f(un, u1, u2);
}
PFNGLMAPGRID1FPROC glow_glMapGrid1f = glow_lazy_glMapGrid1f;
static void glow_lazy_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
  glow_glMapGrid2d = (PFNGLMAPGRID2DPROC)((ptrdiff_t)(glow_get_proc("glMapGrid2d")));
  if (glow_glMapGrid2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid2d\n");
#endif
  }
  glow_glMapGrid2d(un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2DPROC glow_glMapGrid2d = glow_lazy_glMapGrid2d;
static void glow_lazy_glGetUniformuiv(GLuint program, GLint location, GLuint *params) {
  glow_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)((ptrdiff_t)(glow_get_proc("glGetUniformuiv")));
  if (glow_glGetUniformuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformuiv\n");
#endif
  }
  glow_glGetUniformuiv(program, location, params);
}
PFNGLGETUNIFORMUIVPROC glow_glGetUniformuiv = glow_lazy_glGetUniformuiv;
static void glow_lazy_glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {
  glow_glUniform3dv = (PFNGLUNIFORM3DVPROC)((ptrdiff_t)(glow_get_proc("glUniform3dv")));
  if (glow_glUniform3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3dv\n");
#endif
  }
  glow_glUniform3dv(location, count, value);
}
PFNGLUNIFORM3DVPROC glow_glUniform3dv = glow_lazy_glUniform3dv;
static void glow_lazy_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  glow_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)((ptrdiff_t)(glow_get_proc("glUseProgramStages")));
  if (glow_glUseProgramStages == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUseProgramStages\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUseProgramStages\n");
#endif
  }
  glow_glUseProgramStages(pipeline, stages, program);
}
PFNGLUSEPROGRAMSTAGESPROC glow_glUseProgramStages = glow_lazy_glUseProgramStages;
static void glow_lazy_glRasterPos4iv(const GLint *v) {
  glow_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4iv")));
  if (glow_glRasterPos4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4iv\n");
#endif
  }
  glow_glRasterPos4iv(v);
}
PFNGLRASTERPOS4IVPROC glow_glRasterPos4iv = glow_lazy_glRasterPos4iv;
static void glow_lazy_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  glow_glRasterPos4s = (PFNGLRASTERPOS4SPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4s")));
  if (glow_glRasterPos4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4s\n");
#endif
  }
  glow_glRasterPos4s(x, y, z, w);
}
PFNGLRASTERPOS4SPROC glow_glRasterPos4s = glow_lazy_glRasterPos4s;
static void glow_lazy_glRasterPos3fv(const GLfloat *v) {
  glow_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos3fv")));
  if (glow_glRasterPos3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3fv\n");
#endif
  }
  glow_glRasterPos3fv(v);
}
PFNGLRASTERPOS3FVPROC glow_glRasterPos3fv = glow_lazy_glRasterPos3fv;
static void glow_lazy_glNormal3fv(const GLfloat *v) {
  glow_glNormal3fv = (PFNGLNORMAL3FVPROC)((ptrdiff_t)(glow_get_proc("glNormal3fv")));
  if (glow_glNormal3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3fv\n");
#endif
  }
  glow_glNormal3fv(v);
}
PFNGLNORMAL3FVPROC glow_glNormal3fv = glow_lazy_glNormal3fv;
static void glow_lazy_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  glow_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)((ptrdiff_t)(glow_get_proc("glGetShaderInfoLog")));
  if (glow_glGetShaderInfoLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderInfoLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderInfoLog\n");
#endif
  }
  glow_glGetShaderInfoLog(shader, bufSize, length, infoLog);
}
PFNGLGETSHADERINFOLOGPROC glow_glGetShaderInfoLog = glow_lazy_glGetShaderInfoLog;
static void glow_lazy_glVertexAttrib1f(GLuint index, GLfloat x) {
  glow_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib1f")));
  if (glow_glVertexAttrib1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1f\n");
#endif
  }
  glow_glVertexAttrib1f(index, x);
}
PFNGLVERTEXATTRIB1FPROC glow_glVertexAttrib1f = glow_lazy_glVertexAttrib1f;
static void glow_lazy_glDisablei(GLenum target, GLuint index) {
  glow_glDisablei = (PFNGLDISABLEIPROC)((ptrdiff_t)(glow_get_proc("glDisablei")));
  if (glow_glDisablei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisablei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisablei\n");
#endif
  }
  glow_glDisablei(target, index);
}
PFNGLDISABLEIPROC glow_glDisablei = glow_lazy_glDisablei;
static void glow_lazy_glVertexAttribI4usv(GLuint index, const GLushort *v) {
  glow_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribI4usv")));
  if (glow_glVertexAttribI4usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4usv\n");
#endif
  }
  glow_glVertexAttribI4usv(index, v);
}
PFNGLVERTEXATTRIBI4USVPROC glow_glVertexAttribI4usv = glow_lazy_glVertexAttribI4usv;
static void glow_lazy_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {
  glow_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)((ptrdiff_t)(glow_get_proc("glDeleteTransformFeedbacks")));
  if (glow_glDeleteTransformFeedbacks == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteTransformFeedbacks\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteTransformFeedbacks\n");
#endif
  }
  glow_glDeleteTransformFeedbacks(n, ids);
}
PFNGLDELETETRANSFORMFEEDBACKSPROC glow_glDeleteTransformFeedbacks = glow_lazy_glDeleteTransformFeedbacks;
static void glow_lazy_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  glow_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)((ptrdiff_t)(glow_get_proc("glDrawArraysInstancedBaseInstance")));
  if (glow_glDrawArraysInstancedBaseInstance == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArraysInstancedBaseInstance\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArraysInstancedBaseInstance\n");
#endif
  }
  glow_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glow_glDrawArraysInstancedBaseInstance = glow_lazy_glDrawArraysInstancedBaseInstance;
static void glow_lazy_glColor4usv(const GLushort *v) {
  glow_glColor4usv = (PFNGLCOLOR4USVPROC)((ptrdiff_t)(glow_get_proc("glColor4usv")));
  if (glow_glColor4usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4usv\n");
#endif
  }
  glow_glColor4usv(v);
}
PFNGLCOLOR4USVPROC glow_glColor4usv = glow_lazy_glColor4usv;
static void glow_lazy_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  glow_glColor3ub = (PFNGLCOLOR3UBPROC)((ptrdiff_t)(glow_get_proc("glColor3ub")));
  if (glow_glColor3ub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3ub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3ub\n");
#endif
  }
  glow_glColor3ub(red, green, blue);
}
PFNGLCOLOR3UBPROC glow_glColor3ub = glow_lazy_glColor3ub;
static void glow_lazy_glFogi(GLenum pname, GLint param) {
  glow_glFogi = (PFNGLFOGIPROC)((ptrdiff_t)(glow_get_proc("glFogi")));
  if (glow_glFogi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogi\n");
#endif
  }
  glow_glFogi(pname, param);
}
PFNGLFOGIPROC glow_glFogi = glow_lazy_glFogi;
static void glow_lazy_glAccum(GLenum op, GLfloat value) {
  glow_glAccum = (PFNGLACCUMPROC)((ptrdiff_t)(glow_get_proc("glAccum")));
  if (glow_glAccum == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAccum\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAccum\n");
#endif
  }
  glow_glAccum(op, value);
}
PFNGLACCUMPROC glow_glAccum = glow_lazy_glAccum;
static void glow_lazy_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)((ptrdiff_t)(glow_get_proc("glUniformMatrix2x3fv")));
  if (glow_glUniformMatrix2x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x3fv\n");
#endif
  }
  glow_glUniformMatrix2x3fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X3FVPROC glow_glUniformMatrix2x3fv = glow_lazy_glUniformMatrix2x3fv;
static void glow_lazy_glTexCoordP2uiv(GLenum type, const GLuint *coords) {
  glow_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP2uiv")));
  if (glow_glTexCoordP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP2uiv\n");
#endif
  }
  glow_glTexCoordP2uiv(type, coords);
}
PFNGLTEXCOORDP2UIVPROC glow_glTexCoordP2uiv = glow_lazy_glTexCoordP2uiv;
static void glow_lazy_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
  glow_glTexImage2D = (PFNGLTEXIMAGE2DPROC)((ptrdiff_t)(glow_get_proc("glTexImage2D")));
  if (glow_glTexImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage2D\n");
#endif
  }
  glow_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}
PFNGLTEXIMAGE2DPROC glow_glTexImage2D = glow_lazy_glTexImage2D;
static void glow_lazy_glMatrixMode(GLenum mode) {
  glow_glMatrixMode = (PFNGLMATRIXMODEPROC)((ptrdiff_t)(glow_get_proc("glMatrixMode")));
  if (glow_glMatrixMode == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMatrixMode\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMatrixMode\n");
#endif
  }
  glow_glMatrixMode(mode);
}
PFNGLMATRIXMODEPROC glow_glMatrixMode = glow_lazy_glMatrixMode;
static void glow_lazy_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
  glow_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)((ptrdiff_t)(glow_get_proc("glTexSubImage2D")));
  if (glow_glTexSubImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexSubImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexSubImage2D\n");
#endif
  }
  glow_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXSUBIMAGE2DPROC glow_glTexSubImage2D = glow_lazy_glTexSubImage2D;
static void glow_lazy_glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) {
  glow_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)((ptrdiff_t)(glow_get_proc("glFogCoordPointer")));
  if (glow_glFogCoordPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordPointer\n");
#endif
  }
  glow_glFogCoordPointer(type, stride, pointer);
}
PFNGLFOGCOORDPOINTERPROC glow_glFogCoordPointer = glow_lazy_glFogCoordPointer;
static GLboolean glow_lazy_glUnmapBuffer(GLenum target) {
  glow_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)((ptrdiff_t)(glow_get_proc("glUnmapBuffer")));
  if (glow_glUnmapBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUnmapBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUnmapBuffer\n");
#endif
  }
  return glow_glUnmapBuffer(target);
}
PFNGLUNMAPBUFFERPROC glow_glUnmapBuffer = glow_lazy_glUnmapBuffer;
static void glow_lazy_glTexCoordP2ui(GLenum type, GLuint coords) {
  glow_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)((ptrdiff_t)(glow_get_proc("glTexCoordP2ui")));
  if (glow_glTexCoordP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP2ui\n");
#endif
  }
  glow_glTexCoordP2ui(type, coords);
}
PFNGLTEXCOORDP2UIPROC glow_glTexCoordP2ui = glow_lazy_glTexCoordP2ui;
static void glow_lazy_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  glow_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)((ptrdiff_t)(glow_get_proc("glTexStorage1D")));
  if (glow_glTexStorage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage1D\n");
#endif
  }
  glow_glTexStorage1D(target, levels, internalformat, width);
}
PFNGLTEXSTORAGE1DPROC glow_glTexStorage1D = glow_lazy_glTexStorage1D;
static void glow_lazy_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {
  glow_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)((ptrdiff_t)(glow_get_proc("glGetProgramResourceiv")));
  if (glow_glGetProgramResourceiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceiv\n");
#endif
  }
  glow_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}
PFNGLGETPROGRAMRESOURCEIVPROC glow_glGetProgramResourceiv = glow_lazy_glGetProgramResourceiv;
static void glow_lazy_glColor3i(GLint red, GLint green, GLint blue) {
  glow_glColor3i = (PFNGLCOLOR3IPROC)((ptrdiff_t)(glow_get_proc("glColor3i")));
  if (glow_glColor3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3i\n");
#endif
  }
  glow_glColor3i(red, green, blue);
}
PFNGLCOLOR3IPROC glow_glColor3i = glow_lazy_glColor3i;
static void glow_lazy_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
  glow_glMapGrid1d = (PFNGLMAPGRID1DPROC)((ptrdiff_t)(glow_get_proc("glMapGrid1d")));
  if (glow_glMapGrid1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid1d\n");
#endif
  }
  glow_glMapGrid1d(un, u1, u2);
}
PFNGLMAPGRID1DPROC glow_glMapGrid1d = glow_lazy_glMapGrid1d;
static void glow_lazy_glBindBuffer(GLenum target, GLuint buffer) {
  glow_glBindBuffer = (PFNGLBINDBUFFERPROC)((ptrdiff_t)(glow_get_proc("glBindBuffer")));
  if (glow_glBindBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindBuffer\n");
#endif
  }
  glow_glBindBuffer(target, buffer);
}
PFNGLBINDBUFFERPROC glow_glBindBuffer = glow_lazy_glBindBuffer;
static void glow_lazy_glUniform2iv(GLint location, GLsizei count, const GLint *value) {
  glow_glUniform2iv = (PFNGLUNIFORM2IVPROC)((ptrdiff_t)(glow_get_proc("glUniform2iv")));
  if (glow_glUniform2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2iv\n");
#endif
  }
  glow_glUniform2iv(location, count, value);
}
PFNGLUNIFORM2IVPROC glow_glUniform2iv = glow_lazy_glUniform2iv;
static void glow_lazy_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {
  glow_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)((ptrdiff_t)(glow_get_proc("glSamplerParameterIiv")));
  if (glow_glSamplerParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterIiv\n");
#endif
  }
  glow_glSamplerParameterIiv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIIVPROC glow_glSamplerParameterIiv = glow_lazy_glSamplerParameterIiv;
static void glow_lazy_glVertex3i(GLint x, GLint y, GLint z) {
  glow_glVertex3i = (PFNGLVERTEX3IPROC)((ptrdiff_t)(glow_get_proc("glVertex3i")));
  if (glow_glVertex3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3i\n");
#endif
  }
  glow_glVertex3i(x, y, z);
}
PFNGLVERTEX3IPROC glow_glVertex3i = glow_lazy_glVertex3i;
static void glow_lazy_glVertex4fv(const GLfloat *v) {
  glow_glVertex4fv = (PFNGLVERTEX4FVPROC)((ptrdiff_t)(glow_get_proc("glVertex4fv")));
  if (glow_glVertex4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4fv\n");
#endif
  }
  glow_glVertex4fv(v);
}
PFNGLVERTEX4FVPROC glow_glVertex4fv = glow_lazy_glVertex4fv;
static void glow_lazy_glLoadMatrixf(const GLfloat *m) {
  glow_glLoadMatrixf = (PFNGLLOADMATRIXFPROC)((ptrdiff_t)(glow_get_proc("glLoadMatrixf")));
  if (glow_glLoadMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadMatrixf\n");
#endif
  }
  glow_glLoadMatrixf(m);
}
PFNGLLOADMATRIXFPROC glow_glLoadMatrixf = glow_lazy_glLoadMatrixf;
static void glow_lazy_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  glow_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord4s")));
  if (glow_glMultiTexCoord4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4s\n");
#endif
  }
  glow_glMultiTexCoord4s(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4SPROC glow_glMultiTexCoord4s = glow_lazy_glMultiTexCoord4s;
static void glow_lazy_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  glow_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)((ptrdiff_t)(glow_get_proc("glVertexAttrib3f")));
  if (glow_glVertexAttrib3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3f\n");
#endif
  }
  glow_glVertexAttrib3f(index, x, y, z);
}
PFNGLVERTEXATTRIB3FPROC glow_glVertexAttrib3f = glow_lazy_glVertexAttrib3f;
static void glow_lazy_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {
  glow_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)((ptrdiff_t)(glow_get_proc("glGetInteger64i_v")));
  if (glow_glGetInteger64i_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInteger64i_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInteger64i_v\n");
#endif
  }
  glow_glGetInteger64i_v(target, index, data);
}
PFNGLGETINTEGER64I_VPROC glow_glGetInteger64i_v = glow_lazy_glGetInteger64i_v;
static GLubyte glow_lazy_glGetString(GLenum name) {
  glow_glGetString = (PFNGLGETSTRINGPROC)((ptrdiff_t)(glow_get_proc("glGetString")));
  if (glow_glGetString == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetString\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetString\n");
#endif
  }
  return glow_glGetString(name);
}
PFNGLGETSTRINGPROC glow_glGetString = glow_lazy_glGetString;
static void glow_lazy_glEndQuery(GLenum target) {
  glow_glEndQuery = (PFNGLENDQUERYPROC)((ptrdiff_t)(glow_get_proc("glEndQuery")));
  if (glow_glEndQuery == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndQuery\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndQuery\n");
#endif
  }
  glow_glEndQuery(target);
}
PFNGLENDQUERYPROC glow_glEndQuery = glow_lazy_glEndQuery;
static void glow_lazy_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  glow_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)((ptrdiff_t)(glow_get_proc("glRenderbufferStorage")));
  if (glow_glRenderbufferStorage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRenderbufferStorage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRenderbufferStorage\n");
#endif
  }
  glow_glRenderbufferStorage(target, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEPROC glow_glRenderbufferStorage = glow_lazy_glRenderbufferStorage;
static void glow_lazy_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  glow_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)((ptrdiff_t)(glow_get_proc("glGetProgramResourceName")));
  if (glow_glGetProgramResourceName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceName\n");
#endif
  }
  glow_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}
PFNGLGETPROGRAMRESOURCENAMEPROC glow_glGetProgramResourceName = glow_lazy_glGetProgramResourceName;
static void glow_lazy_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
  glow_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord2i")));
  if (glow_glMultiTexCoord2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2i\n");
#endif
  }
  glow_glMultiTexCoord2i(target, s, t);
}
PFNGLMULTITEXCOORD2IPROC glow_glMultiTexCoord2i = glow_lazy_glMultiTexCoord2i;
static void glow_lazy_glTexCoord1d(GLdouble s) {
  glow_glTexCoord1d = (PFNGLTEXCOORD1DPROC)((ptrdiff_t)(glow_get_proc("glTexCoord1d")));
  if (glow_glTexCoord1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1d\n");
#endif
  }
  glow_glTexCoord1d(s);
}
PFNGLTEXCOORD1DPROC glow_glTexCoord1d = glow_lazy_glTexCoord1d;
static void glow_lazy_glTexCoord2d(GLdouble s, GLdouble t) {
  glow_glTexCoord2d = (PFNGLTEXCOORD2DPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2d")));
  if (glow_glTexCoord2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2d\n");
#endif
  }
  glow_glTexCoord2d(s, t);
}
PFNGLTEXCOORD2DPROC glow_glTexCoord2d = glow_lazy_glTexCoord2d;
static void glow_lazy_glPixelTransferf(GLenum pname, GLfloat param) {
  glow_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)((ptrdiff_t)(glow_get_proc("glPixelTransferf")));
  if (glow_glPixelTransferf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelTransferf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelTransferf\n");
#endif
  }
  glow_glPixelTransferf(pname, param);
}
PFNGLPIXELTRANSFERFPROC glow_glPixelTransferf = glow_lazy_glPixelTransferf;
static void glow_lazy_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {
  glow_glPixelMapusv = (PFNGLPIXELMAPUSVPROC)((ptrdiff_t)(glow_get_proc("glPixelMapusv")));
  if (glow_glPixelMapusv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelMapusv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelMapusv\n");
#endif
  }
  glow_glPixelMapusv(map, mapsize, values);
}
PFNGLPIXELMAPUSVPROC glow_glPixelMapusv = glow_lazy_glPixelMapusv;
static void glow_lazy_glRasterPos2i(GLint x, GLint y) {
  glow_glRasterPos2i = (PFNGLRASTERPOS2IPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2i")));
  if (glow_glRasterPos2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2i\n");
#endif
  }
  glow_glRasterPos2i(x, y);
}
PFNGLRASTERPOS2IPROC glow_glRasterPos2i = glow_lazy_glRasterPos2i;
static void glow_lazy_glRasterPos2d(GLdouble x, GLdouble y) {
  glow_glRasterPos2d = (PFNGLRASTERPOS2DPROC)((ptrdiff_t)(glow_get_proc("glRasterPos2d")));
  if (glow_glRasterPos2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2d\n");
#endif
  }
  glow_glRasterPos2d(x, y);
}
PFNGLRASTERPOS2DPROC glow_glRasterPos2d = glow_lazy_glRasterPos2d;
static void glow_lazy_glPolygonStipple(const GLubyte *mask) {
  glow_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)((ptrdiff_t)(glow_get_proc("glPolygonStipple")));
  if (glow_glPolygonStipple == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPolygonStipple\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPolygonStipple\n");
#endif
  }
  glow_glPolygonStipple(mask);
}
PFNGLPOLYGONSTIPPLEPROC glow_glPolygonStipple = glow_lazy_glPolygonStipple;
static void glow_lazy_glGetClipPlane(GLenum plane, GLdouble *equation) {
  glow_glGetClipPlane = (PFNGLGETCLIPPLANEPROC)((ptrdiff_t)(glow_get_proc("glGetClipPlane")));
  if (glow_glGetClipPlane == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetClipPlane\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetClipPlane\n");
#endif
  }
  glow_glGetClipPlane(plane, equation);
}
PFNGLGETCLIPPLANEPROC glow_glGetClipPlane = glow_lazy_glGetClipPlane;
static void glow_lazy_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
  glow_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)((ptrdiff_t)(glow_get_proc("glGetBufferSubData")));
  if (glow_glGetBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferSubData\n");
#endif
  }
  glow_glGetBufferSubData(target, offset, size, data);
}
PFNGLGETBUFFERSUBDATAPROC glow_glGetBufferSubData = glow_lazy_glGetBufferSubData;
static void glow_lazy_glPatchParameterfv(GLenum pname, const GLfloat *values) {
  glow_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glPatchParameterfv")));
  if (glow_glPatchParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPatchParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPatchParameterfv\n");
#endif
  }
  glow_glPatchParameterfv(pname, values);
}
PFNGLPATCHPARAMETERFVPROC glow_glPatchParameterfv = glow_lazy_glPatchParameterfv;
static void glow_lazy_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  glow_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribIFormat")));
  if (glow_glVertexAttribIFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribIFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribIFormat\n");
#endif
  }
  glow_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}
PFNGLVERTEXATTRIBIFORMATPROC glow_glVertexAttribIFormat = glow_lazy_glVertexAttribIFormat;
static void glow_lazy_glDisable(GLenum cap) {
  glow_glDisable = (PFNGLDISABLEPROC)((ptrdiff_t)(glow_get_proc("glDisable")));
  if (glow_glDisable == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisable\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisable\n");
#endif
  }
  glow_glDisable(cap);
}
PFNGLDISABLEPROC glow_glDisable = glow_lazy_glDisable;
static void glow_lazy_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {
  glow_glTexGendv = (PFNGLTEXGENDVPROC)((ptrdiff_t)(glow_get_proc("glTexGendv")));
  if (glow_glTexGendv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGendv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGendv\n");
#endif
  }
  glow_glTexGendv(coord, pname, params);
}
PFNGLTEXGENDVPROC glow_glTexGendv = glow_lazy_glTexGendv;
static void glow_lazy_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
  glow_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)((ptrdiff_t)(glow_get_proc("glTransformFeedbackVaryings")));
  if (glow_glTransformFeedbackVaryings == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTransformFeedbackVaryings\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTransformFeedbackVaryings\n");
#endif
  }
  glow_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glow_glTransformFeedbackVaryings = glow_lazy_glTransformFeedbackVaryings;
static void glow_lazy_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {
  glow_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)((ptrdiff_t)(glow_get_proc("glGetVertexAttribIuiv")));
  if (glow_glGetVertexAttribIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribIuiv\n");
#endif
  }
  glow_glGetVertexAttribIuiv(index, pname, params);
}
PFNGLGETVERTEXATTRIBIUIVPROC glow_glGetVertexAttribIuiv = glow_lazy_glGetVertexAttribIuiv;
static void glow_lazy_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {
  glow_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)((ptrdiff_t)(glow_get_proc("glBindFragDataLocation")));
  if (glow_glBindFragDataLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindFragDataLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindFragDataLocation\n");
#endif
  }
  glow_glBindFragDataLocation(program, color, name);
}
PFNGLBINDFRAGDATALOCATIONPROC glow_glBindFragDataLocation = glow_lazy_glBindFragDataLocation;
static void glow_lazy_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  glow_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)((ptrdiff_t)(glow_get_proc("glRenderbufferStorageMultisample")));
  if (glow_glRenderbufferStorageMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRenderbufferStorageMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRenderbufferStorageMultisample\n");
#endif
  }
  glow_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glow_glRenderbufferStorageMultisample = glow_lazy_glRenderbufferStorageMultisample;
static void glow_lazy_glColorP3uiv(GLenum type, const GLuint *color) {
  glow_glColorP3uiv = (PFNGLCOLORP3UIVPROC)((ptrdiff_t)(glow_get_proc("glColorP3uiv")));
  if (glow_glColorP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP3uiv\n");
#endif
  }
  glow_glColorP3uiv(type, color);
}
PFNGLCOLORP3UIVPROC glow_glColorP3uiv = glow_lazy_glColorP3uiv;
static void glow_lazy_glEnable(GLenum cap) {
  glow_glEnable = (PFNGLENABLEPROC)((ptrdiff_t)(glow_get_proc("glEnable")));
  if (glow_glEnable == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnable\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnable\n");
#endif
  }
  glow_glEnable(cap);
}
PFNGLENABLEPROC glow_glEnable = glow_lazy_glEnable;
static void glow_lazy_glTexGeni(GLenum coord, GLenum pname, GLint param) {
  glow_glTexGeni = (PFNGLTEXGENIPROC)((ptrdiff_t)(glow_get_proc("glTexGeni")));
  if (glow_glTexGeni == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGeni\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGeni\n");
#endif
  }
  glow_glTexGeni(coord, pname, param);
}
PFNGLTEXGENIPROC glow_glTexGeni = glow_lazy_glTexGeni;
static void glow_lazy_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  glow_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord3f")));
  if (glow_glMultiTexCoord3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3f\n");
#endif
  }
  glow_glMultiTexCoord3f(target, s, t, r);
}
PFNGLMULTITEXCOORD3FPROC glow_glMultiTexCoord3f = glow_lazy_glMultiTexCoord3f;
static void glow_lazy_glPointParameteri(GLenum pname, GLint param) {
  glow_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)((ptrdiff_t)(glow_get_proc("glPointParameteri")));
  if (glow_glPointParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameteri\n");
#endif
  }
  glow_glPointParameteri(pname, param);
}
PFNGLPOINTPARAMETERIPROC glow_glPointParameteri = glow_lazy_glPointParameteri;
static void glow_lazy_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  glow_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)((ptrdiff_t)(glow_get_proc("glSamplerParameteri")));
  if (glow_glSamplerParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameteri\n");
#endif
  }
  glow_glSamplerParameteri(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIPROC glow_glSamplerParameteri = glow_lazy_glSamplerParameteri;
static void glow_lazy_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  glow_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)((ptrdiff_t)(glow_get_proc("glInvalidateSubFramebuffer")));
  if (glow_glInvalidateSubFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateSubFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateSubFramebuffer\n");
#endif
  }
  glow_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}
PFNGLINVALIDATESUBFRAMEBUFFERPROC glow_glInvalidateSubFramebuffer = glow_lazy_glInvalidateSubFramebuffer;
static void glow_lazy_glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {
  glow_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)((ptrdiff_t)(glow_get_proc("glMultiDrawArraysIndirect")));
  if (glow_glMultiDrawArraysIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawArraysIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawArraysIndirect\n");
#endif
  }
  glow_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}
PFNGLMULTIDRAWARRAYSINDIRECTPROC glow_glMultiDrawArraysIndirect = glow_lazy_glMultiDrawArraysIndirect;
static void glow_lazy_glTexCoord3dv(const GLdouble *v) {
  glow_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord3dv")));
  if (glow_glTexCoord3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3dv\n");
#endif
  }
  glow_glTexCoord3dv(v);
}
PFNGLTEXCOORD3DVPROC glow_glTexCoord3dv = glow_lazy_glTexCoord3dv;
static void glow_lazy_glTexCoord2sv(const GLshort *v) {
  glow_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)((ptrdiff_t)(glow_get_proc("glTexCoord2sv")));
  if (glow_glTexCoord2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2sv\n");
#endif
  }
  glow_glTexCoord2sv(v);
}
PFNGLTEXCOORD2SVPROC glow_glTexCoord2sv = glow_lazy_glTexCoord2sv;
static void glow_lazy_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  glow_glGetSynciv = (PFNGLGETSYNCIVPROC)((ptrdiff_t)(glow_get_proc("glGetSynciv")));
  if (glow_glGetSynciv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSynciv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSynciv\n");
#endif
  }
  glow_glGetSynciv(sync, pname, bufSize, length, values);
}
PFNGLGETSYNCIVPROC glow_glGetSynciv = glow_lazy_glGetSynciv;
static void glow_lazy_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
  glow_glUniform3d = (PFNGLUNIFORM3DPROC)((ptrdiff_t)(glow_get_proc("glUniform3d")));
  if (glow_glUniform3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3d\n");
#endif
  }
  glow_glUniform3d(location, x, y, z);
}
PFNGLUNIFORM3DPROC glow_glUniform3d = glow_lazy_glUniform3d;
static void glow_lazy_glSecondaryColor3i(GLint red, GLint green, GLint blue) {
  glow_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3i")));
  if (glow_glSecondaryColor3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3i\n");
#endif
  }
  glow_glSecondaryColor3i(red, green, blue);
}
PFNGLSECONDARYCOLOR3IPROC glow_glSecondaryColor3i = glow_lazy_glSecondaryColor3i;
static void * glow_lazy_glMapBuffer(GLenum target, GLenum access) {
  glow_glMapBuffer = (PFNGLMAPBUFFERPROC)((ptrdiff_t)(glow_get_proc("glMapBuffer")));
  if (glow_glMapBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapBuffer\n");
#endif
  }
  return glow_glMapBuffer(target, access);
}
PFNGLMAPBUFFERPROC glow_glMapBuffer = glow_lazy_glMapBuffer;
static void glow_lazy_glNormalP3uiv(GLenum type, const GLuint *coords) {
  glow_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)((ptrdiff_t)(glow_get_proc("glNormalP3uiv")));
  if (glow_glNormalP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormalP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormalP3uiv\n");
#endif
  }
  glow_glNormalP3uiv(type, coords);
}
PFNGLNORMALP3UIVPROC glow_glNormalP3uiv = glow_lazy_glNormalP3uiv;
static void glow_lazy_glInvalidateBufferData(GLuint buffer) {
  glow_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)((ptrdiff_t)(glow_get_proc("glInvalidateBufferData")));
  if (glow_glInvalidateBufferData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateBufferData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateBufferData\n");
#endif
  }
  glow_glInvalidateBufferData(buffer);
}
PFNGLINVALIDATEBUFFERDATAPROC glow_glInvalidateBufferData = glow_lazy_glInvalidateBufferData;
static void glow_lazy_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  glow_glBlendColor = (PFNGLBLENDCOLORPROC)((ptrdiff_t)(glow_get_proc("glBlendColor")));
  if (glow_glBlendColor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendColor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendColor\n");
#endif
  }
  glow_glBlendColor(red, green, blue, alpha);
}
PFNGLBLENDCOLORPROC glow_glBlendColor = glow_lazy_glBlendColor;
static void glow_lazy_glPushName(GLuint name) {
  glow_glPushName = (PFNGLPUSHNAMEPROC)((ptrdiff_t)(glow_get_proc("glPushName")));
  if (glow_glPushName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushName\n");
#endif
  }
  glow_glPushName(name);
}
PFNGLPUSHNAMEPROC glow_glPushName = glow_lazy_glPushName;
static void glow_lazy_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
  glow_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)((ptrdiff_t)(glow_get_proc("glWindowPos3f")));
  if (glow_glWindowPos3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3f\n");
#endif
  }
  glow_glWindowPos3f(x, y, z);
}
PFNGLWINDOWPOS3FPROC glow_glWindowPos3f = glow_lazy_glWindowPos3f;
static void glow_lazy_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {
  glow_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)((ptrdiff_t)(glow_get_proc("glGetSamplerParameterIiv")));
  if (glow_glGetSamplerParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameterIiv\n");
#endif
  }
  glow_glGetSamplerParameterIiv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIIVPROC glow_glGetSamplerParameterIiv = glow_lazy_glGetSamplerParameterIiv;
static void glow_lazy_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  glow_glClearColor = (PFNGLCLEARCOLORPROC)((ptrdiff_t)(glow_get_proc("glClearColor")));
  if (glow_glClearColor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearColor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearColor\n");
#endif
  }
  glow_glClearColor(red, green, blue, alpha);
}
PFNGLCLEARCOLORPROC glow_glClearColor = glow_lazy_glClearColor;
static void glow_lazy_glMultMatrixf(const GLfloat *m) {
  glow_glMultMatrixf = (PFNGLMULTMATRIXFPROC)((ptrdiff_t)(glow_get_proc("glMultMatrixf")));
  if (glow_glMultMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultMatrixf\n");
#endif
  }
  glow_glMultMatrixf(m);
}
PFNGLMULTMATRIXFPROC glow_glMultMatrixf = glow_lazy_glMultMatrixf;
static void glow_lazy_glInitNames() {
  glow_glInitNames = (PFNGLINITNAMESPROC)((ptrdiff_t)(glow_get_proc("glInitNames")));
  if (glow_glInitNames == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInitNames\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInitNames\n");
#endif
  }
  glow_glInitNames();
}
PFNGLINITNAMESPROC glow_glInitNames = glow_lazy_glInitNames;
static void glow_lazy_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  glow_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)((ptrdiff_t)(glow_get_proc("glCopyBufferSubData")));
  if (glow_glCopyBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyBufferSubData\n");
#endif
  }
  glow_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}
PFNGLCOPYBUFFERSUBDATAPROC glow_glCopyBufferSubData = glow_lazy_glCopyBufferSubData;
static void glow_lazy_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
  glow_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)((ptrdiff_t)(glow_get_proc("glGetActiveSubroutineUniformName")));
  if (glow_glGetActiveSubroutineUniformName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveSubroutineUniformName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveSubroutineUniformName\n");
#endif
  }
  glow_glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
}
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glow_glGetActiveSubroutineUniformName = glow_lazy_glGetActiveSubroutineUniformName;
static void glow_lazy_glRectdv(const GLdouble *v1, const GLdouble *v2) {
  glow_glRectdv = (PFNGLRECTDVPROC)((ptrdiff_t)(glow_get_proc("glRectdv")));
  if (glow_glRectdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectdv\n");
#endif
  }
  glow_glRectdv(v1, v2);
}
PFNGLRECTDVPROC glow_glRectdv = glow_lazy_glRectdv;
static void glow_lazy_glRasterPos4fv(const GLfloat *v) {
  glow_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)((ptrdiff_t)(glow_get_proc("glRasterPos4fv")));
  if (glow_glRasterPos4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4fv\n");
#endif
  }
  glow_glRasterPos4fv(v);
}
PFNGLRASTERPOS4FVPROC glow_glRasterPos4fv = glow_lazy_glRasterPos4fv;
static void glow_lazy_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  glow_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)((ptrdiff_t)(glow_get_proc("glProgramUniformMatrix2x3fv")));
  if (glow_glProgramUniformMatrix2x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x3fv\n");
#endif
  }
  glow_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glow_glProgramUniformMatrix2x3fv = glow_lazy_glProgramUniformMatrix2x3fv;
static void glow_lazy_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
  glow_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)((ptrdiff_t)(glow_get_proc("glVertexAttribLPointer")));
  if (glow_glVertexAttribLPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribLPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribLPointer\n");
#endif
  }
  glow_glVertexAttribLPointer(index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBLPOINTERPROC glow_glVertexAttribLPointer = glow_lazy_glVertexAttribLPointer;
static void glow_lazy_glNormal3sv(const GLshort *v) {
  glow_glNormal3sv = (PFNGLNORMAL3SVPROC)((ptrdiff_t)(glow_get_proc("glNormal3sv")));
  if (glow_glNormal3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3sv\n");
#endif
  }
  glow_glNormal3sv(v);
}
PFNGLNORMAL3SVPROC glow_glNormal3sv = glow_lazy_glNormal3sv;
static void glow_lazy_glEdgeFlagv(const GLboolean *flag) {
  glow_glEdgeFlagv = (PFNGLEDGEFLAGVPROC)((ptrdiff_t)(glow_get_proc("glEdgeFlagv")));
  if (glow_glEdgeFlagv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEdgeFlagv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEdgeFlagv\n");
#endif
  }
  glow_glEdgeFlagv(flag);
}
PFNGLEDGEFLAGVPROC glow_glEdgeFlagv = glow_lazy_glEdgeFlagv;
static void glow_lazy_glPointParameterfv(GLenum pname, const GLfloat *params) {
  glow_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)((ptrdiff_t)(glow_get_proc("glPointParameterfv")));
  if (glow_glPointParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameterfv\n");
#endif
  }
  glow_glPointParameterfv(pname, params);
}
PFNGLPOINTPARAMETERFVPROC glow_glPointParameterfv = glow_lazy_glPointParameterfv;
static void glow_lazy_glSecondaryColor3dv(const GLdouble *v) {
  glow_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)((ptrdiff_t)(glow_get_proc("glSecondaryColor3dv")));
  if (glow_glSecondaryColor3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3dv\n");
#endif
  }
  glow_glSecondaryColor3dv(v);
}
PFNGLSECONDARYCOLOR3DVPROC glow_glSecondaryColor3dv = glow_lazy_glSecondaryColor3dv;
static void glow_lazy_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {
  glow_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)((ptrdiff_t)(glow_get_proc("glGetSamplerParameterIuiv")));
  if (glow_glGetSamplerParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameterIuiv\n");
#endif
  }
  glow_glGetSamplerParameterIuiv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIUIVPROC glow_glGetSamplerParameterIuiv = glow_lazy_glGetSamplerParameterIuiv;
static void glow_lazy_glMultiTexCoord1iv(GLenum target, const GLint *v) {
  glow_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)((ptrdiff_t)(glow_get_proc("glMultiTexCoord1iv")));
  if (glow_glMultiTexCoord1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1iv\n");
#endif
  }
  glow_glMultiTexCoord1iv(target, v);
}
PFNGLMULTITEXCOORD1IVPROC glow_glMultiTexCoord1iv = glow_lazy_glMultiTexCoord1iv;
static void glow_lazy_glPopName() {
  glow_glPopName = (PFNGLPOPNAMEPROC)((ptrdiff_t)(glow_get_proc("glPopName")));
  if (glow_glPopName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopName\n");
#endif
  }
  glow_glPopName();
}
PFNGLPOPNAMEPROC glow_glPopName = glow_lazy_glPopName;
static void glow_lazy_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {
  glow_glGetTexGenfv = (PFNGLGETTEXGENFVPROC)((ptrdiff_t)(glow_get_proc("glGetTexGenfv")));
  if (glow_glGetTexGenfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexGenfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexGenfv\n");
#endif
  }
  glow_glGetTexGenfv(coord, pname, params);
}
PFNGLGETTEXGENFVPROC glow_glGetTexGenfv = glow_lazy_glGetTexGenfv;
static void glow_lazy_glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {
  glow_glShaderSource = (PFNGLSHADERSOURCEPROC)((ptrdiff_t)(glow_get_proc("glShaderSource")));
  if (glow_glShaderSource == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShaderSource\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShaderSource\n");
#endif
  }
  glow_glShaderSource(shader, count, string, length);
}
PFNGLSHADERSOURCEPROC glow_glShaderSource = glow_lazy_glShaderSource;
static void glow_lazy_glCullFace(GLenum mode) {
  glow_glCullFace = (PFNGLCULLFACEPROC)((ptrdiff_t)(glow_get_proc("glCullFace")));
  if (glow_glCullFace == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCullFace\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCullFace\n");
#endif
  }
  glow_glCullFace(mode);
}
PFNGLCULLFACEPROC glow_glCullFace = glow_lazy_glCullFace;


static void glow_pre_callback_default_(char const *name, void *funcptr, ...) {
  (void)name;
  (void)funcptr;
}
static void glow_post_callback_default_(char const *name, void *funcptr, ...) {
  (void)name;
  (void)funcptr;
}
static glow_debug_proc_t glow_pre_callback_ = glow_pre_callback_default_;
static glow_debug_proc_t glow_post_callback_ = glow_post_callback_default_;
#ifdef GLOW_DEBUG

static void glow_debug_impl_glIndexf(GLfloat c) {

  glow_pre_callback_("glIndexf", (void*)(ptrdiff_t)glow_glIndexf, c);
  glow_glIndexf(c);
  glow_post_callback_("glIndexf", (void*)(ptrdiff_t)glow_glIndexf, c);
}
PFNGLINDEXFPROC glow_debug_glIndexf = glow_debug_impl_glIndexf;

static void glow_debug_impl_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetTexParameterIiv", (void*)(ptrdiff_t)glow_glGetTexParameterIiv, target, pname, params);
  glow_glGetTexParameterIiv(target, pname, params);
  glow_post_callback_("glGetTexParameterIiv", (void*)(ptrdiff_t)glow_glGetTexParameterIiv, target, pname, params);
}
PFNGLGETTEXPARAMETERIIVPROC glow_debug_glGetTexParameterIiv = glow_debug_impl_glGetTexParameterIiv;

static GLboolean glow_debug_impl_glIsSync(GLsync sync) {

  GLboolean ret;
  glow_pre_callback_("glIsSync", (void*)(ptrdiff_t)glow_glIsSync, sync);
  ret = glow_glIsSync(sync);
  glow_post_callback_("glIsSync", (void*)(ptrdiff_t)glow_glIsSync, sync);
  return ret;
}
PFNGLISSYNCPROC glow_debug_glIsSync = glow_debug_impl_glIsSync;

static void glow_debug_impl_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix3dv", (void*)(ptrdiff_t)glow_glUniformMatrix3dv, location, count, transpose, value);
  glow_glUniformMatrix3dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix3dv", (void*)(ptrdiff_t)glow_glUniformMatrix3dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3DVPROC glow_debug_glUniformMatrix3dv = glow_debug_impl_glUniformMatrix3dv;

static void glow_debug_impl_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glRotatef", (void*)(ptrdiff_t)glow_glRotatef, angle, x, y, z);
  glow_glRotatef(angle, x, y, z);
  glow_post_callback_("glRotatef", (void*)(ptrdiff_t)glow_glRotatef, angle, x, y, z);
}
PFNGLROTATEFPROC glow_debug_glRotatef = glow_debug_impl_glRotatef;

static void glow_debug_impl_glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {

  glow_pre_callback_("glTexGeniv", (void*)(ptrdiff_t)glow_glTexGeniv, coord, pname, params);
  glow_glTexGeniv(coord, pname, params);
  glow_post_callback_("glTexGeniv", (void*)(ptrdiff_t)glow_glTexGeniv, coord, pname, params);
}
PFNGLTEXGENIVPROC glow_debug_glTexGeniv = glow_debug_impl_glTexGeniv;

static void glow_debug_impl_glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glUniform1uiv", (void*)(ptrdiff_t)glow_glUniform1uiv, location, count, value);
  glow_glUniform1uiv(location, count, value);
  glow_post_callback_("glUniform1uiv", (void*)(ptrdiff_t)glow_glUniform1uiv, location, count, value);
}
PFNGLUNIFORM1UIVPROC glow_debug_glUniform1uiv = glow_debug_impl_glUniform1uiv;

static void glow_debug_impl_glRasterPos3i(GLint x, GLint y, GLint z) {

  glow_pre_callback_("glRasterPos3i", (void*)(ptrdiff_t)glow_glRasterPos3i, x, y, z);
  glow_glRasterPos3i(x, y, z);
  glow_post_callback_("glRasterPos3i", (void*)(ptrdiff_t)glow_glRasterPos3i, x, y, z);
}
PFNGLRASTERPOS3IPROC glow_debug_glRasterPos3i = glow_debug_impl_glRasterPos3i;

static void glow_debug_impl_glVertex2f(GLfloat x, GLfloat y) {

  glow_pre_callback_("glVertex2f", (void*)(ptrdiff_t)glow_glVertex2f, x, y);
  glow_glVertex2f(x, y);
  glow_post_callback_("glVertex2f", (void*)(ptrdiff_t)glow_glVertex2f, x, y);
}
PFNGLVERTEX2FPROC glow_debug_glVertex2f = glow_debug_impl_glVertex2f;

static void glow_debug_impl_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {

  glow_pre_callback_("glCompressedTexImage3D", (void*)(ptrdiff_t)glow_glCompressedTexImage3D, target, level, internalformat, width, height, depth, border, imageSize, data);
  glow_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  glow_post_callback_("glCompressedTexImage3D", (void*)(ptrdiff_t)glow_glCompressedTexImage3D, target, level, internalformat, width, height, depth, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE3DPROC glow_debug_glCompressedTexImage3D = glow_debug_impl_glCompressedTexImage3D;

static void glow_debug_impl_glEndList() {

  glow_pre_callback_("glEndList", (void*)(ptrdiff_t)glow_glEndList);
  glow_glEndList();
  glow_post_callback_("glEndList", (void*)(ptrdiff_t)glow_glEndList);
}
PFNGLENDLISTPROC glow_debug_glEndList = glow_debug_impl_glEndList;

static void glow_debug_impl_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {

  glow_pre_callback_("glProgramUniform2d", (void*)(ptrdiff_t)glow_glProgramUniform2d, program, location, v0, v1);
  glow_glProgramUniform2d(program, location, v0, v1);
  glow_post_callback_("glProgramUniform2d", (void*)(ptrdiff_t)glow_glProgramUniform2d, program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2DPROC glow_debug_glProgramUniform2d = glow_debug_impl_glProgramUniform2d;

static void glow_debug_impl_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetFramebufferParameteriv", (void*)(ptrdiff_t)glow_glGetFramebufferParameteriv, target, pname, params);
  glow_glGetFramebufferParameteriv(target, pname, params);
  glow_post_callback_("glGetFramebufferParameteriv", (void*)(ptrdiff_t)glow_glGetFramebufferParameteriv, target, pname, params);
}
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glow_debug_glGetFramebufferParameteriv = glow_debug_impl_glGetFramebufferParameteriv;

static void glow_debug_impl_glMultiTexCoord4dv(GLenum target, const GLdouble *v) {

  glow_pre_callback_("glMultiTexCoord4dv", (void*)(ptrdiff_t)glow_glMultiTexCoord4dv, target, v);
  glow_glMultiTexCoord4dv(target, v);
  glow_post_callback_("glMultiTexCoord4dv", (void*)(ptrdiff_t)glow_glMultiTexCoord4dv, target, v);
}
PFNGLMULTITEXCOORD4DVPROC glow_debug_glMultiTexCoord4dv = glow_debug_impl_glMultiTexCoord4dv;

static void glow_debug_impl_glBegin(GLenum mode) {

  glow_pre_callback_("glBegin", (void*)(ptrdiff_t)glow_glBegin, mode);
  glow_glBegin(mode);
  glow_post_callback_("glBegin", (void*)(ptrdiff_t)glow_glBegin, mode);
}
PFNGLBEGINPROC glow_debug_glBegin = glow_debug_impl_glBegin;

static void glow_debug_impl_glSecondaryColor3fv(const GLfloat *v) {

  glow_pre_callback_("glSecondaryColor3fv", (void*)(ptrdiff_t)glow_glSecondaryColor3fv, v);
  glow_glSecondaryColor3fv(v);
  glow_post_callback_("glSecondaryColor3fv", (void*)(ptrdiff_t)glow_glSecondaryColor3fv, v);
}
PFNGLSECONDARYCOLOR3FVPROC glow_debug_glSecondaryColor3fv = glow_debug_impl_glSecondaryColor3fv;

static void glow_debug_impl_glUniform3iv(GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glUniform3iv", (void*)(ptrdiff_t)glow_glUniform3iv, location, count, value);
  glow_glUniform3iv(location, count, value);
  glow_post_callback_("glUniform3iv", (void*)(ptrdiff_t)glow_glUniform3iv, location, count, value);
}
PFNGLUNIFORM3IVPROC glow_debug_glUniform3iv = glow_debug_impl_glUniform3iv;

static void glow_debug_impl_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetQueryIndexediv", (void*)(ptrdiff_t)glow_glGetQueryIndexediv, target, index, pname, params);
  glow_glGetQueryIndexediv(target, index, pname, params);
  glow_post_callback_("glGetQueryIndexediv", (void*)(ptrdiff_t)glow_glGetQueryIndexediv, target, index, pname, params);
}
PFNGLGETQUERYINDEXEDIVPROC glow_debug_glGetQueryIndexediv = glow_debug_impl_glGetQueryIndexediv;

static void glow_debug_impl_glPolygonMode(GLenum face, GLenum mode) {

  glow_pre_callback_("glPolygonMode", (void*)(ptrdiff_t)glow_glPolygonMode, face, mode);
  glow_glPolygonMode(face, mode);
  glow_post_callback_("glPolygonMode", (void*)(ptrdiff_t)glow_glPolygonMode, face, mode);
}
PFNGLPOLYGONMODEPROC glow_debug_glPolygonMode = glow_debug_impl_glPolygonMode;

static void glow_debug_impl_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {

  glow_pre_callback_("glDispatchCompute", (void*)(ptrdiff_t)glow_glDispatchCompute, num_groups_x, num_groups_y, num_groups_z);
  glow_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  glow_post_callback_("glDispatchCompute", (void*)(ptrdiff_t)glow_glDispatchCompute, num_groups_x, num_groups_y, num_groups_z);
}
PFNGLDISPATCHCOMPUTEPROC glow_debug_glDispatchCompute = glow_debug_impl_glDispatchCompute;

static void glow_debug_impl_glBindTexture(GLenum target, GLuint texture) {

  glow_pre_callback_("glBindTexture", (void*)(ptrdiff_t)glow_glBindTexture, target, texture);
  glow_glBindTexture(target, texture);
  glow_post_callback_("glBindTexture", (void*)(ptrdiff_t)glow_glBindTexture, target, texture);
}
PFNGLBINDTEXTUREPROC glow_debug_glBindTexture = glow_debug_impl_glBindTexture;

static void glow_debug_impl_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLfloat *priorities) {

  glow_pre_callback_("glPrioritizeTextures", (void*)(ptrdiff_t)glow_glPrioritizeTextures, n, textures, priorities);
  glow_glPrioritizeTextures(n, textures, priorities);
  glow_post_callback_("glPrioritizeTextures", (void*)(ptrdiff_t)glow_glPrioritizeTextures, n, textures, priorities);
}
PFNGLPRIORITIZETEXTURESPROC glow_debug_glPrioritizeTextures = glow_debug_impl_glPrioritizeTextures;

static void glow_debug_impl_glIndexubv(const GLubyte *c) {

  glow_pre_callback_("glIndexubv", (void*)(ptrdiff_t)glow_glIndexubv, c);
  glow_glIndexubv(c);
  glow_post_callback_("glIndexubv", (void*)(ptrdiff_t)glow_glIndexubv, c);
}
PFNGLINDEXUBVPROC glow_debug_glIndexubv = glow_debug_impl_glIndexubv;

static void glow_debug_impl_glDepthMask(GLboolean flag) {

  glow_pre_callback_("glDepthMask", (void*)(ptrdiff_t)glow_glDepthMask, flag);
  glow_glDepthMask(flag);
  glow_post_callback_("glDepthMask", (void*)(ptrdiff_t)glow_glDepthMask, flag);
}
PFNGLDEPTHMASKPROC glow_debug_glDepthMask = glow_debug_impl_glDepthMask;

static void glow_debug_impl_glEnableClientState(GLenum array) {

  glow_pre_callback_("glEnableClientState", (void*)(ptrdiff_t)glow_glEnableClientState, array);
  glow_glEnableClientState(array);
  glow_post_callback_("glEnableClientState", (void*)(ptrdiff_t)glow_glEnableClientState, array);
}
PFNGLENABLECLIENTSTATEPROC glow_debug_glEnableClientState = glow_debug_impl_glEnableClientState;

static void glow_debug_impl_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {

  glow_pre_callback_("glGetAttachedShaders", (void*)(ptrdiff_t)glow_glGetAttachedShaders, program, maxCount, count, shaders);
  glow_glGetAttachedShaders(program, maxCount, count, shaders);
  glow_post_callback_("glGetAttachedShaders", (void*)(ptrdiff_t)glow_glGetAttachedShaders, program, maxCount, count, shaders);
}
PFNGLGETATTACHEDSHADERSPROC glow_debug_glGetAttachedShaders = glow_debug_impl_glGetAttachedShaders;

static void glow_debug_impl_glColorP4ui(GLenum type, GLuint color) {

  glow_pre_callback_("glColorP4ui", (void*)(ptrdiff_t)glow_glColorP4ui, type, color);
  glow_glColorP4ui(type, color);
  glow_post_callback_("glColorP4ui", (void*)(ptrdiff_t)glow_glColorP4ui, type, color);
}
PFNGLCOLORP4UIPROC glow_debug_glColorP4ui = glow_debug_impl_glColorP4ui;

static void glow_debug_impl_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {

  glow_pre_callback_("glFeedbackBuffer", (void*)(ptrdiff_t)glow_glFeedbackBuffer, size, type, buffer);
  glow_glFeedbackBuffer(size, type, buffer);
  glow_post_callback_("glFeedbackBuffer", (void*)(ptrdiff_t)glow_glFeedbackBuffer, size, type, buffer);
}
PFNGLFEEDBACKBUFFERPROC glow_debug_glFeedbackBuffer = glow_debug_impl_glFeedbackBuffer;

static void glow_debug_impl_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glRasterPos3f", (void*)(ptrdiff_t)glow_glRasterPos3f, x, y, z);
  glow_glRasterPos3f(x, y, z);
  glow_post_callback_("glRasterPos3f", (void*)(ptrdiff_t)glow_glRasterPos3f, x, y, z);
}
PFNGLRASTERPOS3FPROC glow_debug_glRasterPos3f = glow_debug_impl_glRasterPos3f;

static void glow_debug_impl_glTexCoord1f(GLfloat s) {

  glow_pre_callback_("glTexCoord1f", (void*)(ptrdiff_t)glow_glTexCoord1f, s);
  glow_glTexCoord1f(s);
  glow_post_callback_("glTexCoord1f", (void*)(ptrdiff_t)glow_glTexCoord1f, s);
}
PFNGLTEXCOORD1FPROC glow_debug_glTexCoord1f = glow_debug_impl_glTexCoord1f;

static void glow_debug_impl_glTexCoord4sv(const GLshort *v) {

  glow_pre_callback_("glTexCoord4sv", (void*)(ptrdiff_t)glow_glTexCoord4sv, v);
  glow_glTexCoord4sv(v);
  glow_post_callback_("glTexCoord4sv", (void*)(ptrdiff_t)glow_glTexCoord4sv, v);
}
PFNGLTEXCOORD4SVPROC glow_debug_glTexCoord4sv = glow_debug_impl_glTexCoord4sv;

static void glow_debug_impl_glGetQueryiv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetQueryiv", (void*)(ptrdiff_t)glow_glGetQueryiv, target, pname, params);
  glow_glGetQueryiv(target, pname, params);
  glow_post_callback_("glGetQueryiv", (void*)(ptrdiff_t)glow_glGetQueryiv, target, pname, params);
}
PFNGLGETQUERYIVPROC glow_debug_glGetQueryiv = glow_debug_impl_glGetQueryiv;

static void glow_debug_impl_glClearDepth(GLdouble depth) {

  glow_pre_callback_("glClearDepth", (void*)(ptrdiff_t)glow_glClearDepth, depth);
  glow_glClearDepth(depth);
  glow_post_callback_("glClearDepth", (void*)(ptrdiff_t)glow_glClearDepth, depth);
}
PFNGLCLEARDEPTHPROC glow_debug_glClearDepth = glow_debug_impl_glClearDepth;

static void glow_debug_impl_glTexEnvi(GLenum target, GLenum pname, GLint param) {

  glow_pre_callback_("glTexEnvi", (void*)(ptrdiff_t)glow_glTexEnvi, target, pname, param);
  glow_glTexEnvi(target, pname, param);
  glow_post_callback_("glTexEnvi", (void*)(ptrdiff_t)glow_glTexEnvi, target, pname, param);
}
PFNGLTEXENVIPROC glow_debug_glTexEnvi = glow_debug_impl_glTexEnvi;

static void glow_debug_impl_glPopMatrix() {

  glow_pre_callback_("glPopMatrix", (void*)(ptrdiff_t)glow_glPopMatrix);
  glow_glPopMatrix();
  glow_post_callback_("glPopMatrix", (void*)(ptrdiff_t)glow_glPopMatrix);
}
PFNGLPOPMATRIXPROC glow_debug_glPopMatrix = glow_debug_impl_glPopMatrix;

static void glow_debug_impl_glEdgeFlagPointer(GLsizei stride, const void *pointer) {

  glow_pre_callback_("glEdgeFlagPointer", (void*)(ptrdiff_t)glow_glEdgeFlagPointer, stride, pointer);
  glow_glEdgeFlagPointer(stride, pointer);
  glow_post_callback_("glEdgeFlagPointer", (void*)(ptrdiff_t)glow_glEdgeFlagPointer, stride, pointer);
}
PFNGLEDGEFLAGPOINTERPROC glow_debug_glEdgeFlagPointer = glow_debug_impl_glEdgeFlagPointer;

static void glow_debug_impl_glTexCoord4dv(const GLdouble *v) {

  glow_pre_callback_("glTexCoord4dv", (void*)(ptrdiff_t)glow_glTexCoord4dv, v);
  glow_glTexCoord4dv(v);
  glow_post_callback_("glTexCoord4dv", (void*)(ptrdiff_t)glow_glTexCoord4dv, v);
}
PFNGLTEXCOORD4DVPROC glow_debug_glTexCoord4dv = glow_debug_impl_glTexCoord4dv;

static void glow_debug_impl_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {

  glow_pre_callback_("glBindVertexBuffer", (void*)(ptrdiff_t)glow_glBindVertexBuffer, bindingindex, buffer, offset, stride);
  glow_glBindVertexBuffer(bindingindex, buffer, offset, stride);
  glow_post_callback_("glBindVertexBuffer", (void*)(ptrdiff_t)glow_glBindVertexBuffer, bindingindex, buffer, offset, stride);
}
PFNGLBINDVERTEXBUFFERPROC glow_debug_glBindVertexBuffer = glow_debug_impl_glBindVertexBuffer;

static void glow_debug_impl_glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {

  glow_pre_callback_("glGetObjectPtrLabel", (void*)(ptrdiff_t)glow_glGetObjectPtrLabel, ptr, bufSize, length, label);
  glow_glGetObjectPtrLabel(ptr, bufSize, length, label);
  glow_post_callback_("glGetObjectPtrLabel", (void*)(ptrdiff_t)glow_glGetObjectPtrLabel, ptr, bufSize, length, label);
}
PFNGLGETOBJECTPTRLABELPROC glow_debug_glGetObjectPtrLabel = glow_debug_impl_glGetObjectPtrLabel;

static void glow_debug_impl_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {

  glow_pre_callback_("glTexParameterf", (void*)(ptrdiff_t)glow_glTexParameterf, target, pname, param);
  glow_glTexParameterf(target, pname, param);
  glow_post_callback_("glTexParameterf", (void*)(ptrdiff_t)glow_glTexParameterf, target, pname, param);
}
PFNGLTEXPARAMETERFPROC glow_debug_glTexParameterf = glow_debug_impl_glTexParameterf;

static void glow_debug_impl_glVertexAttrib1sv(GLuint index, const GLshort *v) {

  glow_pre_callback_("glVertexAttrib1sv", (void*)(ptrdiff_t)glow_glVertexAttrib1sv, index, v);
  glow_glVertexAttrib1sv(index, v);
  glow_post_callback_("glVertexAttrib1sv", (void*)(ptrdiff_t)glow_glVertexAttrib1sv, index, v);
}
PFNGLVERTEXATTRIB1SVPROC glow_debug_glVertexAttrib1sv = glow_debug_impl_glVertexAttrib1sv;

static void glow_debug_impl_glTexCoord3fv(const GLfloat *v) {

  glow_pre_callback_("glTexCoord3fv", (void*)(ptrdiff_t)glow_glTexCoord3fv, v);
  glow_glTexCoord3fv(v);
  glow_post_callback_("glTexCoord3fv", (void*)(ptrdiff_t)glow_glTexCoord3fv, v);
}
PFNGLTEXCOORD3FVPROC glow_debug_glTexCoord3fv = glow_debug_impl_glTexCoord3fv;

static void glow_debug_impl_glLightModeliv(GLenum pname, const GLint *params) {

  glow_pre_callback_("glLightModeliv", (void*)(ptrdiff_t)glow_glLightModeliv, pname, params);
  glow_glLightModeliv(pname, params);
  glow_post_callback_("glLightModeliv", (void*)(ptrdiff_t)glow_glLightModeliv, pname, params);
}
PFNGLLIGHTMODELIVPROC glow_debug_glLightModeliv = glow_debug_impl_glLightModeliv;

static void glow_debug_impl_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {

  glow_pre_callback_("glGetQueryObjectuiv", (void*)(ptrdiff_t)glow_glGetQueryObjectuiv, id, pname, params);
  glow_glGetQueryObjectuiv(id, pname, params);
  glow_post_callback_("glGetQueryObjectuiv", (void*)(ptrdiff_t)glow_glGetQueryObjectuiv, id, pname, params);
}
PFNGLGETQUERYOBJECTUIVPROC glow_debug_glGetQueryObjectuiv = glow_debug_impl_glGetQueryObjectuiv;

static void glow_debug_impl_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {

  glow_pre_callback_("glGetVertexAttribLdv", (void*)(ptrdiff_t)glow_glGetVertexAttribLdv, index, pname, params);
  glow_glGetVertexAttribLdv(index, pname, params);
  glow_post_callback_("glGetVertexAttribLdv", (void*)(ptrdiff_t)glow_glGetVertexAttribLdv, index, pname, params);
}
PFNGLGETVERTEXATTRIBLDVPROC glow_debug_glGetVertexAttribLdv = glow_debug_impl_glGetVertexAttribLdv;

static void glow_debug_impl_glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {

  glow_pre_callback_("glDebugMessageCallback", (void*)(ptrdiff_t)glow_glDebugMessageCallback, callback, userParam);
  glow_glDebugMessageCallback(callback, userParam);
  glow_post_callback_("glDebugMessageCallback", (void*)(ptrdiff_t)glow_glDebugMessageCallback, callback, userParam);
}
PFNGLDEBUGMESSAGECALLBACKPROC glow_debug_glDebugMessageCallback = glow_debug_impl_glDebugMessageCallback;

static void glow_debug_impl_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {

  glow_pre_callback_("glStencilOp", (void*)(ptrdiff_t)glow_glStencilOp, fail, zfail, zpass);
  glow_glStencilOp(fail, zfail, zpass);
  glow_post_callback_("glStencilOp", (void*)(ptrdiff_t)glow_glStencilOp, fail, zfail, zpass);
}
PFNGLSTENCILOPPROC glow_debug_glStencilOp = glow_debug_impl_glStencilOp;

static void glow_debug_impl_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {

  glow_pre_callback_("glCopyPixels", (void*)(ptrdiff_t)glow_glCopyPixels, x, y, width, height, type);
  glow_glCopyPixels(x, y, width, height, type);
  glow_post_callback_("glCopyPixels", (void*)(ptrdiff_t)glow_glCopyPixels, x, y, width, height, type);
}
PFNGLCOPYPIXELSPROC glow_debug_glCopyPixels = glow_debug_impl_glCopyPixels;

static GLboolean glow_debug_impl_glIsVertexArray(GLuint array) {

  GLboolean ret;
  glow_pre_callback_("glIsVertexArray", (void*)(ptrdiff_t)glow_glIsVertexArray, array);
  ret = glow_glIsVertexArray(array);
  glow_post_callback_("glIsVertexArray", (void*)(ptrdiff_t)glow_glIsVertexArray, array);
  return ret;
}
PFNGLISVERTEXARRAYPROC glow_debug_glIsVertexArray = glow_debug_impl_glIsVertexArray;

static void glow_debug_impl_glSampleMaski(GLuint maskNumber, GLbitfield mask) {

  glow_pre_callback_("glSampleMaski", (void*)(ptrdiff_t)glow_glSampleMaski, maskNumber, mask);
  glow_glSampleMaski(maskNumber, mask);
  glow_post_callback_("glSampleMaski", (void*)(ptrdiff_t)glow_glSampleMaski, maskNumber, mask);
}
PFNGLSAMPLEMASKIPROC glow_debug_glSampleMaski = glow_debug_impl_glSampleMaski;

static void glow_debug_impl_glLightiv(GLenum light, GLenum pname, const GLint *params) {

  glow_pre_callback_("glLightiv", (void*)(ptrdiff_t)glow_glLightiv, light, pname, params);
  glow_glLightiv(light, pname, params);
  glow_post_callback_("glLightiv", (void*)(ptrdiff_t)glow_glLightiv, light, pname, params);
}
PFNGLLIGHTIVPROC glow_debug_glLightiv = glow_debug_impl_glLightiv;

static void glow_debug_impl_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {

  glow_pre_callback_("glTexBuffer", (void*)(ptrdiff_t)glow_glTexBuffer, target, internalformat, buffer);
  glow_glTexBuffer(target, internalformat, buffer);
  glow_post_callback_("glTexBuffer", (void*)(ptrdiff_t)glow_glTexBuffer, target, internalformat, buffer);
}
PFNGLTEXBUFFERPROC glow_debug_glTexBuffer = glow_debug_impl_glTexBuffer;

static void glow_debug_impl_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {

  glow_pre_callback_("glShaderBinary", (void*)(ptrdiff_t)glow_glShaderBinary, count, shaders, binaryformat, binary, length);
  glow_glShaderBinary(count, shaders, binaryformat, binary, length);
  glow_post_callback_("glShaderBinary", (void*)(ptrdiff_t)glow_glShaderBinary, count, shaders, binaryformat, binary, length);
}
PFNGLSHADERBINARYPROC glow_debug_glShaderBinary = glow_debug_impl_glShaderBinary;

static void glow_debug_impl_glMaterialiv(GLenum face, GLenum pname, const GLint *params) {

  glow_pre_callback_("glMaterialiv", (void*)(ptrdiff_t)glow_glMaterialiv, face, pname, params);
  glow_glMaterialiv(face, pname, params);
  glow_post_callback_("glMaterialiv", (void*)(ptrdiff_t)glow_glMaterialiv, face, pname, params);
}
PFNGLMATERIALIVPROC glow_debug_glMaterialiv = glow_debug_impl_glMaterialiv;

static void glow_debug_impl_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {

  glow_pre_callback_("glNormal3b", (void*)(ptrdiff_t)glow_glNormal3b, nx, ny, nz);
  glow_glNormal3b(nx, ny, nz);
  glow_post_callback_("glNormal3b", (void*)(ptrdiff_t)glow_glNormal3b, nx, ny, nz);
}
PFNGLNORMAL3BPROC glow_debug_glNormal3b = glow_debug_impl_glNormal3b;

static void glow_debug_impl_glGetMapiv(GLenum target, GLenum query, GLint *v) {

  glow_pre_callback_("glGetMapiv", (void*)(ptrdiff_t)glow_glGetMapiv, target, query, v);
  glow_glGetMapiv(target, query, v);
  glow_post_callback_("glGetMapiv", (void*)(ptrdiff_t)glow_glGetMapiv, target, query, v);
}
PFNGLGETMAPIVPROC glow_debug_glGetMapiv = glow_debug_impl_glGetMapiv;

static void glow_debug_impl_glBindTransformFeedback(GLenum target, GLuint id) {

  glow_pre_callback_("glBindTransformFeedback", (void*)(ptrdiff_t)glow_glBindTransformFeedback, target, id);
  glow_glBindTransformFeedback(target, id);
  glow_post_callback_("glBindTransformFeedback", (void*)(ptrdiff_t)glow_glBindTransformFeedback, target, id);
}
PFNGLBINDTRANSFORMFEEDBACKPROC glow_debug_glBindTransformFeedback = glow_debug_impl_glBindTransformFeedback;

static GLuint glow_debug_impl_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {

  GLuint ret;
  glow_pre_callback_("glGetDebugMessageLog", (void*)(ptrdiff_t)glow_glGetDebugMessageLog, count, bufSize, sources, types, ids, severities, lengths, messageLog);
  ret = glow_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  glow_post_callback_("glGetDebugMessageLog", (void*)(ptrdiff_t)glow_glGetDebugMessageLog, count, bufSize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}
PFNGLGETDEBUGMESSAGELOGPROC glow_debug_glGetDebugMessageLog = glow_debug_impl_glGetDebugMessageLog;

static void glow_debug_impl_glGetBooleanv(GLenum pname, GLboolean *data) {

  glow_pre_callback_("glGetBooleanv", (void*)(ptrdiff_t)glow_glGetBooleanv, pname, data);
  glow_glGetBooleanv(pname, data);
  glow_post_callback_("glGetBooleanv", (void*)(ptrdiff_t)glow_glGetBooleanv, pname, data);
}
PFNGLGETBOOLEANVPROC glow_debug_glGetBooleanv = glow_debug_impl_glGetBooleanv;

static void glow_debug_impl_glIndexub(GLubyte c) {

  glow_pre_callback_("glIndexub", (void*)(ptrdiff_t)glow_glIndexub, c);
  glow_glIndexub(c);
  glow_post_callback_("glIndexub", (void*)(ptrdiff_t)glow_glIndexub, c);
}
PFNGLINDEXUBPROC glow_debug_glIndexub = glow_debug_impl_glIndexub;

static void glow_debug_impl_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {

  glow_pre_callback_("glBlitFramebuffer", (void*)(ptrdiff_t)glow_glBlitFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  glow_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  glow_post_callback_("glBlitFramebuffer", (void*)(ptrdiff_t)glow_glBlitFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
PFNGLBLITFRAMEBUFFERPROC glow_debug_glBlitFramebuffer = glow_debug_impl_glBlitFramebuffer;

static void glow_debug_impl_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {

  glow_pre_callback_("glGetMultisamplefv", (void*)(ptrdiff_t)glow_glGetMultisamplefv, pname, index, val);
  glow_glGetMultisamplefv(pname, index, val);
  glow_post_callback_("glGetMultisamplefv", (void*)(ptrdiff_t)glow_glGetMultisamplefv, pname, index, val);
}
PFNGLGETMULTISAMPLEFVPROC glow_debug_glGetMultisamplefv = glow_debug_impl_glGetMultisamplefv;

static void glow_debug_impl_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glProgramUniform3iv", (void*)(ptrdiff_t)glow_glProgramUniform3iv, program, location, count, value);
  glow_glProgramUniform3iv(program, location, count, value);
  glow_post_callback_("glProgramUniform3iv", (void*)(ptrdiff_t)glow_glProgramUniform3iv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM3IVPROC glow_debug_glProgramUniform3iv = glow_debug_impl_glProgramUniform3iv;

static GLuint glow_debug_impl_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {

  GLuint ret;
  glow_pre_callback_("glGetProgramResourceIndex", (void*)(ptrdiff_t)glow_glGetProgramResourceIndex, program, programInterface, name);
  ret = glow_glGetProgramResourceIndex(program, programInterface, name);
  glow_post_callback_("glGetProgramResourceIndex", (void*)(ptrdiff_t)glow_glGetProgramResourceIndex, program, programInterface, name);
  return ret;
}
PFNGLGETPROGRAMRESOURCEINDEXPROC glow_debug_glGetProgramResourceIndex = glow_debug_impl_glGetProgramResourceIndex;

static void glow_debug_impl_glIndexfv(const GLfloat *c) {

  glow_pre_callback_("glIndexfv", (void*)(ptrdiff_t)glow_glIndexfv, c);
  glow_glIndexfv(c);
  glow_post_callback_("glIndexfv", (void*)(ptrdiff_t)glow_glIndexfv, c);
}
PFNGLINDEXFVPROC glow_debug_glIndexfv = glow_debug_impl_glIndexfv;

static void glow_debug_impl_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {

  glow_pre_callback_("glVertexAttribFormat", (void*)(ptrdiff_t)glow_glVertexAttribFormat, attribindex, size, type, normalized, relativeoffset);
  glow_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  glow_post_callback_("glVertexAttribFormat", (void*)(ptrdiff_t)glow_glVertexAttribFormat, attribindex, size, type, normalized, relativeoffset);
}
PFNGLVERTEXATTRIBFORMATPROC glow_debug_glVertexAttribFormat = glow_debug_impl_glVertexAttribFormat;

static void glow_debug_impl_glRasterPos4dv(const GLdouble *v) {

  glow_pre_callback_("glRasterPos4dv", (void*)(ptrdiff_t)glow_glRasterPos4dv, v);
  glow_glRasterPos4dv(v);
  glow_post_callback_("glRasterPos4dv", (void*)(ptrdiff_t)glow_glRasterPos4dv, v);
}
PFNGLRASTERPOS4DVPROC glow_debug_glRasterPos4dv = glow_debug_impl_glRasterPos4dv;

static void glow_debug_impl_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {

  glow_pre_callback_("glDrawTransformFeedbackInstanced", (void*)(ptrdiff_t)glow_glDrawTransformFeedbackInstanced, mode, id, instancecount);
  glow_glDrawTransformFeedbackInstanced(mode, id, instancecount);
  glow_post_callback_("glDrawTransformFeedbackInstanced", (void*)(ptrdiff_t)glow_glDrawTransformFeedbackInstanced, mode, id, instancecount);
}
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glow_debug_glDrawTransformFeedbackInstanced = glow_debug_impl_glDrawTransformFeedbackInstanced;

static void glow_debug_impl_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {

  glow_pre_callback_("glViewportIndexedf", (void*)(ptrdiff_t)glow_glViewportIndexedf, index, x, y, w, h);
  glow_glViewportIndexedf(index, x, y, w, h);
  glow_post_callback_("glViewportIndexedf", (void*)(ptrdiff_t)glow_glViewportIndexedf, index, x, y, w, h);
}
PFNGLVIEWPORTINDEXEDFPROC glow_debug_glViewportIndexedf = glow_debug_impl_glViewportIndexedf;

static GLboolean glow_debug_impl_glIsBuffer(GLuint buffer) {

  GLboolean ret;
  glow_pre_callback_("glIsBuffer", (void*)(ptrdiff_t)glow_glIsBuffer, buffer);
  ret = glow_glIsBuffer(buffer);
  glow_post_callback_("glIsBuffer", (void*)(ptrdiff_t)glow_glIsBuffer, buffer);
  return ret;
}
PFNGLISBUFFERPROC glow_debug_glIsBuffer = glow_debug_impl_glIsBuffer;

static void glow_debug_impl_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix3x2fv", (void*)(ptrdiff_t)glow_glUniformMatrix3x2fv, location, count, transpose, value);
  glow_glUniformMatrix3x2fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix3x2fv", (void*)(ptrdiff_t)glow_glUniformMatrix3x2fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X2FVPROC glow_debug_glUniformMatrix3x2fv = glow_debug_impl_glUniformMatrix3x2fv;

static void glow_debug_impl_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {

  glow_pre_callback_("glDepthRangeIndexed", (void*)(ptrdiff_t)glow_glDepthRangeIndexed, index, n, f);
  glow_glDepthRangeIndexed(index, n, f);
  glow_post_callback_("glDepthRangeIndexed", (void*)(ptrdiff_t)glow_glDepthRangeIndexed, index, n, f);
}
PFNGLDEPTHRANGEINDEXEDPROC glow_debug_glDepthRangeIndexed = glow_debug_impl_glDepthRangeIndexed;

static void glow_debug_impl_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetTexLevelParameterfv", (void*)(ptrdiff_t)glow_glGetTexLevelParameterfv, target, level, pname, params);
  glow_glGetTexLevelParameterfv(target, level, pname, params);
  glow_post_callback_("glGetTexLevelParameterfv", (void*)(ptrdiff_t)glow_glGetTexLevelParameterfv, target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERFVPROC glow_debug_glGetTexLevelParameterfv = glow_debug_impl_glGetTexLevelParameterfv;

static void glow_debug_impl_glSecondaryColor3iv(const GLint *v) {

  glow_pre_callback_("glSecondaryColor3iv", (void*)(ptrdiff_t)glow_glSecondaryColor3iv, v);
  glow_glSecondaryColor3iv(v);
  glow_post_callback_("glSecondaryColor3iv", (void*)(ptrdiff_t)glow_glSecondaryColor3iv, v);
}
PFNGLSECONDARYCOLOR3IVPROC glow_debug_glSecondaryColor3iv = glow_debug_impl_glSecondaryColor3iv;

static void glow_debug_impl_glUniform1iv(GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glUniform1iv", (void*)(ptrdiff_t)glow_glUniform1iv, location, count, value);
  glow_glUniform1iv(location, count, value);
  glow_post_callback_("glUniform1iv", (void*)(ptrdiff_t)glow_glUniform1iv, location, count, value);
}
PFNGLUNIFORM1IVPROC glow_debug_glUniform1iv = glow_debug_impl_glUniform1iv;

static void glow_debug_impl_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {

  glow_pre_callback_("glVertexAttrib4d", (void*)(ptrdiff_t)glow_glVertexAttrib4d, index, x, y, z, w);
  glow_glVertexAttrib4d(index, x, y, z, w);
  glow_post_callback_("glVertexAttrib4d", (void*)(ptrdiff_t)glow_glVertexAttrib4d, index, x, y, z, w);
}
PFNGLVERTEXATTRIB4DPROC glow_debug_glVertexAttrib4d = glow_debug_impl_glVertexAttrib4d;

static void glow_debug_impl_glSecondaryColorP3ui(GLenum type, GLuint color) {

  glow_pre_callback_("glSecondaryColorP3ui", (void*)(ptrdiff_t)glow_glSecondaryColorP3ui, type, color);
  glow_glSecondaryColorP3ui(type, color);
  glow_post_callback_("glSecondaryColorP3ui", (void*)(ptrdiff_t)glow_glSecondaryColorP3ui, type, color);
}
PFNGLSECONDARYCOLORP3UIPROC glow_debug_glSecondaryColorP3ui = glow_debug_impl_glSecondaryColorP3ui;

static void glow_debug_impl_glRectsv(const GLshort *v1, const GLshort *v2) {

  glow_pre_callback_("glRectsv", (void*)(ptrdiff_t)glow_glRectsv, v1, v2);
  glow_glRectsv(v1, v2);
  glow_post_callback_("glRectsv", (void*)(ptrdiff_t)glow_glRectsv, v1, v2);
}
PFNGLRECTSVPROC glow_debug_glRectsv = glow_debug_impl_glRectsv;

static void glow_debug_impl_glRasterPos2sv(const GLshort *v) {

  glow_pre_callback_("glRasterPos2sv", (void*)(ptrdiff_t)glow_glRasterPos2sv, v);
  glow_glRasterPos2sv(v);
  glow_post_callback_("glRasterPos2sv", (void*)(ptrdiff_t)glow_glRasterPos2sv, v);
}
PFNGLRASTERPOS2SVPROC glow_debug_glRasterPos2sv = glow_debug_impl_glRasterPos2sv;

static void glow_debug_impl_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {

  glow_pre_callback_("glEvalMesh1", (void*)(ptrdiff_t)glow_glEvalMesh1, mode, i1, i2);
  glow_glEvalMesh1(mode, i1, i2);
  glow_post_callback_("glEvalMesh1", (void*)(ptrdiff_t)glow_glEvalMesh1, mode, i1, i2);
}
PFNGLEVALMESH1PROC glow_debug_glEvalMesh1 = glow_debug_impl_glEvalMesh1;

static void glow_debug_impl_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {

  glow_pre_callback_("glOrtho", (void*)(ptrdiff_t)glow_glOrtho, left, right, bottom, top, zNear, zFar);
  glow_glOrtho(left, right, bottom, top, zNear, zFar);
  glow_post_callback_("glOrtho", (void*)(ptrdiff_t)glow_glOrtho, left, right, bottom, top, zNear, zFar);
}
PFNGLORTHOPROC glow_debug_glOrtho = glow_debug_impl_glOrtho;

static void glow_debug_impl_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {

  glow_pre_callback_("glMultiDrawElements", (void*)(ptrdiff_t)glow_glMultiDrawElements, mode, count, type, indices, drawcount);
  glow_glMultiDrawElements(mode, count, type, indices, drawcount);
  glow_post_callback_("glMultiDrawElements", (void*)(ptrdiff_t)glow_glMultiDrawElements, mode, count, type, indices, drawcount);
}
PFNGLMULTIDRAWELEMENTSPROC glow_debug_glMultiDrawElements = glow_debug_impl_glMultiDrawElements;

static void glow_debug_impl_glDisableVertexAttribArray(GLuint index) {

  glow_pre_callback_("glDisableVertexAttribArray", (void*)(ptrdiff_t)glow_glDisableVertexAttribArray, index);
  glow_glDisableVertexAttribArray(index);
  glow_post_callback_("glDisableVertexAttribArray", (void*)(ptrdiff_t)glow_glDisableVertexAttribArray, index);
}
PFNGLDISABLEVERTEXATTRIBARRAYPROC glow_debug_glDisableVertexAttribArray = glow_debug_impl_glDisableVertexAttribArray;

static void glow_debug_impl_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glProgramUniform4fv", (void*)(ptrdiff_t)glow_glProgramUniform4fv, program, location, count, value);
  glow_glProgramUniform4fv(program, location, count, value);
  glow_post_callback_("glProgramUniform4fv", (void*)(ptrdiff_t)glow_glProgramUniform4fv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM4FVPROC glow_debug_glProgramUniform4fv = glow_debug_impl_glProgramUniform4fv;

static void glow_debug_impl_glColor4uiv(const GLuint *v) {

  glow_pre_callback_("glColor4uiv", (void*)(ptrdiff_t)glow_glColor4uiv, v);
  glow_glColor4uiv(v);
  glow_post_callback_("glColor4uiv", (void*)(ptrdiff_t)glow_glColor4uiv, v);
}
PFNGLCOLOR4UIVPROC glow_debug_glColor4uiv = glow_debug_impl_glColor4uiv;

static void glow_debug_impl_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {

  glow_pre_callback_("glTexGenf", (void*)(ptrdiff_t)glow_glTexGenf, coord, pname, param);
  glow_glTexGenf(coord, pname, param);
  glow_post_callback_("glTexGenf", (void*)(ptrdiff_t)glow_glTexGenf, coord, pname, param);
}
PFNGLTEXGENFPROC glow_debug_glTexGenf = glow_debug_impl_glTexGenf;

static void glow_debug_impl_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {

  glow_pre_callback_("glVertexAttribI4i", (void*)(ptrdiff_t)glow_glVertexAttribI4i, index, x, y, z, w);
  glow_glVertexAttribI4i(index, x, y, z, w);
  glow_post_callback_("glVertexAttribI4i", (void*)(ptrdiff_t)glow_glVertexAttribI4i, index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4IPROC glow_debug_glVertexAttribI4i = glow_debug_impl_glVertexAttribI4i;

static void glow_debug_impl_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {

  glow_pre_callback_("glGetActiveUniformBlockName", (void*)(ptrdiff_t)glow_glGetActiveUniformBlockName, program, uniformBlockIndex, bufSize, length, uniformBlockName);
  glow_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  glow_post_callback_("glGetActiveUniformBlockName", (void*)(ptrdiff_t)glow_glGetActiveUniformBlockName, program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glow_debug_glGetActiveUniformBlockName = glow_debug_impl_glGetActiveUniformBlockName;

static void glow_debug_impl_glDeleteSamplers(GLsizei count, const GLuint *samplers) {

  glow_pre_callback_("glDeleteSamplers", (void*)(ptrdiff_t)glow_glDeleteSamplers, count, samplers);
  glow_glDeleteSamplers(count, samplers);
  glow_post_callback_("glDeleteSamplers", (void*)(ptrdiff_t)glow_glDeleteSamplers, count, samplers);
}
PFNGLDELETESAMPLERSPROC glow_debug_glDeleteSamplers = glow_debug_impl_glDeleteSamplers;

static void glow_debug_impl_glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glUniform4dv", (void*)(ptrdiff_t)glow_glUniform4dv, location, count, value);
  glow_glUniform4dv(location, count, value);
  glow_post_callback_("glUniform4dv", (void*)(ptrdiff_t)glow_glUniform4dv, location, count, value);
}
PFNGLUNIFORM4DVPROC glow_debug_glUniform4dv = glow_debug_impl_glUniform4dv;

static void glow_debug_impl_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {

  glow_pre_callback_("glProgramUniform2ui", (void*)(ptrdiff_t)glow_glProgramUniform2ui, program, location, v0, v1);
  glow_glProgramUniform2ui(program, location, v0, v1);
  glow_post_callback_("glProgramUniform2ui", (void*)(ptrdiff_t)glow_glProgramUniform2ui, program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2UIPROC glow_debug_glProgramUniform2ui = glow_debug_impl_glProgramUniform2ui;

static void glow_debug_impl_glRectfv(const GLfloat *v1, const GLfloat *v2) {

  glow_pre_callback_("glRectfv", (void*)(ptrdiff_t)glow_glRectfv, v1, v2);
  glow_glRectfv(v1, v2);
  glow_post_callback_("glRectfv", (void*)(ptrdiff_t)glow_glRectfv, v1, v2);
}
PFNGLRECTFVPROC glow_debug_glRectfv = glow_debug_impl_glRectfv;

static void glow_debug_impl_glEnablei(GLenum target, GLuint index) {

  glow_pre_callback_("glEnablei", (void*)(ptrdiff_t)glow_glEnablei, target, index);
  glow_glEnablei(target, index);
  glow_post_callback_("glEnablei", (void*)(ptrdiff_t)glow_glEnablei, target, index);
}
PFNGLENABLEIPROC glow_debug_glEnablei = glow_debug_impl_glEnablei;

static void glow_debug_impl_glVertexAttribI1iv(GLuint index, const GLint *v) {

  glow_pre_callback_("glVertexAttribI1iv", (void*)(ptrdiff_t)glow_glVertexAttribI1iv, index, v);
  glow_glVertexAttribI1iv(index, v);
  glow_post_callback_("glVertexAttribI1iv", (void*)(ptrdiff_t)glow_glVertexAttribI1iv, index, v);
}
PFNGLVERTEXATTRIBI1IVPROC glow_debug_glVertexAttribI1iv = glow_debug_impl_glVertexAttribI1iv;

static void glow_debug_impl_glClientActiveTexture(GLenum texture) {

  glow_pre_callback_("glClientActiveTexture", (void*)(ptrdiff_t)glow_glClientActiveTexture, texture);
  glow_glClientActiveTexture(texture);
  glow_post_callback_("glClientActiveTexture", (void*)(ptrdiff_t)glow_glClientActiveTexture, texture);
}
PFNGLCLIENTACTIVETEXTUREPROC glow_debug_glClientActiveTexture = glow_debug_impl_glClientActiveTexture;

static void glow_debug_impl_glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {

  glow_pre_callback_("glVertexAttrib4Nbv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nbv, index, v);
  glow_glVertexAttrib4Nbv(index, v);
  glow_post_callback_("glVertexAttrib4Nbv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nbv, index, v);
}
PFNGLVERTEXATTRIB4NBVPROC glow_debug_glVertexAttrib4Nbv = glow_debug_impl_glVertexAttrib4Nbv;

static void glow_debug_impl_glWindowPos3i(GLint x, GLint y, GLint z) {

  glow_pre_callback_("glWindowPos3i", (void*)(ptrdiff_t)glow_glWindowPos3i, x, y, z);
  glow_glWindowPos3i(x, y, z);
  glow_post_callback_("glWindowPos3i", (void*)(ptrdiff_t)glow_glWindowPos3i, x, y, z);
}
PFNGLWINDOWPOS3IPROC glow_debug_glWindowPos3i = glow_debug_impl_glWindowPos3i;

static void glow_debug_impl_glGetBufferPointerv(GLenum target, GLenum pname, void **params) {

  glow_pre_callback_("glGetBufferPointerv", (void*)(ptrdiff_t)glow_glGetBufferPointerv, target, pname, params);
  glow_glGetBufferPointerv(target, pname, params);
  glow_post_callback_("glGetBufferPointerv", (void*)(ptrdiff_t)glow_glGetBufferPointerv, target, pname, params);
}
PFNGLGETBUFFERPOINTERVPROC glow_debug_glGetBufferPointerv = glow_debug_impl_glGetBufferPointerv;

static void glow_debug_impl_glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {

  glow_pre_callback_("glGetVertexAttribPointerv", (void*)(ptrdiff_t)glow_glGetVertexAttribPointerv, index, pname, pointer);
  glow_glGetVertexAttribPointerv(index, pname, pointer);
  glow_post_callback_("glGetVertexAttribPointerv", (void*)(ptrdiff_t)glow_glGetVertexAttribPointerv, index, pname, pointer);
}
PFNGLGETVERTEXATTRIBPOINTERVPROC glow_debug_glGetVertexAttribPointerv = glow_debug_impl_glGetVertexAttribPointerv;

static void glow_debug_impl_glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glUniform1dv", (void*)(ptrdiff_t)glow_glUniform1dv, location, count, value);
  glow_glUniform1dv(location, count, value);
  glow_post_callback_("glUniform1dv", (void*)(ptrdiff_t)glow_glUniform1dv, location, count, value);
}
PFNGLUNIFORM1DVPROC glow_debug_glUniform1dv = glow_debug_impl_glUniform1dv;

static void glow_debug_impl_glVertexAttribL1d(GLuint index, GLdouble x) {

  glow_pre_callback_("glVertexAttribL1d", (void*)(ptrdiff_t)glow_glVertexAttribL1d, index, x);
  glow_glVertexAttribL1d(index, x);
  glow_post_callback_("glVertexAttribL1d", (void*)(ptrdiff_t)glow_glVertexAttribL1d, index, x);
}
PFNGLVERTEXATTRIBL1DPROC glow_debug_glVertexAttribL1d = glow_debug_impl_glVertexAttribL1d;

static void glow_debug_impl_glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetTexEnviv", (void*)(ptrdiff_t)glow_glGetTexEnviv, target, pname, params);
  glow_glGetTexEnviv(target, pname, params);
  glow_post_callback_("glGetTexEnviv", (void*)(ptrdiff_t)glow_glGetTexEnviv, target, pname, params);
}
PFNGLGETTEXENVIVPROC glow_debug_glGetTexEnviv = glow_debug_impl_glGetTexEnviv;

static void glow_debug_impl_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glProgramUniform1iv", (void*)(ptrdiff_t)glow_glProgramUniform1iv, program, location, count, value);
  glow_glProgramUniform1iv(program, location, count, value);
  glow_post_callback_("glProgramUniform1iv", (void*)(ptrdiff_t)glow_glProgramUniform1iv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM1IVPROC glow_debug_glProgramUniform1iv = glow_debug_impl_glProgramUniform1iv;

static void glow_debug_impl_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {

  glow_pre_callback_("glProgramUniform3ui", (void*)(ptrdiff_t)glow_glProgramUniform3ui, program, location, v0, v1, v2);
  glow_glProgramUniform3ui(program, location, v0, v1, v2);
  glow_post_callback_("glProgramUniform3ui", (void*)(ptrdiff_t)glow_glProgramUniform3ui, program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3UIPROC glow_debug_glProgramUniform3ui = glow_debug_impl_glProgramUniform3ui;

static void glow_debug_impl_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {

  glow_pre_callback_("glMap2d", (void*)(ptrdiff_t)glow_glMap2d, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  glow_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  glow_post_callback_("glMap2d", (void*)(ptrdiff_t)glow_glMap2d, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2DPROC glow_debug_glMap2d = glow_debug_impl_glMap2d;

static void glow_debug_impl_glPolygonOffset(GLfloat factor, GLfloat units) {

  glow_pre_callback_("glPolygonOffset", (void*)(ptrdiff_t)glow_glPolygonOffset, factor, units);
  glow_glPolygonOffset(factor, units);
  glow_post_callback_("glPolygonOffset", (void*)(ptrdiff_t)glow_glPolygonOffset, factor, units);
}
PFNGLPOLYGONOFFSETPROC glow_debug_glPolygonOffset = glow_debug_impl_glPolygonOffset;

static void glow_debug_impl_glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glColorPointer", (void*)(ptrdiff_t)glow_glColorPointer, size, type, stride, pointer);
  glow_glColorPointer(size, type, stride, pointer);
  glow_post_callback_("glColorPointer", (void*)(ptrdiff_t)glow_glColorPointer, size, type, stride, pointer);
}
PFNGLCOLORPOINTERPROC glow_debug_glColorPointer = glow_debug_impl_glColorPointer;

static void glow_debug_impl_glBindSampler(GLuint unit, GLuint sampler) {

  glow_pre_callback_("glBindSampler", (void*)(ptrdiff_t)glow_glBindSampler, unit, sampler);
  glow_glBindSampler(unit, sampler);
  glow_post_callback_("glBindSampler", (void*)(ptrdiff_t)glow_glBindSampler, unit, sampler);
}
PFNGLBINDSAMPLERPROC glow_debug_glBindSampler = glow_debug_impl_glBindSampler;

static void glow_debug_impl_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {

  glow_pre_callback_("glInvalidateTexSubImage", (void*)(ptrdiff_t)glow_glInvalidateTexSubImage, texture, level, xoffset, yoffset, zoffset, width, height, depth);
  glow_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  glow_post_callback_("glInvalidateTexSubImage", (void*)(ptrdiff_t)glow_glInvalidateTexSubImage, texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
PFNGLINVALIDATETEXSUBIMAGEPROC glow_debug_glInvalidateTexSubImage = glow_debug_impl_glInvalidateTexSubImage;

static void glow_debug_impl_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {

  glow_pre_callback_("glColor4ui", (void*)(ptrdiff_t)glow_glColor4ui, red, green, blue, alpha);
  glow_glColor4ui(red, green, blue, alpha);
  glow_post_callback_("glColor4ui", (void*)(ptrdiff_t)glow_glColor4ui, red, green, blue, alpha);
}
PFNGLCOLOR4UIPROC glow_debug_glColor4ui = glow_debug_impl_glColor4ui;

static void glow_debug_impl_glClearIndex(GLfloat c) {

  glow_pre_callback_("glClearIndex", (void*)(ptrdiff_t)glow_glClearIndex, c);
  glow_glClearIndex(c);
  glow_post_callback_("glClearIndex", (void*)(ptrdiff_t)glow_glClearIndex, c);
}
PFNGLCLEARINDEXPROC glow_debug_glClearIndex = glow_debug_impl_glClearIndex;

static void glow_debug_impl_glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {

  glow_pre_callback_("glDeleteVertexArrays", (void*)(ptrdiff_t)glow_glDeleteVertexArrays, n, arrays);
  glow_glDeleteVertexArrays(n, arrays);
  glow_post_callback_("glDeleteVertexArrays", (void*)(ptrdiff_t)glow_glDeleteVertexArrays, n, arrays);
}
PFNGLDELETEVERTEXARRAYSPROC glow_debug_glDeleteVertexArrays = glow_debug_impl_glDeleteVertexArrays;

static void glow_debug_impl_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {

  glow_pre_callback_("glWaitSync", (void*)(ptrdiff_t)glow_glWaitSync, sync, flags, timeout);
  glow_glWaitSync(sync, flags, timeout);
  glow_post_callback_("glWaitSync", (void*)(ptrdiff_t)glow_glWaitSync, sync, flags, timeout);
}
PFNGLWAITSYNCPROC glow_debug_glWaitSync = glow_debug_impl_glWaitSync;

static void glow_debug_impl_glResumeTransformFeedback() {

  glow_pre_callback_("glResumeTransformFeedback", (void*)(ptrdiff_t)glow_glResumeTransformFeedback);
  glow_glResumeTransformFeedback();
  glow_post_callback_("glResumeTransformFeedback", (void*)(ptrdiff_t)glow_glResumeTransformFeedback);
}
PFNGLRESUMETRANSFORMFEEDBACKPROC glow_debug_glResumeTransformFeedback = glow_debug_impl_glResumeTransformFeedback;

static void glow_debug_impl_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {

  glow_pre_callback_("glCopyImageSubData", (void*)(ptrdiff_t)glow_glCopyImageSubData, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  glow_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  glow_post_callback_("glCopyImageSubData", (void*)(ptrdiff_t)glow_glCopyImageSubData, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
PFNGLCOPYIMAGESUBDATAPROC glow_debug_glCopyImageSubData = glow_debug_impl_glCopyImageSubData;

static void glow_debug_impl_glShadeModel(GLenum mode) {

  glow_pre_callback_("glShadeModel", (void*)(ptrdiff_t)glow_glShadeModel, mode);
  glow_glShadeModel(mode);
  glow_post_callback_("glShadeModel", (void*)(ptrdiff_t)glow_glShadeModel, mode);
}
PFNGLSHADEMODELPROC glow_debug_glShadeModel = glow_debug_impl_glShadeModel;

static void glow_debug_impl_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {

  glow_pre_callback_("glSamplerParameteriv", (void*)(ptrdiff_t)glow_glSamplerParameteriv, sampler, pname, param);
  glow_glSamplerParameteriv(sampler, pname, param);
  glow_post_callback_("glSamplerParameteriv", (void*)(ptrdiff_t)glow_glSamplerParameteriv, sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIVPROC glow_debug_glSamplerParameteriv = glow_debug_impl_glSamplerParameteriv;

static void glow_debug_impl_glUniform2ui(GLint location, GLuint v0, GLuint v1) {

  glow_pre_callback_("glUniform2ui", (void*)(ptrdiff_t)glow_glUniform2ui, location, v0, v1);
  glow_glUniform2ui(location, v0, v1);
  glow_post_callback_("glUniform2ui", (void*)(ptrdiff_t)glow_glUniform2ui, location, v0, v1);
}
PFNGLUNIFORM2UIPROC glow_debug_glUniform2ui = glow_debug_impl_glUniform2ui;

static void glow_debug_impl_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {

  glow_pre_callback_("glGetQueryObjectui64v", (void*)(ptrdiff_t)glow_glGetQueryObjectui64v, id, pname, params);
  glow_glGetQueryObjectui64v(id, pname, params);
  glow_post_callback_("glGetQueryObjectui64v", (void*)(ptrdiff_t)glow_glGetQueryObjectui64v, id, pname, params);
}
PFNGLGETQUERYOBJECTUI64VPROC glow_debug_glGetQueryObjectui64v = glow_debug_impl_glGetQueryObjectui64v;

static void glow_debug_impl_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetMaterialfv", (void*)(ptrdiff_t)glow_glGetMaterialfv, face, pname, params);
  glow_glGetMaterialfv(face, pname, params);
  glow_post_callback_("glGetMaterialfv", (void*)(ptrdiff_t)glow_glGetMaterialfv, face, pname, params);
}
PFNGLGETMATERIALFVPROC glow_debug_glGetMaterialfv = glow_debug_impl_glGetMaterialfv;

static void glow_debug_impl_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {

  glow_pre_callback_("glClearBufferuiv", (void*)(ptrdiff_t)glow_glClearBufferuiv, buffer, drawbuffer, value);
  glow_glClearBufferuiv(buffer, drawbuffer, value);
  glow_post_callback_("glClearBufferuiv", (void*)(ptrdiff_t)glow_glClearBufferuiv, buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERUIVPROC glow_debug_glClearBufferuiv = glow_debug_impl_glClearBufferuiv;

static void glow_debug_impl_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {

  glow_pre_callback_("glColor3f", (void*)(ptrdiff_t)glow_glColor3f, red, green, blue);
  glow_glColor3f(red, green, blue);
  glow_post_callback_("glColor3f", (void*)(ptrdiff_t)glow_glColor3f, red, green, blue);
}
PFNGLCOLOR3FPROC glow_debug_glColor3f = glow_debug_impl_glColor3f;

static void glow_debug_impl_glSecondaryColor3usv(const GLushort *v) {

  glow_pre_callback_("glSecondaryColor3usv", (void*)(ptrdiff_t)glow_glSecondaryColor3usv, v);
  glow_glSecondaryColor3usv(v);
  glow_post_callback_("glSecondaryColor3usv", (void*)(ptrdiff_t)glow_glSecondaryColor3usv, v);
}
PFNGLSECONDARYCOLOR3USVPROC glow_debug_glSecondaryColor3usv = glow_debug_impl_glSecondaryColor3usv;

static void glow_debug_impl_glVertexAttrib4Niv(GLuint index, const GLint *v) {

  glow_pre_callback_("glVertexAttrib4Niv", (void*)(ptrdiff_t)glow_glVertexAttrib4Niv, index, v);
  glow_glVertexAttrib4Niv(index, v);
  glow_post_callback_("glVertexAttrib4Niv", (void*)(ptrdiff_t)glow_glVertexAttrib4Niv, index, v);
}
PFNGLVERTEXATTRIB4NIVPROC glow_debug_glVertexAttrib4Niv = glow_debug_impl_glVertexAttrib4Niv;

static void glow_debug_impl_glVertexAttrib4sv(GLuint index, const GLshort *v) {

  glow_pre_callback_("glVertexAttrib4sv", (void*)(ptrdiff_t)glow_glVertexAttrib4sv, index, v);
  glow_glVertexAttrib4sv(index, v);
  glow_post_callback_("glVertexAttrib4sv", (void*)(ptrdiff_t)glow_glVertexAttrib4sv, index, v);
}
PFNGLVERTEXATTRIB4SVPROC glow_debug_glVertexAttrib4sv = glow_debug_impl_glVertexAttrib4sv;

static void glow_debug_impl_glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {

  glow_pre_callback_("glGetIntegeri_v", (void*)(ptrdiff_t)glow_glGetIntegeri_v, target, index, data);
  glow_glGetIntegeri_v(target, index, data);
  glow_post_callback_("glGetIntegeri_v", (void*)(ptrdiff_t)glow_glGetIntegeri_v, target, index, data);
}
PFNGLGETINTEGERI_VPROC glow_debug_glGetIntegeri_v = glow_debug_impl_glGetIntegeri_v;

static void glow_debug_impl_glVertexAttribI4iv(GLuint index, const GLint *v) {

  glow_pre_callback_("glVertexAttribI4iv", (void*)(ptrdiff_t)glow_glVertexAttribI4iv, index, v);
  glow_glVertexAttribI4iv(index, v);
  glow_post_callback_("glVertexAttribI4iv", (void*)(ptrdiff_t)glow_glVertexAttribI4iv, index, v);
}
PFNGLVERTEXATTRIBI4IVPROC glow_debug_glVertexAttribI4iv = glow_debug_impl_glVertexAttribI4iv;

static void glow_debug_impl_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {

  glow_pre_callback_("glUniform3ui", (void*)(ptrdiff_t)glow_glUniform3ui, location, v0, v1, v2);
  glow_glUniform3ui(location, v0, v1, v2);
  glow_post_callback_("glUniform3ui", (void*)(ptrdiff_t)glow_glUniform3ui, location, v0, v1, v2);
}
PFNGLUNIFORM3UIPROC glow_debug_glUniform3ui = glow_debug_impl_glUniform3ui;

static void glow_debug_impl_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {

  glow_pre_callback_("glGetActiveSubroutineName", (void*)(ptrdiff_t)glow_glGetActiveSubroutineName, program, shadertype, index, bufsize, length, name);
  glow_glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
  glow_post_callback_("glGetActiveSubroutineName", (void*)(ptrdiff_t)glow_glGetActiveSubroutineName, program, shadertype, index, bufsize, length, name);
}
PFNGLGETACTIVESUBROUTINENAMEPROC glow_debug_glGetActiveSubroutineName = glow_debug_impl_glGetActiveSubroutineName;

static void glow_debug_impl_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {

  glow_pre_callback_("glRects", (void*)(ptrdiff_t)glow_glRects, x1, y1, x2, y2);
  glow_glRects(x1, y1, x2, y2);
  glow_post_callback_("glRects", (void*)(ptrdiff_t)glow_glRects, x1, y1, x2, y2);
}
PFNGLRECTSPROC glow_debug_glRects = glow_debug_impl_glRects;

static void glow_debug_impl_glVertexAttribL1dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttribL1dv", (void*)(ptrdiff_t)glow_glVertexAttribL1dv, index, v);
  glow_glVertexAttribL1dv(index, v);
  glow_post_callback_("glVertexAttribL1dv", (void*)(ptrdiff_t)glow_glVertexAttribL1dv, index, v);
}
PFNGLVERTEXATTRIBL1DVPROC glow_debug_glVertexAttribL1dv = glow_debug_impl_glVertexAttribL1dv;

static void glow_debug_impl_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {

  glow_pre_callback_("glUniform2f", (void*)(ptrdiff_t)glow_glUniform2f, location, v0, v1);
  glow_glUniform2f(location, v0, v1);
  glow_post_callback_("glUniform2f", (void*)(ptrdiff_t)glow_glUniform2f, location, v0, v1);
}
PFNGLUNIFORM2FPROC glow_debug_glUniform2f = glow_debug_impl_glUniform2f;

static void glow_debug_impl_glFlush() {

  glow_pre_callback_("glFlush", (void*)(ptrdiff_t)glow_glFlush);
  glow_glFlush();
  glow_post_callback_("glFlush", (void*)(ptrdiff_t)glow_glFlush);
}
PFNGLFLUSHPROC glow_debug_glFlush = glow_debug_impl_glFlush;

static void glow_debug_impl_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {

  glow_pre_callback_("glMultiDrawElementsBaseVertex", (void*)(ptrdiff_t)glow_glMultiDrawElementsBaseVertex, mode, count, type, indices, drawcount, basevertex);
  glow_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
  glow_post_callback_("glMultiDrawElementsBaseVertex", (void*)(ptrdiff_t)glow_glMultiDrawElementsBaseVertex, mode, count, type, indices, drawcount, basevertex);
}
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glow_debug_glMultiDrawElementsBaseVertex = glow_debug_impl_glMultiDrawElementsBaseVertex;

static void glow_debug_impl_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix3x2dv", (void*)(ptrdiff_t)glow_glUniformMatrix3x2dv, location, count, transpose, value);
  glow_glUniformMatrix3x2dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix3x2dv", (void*)(ptrdiff_t)glow_glUniformMatrix3x2dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X2DVPROC glow_debug_glUniformMatrix3x2dv = glow_debug_impl_glUniformMatrix3x2dv;

static void glow_debug_impl_glPatchParameteri(GLenum pname, GLint value) {

  glow_pre_callback_("glPatchParameteri", (void*)(ptrdiff_t)glow_glPatchParameteri, pname, value);
  glow_glPatchParameteri(pname, value);
  glow_post_callback_("glPatchParameteri", (void*)(ptrdiff_t)glow_glPatchParameteri, pname, value);
}
PFNGLPATCHPARAMETERIPROC glow_debug_glPatchParameteri = glow_debug_impl_glPatchParameteri;

static void glow_debug_impl_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glTranslatef", (void*)(ptrdiff_t)glow_glTranslatef, x, y, z);
  glow_glTranslatef(x, y, z);
  glow_post_callback_("glTranslatef", (void*)(ptrdiff_t)glow_glTranslatef, x, y, z);
}
PFNGLTRANSLATEFPROC glow_debug_glTranslatef = glow_debug_impl_glTranslatef;

static void glow_debug_impl_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {

  glow_pre_callback_("glTexImage2DMultisample", (void*)(ptrdiff_t)glow_glTexImage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);
  glow_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  glow_post_callback_("glTexImage2DMultisample", (void*)(ptrdiff_t)glow_glTexImage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXIMAGE2DMULTISAMPLEPROC glow_debug_glTexImage2DMultisample = glow_debug_impl_glTexImage2DMultisample;

static void glow_debug_impl_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {

  glow_pre_callback_("glMultiTexCoordP3ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP3ui, texture, type, coords);
  glow_glMultiTexCoordP3ui(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP3ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP3ui, texture, type, coords);
}
PFNGLMULTITEXCOORDP3UIPROC glow_debug_glMultiTexCoordP3ui = glow_debug_impl_glMultiTexCoordP3ui;

static GLint glow_debug_impl_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetProgramResourceLocation", (void*)(ptrdiff_t)glow_glGetProgramResourceLocation, program, programInterface, name);
  ret = glow_glGetProgramResourceLocation(program, programInterface, name);
  glow_post_callback_("glGetProgramResourceLocation", (void*)(ptrdiff_t)glow_glGetProgramResourceLocation, program, programInterface, name);
  return ret;
}
PFNGLGETPROGRAMRESOURCELOCATIONPROC glow_debug_glGetProgramResourceLocation = glow_debug_impl_glGetProgramResourceLocation;

static void glow_debug_impl_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glVertexAttrib3d", (void*)(ptrdiff_t)glow_glVertexAttrib3d, index, x, y, z);
  glow_glVertexAttrib3d(index, x, y, z);
  glow_post_callback_("glVertexAttrib3d", (void*)(ptrdiff_t)glow_glVertexAttrib3d, index, x, y, z);
}
PFNGLVERTEXATTRIB3DPROC glow_debug_glVertexAttrib3d = glow_debug_impl_glVertexAttrib3d;

static void glow_debug_impl_glTexCoord2s(GLshort s, GLshort t) {

  glow_pre_callback_("glTexCoord2s", (void*)(ptrdiff_t)glow_glTexCoord2s, s, t);
  glow_glTexCoord2s(s, t);
  glow_post_callback_("glTexCoord2s", (void*)(ptrdiff_t)glow_glTexCoord2s, s, t);
}
PFNGLTEXCOORD2SPROC glow_debug_glTexCoord2s = glow_debug_impl_glTexCoord2s;

static void glow_debug_impl_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {

  glow_pre_callback_("glFramebufferTexture1D", (void*)(ptrdiff_t)glow_glFramebufferTexture1D, target, attachment, textarget, texture, level);
  glow_glFramebufferTexture1D(target, attachment, textarget, texture, level);
  glow_post_callback_("glFramebufferTexture1D", (void*)(ptrdiff_t)glow_glFramebufferTexture1D, target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE1DPROC glow_debug_glFramebufferTexture1D = glow_debug_impl_glFramebufferTexture1D;

static void glow_debug_impl_glColor3us(GLushort red, GLushort green, GLushort blue) {

  glow_pre_callback_("glColor3us", (void*)(ptrdiff_t)glow_glColor3us, red, green, blue);
  glow_glColor3us(red, green, blue);
  glow_post_callback_("glColor3us", (void*)(ptrdiff_t)glow_glColor3us, red, green, blue);
}
PFNGLCOLOR3USPROC glow_debug_glColor3us = glow_debug_impl_glColor3us;

static void glow_debug_impl_glTexCoord1fv(const GLfloat *v) {

  glow_pre_callback_("glTexCoord1fv", (void*)(ptrdiff_t)glow_glTexCoord1fv, v);
  glow_glTexCoord1fv(v);
  glow_post_callback_("glTexCoord1fv", (void*)(ptrdiff_t)glow_glTexCoord1fv, v);
}
PFNGLTEXCOORD1FVPROC glow_debug_glTexCoord1fv = glow_debug_impl_glTexCoord1fv;

static void glow_debug_impl_glPushClientAttrib(GLbitfield mask) {

  glow_pre_callback_("glPushClientAttrib", (void*)(ptrdiff_t)glow_glPushClientAttrib, mask);
  glow_glPushClientAttrib(mask);
  glow_post_callback_("glPushClientAttrib", (void*)(ptrdiff_t)glow_glPushClientAttrib, mask);
}
PFNGLPUSHCLIENTATTRIBPROC glow_debug_glPushClientAttrib = glow_debug_impl_glPushClientAttrib;

static void glow_debug_impl_glVertexAttrib2dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttrib2dv", (void*)(ptrdiff_t)glow_glVertexAttrib2dv, index, v);
  glow_glVertexAttrib2dv(index, v);
  glow_post_callback_("glVertexAttrib2dv", (void*)(ptrdiff_t)glow_glVertexAttrib2dv, index, v);
}
PFNGLVERTEXATTRIB2DVPROC glow_debug_glVertexAttrib2dv = glow_debug_impl_glVertexAttrib2dv;

static void glow_debug_impl_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {

  glow_pre_callback_("glGetTexImage", (void*)(ptrdiff_t)glow_glGetTexImage, target, level, format, type, pixels);
  glow_glGetTexImage(target, level, format, type, pixels);
  glow_post_callback_("glGetTexImage", (void*)(ptrdiff_t)glow_glGetTexImage, target, level, format, type, pixels);
}
PFNGLGETTEXIMAGEPROC glow_debug_glGetTexImage = glow_debug_impl_glGetTexImage;

static void glow_debug_impl_glVertex4dv(const GLdouble *v) {

  glow_pre_callback_("glVertex4dv", (void*)(ptrdiff_t)glow_glVertex4dv, v);
  glow_glVertex4dv(v);
  glow_post_callback_("glVertex4dv", (void*)(ptrdiff_t)glow_glVertex4dv, v);
}
PFNGLVERTEX4DVPROC glow_debug_glVertex4dv = glow_debug_impl_glVertex4dv;

static void glow_debug_impl_glIndexPointer(GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glIndexPointer", (void*)(ptrdiff_t)glow_glIndexPointer, type, stride, pointer);
  glow_glIndexPointer(type, stride, pointer);
  glow_post_callback_("glIndexPointer", (void*)(ptrdiff_t)glow_glIndexPointer, type, stride, pointer);
}
PFNGLINDEXPOINTERPROC glow_debug_glIndexPointer = glow_debug_impl_glIndexPointer;

static void glow_debug_impl_glVertexAttribI4uiv(GLuint index, const GLuint *v) {

  glow_pre_callback_("glVertexAttribI4uiv", (void*)(ptrdiff_t)glow_glVertexAttribI4uiv, index, v);
  glow_glVertexAttribI4uiv(index, v);
  glow_post_callback_("glVertexAttribI4uiv", (void*)(ptrdiff_t)glow_glVertexAttribI4uiv, index, v);
}
PFNGLVERTEXATTRIBI4UIVPROC glow_debug_glVertexAttribI4uiv = glow_debug_impl_glVertexAttribI4uiv;

static void glow_debug_impl_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix2x4fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x4fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix2x4fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x4fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glow_debug_glProgramUniformMatrix2x4fv = glow_debug_impl_glProgramUniformMatrix2x4fv;

static void glow_debug_impl_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {

  glow_pre_callback_("glVertexAttribP4uiv", (void*)(ptrdiff_t)glow_glVertexAttribP4uiv, index, type, normalized, value);
  glow_glVertexAttribP4uiv(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP4uiv", (void*)(ptrdiff_t)glow_glVertexAttribP4uiv, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP4UIVPROC glow_debug_glVertexAttribP4uiv = glow_debug_impl_glVertexAttribP4uiv;

static void glow_debug_impl_glRasterPos3dv(const GLdouble *v) {

  glow_pre_callback_("glRasterPos3dv", (void*)(ptrdiff_t)glow_glRasterPos3dv, v);
  glow_glRasterPos3dv(v);
  glow_post_callback_("glRasterPos3dv", (void*)(ptrdiff_t)glow_glRasterPos3dv, v);
}
PFNGLRASTERPOS3DVPROC glow_debug_glRasterPos3dv = glow_debug_impl_glRasterPos3dv;

static void glow_debug_impl_glVertexAttrib1fv(GLuint index, const GLfloat *v) {

  glow_pre_callback_("glVertexAttrib1fv", (void*)(ptrdiff_t)glow_glVertexAttrib1fv, index, v);
  glow_glVertexAttrib1fv(index, v);
  glow_post_callback_("glVertexAttrib1fv", (void*)(ptrdiff_t)glow_glVertexAttrib1fv, index, v);
}
PFNGLVERTEXATTRIB1FVPROC glow_debug_glVertexAttrib1fv = glow_debug_impl_glVertexAttrib1fv;

static GLint glow_debug_impl_glGetFragDataIndex(GLuint program, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetFragDataIndex", (void*)(ptrdiff_t)glow_glGetFragDataIndex, program, name);
  ret = glow_glGetFragDataIndex(program, name);
  glow_post_callback_("glGetFragDataIndex", (void*)(ptrdiff_t)glow_glGetFragDataIndex, program, name);
  return ret;
}
PFNGLGETFRAGDATAINDEXPROC glow_debug_glGetFragDataIndex = glow_debug_impl_glGetFragDataIndex;

static void glow_debug_impl_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix2x3dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x3dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix2x3dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x3dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glow_debug_glProgramUniformMatrix2x3dv = glow_debug_impl_glProgramUniformMatrix2x3dv;

static void glow_debug_impl_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix3x4dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x4dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix3x4dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x4dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glow_debug_glProgramUniformMatrix3x4dv = glow_debug_impl_glProgramUniformMatrix3x4dv;

static void glow_debug_impl_glNormalP3ui(GLenum type, GLuint coords) {

  glow_pre_callback_("glNormalP3ui", (void*)(ptrdiff_t)glow_glNormalP3ui, type, coords);
  glow_glNormalP3ui(type, coords);
  glow_post_callback_("glNormalP3ui", (void*)(ptrdiff_t)glow_glNormalP3ui, type, coords);
}
PFNGLNORMALP3UIPROC glow_debug_glNormalP3ui = glow_debug_impl_glNormalP3ui;

static void glow_debug_impl_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix3fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix3fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix3fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glow_debug_glProgramUniformMatrix3fv = glow_debug_impl_glProgramUniformMatrix3fv;

static void glow_debug_impl_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {

  glow_pre_callback_("glClearAccum", (void*)(ptrdiff_t)glow_glClearAccum, red, green, blue, alpha);
  glow_glClearAccum(red, green, blue, alpha);
  glow_post_callback_("glClearAccum", (void*)(ptrdiff_t)glow_glClearAccum, red, green, blue, alpha);
}
PFNGLCLEARACCUMPROC glow_debug_glClearAccum = glow_debug_impl_glClearAccum;

static void glow_debug_impl_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {

  glow_pre_callback_("glVertexAttribLFormat", (void*)(ptrdiff_t)glow_glVertexAttribLFormat, attribindex, size, type, relativeoffset);
  glow_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  glow_post_callback_("glVertexAttribLFormat", (void*)(ptrdiff_t)glow_glVertexAttribLFormat, attribindex, size, type, relativeoffset);
}
PFNGLVERTEXATTRIBLFORMATPROC glow_debug_glVertexAttribLFormat = glow_debug_impl_glVertexAttribLFormat;

static void glow_debug_impl_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {

  glow_pre_callback_("glProgramUniform1f", (void*)(ptrdiff_t)glow_glProgramUniform1f, program, location, v0);
  glow_glProgramUniform1f(program, location, v0);
  glow_post_callback_("glProgramUniform1f", (void*)(ptrdiff_t)glow_glProgramUniform1f, program, location, v0);
}
PFNGLPROGRAMUNIFORM1FPROC glow_debug_glProgramUniform1f = glow_debug_impl_glProgramUniform1f;

static void glow_debug_impl_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glTexEnvfv", (void*)(ptrdiff_t)glow_glTexEnvfv, target, pname, params);
  glow_glTexEnvfv(target, pname, params);
  glow_post_callback_("glTexEnvfv", (void*)(ptrdiff_t)glow_glTexEnvfv, target, pname, params);
}
PFNGLTEXENVFVPROC glow_debug_glTexEnvfv = glow_debug_impl_glTexEnvfv;

static void glow_debug_impl_glMultiTexCoord3iv(GLenum target, const GLint *v) {

  glow_pre_callback_("glMultiTexCoord3iv", (void*)(ptrdiff_t)glow_glMultiTexCoord3iv, target, v);
  glow_glMultiTexCoord3iv(target, v);
  glow_post_callback_("glMultiTexCoord3iv", (void*)(ptrdiff_t)glow_glMultiTexCoord3iv, target, v);
}
PFNGLMULTITEXCOORD3IVPROC glow_debug_glMultiTexCoord3iv = glow_debug_impl_glMultiTexCoord3iv;

static void glow_debug_impl_glSecondaryColor3sv(const GLshort *v) {

  glow_pre_callback_("glSecondaryColor3sv", (void*)(ptrdiff_t)glow_glSecondaryColor3sv, v);
  glow_glSecondaryColor3sv(v);
  glow_post_callback_("glSecondaryColor3sv", (void*)(ptrdiff_t)glow_glSecondaryColor3sv, v);
}
PFNGLSECONDARYCOLOR3SVPROC glow_debug_glSecondaryColor3sv = glow_debug_impl_glSecondaryColor3sv;

static GLuint glow_debug_impl_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {

  GLuint ret;
  glow_pre_callback_("glCreateShaderProgramv", (void*)(ptrdiff_t)glow_glCreateShaderProgramv, type, count, strings);
  ret = glow_glCreateShaderProgramv(type, count, strings);
  glow_post_callback_("glCreateShaderProgramv", (void*)(ptrdiff_t)glow_glCreateShaderProgramv, type, count, strings);
  return ret;
}
PFNGLCREATESHADERPROGRAMVPROC glow_debug_glCreateShaderProgramv = glow_debug_impl_glCreateShaderProgramv;

static void glow_debug_impl_glColor3iv(const GLint *v) {

  glow_pre_callback_("glColor3iv", (void*)(ptrdiff_t)glow_glColor3iv, v);
  glow_glColor3iv(v);
  glow_post_callback_("glColor3iv", (void*)(ptrdiff_t)glow_glColor3iv, v);
}
PFNGLCOLOR3IVPROC glow_debug_glColor3iv = glow_debug_impl_glColor3iv;

static void glow_debug_impl_glEvalCoord1d(GLdouble u) {

  glow_pre_callback_("glEvalCoord1d", (void*)(ptrdiff_t)glow_glEvalCoord1d, u);
  glow_glEvalCoord1d(u);
  glow_post_callback_("glEvalCoord1d", (void*)(ptrdiff_t)glow_glEvalCoord1d, u);
}
PFNGLEVALCOORD1DPROC glow_debug_glEvalCoord1d = glow_debug_impl_glEvalCoord1d;

static void glow_debug_impl_glPushAttrib(GLbitfield mask) {

  glow_pre_callback_("glPushAttrib", (void*)(ptrdiff_t)glow_glPushAttrib, mask);
  glow_glPushAttrib(mask);
  glow_post_callback_("glPushAttrib", (void*)(ptrdiff_t)glow_glPushAttrib, mask);
}
PFNGLPUSHATTRIBPROC glow_debug_glPushAttrib = glow_debug_impl_glPushAttrib;

static void glow_debug_impl_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {

  glow_pre_callback_("glBlendFuncSeparate", (void*)(ptrdiff_t)glow_glBlendFuncSeparate, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  glow_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  glow_post_callback_("glBlendFuncSeparate", (void*)(ptrdiff_t)glow_glBlendFuncSeparate, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
PFNGLBLENDFUNCSEPARATEPROC glow_debug_glBlendFuncSeparate = glow_debug_impl_glBlendFuncSeparate;

static void glow_debug_impl_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {

  glow_pre_callback_("glVertexAttrib4f", (void*)(ptrdiff_t)glow_glVertexAttrib4f, index, x, y, z, w);
  glow_glVertexAttrib4f(index, x, y, z, w);
  glow_post_callback_("glVertexAttrib4f", (void*)(ptrdiff_t)glow_glVertexAttrib4f, index, x, y, z, w);
}
PFNGLVERTEXATTRIB4FPROC glow_debug_glVertexAttrib4f = glow_debug_impl_glVertexAttrib4f;

static void glow_debug_impl_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {

  glow_pre_callback_("glGetUniformIndices", (void*)(ptrdiff_t)glow_glGetUniformIndices, program, uniformCount, uniformNames, uniformIndices);
  glow_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  glow_post_callback_("glGetUniformIndices", (void*)(ptrdiff_t)glow_glGetUniformIndices, program, uniformCount, uniformNames, uniformIndices);
}
PFNGLGETUNIFORMINDICESPROC glow_debug_glGetUniformIndices = glow_debug_impl_glGetUniformIndices;

static void glow_debug_impl_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {

  glow_pre_callback_("glMultiTexCoordP1ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP1ui, texture, type, coords);
  glow_glMultiTexCoordP1ui(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP1ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP1ui, texture, type, coords);
}
PFNGLMULTITEXCOORDP1UIPROC glow_debug_glMultiTexCoordP1ui = glow_debug_impl_glMultiTexCoordP1ui;

static void glow_debug_impl_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {

  glow_pre_callback_("glClearBufferData", (void*)(ptrdiff_t)glow_glClearBufferData, target, internalformat, format, type, data);
  glow_glClearBufferData(target, internalformat, format, type, data);
  glow_post_callback_("glClearBufferData", (void*)(ptrdiff_t)glow_glClearBufferData, target, internalformat, format, type, data);
}
PFNGLCLEARBUFFERDATAPROC glow_debug_glClearBufferData = glow_debug_impl_glClearBufferData;

static void glow_debug_impl_glIndexMask(GLuint mask) {

  glow_pre_callback_("glIndexMask", (void*)(ptrdiff_t)glow_glIndexMask, mask);
  glow_glIndexMask(mask);
  glow_post_callback_("glIndexMask", (void*)(ptrdiff_t)glow_glIndexMask, mask);
}
PFNGLINDEXMASKPROC glow_debug_glIndexMask = glow_debug_impl_glIndexMask;

static void glow_debug_impl_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glDrawPixels", (void*)(ptrdiff_t)glow_glDrawPixels, width, height, format, type, pixels);
  glow_glDrawPixels(width, height, format, type, pixels);
  glow_post_callback_("glDrawPixels", (void*)(ptrdiff_t)glow_glDrawPixels, width, height, format, type, pixels);
}
PFNGLDRAWPIXELSPROC glow_debug_glDrawPixels = glow_debug_impl_glDrawPixels;

static void glow_debug_impl_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {

  glow_pre_callback_("glCompressedTexSubImage3D", (void*)(ptrdiff_t)glow_glCompressedTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  glow_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  glow_post_callback_("glCompressedTexSubImage3D", (void*)(ptrdiff_t)glow_glCompressedTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glow_debug_glCompressedTexSubImage3D = glow_debug_impl_glCompressedTexSubImage3D;

static void glow_debug_impl_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {

  glow_pre_callback_("glMultiTexCoord4d", (void*)(ptrdiff_t)glow_glMultiTexCoord4d, target, s, t, r, q);
  glow_glMultiTexCoord4d(target, s, t, r, q);
  glow_post_callback_("glMultiTexCoord4d", (void*)(ptrdiff_t)glow_glMultiTexCoord4d, target, s, t, r, q);
}
PFNGLMULTITEXCOORD4DPROC glow_debug_glMultiTexCoord4d = glow_debug_impl_glMultiTexCoord4d;

static void glow_debug_impl_glColorP4uiv(GLenum type, const GLuint *color) {

  glow_pre_callback_("glColorP4uiv", (void*)(ptrdiff_t)glow_glColorP4uiv, type, color);
  glow_glColorP4uiv(type, color);
  glow_post_callback_("glColorP4uiv", (void*)(ptrdiff_t)glow_glColorP4uiv, type, color);
}
PFNGLCOLORP4UIVPROC glow_debug_glColorP4uiv = glow_debug_impl_glColorP4uiv;

static void glow_debug_impl_glColor3bv(const GLbyte *v) {

  glow_pre_callback_("glColor3bv", (void*)(ptrdiff_t)glow_glColor3bv, v);
  glow_glColor3bv(v);
  glow_post_callback_("glColor3bv", (void*)(ptrdiff_t)glow_glColor3bv, v);
}
PFNGLCOLOR3BVPROC glow_debug_glColor3bv = glow_debug_impl_glColor3bv;

static void glow_debug_impl_glNewList(GLuint list, GLenum mode) {

  glow_pre_callback_("glNewList", (void*)(ptrdiff_t)glow_glNewList, list, mode);
  glow_glNewList(list, mode);
  glow_post_callback_("glNewList", (void*)(ptrdiff_t)glow_glNewList, list, mode);
}
PFNGLNEWLISTPROC glow_debug_glNewList = glow_debug_impl_glNewList;

static void glow_debug_impl_glTexCoord3s(GLshort s, GLshort t, GLshort r) {

  glow_pre_callback_("glTexCoord3s", (void*)(ptrdiff_t)glow_glTexCoord3s, s, t, r);
  glow_glTexCoord3s(s, t, r);
  glow_post_callback_("glTexCoord3s", (void*)(ptrdiff_t)glow_glTexCoord3s, s, t, r);
}
PFNGLTEXCOORD3SPROC glow_debug_glTexCoord3s = glow_debug_impl_glTexCoord3s;

static void glow_debug_impl_glBlendFunc(GLenum sfactor, GLenum dfactor) {

  glow_pre_callback_("glBlendFunc", (void*)(ptrdiff_t)glow_glBlendFunc, sfactor, dfactor);
  glow_glBlendFunc(sfactor, dfactor);
  glow_post_callback_("glBlendFunc", (void*)(ptrdiff_t)glow_glBlendFunc, sfactor, dfactor);
}
PFNGLBLENDFUNCPROC glow_debug_glBlendFunc = glow_debug_impl_glBlendFunc;

static void glow_debug_impl_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {

  glow_pre_callback_("glMap1d", (void*)(ptrdiff_t)glow_glMap1d, target, u1, u2, stride, order, points);
  glow_glMap1d(target, u1, u2, stride, order, points);
  glow_post_callback_("glMap1d", (void*)(ptrdiff_t)glow_glMap1d, target, u1, u2, stride, order, points);
}
PFNGLMAP1DPROC glow_debug_glMap1d = glow_debug_impl_glMap1d;

static void glow_debug_impl_glDeleteBuffers(GLsizei n, const GLuint *buffers) {

  glow_pre_callback_("glDeleteBuffers", (void*)(ptrdiff_t)glow_glDeleteBuffers, n, buffers);
  glow_glDeleteBuffers(n, buffers);
  glow_post_callback_("glDeleteBuffers", (void*)(ptrdiff_t)glow_glDeleteBuffers, n, buffers);
}
PFNGLDELETEBUFFERSPROC glow_debug_glDeleteBuffers = glow_debug_impl_glDeleteBuffers;

static GLboolean glow_debug_impl_glIsProgram(GLuint program) {

  GLboolean ret;
  glow_pre_callback_("glIsProgram", (void*)(ptrdiff_t)glow_glIsProgram, program);
  ret = glow_glIsProgram(program);
  glow_post_callback_("glIsProgram", (void*)(ptrdiff_t)glow_glIsProgram, program);
  return ret;
}
PFNGLISPROGRAMPROC glow_debug_glIsProgram = glow_debug_impl_glIsProgram;

static void glow_debug_impl_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glVertexAttribPointer", (void*)(ptrdiff_t)glow_glVertexAttribPointer, index, size, type, normalized, stride, pointer);
  glow_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  glow_post_callback_("glVertexAttribPointer", (void*)(ptrdiff_t)glow_glVertexAttribPointer, index, size, type, normalized, stride, pointer);
}
PFNGLVERTEXATTRIBPOINTERPROC glow_debug_glVertexAttribPointer = glow_debug_impl_glVertexAttribPointer;

static void glow_debug_impl_glVertex3s(GLshort x, GLshort y, GLshort z) {

  glow_pre_callback_("glVertex3s", (void*)(ptrdiff_t)glow_glVertex3s, x, y, z);
  glow_glVertex3s(x, y, z);
  glow_post_callback_("glVertex3s", (void*)(ptrdiff_t)glow_glVertex3s, x, y, z);
}
PFNGLVERTEX3SPROC glow_debug_glVertex3s = glow_debug_impl_glVertex3s;

static void glow_debug_impl_glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glUniform2dv", (void*)(ptrdiff_t)glow_glUniform2dv, location, count, value);
  glow_glUniform2dv(location, count, value);
  glow_post_callback_("glUniform2dv", (void*)(ptrdiff_t)glow_glUniform2dv, location, count, value);
}
PFNGLUNIFORM2DVPROC glow_debug_glUniform2dv = glow_debug_impl_glUniform2dv;

static void glow_debug_impl_glLightfv(GLenum light, GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glLightfv", (void*)(ptrdiff_t)glow_glLightfv, light, pname, params);
  glow_glLightfv(light, pname, params);
  glow_post_callback_("glLightfv", (void*)(ptrdiff_t)glow_glLightfv, light, pname, params);
}
PFNGLLIGHTFVPROC glow_debug_glLightfv = glow_debug_impl_glLightfv;

static void glow_debug_impl_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {

  glow_pre_callback_("glSecondaryColor3b", (void*)(ptrdiff_t)glow_glSecondaryColor3b, red, green, blue);
  glow_glSecondaryColor3b(red, green, blue);
  glow_post_callback_("glSecondaryColor3b", (void*)(ptrdiff_t)glow_glSecondaryColor3b, red, green, blue);
}
PFNGLSECONDARYCOLOR3BPROC glow_debug_glSecondaryColor3b = glow_debug_impl_glSecondaryColor3b;

static void glow_debug_impl_glBlendEquation(GLenum mode) {

  glow_pre_callback_("glBlendEquation", (void*)(ptrdiff_t)glow_glBlendEquation, mode);
  glow_glBlendEquation(mode);
  glow_post_callback_("glBlendEquation", (void*)(ptrdiff_t)glow_glBlendEquation, mode);
}
PFNGLBLENDEQUATIONPROC glow_debug_glBlendEquation = glow_debug_impl_glBlendEquation;

static void glow_debug_impl_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glVertexAttribIPointer", (void*)(ptrdiff_t)glow_glVertexAttribIPointer, index, size, type, stride, pointer);
  glow_glVertexAttribIPointer(index, size, type, stride, pointer);
  glow_post_callback_("glVertexAttribIPointer", (void*)(ptrdiff_t)glow_glVertexAttribIPointer, index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBIPOINTERPROC glow_debug_glVertexAttribIPointer = glow_debug_impl_glVertexAttribIPointer;

static void glow_debug_impl_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {

  glow_pre_callback_("glMap2f", (void*)(ptrdiff_t)glow_glMap2f, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  glow_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  glow_post_callback_("glMap2f", (void*)(ptrdiff_t)glow_glMap2f, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2FPROC glow_debug_glMap2f = glow_debug_impl_glMap2f;

static void glow_debug_impl_glVertexAttribI1uiv(GLuint index, const GLuint *v) {

  glow_pre_callback_("glVertexAttribI1uiv", (void*)(ptrdiff_t)glow_glVertexAttribI1uiv, index, v);
  glow_glVertexAttribI1uiv(index, v);
  glow_post_callback_("glVertexAttribI1uiv", (void*)(ptrdiff_t)glow_glVertexAttribI1uiv, index, v);
}
PFNGLVERTEXATTRIBI1UIVPROC glow_debug_glVertexAttribI1uiv = glow_debug_impl_glVertexAttribI1uiv;

static GLuint glow_debug_impl_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {

  GLuint ret;
  glow_pre_callback_("glGetUniformBlockIndex", (void*)(ptrdiff_t)glow_glGetUniformBlockIndex, program, uniformBlockName);
  ret = glow_glGetUniformBlockIndex(program, uniformBlockName);
  glow_post_callback_("glGetUniformBlockIndex", (void*)(ptrdiff_t)glow_glGetUniformBlockIndex, program, uniformBlockName);
  return ret;
}
PFNGLGETUNIFORMBLOCKINDEXPROC glow_debug_glGetUniformBlockIndex = glow_debug_impl_glGetUniformBlockIndex;

static void glow_debug_impl_glTexCoord4iv(const GLint *v) {

  glow_pre_callback_("glTexCoord4iv", (void*)(ptrdiff_t)glow_glTexCoord4iv, v);
  glow_glTexCoord4iv(v);
  glow_post_callback_("glTexCoord4iv", (void*)(ptrdiff_t)glow_glTexCoord4iv, v);
}
PFNGLTEXCOORD4IVPROC glow_debug_glTexCoord4iv = glow_debug_impl_glTexCoord4iv;

static void glow_debug_impl_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {

  glow_pre_callback_("glCopyTexSubImage1D", (void*)(ptrdiff_t)glow_glCopyTexSubImage1D, target, level, xoffset, x, y, width);
  glow_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  glow_post_callback_("glCopyTexSubImage1D", (void*)(ptrdiff_t)glow_glCopyTexSubImage1D, target, level, xoffset, x, y, width);
}
PFNGLCOPYTEXSUBIMAGE1DPROC glow_debug_glCopyTexSubImage1D = glow_debug_impl_glCopyTexSubImage1D;

static void glow_debug_impl_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {

  glow_pre_callback_("glCopyTexSubImage2D", (void*)(ptrdiff_t)glow_glCopyTexSubImage2D, target, level, xoffset, yoffset, x, y, width, height);
  glow_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  glow_post_callback_("glCopyTexSubImage2D", (void*)(ptrdiff_t)glow_glCopyTexSubImage2D, target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE2DPROC glow_debug_glCopyTexSubImage2D = glow_debug_impl_glCopyTexSubImage2D;

static void glow_debug_impl_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glWindowPos3d", (void*)(ptrdiff_t)glow_glWindowPos3d, x, y, z);
  glow_glWindowPos3d(x, y, z);
  glow_post_callback_("glWindowPos3d", (void*)(ptrdiff_t)glow_glWindowPos3d, x, y, z);
}
PFNGLWINDOWPOS3DPROC glow_debug_glWindowPos3d = glow_debug_impl_glWindowPos3d;

static void glow_debug_impl_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {

  glow_pre_callback_("glBitmap", (void*)(ptrdiff_t)glow_glBitmap, width, height, xorig, yorig, xmove, ymove, bitmap);
  glow_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
  glow_post_callback_("glBitmap", (void*)(ptrdiff_t)glow_glBitmap, width, height, xorig, yorig, xmove, ymove, bitmap);
}
PFNGLBITMAPPROC glow_debug_glBitmap = glow_debug_impl_glBitmap;

static void glow_debug_impl_glColor4dv(const GLdouble *v) {

  glow_pre_callback_("glColor4dv", (void*)(ptrdiff_t)glow_glColor4dv, v);
  glow_glColor4dv(v);
  glow_post_callback_("glColor4dv", (void*)(ptrdiff_t)glow_glColor4dv, v);
}
PFNGLCOLOR4DVPROC glow_debug_glColor4dv = glow_debug_impl_glColor4dv;

static void glow_debug_impl_glFogf(GLenum pname, GLfloat param) {

  glow_pre_callback_("glFogf", (void*)(ptrdiff_t)glow_glFogf, pname, param);
  glow_glFogf(pname, param);
  glow_post_callback_("glFogf", (void*)(ptrdiff_t)glow_glFogf, pname, param);
}
PFNGLFOGFPROC glow_debug_glFogf = glow_debug_impl_glFogf;

static void glow_debug_impl_glPassThrough(GLfloat token) {

  glow_pre_callback_("glPassThrough", (void*)(ptrdiff_t)glow_glPassThrough, token);
  glow_glPassThrough(token);
  glow_post_callback_("glPassThrough", (void*)(ptrdiff_t)glow_glPassThrough, token);
}
PFNGLPASSTHROUGHPROC glow_debug_glPassThrough = glow_debug_impl_glPassThrough;

static void glow_debug_impl_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {

  glow_pre_callback_("glMultiTexCoord2f", (void*)(ptrdiff_t)glow_glMultiTexCoord2f, target, s, t);
  glow_glMultiTexCoord2f(target, s, t);
  glow_post_callback_("glMultiTexCoord2f", (void*)(ptrdiff_t)glow_glMultiTexCoord2f, target, s, t);
}
PFNGLMULTITEXCOORD2FPROC glow_debug_glMultiTexCoord2f = glow_debug_impl_glMultiTexCoord2f;

static void glow_debug_impl_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {

  glow_pre_callback_("glSecondaryColor3s", (void*)(ptrdiff_t)glow_glSecondaryColor3s, red, green, blue);
  glow_glSecondaryColor3s(red, green, blue);
  glow_post_callback_("glSecondaryColor3s", (void*)(ptrdiff_t)glow_glSecondaryColor3s, red, green, blue);
}
PFNGLSECONDARYCOLOR3SPROC glow_debug_glSecondaryColor3s = glow_debug_impl_glSecondaryColor3s;

static void glow_debug_impl_glGetFloatv(GLenum pname, GLfloat *data) {

  glow_pre_callback_("glGetFloatv", (void*)(ptrdiff_t)glow_glGetFloatv, pname, data);
  glow_glGetFloatv(pname, data);
  glow_post_callback_("glGetFloatv", (void*)(ptrdiff_t)glow_glGetFloatv, pname, data);
}
PFNGLGETFLOATVPROC glow_debug_glGetFloatv = glow_debug_impl_glGetFloatv;

static void glow_debug_impl_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix2x4fv", (void*)(ptrdiff_t)glow_glUniformMatrix2x4fv, location, count, transpose, value);
  glow_glUniformMatrix2x4fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix2x4fv", (void*)(ptrdiff_t)glow_glUniformMatrix2x4fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X4FVPROC glow_debug_glUniformMatrix2x4fv = glow_debug_impl_glUniformMatrix2x4fv;

static void glow_debug_impl_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {

  glow_pre_callback_("glVertexAttribP1uiv", (void*)(ptrdiff_t)glow_glVertexAttribP1uiv, index, type, normalized, value);
  glow_glVertexAttribP1uiv(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP1uiv", (void*)(ptrdiff_t)glow_glVertexAttribP1uiv, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP1UIVPROC glow_debug_glVertexAttribP1uiv = glow_debug_impl_glVertexAttribP1uiv;

static void glow_debug_impl_glEndQueryIndexed(GLenum target, GLuint index) {

  glow_pre_callback_("glEndQueryIndexed", (void*)(ptrdiff_t)glow_glEndQueryIndexed, target, index);
  glow_glEndQueryIndexed(target, index);
  glow_post_callback_("glEndQueryIndexed", (void*)(ptrdiff_t)glow_glEndQueryIndexed, target, index);
}
PFNGLENDQUERYINDEXEDPROC glow_debug_glEndQueryIndexed = glow_debug_impl_glEndQueryIndexed;

static void glow_debug_impl_glGenQueries(GLsizei n, GLuint *ids) {

  glow_pre_callback_("glGenQueries", (void*)(ptrdiff_t)glow_glGenQueries, n, ids);
  glow_glGenQueries(n, ids);
  glow_post_callback_("glGenQueries", (void*)(ptrdiff_t)glow_glGenQueries, n, ids);
}
PFNGLGENQUERIESPROC glow_debug_glGenQueries = glow_debug_impl_glGenQueries;

static void glow_debug_impl_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix2x3dv", (void*)(ptrdiff_t)glow_glUniformMatrix2x3dv, location, count, transpose, value);
  glow_glUniformMatrix2x3dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix2x3dv", (void*)(ptrdiff_t)glow_glUniformMatrix2x3dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X3DVPROC glow_debug_glUniformMatrix2x3dv = glow_debug_impl_glUniformMatrix2x3dv;

static void glow_debug_impl_glTexCoord2iv(const GLint *v) {

  glow_pre_callback_("glTexCoord2iv", (void*)(ptrdiff_t)glow_glTexCoord2iv, v);
  glow_glTexCoord2iv(v);
  glow_post_callback_("glTexCoord2iv", (void*)(ptrdiff_t)glow_glTexCoord2iv, v);
}
PFNGLTEXCOORD2IVPROC glow_debug_glTexCoord2iv = glow_debug_impl_glTexCoord2iv;

static void glow_debug_impl_glGetMapfv(GLenum target, GLenum query, GLfloat *v) {

  glow_pre_callback_("glGetMapfv", (void*)(ptrdiff_t)glow_glGetMapfv, target, query, v);
  glow_glGetMapfv(target, query, v);
  glow_post_callback_("glGetMapfv", (void*)(ptrdiff_t)glow_glGetMapfv, target, query, v);
}
PFNGLGETMAPFVPROC glow_debug_glGetMapfv = glow_debug_impl_glGetMapfv;

static void glow_debug_impl_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetTexEnvfv", (void*)(ptrdiff_t)glow_glGetTexEnvfv, target, pname, params);
  glow_glGetTexEnvfv(target, pname, params);
  glow_post_callback_("glGetTexEnvfv", (void*)(ptrdiff_t)glow_glGetTexEnvfv, target, pname, params);
}
PFNGLGETTEXENVFVPROC glow_debug_glGetTexEnvfv = glow_debug_impl_glGetTexEnvfv;

static void glow_debug_impl_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {

  glow_pre_callback_("glProgramUniform1ui", (void*)(ptrdiff_t)glow_glProgramUniform1ui, program, location, v0);
  glow_glProgramUniform1ui(program, location, v0);
  glow_post_callback_("glProgramUniform1ui", (void*)(ptrdiff_t)glow_glProgramUniform1ui, program, location, v0);
}
PFNGLPROGRAMUNIFORM1UIPROC glow_debug_glProgramUniform1ui = glow_debug_impl_glProgramUniform1ui;

static void glow_debug_impl_glDepthFunc(GLenum func) {

  glow_pre_callback_("glDepthFunc", (void*)(ptrdiff_t)glow_glDepthFunc, func);
  glow_glDepthFunc(func);
  glow_post_callback_("glDepthFunc", (void*)(ptrdiff_t)glow_glDepthFunc, func);
}
PFNGLDEPTHFUNCPROC glow_debug_glDepthFunc = glow_debug_impl_glDepthFunc;

static void glow_debug_impl_glGetCompressedTexImage(GLenum target, GLint level, void *img) {

  glow_pre_callback_("glGetCompressedTexImage", (void*)(ptrdiff_t)glow_glGetCompressedTexImage, target, level, img);
  glow_glGetCompressedTexImage(target, level, img);
  glow_post_callback_("glGetCompressedTexImage", (void*)(ptrdiff_t)glow_glGetCompressedTexImage, target, level, img);
}
PFNGLGETCOMPRESSEDTEXIMAGEPROC glow_debug_glGetCompressedTexImage = glow_debug_impl_glGetCompressedTexImage;

static GLint glow_debug_impl_glRenderMode(GLenum mode) {

  GLint ret;
  glow_pre_callback_("glRenderMode", (void*)(ptrdiff_t)glow_glRenderMode, mode);
  ret = glow_glRenderMode(mode);
  glow_post_callback_("glRenderMode", (void*)(ptrdiff_t)glow_glRenderMode, mode);
  return ret;
}
PFNGLRENDERMODEPROC glow_debug_glRenderMode = glow_debug_impl_glRenderMode;

static void glow_debug_impl_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {

  glow_pre_callback_("glCopyTexImage1D", (void*)(ptrdiff_t)glow_glCopyTexImage1D, target, level, internalformat, x, y, width, border);
  glow_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  glow_post_callback_("glCopyTexImage1D", (void*)(ptrdiff_t)glow_glCopyTexImage1D, target, level, internalformat, x, y, width, border);
}
PFNGLCOPYTEXIMAGE1DPROC glow_debug_glCopyTexImage1D = glow_debug_impl_glCopyTexImage1D;

static void glow_debug_impl_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetActiveUniformsiv", (void*)(ptrdiff_t)glow_glGetActiveUniformsiv, program, uniformCount, uniformIndices, pname, params);
  glow_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  glow_post_callback_("glGetActiveUniformsiv", (void*)(ptrdiff_t)glow_glGetActiveUniformsiv, program, uniformCount, uniformIndices, pname, params);
}
PFNGLGETACTIVEUNIFORMSIVPROC glow_debug_glGetActiveUniformsiv = glow_debug_impl_glGetActiveUniformsiv;

static void glow_debug_impl_glPopAttrib() {

  glow_pre_callback_("glPopAttrib", (void*)(ptrdiff_t)glow_glPopAttrib);
  glow_glPopAttrib();
  glow_post_callback_("glPopAttrib", (void*)(ptrdiff_t)glow_glPopAttrib);
}
PFNGLPOPATTRIBPROC glow_debug_glPopAttrib = glow_debug_impl_glPopAttrib;

static void glow_debug_impl_glGetMapdv(GLenum target, GLenum query, GLdouble *v) {

  glow_pre_callback_("glGetMapdv", (void*)(ptrdiff_t)glow_glGetMapdv, target, query, v);
  glow_glGetMapdv(target, query, v);
  glow_post_callback_("glGetMapdv", (void*)(ptrdiff_t)glow_glGetMapdv, target, query, v);
}
PFNGLGETMAPDVPROC glow_debug_glGetMapdv = glow_debug_impl_glGetMapdv;

static void glow_debug_impl_glGenTextures(GLsizei n, GLuint *textures) {

  glow_pre_callback_("glGenTextures", (void*)(ptrdiff_t)glow_glGenTextures, n, textures);
  glow_glGenTextures(n, textures);
  glow_post_callback_("glGenTextures", (void*)(ptrdiff_t)glow_glGenTextures, n, textures);
}
PFNGLGENTEXTURESPROC glow_debug_glGenTextures = glow_debug_impl_glGenTextures;

static void glow_debug_impl_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {

  glow_pre_callback_("glCompressedTexImage2D", (void*)(ptrdiff_t)glow_glCompressedTexImage2D, target, level, internalformat, width, height, border, imageSize, data);
  glow_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  glow_post_callback_("glCompressedTexImage2D", (void*)(ptrdiff_t)glow_glCompressedTexImage2D, target, level, internalformat, width, height, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE2DPROC glow_debug_glCompressedTexImage2D = glow_debug_impl_glCompressedTexImage2D;

static void glow_debug_impl_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {

  glow_pre_callback_("glFramebufferTexture2D", (void*)(ptrdiff_t)glow_glFramebufferTexture2D, target, attachment, textarget, texture, level);
  glow_glFramebufferTexture2D(target, attachment, textarget, texture, level);
  glow_post_callback_("glFramebufferTexture2D", (void*)(ptrdiff_t)glow_glFramebufferTexture2D, target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE2DPROC glow_debug_glFramebufferTexture2D = glow_debug_impl_glFramebufferTexture2D;

static void glow_debug_impl_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {

  glow_pre_callback_("glGetInternalformati64v", (void*)(ptrdiff_t)glow_glGetInternalformati64v, target, internalformat, pname, bufSize, params);
  glow_glGetInternalformati64v(target, internalformat, pname, bufSize, params);
  glow_post_callback_("glGetInternalformati64v", (void*)(ptrdiff_t)glow_glGetInternalformati64v, target, internalformat, pname, bufSize, params);
}
PFNGLGETINTERNALFORMATI64VPROC glow_debug_glGetInternalformati64v = glow_debug_impl_glGetInternalformati64v;

static void glow_debug_impl_glLighti(GLenum light, GLenum pname, GLint param) {

  glow_pre_callback_("glLighti", (void*)(ptrdiff_t)glow_glLighti, light, pname, param);
  glow_glLighti(light, pname, param);
  glow_post_callback_("glLighti", (void*)(ptrdiff_t)glow_glLighti, light, pname, param);
}
PFNGLLIGHTIPROC glow_debug_glLighti = glow_debug_impl_glLighti;

static void glow_debug_impl_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix3x4fv", (void*)(ptrdiff_t)glow_glUniformMatrix3x4fv, location, count, transpose, value);
  glow_glUniformMatrix3x4fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix3x4fv", (void*)(ptrdiff_t)glow_glUniformMatrix3x4fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X4FVPROC glow_debug_glUniformMatrix3x4fv = glow_debug_impl_glUniformMatrix3x4fv;

static GLubyte glow_debug_impl_glGetStringi(GLenum name, GLuint index) {

  GLubyte ret;
  glow_pre_callback_("glGetStringi", (void*)(ptrdiff_t)glow_glGetStringi, name, index);
  ret = glow_glGetStringi(name, index);
  glow_post_callback_("glGetStringi", (void*)(ptrdiff_t)glow_glGetStringi, name, index);
  return ret;
}
PFNGLGETSTRINGIPROC glow_debug_glGetStringi = glow_debug_impl_glGetStringi;

static void glow_debug_impl_glVertexP3uiv(GLenum type, const GLuint *value) {

  glow_pre_callback_("glVertexP3uiv", (void*)(ptrdiff_t)glow_glVertexP3uiv, type, value);
  glow_glVertexP3uiv(type, value);
  glow_post_callback_("glVertexP3uiv", (void*)(ptrdiff_t)glow_glVertexP3uiv, type, value);
}
PFNGLVERTEXP3UIVPROC glow_debug_glVertexP3uiv = glow_debug_impl_glVertexP3uiv;

static void glow_debug_impl_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {

  glow_pre_callback_("glMultiDrawArrays", (void*)(ptrdiff_t)glow_glMultiDrawArrays, mode, first, count, drawcount);
  glow_glMultiDrawArrays(mode, first, count, drawcount);
  glow_post_callback_("glMultiDrawArrays", (void*)(ptrdiff_t)glow_glMultiDrawArrays, mode, first, count, drawcount);
}
PFNGLMULTIDRAWARRAYSPROC glow_debug_glMultiDrawArrays = glow_debug_impl_glMultiDrawArrays;

static void glow_debug_impl_glAttachShader(GLuint program, GLuint shader) {

  glow_pre_callback_("glAttachShader", (void*)(ptrdiff_t)glow_glAttachShader, program, shader);
  glow_glAttachShader(program, shader);
  glow_post_callback_("glAttachShader", (void*)(ptrdiff_t)glow_glAttachShader, program, shader);
}
PFNGLATTACHSHADERPROC glow_debug_glAttachShader = glow_debug_impl_glAttachShader;

static GLboolean glow_debug_impl_glIsList(GLuint list) {

  GLboolean ret;
  glow_pre_callback_("glIsList", (void*)(ptrdiff_t)glow_glIsList, list);
  ret = glow_glIsList(list);
  glow_post_callback_("glIsList", (void*)(ptrdiff_t)glow_glIsList, list);
  return ret;
}
PFNGLISLISTPROC glow_debug_glIsList = glow_debug_impl_glIsList;

static void glow_debug_impl_glDeleteQueries(GLsizei n, const GLuint *ids) {

  glow_pre_callback_("glDeleteQueries", (void*)(ptrdiff_t)glow_glDeleteQueries, n, ids);
  glow_glDeleteQueries(n, ids);
  glow_post_callback_("glDeleteQueries", (void*)(ptrdiff_t)glow_glDeleteQueries, n, ids);
}
PFNGLDELETEQUERIESPROC glow_debug_glDeleteQueries = glow_debug_impl_glDeleteQueries;

static void glow_debug_impl_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {

  glow_pre_callback_("glVertexAttribI4ui", (void*)(ptrdiff_t)glow_glVertexAttribI4ui, index, x, y, z, w);
  glow_glVertexAttribI4ui(index, x, y, z, w);
  glow_post_callback_("glVertexAttribI4ui", (void*)(ptrdiff_t)glow_glVertexAttribI4ui, index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4UIPROC glow_debug_glVertexAttribI4ui = glow_debug_impl_glVertexAttribI4ui;

static void glow_debug_impl_glVertexAttrib4iv(GLuint index, const GLint *v) {

  glow_pre_callback_("glVertexAttrib4iv", (void*)(ptrdiff_t)glow_glVertexAttrib4iv, index, v);
  glow_glVertexAttrib4iv(index, v);
  glow_post_callback_("glVertexAttrib4iv", (void*)(ptrdiff_t)glow_glVertexAttrib4iv, index, v);
}
PFNGLVERTEXATTRIB4IVPROC glow_debug_glVertexAttrib4iv = glow_debug_impl_glVertexAttrib4iv;

static void glow_debug_impl_glEdgeFlag(GLboolean flag) {

  glow_pre_callback_("glEdgeFlag", (void*)(ptrdiff_t)glow_glEdgeFlag, flag);
  glow_glEdgeFlag(flag);
  glow_post_callback_("glEdgeFlag", (void*)(ptrdiff_t)glow_glEdgeFlag, flag);
}
PFNGLEDGEFLAGPROC glow_debug_glEdgeFlag = glow_debug_impl_glEdgeFlag;

static void glow_debug_impl_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glRotated", (void*)(ptrdiff_t)glow_glRotated, angle, x, y, z);
  glow_glRotated(angle, x, y, z);
  glow_post_callback_("glRotated", (void*)(ptrdiff_t)glow_glRotated, angle, x, y, z);
}
PFNGLROTATEDPROC glow_debug_glRotated = glow_debug_impl_glRotated;

static void glow_debug_impl_glPointSize(GLfloat size) {

  glow_pre_callback_("glPointSize", (void*)(ptrdiff_t)glow_glPointSize, size);
  glow_glPointSize(size);
  glow_post_callback_("glPointSize", (void*)(ptrdiff_t)glow_glPointSize, size);
}
PFNGLPOINTSIZEPROC glow_debug_glPointSize = glow_debug_impl_glPointSize;

static void glow_debug_impl_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {

  glow_pre_callback_("glDepthRangeArrayv", (void*)(ptrdiff_t)glow_glDepthRangeArrayv, first, count, v);
  glow_glDepthRangeArrayv(first, count, v);
  glow_post_callback_("glDepthRangeArrayv", (void*)(ptrdiff_t)glow_glDepthRangeArrayv, first, count, v);
}
PFNGLDEPTHRANGEARRAYVPROC glow_debug_glDepthRangeArrayv = glow_debug_impl_glDepthRangeArrayv;

static void glow_debug_impl_glLoadIdentity() {

  glow_pre_callback_("glLoadIdentity", (void*)(ptrdiff_t)glow_glLoadIdentity);
  glow_glLoadIdentity();
  glow_post_callback_("glLoadIdentity", (void*)(ptrdiff_t)glow_glLoadIdentity);
}
PFNGLLOADIDENTITYPROC glow_debug_glLoadIdentity = glow_debug_impl_glLoadIdentity;

static void glow_debug_impl_glVertex3sv(const GLshort *v) {

  glow_pre_callback_("glVertex3sv", (void*)(ptrdiff_t)glow_glVertex3sv, v);
  glow_glVertex3sv(v);
  glow_post_callback_("glVertex3sv", (void*)(ptrdiff_t)glow_glVertex3sv, v);
}
PFNGLVERTEX3SVPROC glow_debug_glVertex3sv = glow_debug_impl_glVertex3sv;

static void glow_debug_impl_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix4x3fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x3fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix4x3fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x3fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glow_debug_glProgramUniformMatrix4x3fv = glow_debug_impl_glProgramUniformMatrix4x3fv;

static void glow_debug_impl_glDisableClientState(GLenum array) {

  glow_pre_callback_("glDisableClientState", (void*)(ptrdiff_t)glow_glDisableClientState, array);
  glow_glDisableClientState(array);
  glow_post_callback_("glDisableClientState", (void*)(ptrdiff_t)glow_glDisableClientState, array);
}
PFNGLDISABLECLIENTSTATEPROC glow_debug_glDisableClientState = glow_debug_impl_glDisableClientState;

static void glow_debug_impl_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {

  glow_pre_callback_("glSecondaryColor3f", (void*)(ptrdiff_t)glow_glSecondaryColor3f, red, green, blue);
  glow_glSecondaryColor3f(red, green, blue);
  glow_post_callback_("glSecondaryColor3f", (void*)(ptrdiff_t)glow_glSecondaryColor3f, red, green, blue);
}
PFNGLSECONDARYCOLOR3FPROC glow_debug_glSecondaryColor3f = glow_debug_impl_glSecondaryColor3f;

static void glow_debug_impl_glVertexAttrib3sv(GLuint index, const GLshort *v) {

  glow_pre_callback_("glVertexAttrib3sv", (void*)(ptrdiff_t)glow_glVertexAttrib3sv, index, v);
  glow_glVertexAttrib3sv(index, v);
  glow_post_callback_("glVertexAttrib3sv", (void*)(ptrdiff_t)glow_glVertexAttrib3sv, index, v);
}
PFNGLVERTEXATTRIB3SVPROC glow_debug_glVertexAttrib3sv = glow_debug_impl_glVertexAttrib3sv;

static void glow_debug_impl_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {

  glow_pre_callback_("glVertexAttribP3uiv", (void*)(ptrdiff_t)glow_glVertexAttribP3uiv, index, type, normalized, value);
  glow_glVertexAttribP3uiv(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP3uiv", (void*)(ptrdiff_t)glow_glVertexAttribP3uiv, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP3UIVPROC glow_debug_glVertexAttribP3uiv = glow_debug_impl_glVertexAttribP3uiv;

static void glow_debug_impl_glProgramParameteri(GLuint program, GLenum pname, GLint value) {

  glow_pre_callback_("glProgramParameteri", (void*)(ptrdiff_t)glow_glProgramParameteri, program, pname, value);
  glow_glProgramParameteri(program, pname, value);
  glow_post_callback_("glProgramParameteri", (void*)(ptrdiff_t)glow_glProgramParameteri, program, pname, value);
}
PFNGLPROGRAMPARAMETERIPROC glow_debug_glProgramParameteri = glow_debug_impl_glProgramParameteri;

static void glow_debug_impl_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetTexGeniv", (void*)(ptrdiff_t)glow_glGetTexGeniv, coord, pname, params);
  glow_glGetTexGeniv(coord, pname, params);
  glow_post_callback_("glGetTexGeniv", (void*)(ptrdiff_t)glow_glGetTexGeniv, coord, pname, params);
}
PFNGLGETTEXGENIVPROC glow_debug_glGetTexGeniv = glow_debug_impl_glGetTexGeniv;

static void glow_debug_impl_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {

  glow_pre_callback_("glVertexAttrib4s", (void*)(ptrdiff_t)glow_glVertexAttrib4s, index, x, y, z, w);
  glow_glVertexAttrib4s(index, x, y, z, w);
  glow_post_callback_("glVertexAttrib4s", (void*)(ptrdiff_t)glow_glVertexAttrib4s, index, x, y, z, w);
}
PFNGLVERTEXATTRIB4SPROC glow_debug_glVertexAttrib4s = glow_debug_impl_glVertexAttrib4s;

static void glow_debug_impl_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix2dv", (void*)(ptrdiff_t)glow_glUniformMatrix2dv, location, count, transpose, value);
  glow_glUniformMatrix2dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix2dv", (void*)(ptrdiff_t)glow_glUniformMatrix2dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2DVPROC glow_debug_glUniformMatrix2dv = glow_debug_impl_glUniformMatrix2dv;

static void glow_debug_impl_glViewportIndexedfv(GLuint index, const GLfloat *v) {

  glow_pre_callback_("glViewportIndexedfv", (void*)(ptrdiff_t)glow_glViewportIndexedfv, index, v);
  glow_glViewportIndexedfv(index, v);
  glow_post_callback_("glViewportIndexedfv", (void*)(ptrdiff_t)glow_glViewportIndexedfv, index, v);
}
PFNGLVIEWPORTINDEXEDFVPROC glow_debug_glViewportIndexedfv = glow_debug_impl_glViewportIndexedfv;

static void glow_debug_impl_glVertexAttrib2fv(GLuint index, const GLfloat *v) {

  glow_pre_callback_("glVertexAttrib2fv", (void*)(ptrdiff_t)glow_glVertexAttrib2fv, index, v);
  glow_glVertexAttrib2fv(index, v);
  glow_post_callback_("glVertexAttrib2fv", (void*)(ptrdiff_t)glow_glVertexAttrib2fv, index, v);
}
PFNGLVERTEXATTRIB2FVPROC glow_debug_glVertexAttrib2fv = glow_debug_impl_glVertexAttrib2fv;

static void glow_debug_impl_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {

  glow_pre_callback_("glMultiTexCoordP1uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP1uiv, texture, type, coords);
  glow_glMultiTexCoordP1uiv(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP1uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP1uiv, texture, type, coords);
}
PFNGLMULTITEXCOORDP1UIVPROC glow_debug_glMultiTexCoordP1uiv = glow_debug_impl_glMultiTexCoordP1uiv;

static void glow_debug_impl_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix4x3dv", (void*)(ptrdiff_t)glow_glUniformMatrix4x3dv, location, count, transpose, value);
  glow_glUniformMatrix4x3dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix4x3dv", (void*)(ptrdiff_t)glow_glUniformMatrix4x3dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X3DVPROC glow_debug_glUniformMatrix4x3dv = glow_debug_impl_glUniformMatrix4x3dv;

static void glow_debug_impl_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix2dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix2dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix2dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glow_debug_glProgramUniformMatrix2dv = glow_debug_impl_glProgramUniformMatrix2dv;

static void glow_debug_impl_glListBase(GLuint base) {

  glow_pre_callback_("glListBase", (void*)(ptrdiff_t)glow_glListBase, base);
  glow_glListBase(base);
  glow_post_callback_("glListBase", (void*)(ptrdiff_t)glow_glListBase, base);
}
PFNGLLISTBASEPROC glow_debug_glListBase = glow_debug_impl_glListBase;

static void glow_debug_impl_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {

  glow_pre_callback_("glUniform3f", (void*)(ptrdiff_t)glow_glUniform3f, location, v0, v1, v2);
  glow_glUniform3f(location, v0, v1, v2);
  glow_post_callback_("glUniform3f", (void*)(ptrdiff_t)glow_glUniform3f, location, v0, v1, v2);
}
PFNGLUNIFORM3FPROC glow_debug_glUniform3f = glow_debug_impl_glUniform3f;

static void glow_debug_impl_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {

  glow_pre_callback_("glGetActiveUniformName", (void*)(ptrdiff_t)glow_glGetActiveUniformName, program, uniformIndex, bufSize, length, uniformName);
  glow_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  glow_post_callback_("glGetActiveUniformName", (void*)(ptrdiff_t)glow_glGetActiveUniformName, program, uniformIndex, bufSize, length, uniformName);
}
PFNGLGETACTIVEUNIFORMNAMEPROC glow_debug_glGetActiveUniformName = glow_debug_impl_glGetActiveUniformName;

static void glow_debug_impl_glGetPointerv(GLenum pname, void **params) {

  glow_pre_callback_("glGetPointerv", (void*)(ptrdiff_t)glow_glGetPointerv, pname, params);
  glow_glGetPointerv(pname, params);
  glow_post_callback_("glGetPointerv", (void*)(ptrdiff_t)glow_glGetPointerv, pname, params);
}
PFNGLGETPOINTERVPROC glow_debug_glGetPointerv = glow_debug_impl_glGetPointerv;

static void glow_debug_impl_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glTexSubImage1D", (void*)(ptrdiff_t)glow_glTexSubImage1D, target, level, xoffset, width, format, type, pixels);
  glow_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  glow_post_callback_("glTexSubImage1D", (void*)(ptrdiff_t)glow_glTexSubImage1D, target, level, xoffset, width, format, type, pixels);
}
PFNGLTEXSUBIMAGE1DPROC glow_debug_glTexSubImage1D = glow_debug_impl_glTexSubImage1D;

static void glow_debug_impl_glArrayElement(GLint i) {

  glow_pre_callback_("glArrayElement", (void*)(ptrdiff_t)glow_glArrayElement, i);
  glow_glArrayElement(i);
  glow_post_callback_("glArrayElement", (void*)(ptrdiff_t)glow_glArrayElement, i);
}
PFNGLARRAYELEMENTPROC glow_debug_glArrayElement = glow_debug_impl_glArrayElement;

static void glow_debug_impl_glUniform2i(GLint location, GLint v0, GLint v1) {

  glow_pre_callback_("glUniform2i", (void*)(ptrdiff_t)glow_glUniform2i, location, v0, v1);
  glow_glUniform2i(location, v0, v1);
  glow_post_callback_("glUniform2i", (void*)(ptrdiff_t)glow_glUniform2i, location, v0, v1);
}
PFNGLUNIFORM2IPROC glow_debug_glUniform2i = glow_debug_impl_glUniform2i;

static void glow_debug_impl_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {

  glow_pre_callback_("glVertexAttrib4Nub", (void*)(ptrdiff_t)glow_glVertexAttrib4Nub, index, x, y, z, w);
  glow_glVertexAttrib4Nub(index, x, y, z, w);
  glow_post_callback_("glVertexAttrib4Nub", (void*)(ptrdiff_t)glow_glVertexAttrib4Nub, index, x, y, z, w);
}
PFNGLVERTEXATTRIB4NUBPROC glow_debug_glVertexAttrib4Nub = glow_debug_impl_glVertexAttrib4Nub;

static void glow_debug_impl_glGenFramebuffers(GLsizei n, GLuint *framebuffers) {

  glow_pre_callback_("glGenFramebuffers", (void*)(ptrdiff_t)glow_glGenFramebuffers, n, framebuffers);
  glow_glGenFramebuffers(n, framebuffers);
  glow_post_callback_("glGenFramebuffers", (void*)(ptrdiff_t)glow_glGenFramebuffers, n, framebuffers);
}
PFNGLGENFRAMEBUFFERSPROC glow_debug_glGenFramebuffers = glow_debug_impl_glGenFramebuffers;

static void glow_debug_impl_glEvalCoord2f(GLfloat u, GLfloat v) {

  glow_pre_callback_("glEvalCoord2f", (void*)(ptrdiff_t)glow_glEvalCoord2f, u, v);
  glow_glEvalCoord2f(u, v);
  glow_post_callback_("glEvalCoord2f", (void*)(ptrdiff_t)glow_glEvalCoord2f, u, v);
}
PFNGLEVALCOORD2FPROC glow_debug_glEvalCoord2f = glow_debug_impl_glEvalCoord2f;

static void glow_debug_impl_glVertex3dv(const GLdouble *v) {

  glow_pre_callback_("glVertex3dv", (void*)(ptrdiff_t)glow_glVertex3dv, v);
  glow_glVertex3dv(v);
  glow_post_callback_("glVertex3dv", (void*)(ptrdiff_t)glow_glVertex3dv, v);
}
PFNGLVERTEX3DVPROC glow_debug_glVertex3dv = glow_debug_impl_glVertex3dv;

static void glow_debug_impl_glWindowPos2iv(const GLint *v) {

  glow_pre_callback_("glWindowPos2iv", (void*)(ptrdiff_t)glow_glWindowPos2iv, v);
  glow_glWindowPos2iv(v);
  glow_post_callback_("glWindowPos2iv", (void*)(ptrdiff_t)glow_glWindowPos2iv, v);
}
PFNGLWINDOWPOS2IVPROC glow_debug_glWindowPos2iv = glow_debug_impl_glWindowPos2iv;

static void glow_debug_impl_glQueryCounter(GLuint id, GLenum target) {

  glow_pre_callback_("glQueryCounter", (void*)(ptrdiff_t)glow_glQueryCounter, id, target);
  glow_glQueryCounter(id, target);
  glow_post_callback_("glQueryCounter", (void*)(ptrdiff_t)glow_glQueryCounter, id, target);
}
PFNGLQUERYCOUNTERPROC glow_debug_glQueryCounter = glow_debug_impl_glQueryCounter;

static void glow_debug_impl_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {

  glow_pre_callback_("glTexCoord3d", (void*)(ptrdiff_t)glow_glTexCoord3d, s, t, r);
  glow_glTexCoord3d(s, t, r);
  glow_post_callback_("glTexCoord3d", (void*)(ptrdiff_t)glow_glTexCoord3d, s, t, r);
}
PFNGLTEXCOORD3DPROC glow_debug_glTexCoord3d = glow_debug_impl_glTexCoord3d;

static void glow_debug_impl_glLightModelfv(GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glLightModelfv", (void*)(ptrdiff_t)glow_glLightModelfv, pname, params);
  glow_glLightModelfv(pname, params);
  glow_post_callback_("glLightModelfv", (void*)(ptrdiff_t)glow_glLightModelfv, pname, params);
}
PFNGLLIGHTMODELFVPROC glow_debug_glLightModelfv = glow_debug_impl_glLightModelfv;

static void glow_debug_impl_glGetUniformfv(GLuint program, GLint location, GLfloat *params) {

  glow_pre_callback_("glGetUniformfv", (void*)(ptrdiff_t)glow_glGetUniformfv, program, location, params);
  glow_glGetUniformfv(program, location, params);
  glow_post_callback_("glGetUniformfv", (void*)(ptrdiff_t)glow_glGetUniformfv, program, location, params);
}
PFNGLGETUNIFORMFVPROC glow_debug_glGetUniformfv = glow_debug_impl_glGetUniformfv;

static void glow_debug_impl_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {

  glow_pre_callback_("glFramebufferTexture3D", (void*)(ptrdiff_t)glow_glFramebufferTexture3D, target, attachment, textarget, texture, level, zoffset);
  glow_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  glow_post_callback_("glFramebufferTexture3D", (void*)(ptrdiff_t)glow_glFramebufferTexture3D, target, attachment, textarget, texture, level, zoffset);
}
PFNGLFRAMEBUFFERTEXTURE3DPROC glow_debug_glFramebufferTexture3D = glow_debug_impl_glFramebufferTexture3D;

static void glow_debug_impl_glPixelStoref(GLenum pname, GLfloat param) {

  glow_pre_callback_("glPixelStoref", (void*)(ptrdiff_t)glow_glPixelStoref, pname, param);
  glow_glPixelStoref(pname, param);
  glow_post_callback_("glPixelStoref", (void*)(ptrdiff_t)glow_glPixelStoref, pname, param);
}
PFNGLPIXELSTOREFPROC glow_debug_glPixelStoref = glow_debug_impl_glPixelStoref;

static void glow_debug_impl_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {

  glow_pre_callback_("glBindFragDataLocationIndexed", (void*)(ptrdiff_t)glow_glBindFragDataLocationIndexed, program, colorNumber, index, name);
  glow_glBindFragDataLocationIndexed(program, colorNumber, index, name);
  glow_post_callback_("glBindFragDataLocationIndexed", (void*)(ptrdiff_t)glow_glBindFragDataLocationIndexed, program, colorNumber, index, name);
}
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glow_debug_glBindFragDataLocationIndexed = glow_debug_impl_glBindFragDataLocationIndexed;

static void glow_debug_impl_glColorP3ui(GLenum type, GLuint color) {

  glow_pre_callback_("glColorP3ui", (void*)(ptrdiff_t)glow_glColorP3ui, type, color);
  glow_glColorP3ui(type, color);
  glow_post_callback_("glColorP3ui", (void*)(ptrdiff_t)glow_glColorP3ui, type, color);
}
PFNGLCOLORP3UIPROC glow_debug_glColorP3ui = glow_debug_impl_glColorP3ui;

static void glow_debug_impl_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {

  glow_pre_callback_("glTexCoord4i", (void*)(ptrdiff_t)glow_glTexCoord4i, s, t, r, q);
  glow_glTexCoord4i(s, t, r, q);
  glow_post_callback_("glTexCoord4i", (void*)(ptrdiff_t)glow_glTexCoord4i, s, t, r, q);
}
PFNGLTEXCOORD4IPROC glow_debug_glTexCoord4i = glow_debug_impl_glTexCoord4i;

static void glow_debug_impl_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {

  glow_pre_callback_("glSecondaryColor3d", (void*)(ptrdiff_t)glow_glSecondaryColor3d, red, green, blue);
  glow_glSecondaryColor3d(red, green, blue);
  glow_post_callback_("glSecondaryColor3d", (void*)(ptrdiff_t)glow_glSecondaryColor3d, red, green, blue);
}
PFNGLSECONDARYCOLOR3DPROC glow_debug_glSecondaryColor3d = glow_debug_impl_glSecondaryColor3d;

static void glow_debug_impl_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {

  glow_pre_callback_("glUniform4ui", (void*)(ptrdiff_t)glow_glUniform4ui, location, v0, v1, v2, v3);
  glow_glUniform4ui(location, v0, v1, v2, v3);
  glow_post_callback_("glUniform4ui", (void*)(ptrdiff_t)glow_glUniform4ui, location, v0, v1, v2, v3);
}
PFNGLUNIFORM4UIPROC glow_debug_glUniform4ui = glow_debug_impl_glUniform4ui;

static void glow_debug_impl_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {

  glow_pre_callback_("glDrawTransformFeedbackStream", (void*)(ptrdiff_t)glow_glDrawTransformFeedbackStream, mode, id, stream);
  glow_glDrawTransformFeedbackStream(mode, id, stream);
  glow_post_callback_("glDrawTransformFeedbackStream", (void*)(ptrdiff_t)glow_glDrawTransformFeedbackStream, mode, id, stream);
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glow_debug_glDrawTransformFeedbackStream = glow_debug_impl_glDrawTransformFeedbackStream;

static void glow_debug_impl_glDepthRangef(GLfloat n, GLfloat f) {

  glow_pre_callback_("glDepthRangef", (void*)(ptrdiff_t)glow_glDepthRangef, n, f);
  glow_glDepthRangef(n, f);
  glow_post_callback_("glDepthRangef", (void*)(ptrdiff_t)glow_glDepthRangef, n, f);
}
PFNGLDEPTHRANGEFPROC glow_debug_glDepthRangef = glow_debug_impl_glDepthRangef;

static void glow_debug_impl_glRasterPos2dv(const GLdouble *v) {

  glow_pre_callback_("glRasterPos2dv", (void*)(ptrdiff_t)glow_glRasterPos2dv, v);
  glow_glRasterPos2dv(v);
  glow_post_callback_("glRasterPos2dv", (void*)(ptrdiff_t)glow_glRasterPos2dv, v);
}
PFNGLRASTERPOS2DVPROC glow_debug_glRasterPos2dv = glow_debug_impl_glRasterPos2dv;

static void glow_debug_impl_glVertex2s(GLshort x, GLshort y) {

  glow_pre_callback_("glVertex2s", (void*)(ptrdiff_t)glow_glVertex2s, x, y);
  glow_glVertex2s(x, y);
  glow_post_callback_("glVertex2s", (void*)(ptrdiff_t)glow_glVertex2s, x, y);
}
PFNGLVERTEX2SPROC glow_debug_glVertex2s = glow_debug_impl_glVertex2s;

static void glow_debug_impl_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {

  glow_pre_callback_("glBindBufferRange", (void*)(ptrdiff_t)glow_glBindBufferRange, target, index, buffer, offset, size);
  glow_glBindBufferRange(target, index, buffer, offset, size);
  glow_post_callback_("glBindBufferRange", (void*)(ptrdiff_t)glow_glBindBufferRange, target, index, buffer, offset, size);
}
PFNGLBINDBUFFERRANGEPROC glow_debug_glBindBufferRange = glow_debug_impl_glBindBufferRange;

static void glow_debug_impl_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {

  glow_pre_callback_("glNormal3s", (void*)(ptrdiff_t)glow_glNormal3s, nx, ny, nz);
  glow_glNormal3s(nx, ny, nz);
  glow_post_callback_("glNormal3s", (void*)(ptrdiff_t)glow_glNormal3s, nx, ny, nz);
}
PFNGLNORMAL3SPROC glow_debug_glNormal3s = glow_debug_impl_glNormal3s;

static void glow_debug_impl_glIndexi(GLint c) {

  glow_pre_callback_("glIndexi", (void*)(ptrdiff_t)glow_glIndexi, c);
  glow_glIndexi(c);
  glow_post_callback_("glIndexi", (void*)(ptrdiff_t)glow_glIndexi, c);
}
PFNGLINDEXIPROC glow_debug_glIndexi = glow_debug_impl_glIndexi;

static void glow_debug_impl_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glProgramUniform3fv", (void*)(ptrdiff_t)glow_glProgramUniform3fv, program, location, count, value);
  glow_glProgramUniform3fv(program, location, count, value);
  glow_post_callback_("glProgramUniform3fv", (void*)(ptrdiff_t)glow_glProgramUniform3fv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM3FVPROC glow_debug_glProgramUniform3fv = glow_debug_impl_glProgramUniform3fv;

static void glow_debug_impl_glValidateProgramPipeline(GLuint pipeline) {

  glow_pre_callback_("glValidateProgramPipeline", (void*)(ptrdiff_t)glow_glValidateProgramPipeline, pipeline);
  glow_glValidateProgramPipeline(pipeline);
  glow_post_callback_("glValidateProgramPipeline", (void*)(ptrdiff_t)glow_glValidateProgramPipeline, pipeline);
}
PFNGLVALIDATEPROGRAMPIPELINEPROC glow_debug_glValidateProgramPipeline = glow_debug_impl_glValidateProgramPipeline;

static void glow_debug_impl_glColor3s(GLshort red, GLshort green, GLshort blue) {

  glow_pre_callback_("glColor3s", (void*)(ptrdiff_t)glow_glColor3s, red, green, blue);
  glow_glColor3s(red, green, blue);
  glow_post_callback_("glColor3s", (void*)(ptrdiff_t)glow_glColor3s, red, green, blue);
}
PFNGLCOLOR3SPROC glow_debug_glColor3s = glow_debug_impl_glColor3s;

static void glow_debug_impl_glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glUniform3fv", (void*)(ptrdiff_t)glow_glUniform3fv, location, count, value);
  glow_glUniform3fv(location, count, value);
  glow_post_callback_("glUniform3fv", (void*)(ptrdiff_t)glow_glUniform3fv, location, count, value);
}
PFNGLUNIFORM3FVPROC glow_debug_glUniform3fv = glow_debug_impl_glUniform3fv;

static GLboolean glow_debug_impl_glIsRenderbuffer(GLuint renderbuffer) {

  GLboolean ret;
  glow_pre_callback_("glIsRenderbuffer", (void*)(ptrdiff_t)glow_glIsRenderbuffer, renderbuffer);
  ret = glow_glIsRenderbuffer(renderbuffer);
  glow_post_callback_("glIsRenderbuffer", (void*)(ptrdiff_t)glow_glIsRenderbuffer, renderbuffer);
  return ret;
}
PFNGLISRENDERBUFFERPROC glow_debug_glIsRenderbuffer = glow_debug_impl_glIsRenderbuffer;

static void glow_debug_impl_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix4dv", (void*)(ptrdiff_t)glow_glUniformMatrix4dv, location, count, transpose, value);
  glow_glUniformMatrix4dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix4dv", (void*)(ptrdiff_t)glow_glUniformMatrix4dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4DVPROC glow_debug_glUniformMatrix4dv = glow_debug_impl_glUniformMatrix4dv;

static void glow_debug_impl_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {

  glow_pre_callback_("glClearBufferSubData", (void*)(ptrdiff_t)glow_glClearBufferSubData, target, internalformat, offset, size, format, type, data);
  glow_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  glow_post_callback_("glClearBufferSubData", (void*)(ptrdiff_t)glow_glClearBufferSubData, target, internalformat, offset, size, format, type, data);
}
PFNGLCLEARBUFFERSUBDATAPROC glow_debug_glClearBufferSubData = glow_debug_impl_glClearBufferSubData;

static void glow_debug_impl_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glSecondaryColorPointer", (void*)(ptrdiff_t)glow_glSecondaryColorPointer, size, type, stride, pointer);
  glow_glSecondaryColorPointer(size, type, stride, pointer);
  glow_post_callback_("glSecondaryColorPointer", (void*)(ptrdiff_t)glow_glSecondaryColorPointer, size, type, stride, pointer);
}
PFNGLSECONDARYCOLORPOINTERPROC glow_debug_glSecondaryColorPointer = glow_debug_impl_glSecondaryColorPointer;

static void glow_debug_impl_glEndConditionalRender() {

  glow_pre_callback_("glEndConditionalRender", (void*)(ptrdiff_t)glow_glEndConditionalRender);
  glow_glEndConditionalRender();
  glow_post_callback_("glEndConditionalRender", (void*)(ptrdiff_t)glow_glEndConditionalRender);
}
PFNGLENDCONDITIONALRENDERPROC glow_debug_glEndConditionalRender = glow_debug_impl_glEndConditionalRender;

static void glow_debug_impl_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {

  glow_pre_callback_("glVertexBindingDivisor", (void*)(ptrdiff_t)glow_glVertexBindingDivisor, bindingindex, divisor);
  glow_glVertexBindingDivisor(bindingindex, divisor);
  glow_post_callback_("glVertexBindingDivisor", (void*)(ptrdiff_t)glow_glVertexBindingDivisor, bindingindex, divisor);
}
PFNGLVERTEXBINDINGDIVISORPROC glow_debug_glVertexBindingDivisor = glow_debug_impl_glVertexBindingDivisor;

static void glow_debug_impl_glRasterPos2f(GLfloat x, GLfloat y) {

  glow_pre_callback_("glRasterPos2f", (void*)(ptrdiff_t)glow_glRasterPos2f, x, y);
  glow_glRasterPos2f(x, y);
  glow_post_callback_("glRasterPos2f", (void*)(ptrdiff_t)glow_glRasterPos2f, x, y);
}
PFNGLRASTERPOS2FPROC glow_debug_glRasterPos2f = glow_debug_impl_glRasterPos2f;

static void glow_debug_impl_glVertexP4uiv(GLenum type, const GLuint *value) {

  glow_pre_callback_("glVertexP4uiv", (void*)(ptrdiff_t)glow_glVertexP4uiv, type, value);
  glow_glVertexP4uiv(type, value);
  glow_post_callback_("glVertexP4uiv", (void*)(ptrdiff_t)glow_glVertexP4uiv, type, value);
}
PFNGLVERTEXP4UIVPROC glow_debug_glVertexP4uiv = glow_debug_impl_glVertexP4uiv;

static void glow_debug_impl_glGetPolygonStipple(GLubyte *mask) {

  glow_pre_callback_("glGetPolygonStipple", (void*)(ptrdiff_t)glow_glGetPolygonStipple, mask);
  glow_glGetPolygonStipple(mask);
  glow_post_callback_("glGetPolygonStipple", (void*)(ptrdiff_t)glow_glGetPolygonStipple, mask);
}
PFNGLGETPOLYGONSTIPPLEPROC glow_debug_glGetPolygonStipple = glow_debug_impl_glGetPolygonStipple;

static void glow_debug_impl_glRasterPos3sv(const GLshort *v) {

  glow_pre_callback_("glRasterPos3sv", (void*)(ptrdiff_t)glow_glRasterPos3sv, v);
  glow_glRasterPos3sv(v);
  glow_post_callback_("glRasterPos3sv", (void*)(ptrdiff_t)glow_glRasterPos3sv, v);
}
PFNGLRASTERPOS3SVPROC glow_debug_glRasterPos3sv = glow_debug_impl_glRasterPos3sv;

static void glow_debug_impl_glMultiTexCoord1dv(GLenum target, const GLdouble *v) {

  glow_pre_callback_("glMultiTexCoord1dv", (void*)(ptrdiff_t)glow_glMultiTexCoord1dv, target, v);
  glow_glMultiTexCoord1dv(target, v);
  glow_post_callback_("glMultiTexCoord1dv", (void*)(ptrdiff_t)glow_glMultiTexCoord1dv, target, v);
}
PFNGLMULTITEXCOORD1DVPROC glow_debug_glMultiTexCoord1dv = glow_debug_impl_glMultiTexCoord1dv;

static void glow_debug_impl_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix2x4dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x4dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix2x4dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x4dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glow_debug_glProgramUniformMatrix2x4dv = glow_debug_impl_glProgramUniformMatrix2x4dv;

static void glow_debug_impl_glNormal3bv(const GLbyte *v) {

  glow_pre_callback_("glNormal3bv", (void*)(ptrdiff_t)glow_glNormal3bv, v);
  glow_glNormal3bv(v);
  glow_post_callback_("glNormal3bv", (void*)(ptrdiff_t)glow_glNormal3bv, v);
}
PFNGLNORMAL3BVPROC glow_debug_glNormal3bv = glow_debug_impl_glNormal3bv;

static void glow_debug_impl_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {

  glow_pre_callback_("glColorMask", (void*)(ptrdiff_t)glow_glColorMask, red, green, blue, alpha);
  glow_glColorMask(red, green, blue, alpha);
  glow_post_callback_("glColorMask", (void*)(ptrdiff_t)glow_glColorMask, red, green, blue, alpha);
}
PFNGLCOLORMASKPROC glow_debug_glColorMask = glow_debug_impl_glColorMask;

static void glow_debug_impl_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {

  glow_pre_callback_("glColor4b", (void*)(ptrdiff_t)glow_glColor4b, red, green, blue, alpha);
  glow_glColor4b(red, green, blue, alpha);
  glow_post_callback_("glColor4b", (void*)(ptrdiff_t)glow_glColor4b, red, green, blue, alpha);
}
PFNGLCOLOR4BPROC glow_debug_glColor4b = glow_debug_impl_glColor4b;

static void glow_debug_impl_glClearStencil(GLint s) {

  glow_pre_callback_("glClearStencil", (void*)(ptrdiff_t)glow_glClearStencil, s);
  glow_glClearStencil(s);
  glow_post_callback_("glClearStencil", (void*)(ptrdiff_t)glow_glClearStencil, s);
}
PFNGLCLEARSTENCILPROC glow_debug_glClearStencil = glow_debug_impl_glClearStencil;

static void glow_debug_impl_glVertexAttribI2uiv(GLuint index, const GLuint *v) {

  glow_pre_callback_("glVertexAttribI2uiv", (void*)(ptrdiff_t)glow_glVertexAttribI2uiv, index, v);
  glow_glVertexAttribI2uiv(index, v);
  glow_post_callback_("glVertexAttribI2uiv", (void*)(ptrdiff_t)glow_glVertexAttribI2uiv, index, v);
}
PFNGLVERTEXATTRIBI2UIVPROC glow_debug_glVertexAttribI2uiv = glow_debug_impl_glVertexAttribI2uiv;

static void glow_debug_impl_glUniform4iv(GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glUniform4iv", (void*)(ptrdiff_t)glow_glUniform4iv, location, count, value);
  glow_glUniform4iv(location, count, value);
  glow_post_callback_("glUniform4iv", (void*)(ptrdiff_t)glow_glUniform4iv, location, count, value);
}
PFNGLUNIFORM4IVPROC glow_debug_glUniform4iv = glow_debug_impl_glUniform4iv;

static void glow_debug_impl_glTexCoord1dv(const GLdouble *v) {

  glow_pre_callback_("glTexCoord1dv", (void*)(ptrdiff_t)glow_glTexCoord1dv, v);
  glow_glTexCoord1dv(v);
  glow_post_callback_("glTexCoord1dv", (void*)(ptrdiff_t)glow_glTexCoord1dv, v);
}
PFNGLTEXCOORD1DVPROC glow_debug_glTexCoord1dv = glow_debug_impl_glTexCoord1dv;

static void glow_debug_impl_glScalef(GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glScalef", (void*)(ptrdiff_t)glow_glScalef, x, y, z);
  glow_glScalef(x, y, z);
  glow_post_callback_("glScalef", (void*)(ptrdiff_t)glow_glScalef, x, y, z);
}
PFNGLSCALEFPROC glow_debug_glScalef = glow_debug_impl_glScalef;

static void glow_debug_impl_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {

  glow_pre_callback_("glCopyTexImage2D", (void*)(ptrdiff_t)glow_glCopyTexImage2D, target, level, internalformat, x, y, width, height, border);
  glow_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  glow_post_callback_("glCopyTexImage2D", (void*)(ptrdiff_t)glow_glCopyTexImage2D, target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYTEXIMAGE2DPROC glow_debug_glCopyTexImage2D = glow_debug_impl_glCopyTexImage2D;

static void glow_debug_impl_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {

  glow_pre_callback_("glSecondaryColor3us", (void*)(ptrdiff_t)glow_glSecondaryColor3us, red, green, blue);
  glow_glSecondaryColor3us(red, green, blue);
  glow_post_callback_("glSecondaryColor3us", (void*)(ptrdiff_t)glow_glSecondaryColor3us, red, green, blue);
}
PFNGLSECONDARYCOLOR3USPROC glow_debug_glSecondaryColor3us = glow_debug_impl_glSecondaryColor3us;

static void glow_debug_impl_glIndexsv(const GLshort *c) {

  glow_pre_callback_("glIndexsv", (void*)(ptrdiff_t)glow_glIndexsv, c);
  glow_glIndexsv(c);
  glow_post_callback_("glIndexsv", (void*)(ptrdiff_t)glow_glIndexsv, c);
}
PFNGLINDEXSVPROC glow_debug_glIndexsv = glow_debug_impl_glIndexsv;

static void glow_debug_impl_glRasterPos3iv(const GLint *v) {

  glow_pre_callback_("glRasterPos3iv", (void*)(ptrdiff_t)glow_glRasterPos3iv, v);
  glow_glRasterPos3iv(v);
  glow_post_callback_("glRasterPos3iv", (void*)(ptrdiff_t)glow_glRasterPos3iv, v);
}
PFNGLRASTERPOS3IVPROC glow_debug_glRasterPos3iv = glow_debug_impl_glRasterPos3iv;

static GLuint glow_debug_impl_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {

  GLuint ret;
  glow_pre_callback_("glGetSubroutineIndex", (void*)(ptrdiff_t)glow_glGetSubroutineIndex, program, shadertype, name);
  ret = glow_glGetSubroutineIndex(program, shadertype, name);
  glow_post_callback_("glGetSubroutineIndex", (void*)(ptrdiff_t)glow_glGetSubroutineIndex, program, shadertype, name);
  return ret;
}
PFNGLGETSUBROUTINEINDEXPROC glow_debug_glGetSubroutineIndex = glow_debug_impl_glGetSubroutineIndex;

static void glow_debug_impl_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {

  glow_pre_callback_("glColor4ub", (void*)(ptrdiff_t)glow_glColor4ub, red, green, blue, alpha);
  glow_glColor4ub(red, green, blue, alpha);
  glow_post_callback_("glColor4ub", (void*)(ptrdiff_t)glow_glColor4ub, red, green, blue, alpha);
}
PFNGLCOLOR4UBPROC glow_debug_glColor4ub = glow_debug_impl_glColor4ub;

static void glow_debug_impl_glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glUniform2fv", (void*)(ptrdiff_t)glow_glUniform2fv, location, count, value);
  glow_glUniform2fv(location, count, value);
  glow_post_callback_("glUniform2fv", (void*)(ptrdiff_t)glow_glUniform2fv, location, count, value);
}
PFNGLUNIFORM2FVPROC glow_debug_glUniform2fv = glow_debug_impl_glUniform2fv;

static GLint glow_debug_impl_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetSubroutineUniformLocation", (void*)(ptrdiff_t)glow_glGetSubroutineUniformLocation, program, shadertype, name);
  ret = glow_glGetSubroutineUniformLocation(program, shadertype, name);
  glow_post_callback_("glGetSubroutineUniformLocation", (void*)(ptrdiff_t)glow_glGetSubroutineUniformLocation, program, shadertype, name);
  return ret;
}
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glow_debug_glGetSubroutineUniformLocation = glow_debug_impl_glGetSubroutineUniformLocation;

static void glow_debug_impl_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {

  glow_pre_callback_("glShaderStorageBlockBinding", (void*)(ptrdiff_t)glow_glShaderStorageBlockBinding, program, storageBlockIndex, storageBlockBinding);
  glow_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  glow_post_callback_("glShaderStorageBlockBinding", (void*)(ptrdiff_t)glow_glShaderStorageBlockBinding, program, storageBlockIndex, storageBlockBinding);
}
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glow_debug_glShaderStorageBlockBinding = glow_debug_impl_glShaderStorageBlockBinding;

static void glow_debug_impl_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glTexSubImage3D", (void*)(ptrdiff_t)glow_glTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  glow_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  glow_post_callback_("glTexSubImage3D", (void*)(ptrdiff_t)glow_glTexSubImage3D, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLTEXSUBIMAGE3DPROC glow_debug_glTexSubImage3D = glow_debug_impl_glTexSubImage3D;

static void glow_debug_impl_glLightModelf(GLenum pname, GLfloat param) {

  glow_pre_callback_("glLightModelf", (void*)(ptrdiff_t)glow_glLightModelf, pname, param);
  glow_glLightModelf(pname, param);
  glow_post_callback_("glLightModelf", (void*)(ptrdiff_t)glow_glLightModelf, pname, param);
}
PFNGLLIGHTMODELFPROC glow_debug_glLightModelf = glow_debug_impl_glLightModelf;

static void glow_debug_impl_glWindowPos3fv(const GLfloat *v) {

  glow_pre_callback_("glWindowPos3fv", (void*)(ptrdiff_t)glow_glWindowPos3fv, v);
  glow_glWindowPos3fv(v);
  glow_post_callback_("glWindowPos3fv", (void*)(ptrdiff_t)glow_glWindowPos3fv, v);
}
PFNGLWINDOWPOS3FVPROC glow_debug_glWindowPos3fv = glow_debug_impl_glWindowPos3fv;

static void glow_debug_impl_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {

  glow_pre_callback_("glStencilFuncSeparate", (void*)(ptrdiff_t)glow_glStencilFuncSeparate, face, func, ref, mask);
  glow_glStencilFuncSeparate(face, func, ref, mask);
  glow_post_callback_("glStencilFuncSeparate", (void*)(ptrdiff_t)glow_glStencilFuncSeparate, face, func, ref, mask);
}
PFNGLSTENCILFUNCSEPARATEPROC glow_debug_glStencilFuncSeparate = glow_debug_impl_glStencilFuncSeparate;

static void glow_debug_impl_glReadBuffer(GLenum src) {

  glow_pre_callback_("glReadBuffer", (void*)(ptrdiff_t)glow_glReadBuffer, src);
  glow_glReadBuffer(src);
  glow_post_callback_("glReadBuffer", (void*)(ptrdiff_t)glow_glReadBuffer, src);
}
PFNGLREADBUFFERPROC glow_debug_glReadBuffer = glow_debug_impl_glReadBuffer;

static void glow_debug_impl_glMultiTexCoord3fv(GLenum target, const GLfloat *v) {

  glow_pre_callback_("glMultiTexCoord3fv", (void*)(ptrdiff_t)glow_glMultiTexCoord3fv, target, v);
  glow_glMultiTexCoord3fv(target, v);
  glow_post_callback_("glMultiTexCoord3fv", (void*)(ptrdiff_t)glow_glMultiTexCoord3fv, target, v);
}
PFNGLMULTITEXCOORD3FVPROC glow_debug_glMultiTexCoord3fv = glow_debug_impl_glMultiTexCoord3fv;

static GLenum glow_debug_impl_glCheckFramebufferStatus(GLenum target) {

  GLenum ret;
  glow_pre_callback_("glCheckFramebufferStatus", (void*)(ptrdiff_t)glow_glCheckFramebufferStatus, target);
  ret = glow_glCheckFramebufferStatus(target);
  glow_post_callback_("glCheckFramebufferStatus", (void*)(ptrdiff_t)glow_glCheckFramebufferStatus, target);
  return ret;
}
PFNGLCHECKFRAMEBUFFERSTATUSPROC glow_debug_glCheckFramebufferStatus = glow_debug_impl_glCheckFramebufferStatus;

static void glow_debug_impl_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glProgramUniform4uiv", (void*)(ptrdiff_t)glow_glProgramUniform4uiv, program, location, count, value);
  glow_glProgramUniform4uiv(program, location, count, value);
  glow_post_callback_("glProgramUniform4uiv", (void*)(ptrdiff_t)glow_glProgramUniform4uiv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM4UIVPROC glow_debug_glProgramUniform4uiv = glow_debug_impl_glProgramUniform4uiv;

static void glow_debug_impl_glVertex2i(GLint x, GLint y) {

  glow_pre_callback_("glVertex2i", (void*)(ptrdiff_t)glow_glVertex2i, x, y);
  glow_glVertex2i(x, y);
  glow_post_callback_("glVertex2i", (void*)(ptrdiff_t)glow_glVertex2i, x, y);
}
PFNGLVERTEX2IPROC glow_debug_glVertex2i = glow_debug_impl_glVertex2i;

static void glow_debug_impl_glAlphaFunc(GLenum func, GLfloat ref) {

  glow_pre_callback_("glAlphaFunc", (void*)(ptrdiff_t)glow_glAlphaFunc, func, ref);
  glow_glAlphaFunc(func, ref);
  glow_post_callback_("glAlphaFunc", (void*)(ptrdiff_t)glow_glAlphaFunc, func, ref);
}
PFNGLALPHAFUNCPROC glow_debug_glAlphaFunc = glow_debug_impl_glAlphaFunc;

static void glow_debug_impl_glDrawBuffers(GLsizei n, const GLenum *bufs) {

  glow_pre_callback_("glDrawBuffers", (void*)(ptrdiff_t)glow_glDrawBuffers, n, bufs);
  glow_glDrawBuffers(n, bufs);
  glow_post_callback_("glDrawBuffers", (void*)(ptrdiff_t)glow_glDrawBuffers, n, bufs);
}
PFNGLDRAWBUFFERSPROC glow_debug_glDrawBuffers = glow_debug_impl_glDrawBuffers;

static void glow_debug_impl_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {

  glow_pre_callback_("glVertexAttrib2f", (void*)(ptrdiff_t)glow_glVertexAttrib2f, index, x, y);
  glow_glVertexAttrib2f(index, x, y);
  glow_post_callback_("glVertexAttrib2f", (void*)(ptrdiff_t)glow_glVertexAttrib2f, index, x, y);
}
PFNGLVERTEXATTRIB2FPROC glow_debug_glVertexAttrib2f = glow_debug_impl_glVertexAttrib2f;

static void glow_debug_impl_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix3x2fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x2fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix3x2fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x2fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glow_debug_glProgramUniformMatrix3x2fv = glow_debug_impl_glProgramUniformMatrix3x2fv;

static void glow_debug_impl_glVertex2iv(const GLint *v) {

  glow_pre_callback_("glVertex2iv", (void*)(ptrdiff_t)glow_glVertex2iv, v);
  glow_glVertex2iv(v);
  glow_post_callback_("glVertex2iv", (void*)(ptrdiff_t)glow_glVertex2iv, v);
}
PFNGLVERTEX2IVPROC glow_debug_glVertex2iv = glow_debug_impl_glVertex2iv;

static void glow_debug_impl_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {

  glow_pre_callback_("glCompressedTexImage1D", (void*)(ptrdiff_t)glow_glCompressedTexImage1D, target, level, internalformat, width, border, imageSize, data);
  glow_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  glow_post_callback_("glCompressedTexImage1D", (void*)(ptrdiff_t)glow_glCompressedTexImage1D, target, level, internalformat, width, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE1DPROC glow_debug_glCompressedTexImage1D = glow_debug_impl_glCompressedTexImage1D;

static void glow_debug_impl_glVertex2d(GLdouble x, GLdouble y) {

  glow_pre_callback_("glVertex2d", (void*)(ptrdiff_t)glow_glVertex2d, x, y);
  glow_glVertex2d(x, y);
  glow_post_callback_("glVertex2d", (void*)(ptrdiff_t)glow_glVertex2d, x, y);
}
PFNGLVERTEX2DPROC glow_debug_glVertex2d = glow_debug_impl_glVertex2d;

static void glow_debug_impl_glLightf(GLenum light, GLenum pname, GLfloat param) {

  glow_pre_callback_("glLightf", (void*)(ptrdiff_t)glow_glLightf, light, pname, param);
  glow_glLightf(light, pname, param);
  glow_post_callback_("glLightf", (void*)(ptrdiff_t)glow_glLightf, light, pname, param);
}
PFNGLLIGHTFPROC glow_debug_glLightf = glow_debug_impl_glLightf;

static GLsync glow_debug_impl_glFenceSync(GLenum condition, GLbitfield flags) {

  GLsync ret;
  glow_pre_callback_("glFenceSync", (void*)(ptrdiff_t)glow_glFenceSync, condition, flags);
  ret = glow_glFenceSync(condition, flags);
  glow_post_callback_("glFenceSync", (void*)(ptrdiff_t)glow_glFenceSync, condition, flags);
  return ret;
}
PFNGLFENCESYNCPROC glow_debug_glFenceSync = glow_debug_impl_glFenceSync;

static void glow_debug_impl_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {

  glow_pre_callback_("glVertexAttribP4ui", (void*)(ptrdiff_t)glow_glVertexAttribP4ui, index, type, normalized, value);
  glow_glVertexAttribP4ui(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP4ui", (void*)(ptrdiff_t)glow_glVertexAttribP4ui, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP4UIPROC glow_debug_glVertexAttribP4ui = glow_debug_impl_glVertexAttribP4ui;

static void glow_debug_impl_glTexCoordP3ui(GLenum type, GLuint coords) {

  glow_pre_callback_("glTexCoordP3ui", (void*)(ptrdiff_t)glow_glTexCoordP3ui, type, coords);
  glow_glTexCoordP3ui(type, coords);
  glow_post_callback_("glTexCoordP3ui", (void*)(ptrdiff_t)glow_glTexCoordP3ui, type, coords);
}
PFNGLTEXCOORDP3UIPROC glow_debug_glTexCoordP3ui = glow_debug_impl_glTexCoordP3ui;

static void glow_debug_impl_glTexCoordP4ui(GLenum type, GLuint coords) {

  glow_pre_callback_("glTexCoordP4ui", (void*)(ptrdiff_t)glow_glTexCoordP4ui, type, coords);
  glow_glTexCoordP4ui(type, coords);
  glow_post_callback_("glTexCoordP4ui", (void*)(ptrdiff_t)glow_glTexCoordP4ui, type, coords);
}
PFNGLTEXCOORDP4UIPROC glow_debug_glTexCoordP4ui = glow_debug_impl_glTexCoordP4ui;

static void glow_debug_impl_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {

  glow_pre_callback_("glTexBufferRange", (void*)(ptrdiff_t)glow_glTexBufferRange, target, internalformat, buffer, offset, size);
  glow_glTexBufferRange(target, internalformat, buffer, offset, size);
  glow_post_callback_("glTexBufferRange", (void*)(ptrdiff_t)glow_glTexBufferRange, target, internalformat, buffer, offset, size);
}
PFNGLTEXBUFFERRANGEPROC glow_debug_glTexBufferRange = glow_debug_impl_glTexBufferRange;

static void glow_debug_impl_glRectiv(const GLint *v1, const GLint *v2) {

  glow_pre_callback_("glRectiv", (void*)(ptrdiff_t)glow_glRectiv, v1, v2);
  glow_glRectiv(v1, v2);
  glow_post_callback_("glRectiv", (void*)(ptrdiff_t)glow_glRectiv, v1, v2);
}
PFNGLRECTIVPROC glow_debug_glRectiv = glow_debug_impl_glRectiv;

static void glow_debug_impl_glLinkProgram(GLuint program) {

  glow_pre_callback_("glLinkProgram", (void*)(ptrdiff_t)glow_glLinkProgram, program);
  glow_glLinkProgram(program);
  glow_post_callback_("glLinkProgram", (void*)(ptrdiff_t)glow_glLinkProgram, program);
}
PFNGLLINKPROGRAMPROC glow_debug_glLinkProgram = glow_debug_impl_glLinkProgram;

static GLboolean glow_debug_impl_glIsTexture(GLuint texture) {

  GLboolean ret;
  glow_pre_callback_("glIsTexture", (void*)(ptrdiff_t)glow_glIsTexture, texture);
  ret = glow_glIsTexture(texture);
  glow_post_callback_("glIsTexture", (void*)(ptrdiff_t)glow_glIsTexture, texture);
  return ret;
}
PFNGLISTEXTUREPROC glow_debug_glIsTexture = glow_debug_impl_glIsTexture;

static void glow_debug_impl_glGetProgramiv(GLuint program, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetProgramiv", (void*)(ptrdiff_t)glow_glGetProgramiv, program, pname, params);
  glow_glGetProgramiv(program, pname, params);
  glow_post_callback_("glGetProgramiv", (void*)(ptrdiff_t)glow_glGetProgramiv, program, pname, params);
}
PFNGLGETPROGRAMIVPROC glow_debug_glGetProgramiv = glow_debug_impl_glGetProgramiv;

static void glow_debug_impl_glUniform1f(GLint location, GLfloat v0) {

  glow_pre_callback_("glUniform1f", (void*)(ptrdiff_t)glow_glUniform1f, location, v0);
  glow_glUniform1f(location, v0);
  glow_post_callback_("glUniform1f", (void*)(ptrdiff_t)glow_glUniform1f, location, v0);
}
PFNGLUNIFORM1FPROC glow_debug_glUniform1f = glow_debug_impl_glUniform1f;

static void glow_debug_impl_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetProgramInterfaceiv", (void*)(ptrdiff_t)glow_glGetProgramInterfaceiv, program, programInterface, pname, params);
  glow_glGetProgramInterfaceiv(program, programInterface, pname, params);
  glow_post_callback_("glGetProgramInterfaceiv", (void*)(ptrdiff_t)glow_glGetProgramInterfaceiv, program, programInterface, pname, params);
}
PFNGLGETPROGRAMINTERFACEIVPROC glow_debug_glGetProgramInterfaceiv = glow_debug_impl_glGetProgramInterfaceiv;

static GLint glow_debug_impl_glGetUniformLocation(GLuint program, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetUniformLocation", (void*)(ptrdiff_t)glow_glGetUniformLocation, program, name);
  ret = glow_glGetUniformLocation(program, name);
  glow_post_callback_("glGetUniformLocation", (void*)(ptrdiff_t)glow_glGetUniformLocation, program, name);
  return ret;
}
PFNGLGETUNIFORMLOCATIONPROC glow_debug_glGetUniformLocation = glow_debug_impl_glGetUniformLocation;

static void glow_debug_impl_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {

  glow_pre_callback_("glDrawElementsInstancedBaseVertex", (void*)(ptrdiff_t)glow_glDrawElementsInstancedBaseVertex, mode, count, type, indices, instancecount, basevertex);
  glow_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  glow_post_callback_("glDrawElementsInstancedBaseVertex", (void*)(ptrdiff_t)glow_glDrawElementsInstancedBaseVertex, mode, count, type, indices, instancecount, basevertex);
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glow_debug_glDrawElementsInstancedBaseVertex = glow_debug_impl_glDrawElementsInstancedBaseVertex;

static void glow_debug_impl_glColor3dv(const GLdouble *v) {

  glow_pre_callback_("glColor3dv", (void*)(ptrdiff_t)glow_glColor3dv, v);
  glow_glColor3dv(v);
  glow_post_callback_("glColor3dv", (void*)(ptrdiff_t)glow_glColor3dv, v);
}
PFNGLCOLOR3DVPROC glow_debug_glColor3dv = glow_debug_impl_glColor3dv;

static void glow_debug_impl_glWindowPos2sv(const GLshort *v) {

  glow_pre_callback_("glWindowPos2sv", (void*)(ptrdiff_t)glow_glWindowPos2sv, v);
  glow_glWindowPos2sv(v);
  glow_post_callback_("glWindowPos2sv", (void*)(ptrdiff_t)glow_glWindowPos2sv, v);
}
PFNGLWINDOWPOS2SVPROC glow_debug_glWindowPos2sv = glow_debug_impl_glWindowPos2sv;

static void glow_debug_impl_glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glUniform1fv", (void*)(ptrdiff_t)glow_glUniform1fv, location, count, value);
  glow_glUniform1fv(location, count, value);
  glow_post_callback_("glUniform1fv", (void*)(ptrdiff_t)glow_glUniform1fv, location, count, value);
}
PFNGLUNIFORM1FVPROC glow_debug_glUniform1fv = glow_debug_impl_glUniform1fv;

static void glow_debug_impl_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {

  glow_pre_callback_("glSamplerParameterIuiv", (void*)(ptrdiff_t)glow_glSamplerParameterIuiv, sampler, pname, param);
  glow_glSamplerParameterIuiv(sampler, pname, param);
  glow_post_callback_("glSamplerParameterIuiv", (void*)(ptrdiff_t)glow_glSamplerParameterIuiv, sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIUIVPROC glow_debug_glSamplerParameterIuiv = glow_debug_impl_glSamplerParameterIuiv;

static void glow_debug_impl_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {

  glow_pre_callback_("glCopyTexSubImage3D", (void*)(ptrdiff_t)glow_glCopyTexSubImage3D, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  glow_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  glow_post_callback_("glCopyTexSubImage3D", (void*)(ptrdiff_t)glow_glCopyTexSubImage3D, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE3DPROC glow_debug_glCopyTexSubImage3D = glow_debug_impl_glCopyTexSubImage3D;

static GLint glow_debug_impl_glGetAttribLocation(GLuint program, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetAttribLocation", (void*)(ptrdiff_t)glow_glGetAttribLocation, program, name);
  ret = glow_glGetAttribLocation(program, name);
  glow_post_callback_("glGetAttribLocation", (void*)(ptrdiff_t)glow_glGetAttribLocation, program, name);
  return ret;
}
PFNGLGETATTRIBLOCATIONPROC glow_debug_glGetAttribLocation = glow_debug_impl_glGetAttribLocation;

static void glow_debug_impl_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix4x3fv", (void*)(ptrdiff_t)glow_glUniformMatrix4x3fv, location, count, transpose, value);
  glow_glUniformMatrix4x3fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix4x3fv", (void*)(ptrdiff_t)glow_glUniformMatrix4x3fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X3FVPROC glow_debug_glUniformMatrix4x3fv = glow_debug_impl_glUniformMatrix4x3fv;

static void glow_debug_impl_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {

  glow_pre_callback_("glVertexAttribI2ui", (void*)(ptrdiff_t)glow_glVertexAttribI2ui, index, x, y);
  glow_glVertexAttribI2ui(index, x, y);
  glow_post_callback_("glVertexAttribI2ui", (void*)(ptrdiff_t)glow_glVertexAttribI2ui, index, x, y);
}
PFNGLVERTEXATTRIBI2UIPROC glow_debug_glVertexAttribI2ui = glow_debug_impl_glVertexAttribI2ui;

static void glow_debug_impl_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {

  glow_pre_callback_("glBlendEquationSeparatei", (void*)(ptrdiff_t)glow_glBlendEquationSeparatei, buf, modeRGB, modeAlpha);
  glow_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  glow_post_callback_("glBlendEquationSeparatei", (void*)(ptrdiff_t)glow_glBlendEquationSeparatei, buf, modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEIPROC glow_debug_glBlendEquationSeparatei = glow_debug_impl_glBlendEquationSeparatei;

static void glow_debug_impl_glWindowPos2fv(const GLfloat *v) {

  glow_pre_callback_("glWindowPos2fv", (void*)(ptrdiff_t)glow_glWindowPos2fv, v);
  glow_glWindowPos2fv(v);
  glow_post_callback_("glWindowPos2fv", (void*)(ptrdiff_t)glow_glWindowPos2fv, v);
}
PFNGLWINDOWPOS2FVPROC glow_debug_glWindowPos2fv = glow_debug_impl_glWindowPos2fv;

static void glow_debug_impl_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {

  glow_pre_callback_("glPixelMapfv", (void*)(ptrdiff_t)glow_glPixelMapfv, map, mapsize, values);
  glow_glPixelMapfv(map, mapsize, values);
  glow_post_callback_("glPixelMapfv", (void*)(ptrdiff_t)glow_glPixelMapfv, map, mapsize, values);
}
PFNGLPIXELMAPFVPROC glow_debug_glPixelMapfv = glow_debug_impl_glPixelMapfv;

static void glow_debug_impl_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {

  glow_pre_callback_("glGetActiveAttrib", (void*)(ptrdiff_t)glow_glGetActiveAttrib, program, index, bufSize, length, size, type, name);
  glow_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  glow_post_callback_("glGetActiveAttrib", (void*)(ptrdiff_t)glow_glGetActiveAttrib, program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEATTRIBPROC glow_debug_glGetActiveAttrib = glow_debug_impl_glGetActiveAttrib;

static void glow_debug_impl_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {

  glow_pre_callback_("glGetUniformSubroutineuiv", (void*)(ptrdiff_t)glow_glGetUniformSubroutineuiv, shadertype, location, params);
  glow_glGetUniformSubroutineuiv(shadertype, location, params);
  glow_post_callback_("glGetUniformSubroutineuiv", (void*)(ptrdiff_t)glow_glGetUniformSubroutineuiv, shadertype, location, params);
}
PFNGLGETUNIFORMSUBROUTINEUIVPROC glow_debug_glGetUniformSubroutineuiv = glow_debug_impl_glGetUniformSubroutineuiv;

static void glow_debug_impl_glTexCoord1sv(const GLshort *v) {

  glow_pre_callback_("glTexCoord1sv", (void*)(ptrdiff_t)glow_glTexCoord1sv, v);
  glow_glTexCoord1sv(v);
  glow_post_callback_("glTexCoord1sv", (void*)(ptrdiff_t)glow_glTexCoord1sv, v);
}
PFNGLTEXCOORD1SVPROC glow_debug_glTexCoord1sv = glow_debug_impl_glTexCoord1sv;

static void glow_debug_impl_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {

  glow_pre_callback_("glVertexAttribL2d", (void*)(ptrdiff_t)glow_glVertexAttribL2d, index, x, y);
  glow_glVertexAttribL2d(index, x, y);
  glow_post_callback_("glVertexAttribL2d", (void*)(ptrdiff_t)glow_glVertexAttribL2d, index, x, y);
}
PFNGLVERTEXATTRIBL2DPROC glow_debug_glVertexAttribL2d = glow_debug_impl_glVertexAttribL2d;

static void glow_debug_impl_glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glUniform2uiv", (void*)(ptrdiff_t)glow_glUniform2uiv, location, count, value);
  glow_glUniform2uiv(location, count, value);
  glow_post_callback_("glUniform2uiv", (void*)(ptrdiff_t)glow_glUniform2uiv, location, count, value);
}
PFNGLUNIFORM2UIVPROC glow_debug_glUniform2uiv = glow_debug_impl_glUniform2uiv;

static void glow_debug_impl_glInterleavedArrays(GLenum format, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glInterleavedArrays", (void*)(ptrdiff_t)glow_glInterleavedArrays, format, stride, pointer);
  glow_glInterleavedArrays(format, stride, pointer);
  glow_post_callback_("glInterleavedArrays", (void*)(ptrdiff_t)glow_glInterleavedArrays, format, stride, pointer);
}
PFNGLINTERLEAVEDARRAYSPROC glow_debug_glInterleavedArrays = glow_debug_impl_glInterleavedArrays;

static GLboolean glow_debug_impl_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {

  GLboolean ret;
  glow_pre_callback_("glAreTexturesResident", (void*)(ptrdiff_t)glow_glAreTexturesResident, n, textures, residences);
  ret = glow_glAreTexturesResident(n, textures, residences);
  glow_post_callback_("glAreTexturesResident", (void*)(ptrdiff_t)glow_glAreTexturesResident, n, textures, residences);
  return ret;
}
PFNGLARETEXTURESRESIDENTPROC glow_debug_glAreTexturesResident = glow_debug_impl_glAreTexturesResident;

static void glow_debug_impl_glMultiTexCoord1s(GLenum target, GLshort s) {

  glow_pre_callback_("glMultiTexCoord1s", (void*)(ptrdiff_t)glow_glMultiTexCoord1s, target, s);
  glow_glMultiTexCoord1s(target, s);
  glow_post_callback_("glMultiTexCoord1s", (void*)(ptrdiff_t)glow_glMultiTexCoord1s, target, s);
}
PFNGLMULTITEXCOORD1SPROC glow_debug_glMultiTexCoord1s = glow_debug_impl_glMultiTexCoord1s;

static void glow_debug_impl_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {

  glow_pre_callback_("glVertexAttribP3ui", (void*)(ptrdiff_t)glow_glVertexAttribP3ui, index, type, normalized, value);
  glow_glVertexAttribP3ui(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP3ui", (void*)(ptrdiff_t)glow_glVertexAttribP3ui, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP3UIPROC glow_debug_glVertexAttribP3ui = glow_debug_impl_glVertexAttribP3ui;

static void glow_debug_impl_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix4x3dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x3dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix4x3dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x3dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glow_debug_glProgramUniformMatrix4x3dv = glow_debug_impl_glProgramUniformMatrix4x3dv;

static void glow_debug_impl_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {

  glow_pre_callback_("glTexCoord3f", (void*)(ptrdiff_t)glow_glTexCoord3f, s, t, r);
  glow_glTexCoord3f(s, t, r);
  glow_post_callback_("glTexCoord3f", (void*)(ptrdiff_t)glow_glTexCoord3f, s, t, r);
}
PFNGLTEXCOORD3FPROC glow_debug_glTexCoord3f = glow_debug_impl_glTexCoord3f;

static void glow_debug_impl_glVertexAttribL3dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttribL3dv", (void*)(ptrdiff_t)glow_glVertexAttribL3dv, index, v);
  glow_glVertexAttribL3dv(index, v);
  glow_post_callback_("glVertexAttribL3dv", (void*)(ptrdiff_t)glow_glVertexAttribL3dv, index, v);
}
PFNGLVERTEXATTRIBL3DVPROC glow_debug_glVertexAttribL3dv = glow_debug_impl_glVertexAttribL3dv;

static void glow_debug_impl_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {

  glow_pre_callback_("glMultiTexCoord4f", (void*)(ptrdiff_t)glow_glMultiTexCoord4f, target, s, t, r, q);
  glow_glMultiTexCoord4f(target, s, t, r, q);
  glow_post_callback_("glMultiTexCoord4f", (void*)(ptrdiff_t)glow_glMultiTexCoord4f, target, s, t, r, q);
}
PFNGLMULTITEXCOORD4FPROC glow_debug_glMultiTexCoord4f = glow_debug_impl_glMultiTexCoord4f;

static void glow_debug_impl_glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetShaderiv", (void*)(ptrdiff_t)glow_glGetShaderiv, shader, pname, params);
  glow_glGetShaderiv(shader, pname, params);
  glow_post_callback_("glGetShaderiv", (void*)(ptrdiff_t)glow_glGetShaderiv, shader, pname, params);
}
PFNGLGETSHADERIVPROC glow_debug_glGetShaderiv = glow_debug_impl_glGetShaderiv;

static void glow_debug_impl_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetSamplerParameterfv", (void*)(ptrdiff_t)glow_glGetSamplerParameterfv, sampler, pname, params);
  glow_glGetSamplerParameterfv(sampler, pname, params);
  glow_post_callback_("glGetSamplerParameterfv", (void*)(ptrdiff_t)glow_glGetSamplerParameterfv, sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERFVPROC glow_debug_glGetSamplerParameterfv = glow_debug_impl_glGetSamplerParameterfv;

static void glow_debug_impl_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {

  glow_pre_callback_("glMultiDrawElementsIndirect", (void*)(ptrdiff_t)glow_glMultiDrawElementsIndirect, mode, type, indirect, drawcount, stride);
  glow_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
  glow_post_callback_("glMultiDrawElementsIndirect", (void*)(ptrdiff_t)glow_glMultiDrawElementsIndirect, mode, type, indirect, drawcount, stride);
}
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glow_debug_glMultiDrawElementsIndirect = glow_debug_impl_glMultiDrawElementsIndirect;

static void glow_debug_impl_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {

  glow_pre_callback_("glDebugMessageInsert", (void*)(ptrdiff_t)glow_glDebugMessageInsert, source, type, id, severity, length, buf);
  glow_glDebugMessageInsert(source, type, id, severity, length, buf);
  glow_post_callback_("glDebugMessageInsert", (void*)(ptrdiff_t)glow_glDebugMessageInsert, source, type, id, severity, length, buf);
}
PFNGLDEBUGMESSAGEINSERTPROC glow_debug_glDebugMessageInsert = glow_debug_impl_glDebugMessageInsert;

static void glow_debug_impl_glMultiTexCoord1d(GLenum target, GLdouble s) {

  glow_pre_callback_("glMultiTexCoord1d", (void*)(ptrdiff_t)glow_glMultiTexCoord1d, target, s);
  glow_glMultiTexCoord1d(target, s);
  glow_post_callback_("glMultiTexCoord1d", (void*)(ptrdiff_t)glow_glMultiTexCoord1d, target, s);
}
PFNGLMULTITEXCOORD1DPROC glow_debug_glMultiTexCoord1d = glow_debug_impl_glMultiTexCoord1d;

static void glow_debug_impl_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {

  glow_pre_callback_("glColor4i", (void*)(ptrdiff_t)glow_glColor4i, red, green, blue, alpha);
  glow_glColor4i(red, green, blue, alpha);
  glow_post_callback_("glColor4i", (void*)(ptrdiff_t)glow_glColor4i, red, green, blue, alpha);
}
PFNGLCOLOR4IPROC glow_debug_glColor4i = glow_debug_impl_glColor4i;

static void glow_debug_impl_glVertex2dv(const GLdouble *v) {

  glow_pre_callback_("glVertex2dv", (void*)(ptrdiff_t)glow_glVertex2dv, v);
  glow_glVertex2dv(v);
  glow_post_callback_("glVertex2dv", (void*)(ptrdiff_t)glow_glVertex2dv, v);
}
PFNGLVERTEX2DVPROC glow_debug_glVertex2dv = glow_debug_impl_glVertex2dv;

static void glow_debug_impl_glDeleteTextures(GLsizei n, const GLuint *textures) {

  glow_pre_callback_("glDeleteTextures", (void*)(ptrdiff_t)glow_glDeleteTextures, n, textures);
  glow_glDeleteTextures(n, textures);
  glow_post_callback_("glDeleteTextures", (void*)(ptrdiff_t)glow_glDeleteTextures, n, textures);
}
PFNGLDELETETEXTURESPROC glow_debug_glDeleteTextures = glow_debug_impl_glDeleteTextures;

static void glow_debug_impl_glTexParameteri(GLenum target, GLenum pname, GLint param) {

  glow_pre_callback_("glTexParameteri", (void*)(ptrdiff_t)glow_glTexParameteri, target, pname, param);
  glow_glTexParameteri(target, pname, param);
  glow_post_callback_("glTexParameteri", (void*)(ptrdiff_t)glow_glTexParameteri, target, pname, param);
}
PFNGLTEXPARAMETERIPROC glow_debug_glTexParameteri = glow_debug_impl_glTexParameteri;

static void glow_debug_impl_glRasterPos4sv(const GLshort *v) {

  glow_pre_callback_("glRasterPos4sv", (void*)(ptrdiff_t)glow_glRasterPos4sv, v);
  glow_glRasterPos4sv(v);
  glow_post_callback_("glRasterPos4sv", (void*)(ptrdiff_t)glow_glRasterPos4sv, v);
}
PFNGLRASTERPOS4SVPROC glow_debug_glRasterPos4sv = glow_debug_impl_glRasterPos4sv;

static void glow_debug_impl_glPauseTransformFeedback() {

  glow_pre_callback_("glPauseTransformFeedback", (void*)(ptrdiff_t)glow_glPauseTransformFeedback);
  glow_glPauseTransformFeedback();
  glow_post_callback_("glPauseTransformFeedback", (void*)(ptrdiff_t)glow_glPauseTransformFeedback);
}
PFNGLPAUSETRANSFORMFEEDBACKPROC glow_debug_glPauseTransformFeedback = glow_debug_impl_glPauseTransformFeedback;

static void glow_debug_impl_glIndexd(GLdouble c) {

  glow_pre_callback_("glIndexd", (void*)(ptrdiff_t)glow_glIndexd, c);
  glow_glIndexd(c);
  glow_post_callback_("glIndexd", (void*)(ptrdiff_t)glow_glIndexd, c);
}
PFNGLINDEXDPROC glow_debug_glIndexd = glow_debug_impl_glIndexd;

static void glow_debug_impl_glVertexAttribI1i(GLuint index, GLint x) {

  glow_pre_callback_("glVertexAttribI1i", (void*)(ptrdiff_t)glow_glVertexAttribI1i, index, x);
  glow_glVertexAttribI1i(index, x);
  glow_post_callback_("glVertexAttribI1i", (void*)(ptrdiff_t)glow_glVertexAttribI1i, index, x);
}
PFNGLVERTEXATTRIBI1IPROC glow_debug_glVertexAttribI1i = glow_debug_impl_glVertexAttribI1i;

static void glow_debug_impl_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {

  glow_pre_callback_("glDrawElementsInstancedBaseInstance", (void*)(ptrdiff_t)glow_glDrawElementsInstancedBaseInstance, mode, count, type, indices, instancecount, baseinstance);
  glow_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
  glow_post_callback_("glDrawElementsInstancedBaseInstance", (void*)(ptrdiff_t)glow_glDrawElementsInstancedBaseInstance, mode, count, type, indices, instancecount, baseinstance);
}
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glow_debug_glDrawElementsInstancedBaseInstance = glow_debug_impl_glDrawElementsInstancedBaseInstance;

static void glow_debug_impl_glClampColor(GLenum target, GLenum clamp) {

  glow_pre_callback_("glClampColor", (void*)(ptrdiff_t)glow_glClampColor, target, clamp);
  glow_glClampColor(target, clamp);
  glow_post_callback_("glClampColor", (void*)(ptrdiff_t)glow_glClampColor, target, clamp);
}
PFNGLCLAMPCOLORPROC glow_debug_glClampColor = glow_debug_impl_glClampColor;

static void glow_debug_impl_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {

  glow_pre_callback_("glDrawElementsInstanced", (void*)(ptrdiff_t)glow_glDrawElementsInstanced, mode, count, type, indices, instancecount);
  glow_glDrawElementsInstanced(mode, count, type, indices, instancecount);
  glow_post_callback_("glDrawElementsInstanced", (void*)(ptrdiff_t)glow_glDrawElementsInstanced, mode, count, type, indices, instancecount);
}
PFNGLDRAWELEMENTSINSTANCEDPROC glow_debug_glDrawElementsInstanced = glow_debug_impl_glDrawElementsInstanced;

static void glow_debug_impl_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {

  glow_pre_callback_("glBindImageTexture", (void*)(ptrdiff_t)glow_glBindImageTexture, unit, texture, level, layered, layer, access, format);
  glow_glBindImageTexture(unit, texture, level, layered, layer, access, format);
  glow_post_callback_("glBindImageTexture", (void*)(ptrdiff_t)glow_glBindImageTexture, unit, texture, level, layered, layer, access, format);
}
PFNGLBINDIMAGETEXTUREPROC glow_debug_glBindImageTexture = glow_debug_impl_glBindImageTexture;

static void glow_debug_impl_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {

  glow_pre_callback_("glDrawTransformFeedbackStreamInstanced", (void*)(ptrdiff_t)glow_glDrawTransformFeedbackStreamInstanced, mode, id, stream, instancecount);
  glow_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
  glow_post_callback_("glDrawTransformFeedbackStreamInstanced", (void*)(ptrdiff_t)glow_glDrawTransformFeedbackStreamInstanced, mode, id, stream, instancecount);
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glow_debug_glDrawTransformFeedbackStreamInstanced = glow_debug_impl_glDrawTransformFeedbackStreamInstanced;

static void glow_debug_impl_glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {

  glow_pre_callback_("glObjectPtrLabel", (void*)(ptrdiff_t)glow_glObjectPtrLabel, ptr, length, label);
  glow_glObjectPtrLabel(ptr, length, label);
  glow_post_callback_("glObjectPtrLabel", (void*)(ptrdiff_t)glow_glObjectPtrLabel, ptr, length, label);
}
PFNGLOBJECTPTRLABELPROC glow_debug_glObjectPtrLabel = glow_debug_impl_glObjectPtrLabel;

static void glow_debug_impl_glColor4iv(const GLint *v) {

  glow_pre_callback_("glColor4iv", (void*)(ptrdiff_t)glow_glColor4iv, v);
  glow_glColor4iv(v);
  glow_post_callback_("glColor4iv", (void*)(ptrdiff_t)glow_glColor4iv, v);
}
PFNGLCOLOR4IVPROC glow_debug_glColor4iv = glow_debug_impl_glColor4iv;

static void glow_debug_impl_glWindowPos3sv(const GLshort *v) {

  glow_pre_callback_("glWindowPos3sv", (void*)(ptrdiff_t)glow_glWindowPos3sv, v);
  glow_glWindowPos3sv(v);
  glow_post_callback_("glWindowPos3sv", (void*)(ptrdiff_t)glow_glWindowPos3sv, v);
}
PFNGLWINDOWPOS3SVPROC glow_debug_glWindowPos3sv = glow_debug_impl_glWindowPos3sv;

static void glow_debug_impl_glVertexAttrib3dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttrib3dv", (void*)(ptrdiff_t)glow_glVertexAttrib3dv, index, v);
  glow_glVertexAttrib3dv(index, v);
  glow_post_callback_("glVertexAttrib3dv", (void*)(ptrdiff_t)glow_glVertexAttrib3dv, index, v);
}
PFNGLVERTEXATTRIB3DVPROC glow_debug_glVertexAttrib3dv = glow_debug_impl_glVertexAttrib3dv;

static void glow_debug_impl_glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glUniform3uiv", (void*)(ptrdiff_t)glow_glUniform3uiv, location, count, value);
  glow_glUniform3uiv(location, count, value);
  glow_post_callback_("glUniform3uiv", (void*)(ptrdiff_t)glow_glUniform3uiv, location, count, value);
}
PFNGLUNIFORM3UIVPROC glow_debug_glUniform3uiv = glow_debug_impl_glUniform3uiv;

static void glow_debug_impl_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {

  glow_pre_callback_("glFramebufferTexture", (void*)(ptrdiff_t)glow_glFramebufferTexture, target, attachment, texture, level);
  glow_glFramebufferTexture(target, attachment, texture, level);
  glow_post_callback_("glFramebufferTexture", (void*)(ptrdiff_t)glow_glFramebufferTexture, target, attachment, texture, level);
}
PFNGLFRAMEBUFFERTEXTUREPROC glow_debug_glFramebufferTexture = glow_debug_impl_glFramebufferTexture;

static void glow_debug_impl_glActiveTexture(GLenum texture) {

  glow_pre_callback_("glActiveTexture", (void*)(ptrdiff_t)glow_glActiveTexture, texture);
  glow_glActiveTexture(texture);
  glow_post_callback_("glActiveTexture", (void*)(ptrdiff_t)glow_glActiveTexture, texture);
}
PFNGLACTIVETEXTUREPROC glow_debug_glActiveTexture = glow_debug_impl_glActiveTexture;

static void glow_debug_impl_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {

  glow_pre_callback_("glMap1f", (void*)(ptrdiff_t)glow_glMap1f, target, u1, u2, stride, order, points);
  glow_glMap1f(target, u1, u2, stride, order, points);
  glow_post_callback_("glMap1f", (void*)(ptrdiff_t)glow_glMap1f, target, u1, u2, stride, order, points);
}
PFNGLMAP1FPROC glow_debug_glMap1f = glow_debug_impl_glMap1f;

static void glow_debug_impl_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {

  glow_pre_callback_("glPixelMapuiv", (void*)(ptrdiff_t)glow_glPixelMapuiv, map, mapsize, values);
  glow_glPixelMapuiv(map, mapsize, values);
  glow_post_callback_("glPixelMapuiv", (void*)(ptrdiff_t)glow_glPixelMapuiv, map, mapsize, values);
}
PFNGLPIXELMAPUIVPROC glow_debug_glPixelMapuiv = glow_debug_impl_glPixelMapuiv;

static void glow_debug_impl_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {

  glow_pre_callback_("glViewport", (void*)(ptrdiff_t)glow_glViewport, x, y, width, height);
  glow_glViewport(x, y, width, height);
  glow_post_callback_("glViewport", (void*)(ptrdiff_t)glow_glViewport, x, y, width, height);
}
PFNGLVIEWPORTPROC glow_debug_glViewport = glow_debug_impl_glViewport;

static void glow_debug_impl_glBeginConditionalRender(GLuint id, GLenum mode) {

  glow_pre_callback_("glBeginConditionalRender", (void*)(ptrdiff_t)glow_glBeginConditionalRender, id, mode);
  glow_glBeginConditionalRender(id, mode);
  glow_post_callback_("glBeginConditionalRender", (void*)(ptrdiff_t)glow_glBeginConditionalRender, id, mode);
}
PFNGLBEGINCONDITIONALRENDERPROC glow_debug_glBeginConditionalRender = glow_debug_impl_glBeginConditionalRender;

static void glow_debug_impl_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {

  glow_pre_callback_("glUniformSubroutinesuiv", (void*)(ptrdiff_t)glow_glUniformSubroutinesuiv, shadertype, count, indices);
  glow_glUniformSubroutinesuiv(shadertype, count, indices);
  glow_post_callback_("glUniformSubroutinesuiv", (void*)(ptrdiff_t)glow_glUniformSubroutinesuiv, shadertype, count, indices);
}
PFNGLUNIFORMSUBROUTINESUIVPROC glow_debug_glUniformSubroutinesuiv = glow_debug_impl_glUniformSubroutinesuiv;

static void glow_debug_impl_glFrontFace(GLenum mode) {

  glow_pre_callback_("glFrontFace", (void*)(ptrdiff_t)glow_glFrontFace, mode);
  glow_glFrontFace(mode);
  glow_post_callback_("glFrontFace", (void*)(ptrdiff_t)glow_glFrontFace, mode);
}
PFNGLFRONTFACEPROC glow_debug_glFrontFace = glow_debug_impl_glFrontFace;

static void glow_debug_impl_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {

  glow_pre_callback_("glScissor", (void*)(ptrdiff_t)glow_glScissor, x, y, width, height);
  glow_glScissor(x, y, width, height);
  glow_post_callback_("glScissor", (void*)(ptrdiff_t)glow_glScissor, x, y, width, height);
}
PFNGLSCISSORPROC glow_debug_glScissor = glow_debug_impl_glScissor;

static void glow_debug_impl_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glRasterPos3d", (void*)(ptrdiff_t)glow_glRasterPos3d, x, y, z);
  glow_glRasterPos3d(x, y, z);
  glow_post_callback_("glRasterPos3d", (void*)(ptrdiff_t)glow_glRasterPos3d, x, y, z);
}
PFNGLRASTERPOS3DPROC glow_debug_glRasterPos3d = glow_debug_impl_glRasterPos3d;

static void glow_debug_impl_glTexCoord2i(GLint s, GLint t) {

  glow_pre_callback_("glTexCoord2i", (void*)(ptrdiff_t)glow_glTexCoord2i, s, t);
  glow_glTexCoord2i(s, t);
  glow_post_callback_("glTexCoord2i", (void*)(ptrdiff_t)glow_glTexCoord2i, s, t);
}
PFNGLTEXCOORD2IPROC glow_debug_glTexCoord2i = glow_debug_impl_glTexCoord2i;

static void glow_debug_impl_glLightModeli(GLenum pname, GLint param) {

  glow_pre_callback_("glLightModeli", (void*)(ptrdiff_t)glow_glLightModeli, pname, param);
  glow_glLightModeli(pname, param);
  glow_post_callback_("glLightModeli", (void*)(ptrdiff_t)glow_glLightModeli, pname, param);
}
PFNGLLIGHTMODELIPROC glow_debug_glLightModeli = glow_debug_impl_glLightModeli;

static void glow_debug_impl_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {

  glow_pre_callback_("glGetBooleani_v", (void*)(ptrdiff_t)glow_glGetBooleani_v, target, index, data);
  glow_glGetBooleani_v(target, index, data);
  glow_post_callback_("glGetBooleani_v", (void*)(ptrdiff_t)glow_glGetBooleani_v, target, index, data);
}
PFNGLGETBOOLEANI_VPROC glow_debug_glGetBooleani_v = glow_debug_impl_glGetBooleani_v;

static void glow_debug_impl_glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {

  glow_pre_callback_("glGetFloati_v", (void*)(ptrdiff_t)glow_glGetFloati_v, target, index, data);
  glow_glGetFloati_v(target, index, data);
  glow_post_callback_("glGetFloati_v", (void*)(ptrdiff_t)glow_glGetFloati_v, target, index, data);
}
PFNGLGETFLOATI_VPROC glow_debug_glGetFloati_v = glow_debug_impl_glGetFloati_v;

static void glow_debug_impl_glHint(GLenum target, GLenum mode) {

  glow_pre_callback_("glHint", (void*)(ptrdiff_t)glow_glHint, target, mode);
  glow_glHint(target, mode);
  glow_post_callback_("glHint", (void*)(ptrdiff_t)glow_glHint, target, mode);
}
PFNGLHINTPROC glow_debug_glHint = glow_debug_impl_glHint;

static void glow_debug_impl_glLoadTransposeMatrixf(const GLfloat *m) {

  glow_pre_callback_("glLoadTransposeMatrixf", (void*)(ptrdiff_t)glow_glLoadTransposeMatrixf, m);
  glow_glLoadTransposeMatrixf(m);
  glow_post_callback_("glLoadTransposeMatrixf", (void*)(ptrdiff_t)glow_glLoadTransposeMatrixf, m);
}
PFNGLLOADTRANSPOSEMATRIXFPROC glow_debug_glLoadTransposeMatrixf = glow_debug_impl_glLoadTransposeMatrixf;

static void glow_debug_impl_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {

  glow_pre_callback_("glProgramUniform2i", (void*)(ptrdiff_t)glow_glProgramUniform2i, program, location, v0, v1);
  glow_glProgramUniform2i(program, location, v0, v1);
  glow_post_callback_("glProgramUniform2i", (void*)(ptrdiff_t)glow_glProgramUniform2i, program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2IPROC glow_debug_glProgramUniform2i = glow_debug_impl_glProgramUniform2i;

static void glow_debug_impl_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix4fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix4fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix4fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glow_debug_glProgramUniformMatrix4fv = glow_debug_impl_glProgramUniformMatrix4fv;

static void glow_debug_impl_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glTexGenfv", (void*)(ptrdiff_t)glow_glTexGenfv, coord, pname, params);
  glow_glTexGenfv(coord, pname, params);
  glow_post_callback_("glTexGenfv", (void*)(ptrdiff_t)glow_glTexGenfv, coord, pname, params);
}
PFNGLTEXGENFVPROC glow_debug_glTexGenfv = glow_debug_impl_glTexGenfv;

static void glow_debug_impl_glVertexAttribI3iv(GLuint index, const GLint *v) {

  glow_pre_callback_("glVertexAttribI3iv", (void*)(ptrdiff_t)glow_glVertexAttribI3iv, index, v);
  glow_glVertexAttribI3iv(index, v);
  glow_post_callback_("glVertexAttribI3iv", (void*)(ptrdiff_t)glow_glVertexAttribI3iv, index, v);
}
PFNGLVERTEXATTRIBI3IVPROC glow_debug_glVertexAttribI3iv = glow_debug_impl_glVertexAttribI3iv;

static void glow_debug_impl_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {

  glow_pre_callback_("glDrawElementsBaseVertex", (void*)(ptrdiff_t)glow_glDrawElementsBaseVertex, mode, count, type, indices, basevertex);
  glow_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  glow_post_callback_("glDrawElementsBaseVertex", (void*)(ptrdiff_t)glow_glDrawElementsBaseVertex, mode, count, type, indices, basevertex);
}
PFNGLDRAWELEMENTSBASEVERTEXPROC glow_debug_glDrawElementsBaseVertex = glow_debug_impl_glDrawElementsBaseVertex;

static void glow_debug_impl_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {

  glow_pre_callback_("glMultiTexCoordP4uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP4uiv, texture, type, coords);
  glow_glMultiTexCoordP4uiv(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP4uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP4uiv, texture, type, coords);
}
PFNGLMULTITEXCOORDP4UIVPROC glow_debug_glMultiTexCoordP4uiv = glow_debug_impl_glMultiTexCoordP4uiv;

static void glow_debug_impl_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {

  glow_pre_callback_("glDeleteProgramPipelines", (void*)(ptrdiff_t)glow_glDeleteProgramPipelines, n, pipelines);
  glow_glDeleteProgramPipelines(n, pipelines);
  glow_post_callback_("glDeleteProgramPipelines", (void*)(ptrdiff_t)glow_glDeleteProgramPipelines, n, pipelines);
}
PFNGLDELETEPROGRAMPIPELINESPROC glow_debug_glDeleteProgramPipelines = glow_debug_impl_glDeleteProgramPipelines;

static void glow_debug_impl_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {

  glow_pre_callback_("glNormal3d", (void*)(ptrdiff_t)glow_glNormal3d, nx, ny, nz);
  glow_glNormal3d(nx, ny, nz);
  glow_post_callback_("glNormal3d", (void*)(ptrdiff_t)glow_glNormal3d, nx, ny, nz);
}
PFNGLNORMAL3DPROC glow_debug_glNormal3d = glow_debug_impl_glNormal3d;

static void glow_debug_impl_glDrawTransformFeedback(GLenum mode, GLuint id) {

  glow_pre_callback_("glDrawTransformFeedback", (void*)(ptrdiff_t)glow_glDrawTransformFeedback, mode, id);
  glow_glDrawTransformFeedback(mode, id);
  glow_post_callback_("glDrawTransformFeedback", (void*)(ptrdiff_t)glow_glDrawTransformFeedback, mode, id);
}
PFNGLDRAWTRANSFORMFEEDBACKPROC glow_debug_glDrawTransformFeedback = glow_debug_impl_glDrawTransformFeedback;

static void glow_debug_impl_glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetMaterialiv", (void*)(ptrdiff_t)glow_glGetMaterialiv, face, pname, params);
  glow_glGetMaterialiv(face, pname, params);
  glow_post_callback_("glGetMaterialiv", (void*)(ptrdiff_t)glow_glGetMaterialiv, face, pname, params);
}
PFNGLGETMATERIALIVPROC glow_debug_glGetMaterialiv = glow_debug_impl_glGetMaterialiv;

static void glow_debug_impl_glMultTransposeMatrixd(const GLdouble *m) {

  glow_pre_callback_("glMultTransposeMatrixd", (void*)(ptrdiff_t)glow_glMultTransposeMatrixd, m);
  glow_glMultTransposeMatrixd(m);
  glow_post_callback_("glMultTransposeMatrixd", (void*)(ptrdiff_t)glow_glMultTransposeMatrixd, m);
}
PFNGLMULTTRANSPOSEMATRIXDPROC glow_debug_glMultTransposeMatrixd = glow_debug_impl_glMultTransposeMatrixd;

static GLboolean glow_debug_impl_glIsShader(GLuint shader) {

  GLboolean ret;
  glow_pre_callback_("glIsShader", (void*)(ptrdiff_t)glow_glIsShader, shader);
  ret = glow_glIsShader(shader);
  glow_post_callback_("glIsShader", (void*)(ptrdiff_t)glow_glIsShader, shader);
  return ret;
}
PFNGLISSHADERPROC glow_debug_glIsShader = glow_debug_impl_glIsShader;

static void glow_debug_impl_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {

  glow_pre_callback_("glDebugMessageControl", (void*)(ptrdiff_t)glow_glDebugMessageControl, source, type, severity, count, ids, enabled);
  glow_glDebugMessageControl(source, type, severity, count, ids, enabled);
  glow_post_callback_("glDebugMessageControl", (void*)(ptrdiff_t)glow_glDebugMessageControl, source, type, severity, count, ids, enabled);
}
PFNGLDEBUGMESSAGECONTROLPROC glow_debug_glDebugMessageControl = glow_debug_impl_glDebugMessageControl;

static void glow_debug_impl_glRasterPos2s(GLshort x, GLshort y) {

  glow_pre_callback_("glRasterPos2s", (void*)(ptrdiff_t)glow_glRasterPos2s, x, y);
  glow_glRasterPos2s(x, y);
  glow_post_callback_("glRasterPos2s", (void*)(ptrdiff_t)glow_glRasterPos2s, x, y);
}
PFNGLRASTERPOS2SPROC glow_debug_glRasterPos2s = glow_debug_impl_glRasterPos2s;

static void glow_debug_impl_glFogCoordfv(const GLfloat *coord) {

  glow_pre_callback_("glFogCoordfv", (void*)(ptrdiff_t)glow_glFogCoordfv, coord);
  glow_glFogCoordfv(coord);
  glow_post_callback_("glFogCoordfv", (void*)(ptrdiff_t)glow_glFogCoordfv, coord);
}
PFNGLFOGCOORDFVPROC glow_debug_glFogCoordfv = glow_debug_impl_glFogCoordfv;

static void glow_debug_impl_glWindowPos3iv(const GLint *v) {

  glow_pre_callback_("glWindowPos3iv", (void*)(ptrdiff_t)glow_glWindowPos3iv, v);
  glow_glWindowPos3iv(v);
  glow_post_callback_("glWindowPos3iv", (void*)(ptrdiff_t)glow_glWindowPos3iv, v);
}
PFNGLWINDOWPOS3IVPROC glow_debug_glWindowPos3iv = glow_debug_impl_glWindowPos3iv;

static void glow_debug_impl_glBindProgramPipeline(GLuint pipeline) {

  glow_pre_callback_("glBindProgramPipeline", (void*)(ptrdiff_t)glow_glBindProgramPipeline, pipeline);
  glow_glBindProgramPipeline(pipeline);
  glow_post_callback_("glBindProgramPipeline", (void*)(ptrdiff_t)glow_glBindProgramPipeline, pipeline);
}
PFNGLBINDPROGRAMPIPELINEPROC glow_debug_glBindProgramPipeline = glow_debug_impl_glBindProgramPipeline;

static void glow_debug_impl_glTexCoord3sv(const GLshort *v) {

  glow_pre_callback_("glTexCoord3sv", (void*)(ptrdiff_t)glow_glTexCoord3sv, v);
  glow_glTexCoord3sv(v);
  glow_post_callback_("glTexCoord3sv", (void*)(ptrdiff_t)glow_glTexCoord3sv, v);
}
PFNGLTEXCOORD3SVPROC glow_debug_glTexCoord3sv = glow_debug_impl_glTexCoord3sv;

static void glow_debug_impl_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glVertexAttribL3d", (void*)(ptrdiff_t)glow_glVertexAttribL3d, index, x, y, z);
  glow_glVertexAttribL3d(index, x, y, z);
  glow_post_callback_("glVertexAttribL3d", (void*)(ptrdiff_t)glow_glVertexAttribL3d, index, x, y, z);
}
PFNGLVERTEXATTRIBL3DPROC glow_debug_glVertexAttribL3d = glow_debug_impl_glVertexAttribL3d;

static void glow_debug_impl_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetQueryObjectiv", (void*)(ptrdiff_t)glow_glGetQueryObjectiv, id, pname, params);
  glow_glGetQueryObjectiv(id, pname, params);
  glow_post_callback_("glGetQueryObjectiv", (void*)(ptrdiff_t)glow_glGetQueryObjectiv, id, pname, params);
}
PFNGLGETQUERYOBJECTIVPROC glow_debug_glGetQueryObjectiv = glow_debug_impl_glGetQueryObjectiv;

static void glow_debug_impl_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetVertexAttribfv", (void*)(ptrdiff_t)glow_glGetVertexAttribfv, index, pname, params);
  glow_glGetVertexAttribfv(index, pname, params);
  glow_post_callback_("glGetVertexAttribfv", (void*)(ptrdiff_t)glow_glGetVertexAttribfv, index, pname, params);
}
PFNGLGETVERTEXATTRIBFVPROC glow_debug_glGetVertexAttribfv = glow_debug_impl_glGetVertexAttribfv;

static GLint glow_debug_impl_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetProgramResourceLocationIndex", (void*)(ptrdiff_t)glow_glGetProgramResourceLocationIndex, program, programInterface, name);
  ret = glow_glGetProgramResourceLocationIndex(program, programInterface, name);
  glow_post_callback_("glGetProgramResourceLocationIndex", (void*)(ptrdiff_t)glow_glGetProgramResourceLocationIndex, program, programInterface, name);
  return ret;
}
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glow_debug_glGetProgramResourceLocationIndex = glow_debug_impl_glGetProgramResourceLocationIndex;

static void glow_debug_impl_glVertex4i(GLint x, GLint y, GLint z, GLint w) {

  glow_pre_callback_("glVertex4i", (void*)(ptrdiff_t)glow_glVertex4i, x, y, z, w);
  glow_glVertex4i(x, y, z, w);
  glow_post_callback_("glVertex4i", (void*)(ptrdiff_t)glow_glVertex4i, x, y, z, w);
}
PFNGLVERTEX4IPROC glow_debug_glVertex4i = glow_debug_impl_glVertex4i;

static void glow_debug_impl_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {

  glow_pre_callback_("glVertex4s", (void*)(ptrdiff_t)glow_glVertex4s, x, y, z, w);
  glow_glVertex4s(x, y, z, w);
  glow_post_callback_("glVertex4s", (void*)(ptrdiff_t)glow_glVertex4s, x, y, z, w);
}
PFNGLVERTEX4SPROC glow_debug_glVertex4s = glow_debug_impl_glVertex4s;

static void glow_debug_impl_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {

  glow_pre_callback_("glBlendFunci", (void*)(ptrdiff_t)glow_glBlendFunci, buf, src, dst);
  glow_glBlendFunci(buf, src, dst);
  glow_post_callback_("glBlendFunci", (void*)(ptrdiff_t)glow_glBlendFunci, buf, src, dst);
}
PFNGLBLENDFUNCIPROC glow_debug_glBlendFunci = glow_debug_impl_glBlendFunci;

static void glow_debug_impl_glRasterPos3s(GLshort x, GLshort y, GLshort z) {

  glow_pre_callback_("glRasterPos3s", (void*)(ptrdiff_t)glow_glRasterPos3s, x, y, z);
  glow_glRasterPos3s(x, y, z);
  glow_post_callback_("glRasterPos3s", (void*)(ptrdiff_t)glow_glRasterPos3s, x, y, z);
}
PFNGLRASTERPOS3SPROC glow_debug_glRasterPos3s = glow_debug_impl_glRasterPos3s;

static void glow_debug_impl_glDeleteShader(GLuint shader) {

  glow_pre_callback_("glDeleteShader", (void*)(ptrdiff_t)glow_glDeleteShader, shader);
  glow_glDeleteShader(shader);
  glow_post_callback_("glDeleteShader", (void*)(ptrdiff_t)glow_glDeleteShader, shader);
}
PFNGLDELETESHADERPROC glow_debug_glDeleteShader = glow_debug_impl_glDeleteShader;

static void glow_debug_impl_glVertexAttrib4Nsv(GLuint index, const GLshort *v) {

  glow_pre_callback_("glVertexAttrib4Nsv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nsv, index, v);
  glow_glVertexAttrib4Nsv(index, v);
  glow_post_callback_("glVertexAttrib4Nsv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nsv, index, v);
}
PFNGLVERTEXATTRIB4NSVPROC glow_debug_glVertexAttrib4Nsv = glow_debug_impl_glVertexAttrib4Nsv;

static void glow_debug_impl_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {

  glow_pre_callback_("glMultiTexCoordP2uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP2uiv, texture, type, coords);
  glow_glMultiTexCoordP2uiv(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP2uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP2uiv, texture, type, coords);
}
PFNGLMULTITEXCOORDP2UIVPROC glow_debug_glMultiTexCoordP2uiv = glow_debug_impl_glMultiTexCoordP2uiv;

static void glow_debug_impl_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {

  glow_pre_callback_("glTexStorage2DMultisample", (void*)(ptrdiff_t)glow_glTexStorage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);
  glow_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  glow_post_callback_("glTexStorage2DMultisample", (void*)(ptrdiff_t)glow_glTexStorage2DMultisample, target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glow_debug_glTexStorage2DMultisample = glow_debug_impl_glTexStorage2DMultisample;

static void glow_debug_impl_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetTexParameterfv", (void*)(ptrdiff_t)glow_glGetTexParameterfv, target, pname, params);
  glow_glGetTexParameterfv(target, pname, params);
  glow_post_callback_("glGetTexParameterfv", (void*)(ptrdiff_t)glow_glGetTexParameterfv, target, pname, params);
}
PFNGLGETTEXPARAMETERFVPROC glow_debug_glGetTexParameterfv = glow_debug_impl_glGetTexParameterfv;

static void glow_debug_impl_glValidateProgram(GLuint program) {

  glow_pre_callback_("glValidateProgram", (void*)(ptrdiff_t)glow_glValidateProgram, program);
  glow_glValidateProgram(program);
  glow_post_callback_("glValidateProgram", (void*)(ptrdiff_t)glow_glValidateProgram, program);
}
PFNGLVALIDATEPROGRAMPROC glow_debug_glValidateProgram = glow_debug_impl_glValidateProgram;

static void glow_debug_impl_glVertexAttribI1ui(GLuint index, GLuint x) {

  glow_pre_callback_("glVertexAttribI1ui", (void*)(ptrdiff_t)glow_glVertexAttribI1ui, index, x);
  glow_glVertexAttribI1ui(index, x);
  glow_post_callback_("glVertexAttribI1ui", (void*)(ptrdiff_t)glow_glVertexAttribI1ui, index, x);
}
PFNGLVERTEXATTRIBI1UIPROC glow_debug_glVertexAttribI1ui = glow_debug_impl_glVertexAttribI1ui;

static void glow_debug_impl_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {

  glow_pre_callback_("glGetBufferParameteri64v", (void*)(ptrdiff_t)glow_glGetBufferParameteri64v, target, pname, params);
  glow_glGetBufferParameteri64v(target, pname, params);
  glow_post_callback_("glGetBufferParameteri64v", (void*)(ptrdiff_t)glow_glGetBufferParameteri64v, target, pname, params);
}
PFNGLGETBUFFERPARAMETERI64VPROC glow_debug_glGetBufferParameteri64v = glow_debug_impl_glGetBufferParameteri64v;

static void glow_debug_impl_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {

  glow_pre_callback_("glMultiTexCoordP4ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP4ui, texture, type, coords);
  glow_glMultiTexCoordP4ui(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP4ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP4ui, texture, type, coords);
}
PFNGLMULTITEXCOORDP4UIPROC glow_debug_glMultiTexCoordP4ui = glow_debug_impl_glMultiTexCoordP4ui;

static void glow_debug_impl_glMultiTexCoord1fv(GLenum target, const GLfloat *v) {

  glow_pre_callback_("glMultiTexCoord1fv", (void*)(ptrdiff_t)glow_glMultiTexCoord1fv, target, v);
  glow_glMultiTexCoord1fv(target, v);
  glow_post_callback_("glMultiTexCoord1fv", (void*)(ptrdiff_t)glow_glMultiTexCoord1fv, target, v);
}
PFNGLMULTITEXCOORD1FVPROC glow_debug_glMultiTexCoord1fv = glow_debug_impl_glMultiTexCoord1fv;

static void glow_debug_impl_glTexCoord4fv(const GLfloat *v) {

  glow_pre_callback_("glTexCoord4fv", (void*)(ptrdiff_t)glow_glTexCoord4fv, v);
  glow_glTexCoord4fv(v);
  glow_post_callback_("glTexCoord4fv", (void*)(ptrdiff_t)glow_glTexCoord4fv, v);
}
PFNGLTEXCOORD4FVPROC glow_debug_glTexCoord4fv = glow_debug_impl_glTexCoord4fv;

static void glow_debug_impl_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {

  glow_pre_callback_("glUniformBlockBinding", (void*)(ptrdiff_t)glow_glUniformBlockBinding, program, uniformBlockIndex, uniformBlockBinding);
  glow_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  glow_post_callback_("glUniformBlockBinding", (void*)(ptrdiff_t)glow_glUniformBlockBinding, program, uniformBlockIndex, uniformBlockBinding);
}
PFNGLUNIFORMBLOCKBINDINGPROC glow_debug_glUniformBlockBinding = glow_debug_impl_glUniformBlockBinding;

static void glow_debug_impl_glTexCoordP1ui(GLenum type, GLuint coords) {

  glow_pre_callback_("glTexCoordP1ui", (void*)(ptrdiff_t)glow_glTexCoordP1ui, type, coords);
  glow_glTexCoordP1ui(type, coords);
  glow_post_callback_("glTexCoordP1ui", (void*)(ptrdiff_t)glow_glTexCoordP1ui, type, coords);
}
PFNGLTEXCOORDP1UIPROC glow_debug_glTexCoordP1ui = glow_debug_impl_glTexCoordP1ui;

static void glow_debug_impl_glIndexdv(const GLdouble *c) {

  glow_pre_callback_("glIndexdv", (void*)(ptrdiff_t)glow_glIndexdv, c);
  glow_glIndexdv(c);
  glow_post_callback_("glIndexdv", (void*)(ptrdiff_t)glow_glIndexdv, c);
}
PFNGLINDEXDVPROC glow_debug_glIndexdv = glow_debug_impl_glIndexdv;

static void glow_debug_impl_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {

  glow_pre_callback_("glTexParameterIuiv", (void*)(ptrdiff_t)glow_glTexParameterIuiv, target, pname, params);
  glow_glTexParameterIuiv(target, pname, params);
  glow_post_callback_("glTexParameterIuiv", (void*)(ptrdiff_t)glow_glTexParameterIuiv, target, pname, params);
}
PFNGLTEXPARAMETERIUIVPROC glow_debug_glTexParameterIuiv = glow_debug_impl_glTexParameterIuiv;

static void glow_debug_impl_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {

  glow_pre_callback_("glClearBufferfv", (void*)(ptrdiff_t)glow_glClearBufferfv, buffer, drawbuffer, value);
  glow_glClearBufferfv(buffer, drawbuffer, value);
  glow_post_callback_("glClearBufferfv", (void*)(ptrdiff_t)glow_glClearBufferfv, buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERFVPROC glow_debug_glClearBufferfv = glow_debug_impl_glClearBufferfv;

static void glow_debug_impl_glGenVertexArrays(GLsizei n, GLuint *arrays) {

  glow_pre_callback_("glGenVertexArrays", (void*)(ptrdiff_t)glow_glGenVertexArrays, n, arrays);
  glow_glGenVertexArrays(n, arrays);
  glow_post_callback_("glGenVertexArrays", (void*)(ptrdiff_t)glow_glGenVertexArrays, n, arrays);
}
PFNGLGENVERTEXARRAYSPROC glow_debug_glGenVertexArrays = glow_debug_impl_glGenVertexArrays;

static void glow_debug_impl_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glProgramUniform1fv", (void*)(ptrdiff_t)glow_glProgramUniform1fv, program, location, count, value);
  glow_glProgramUniform1fv(program, location, count, value);
  glow_post_callback_("glProgramUniform1fv", (void*)(ptrdiff_t)glow_glProgramUniform1fv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM1FVPROC glow_debug_glProgramUniform1fv = glow_debug_impl_glProgramUniform1fv;

static void glow_debug_impl_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {

  glow_pre_callback_("glObjectLabel", (void*)(ptrdiff_t)glow_glObjectLabel, identifier, name, length, label);
  glow_glObjectLabel(identifier, name, length, label);
  glow_post_callback_("glObjectLabel", (void*)(ptrdiff_t)glow_glObjectLabel, identifier, name, length, label);
}
PFNGLOBJECTLABELPROC glow_debug_glObjectLabel = glow_debug_impl_glObjectLabel;

static void glow_debug_impl_glMultiTexCoord4iv(GLenum target, const GLint *v) {

  glow_pre_callback_("glMultiTexCoord4iv", (void*)(ptrdiff_t)glow_glMultiTexCoord4iv, target, v);
  glow_glMultiTexCoord4iv(target, v);
  glow_post_callback_("glMultiTexCoord4iv", (void*)(ptrdiff_t)glow_glMultiTexCoord4iv, target, v);
}
PFNGLMULTITEXCOORD4IVPROC glow_debug_glMultiTexCoord4iv = glow_debug_impl_glMultiTexCoord4iv;

static void glow_debug_impl_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {

  glow_pre_callback_("glVertexAttrib3s", (void*)(ptrdiff_t)glow_glVertexAttrib3s, index, x, y, z);
  glow_glVertexAttrib3s(index, x, y, z);
  glow_post_callback_("glVertexAttrib3s", (void*)(ptrdiff_t)glow_glVertexAttrib3s, index, x, y, z);
}
PFNGLVERTEXATTRIB3SPROC glow_debug_glVertexAttrib3s = glow_debug_impl_glVertexAttrib3s;

static void glow_debug_impl_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {

  glow_pre_callback_("glVertexAttribP2ui", (void*)(ptrdiff_t)glow_glVertexAttribP2ui, index, type, normalized, value);
  glow_glVertexAttribP2ui(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP2ui", (void*)(ptrdiff_t)glow_glVertexAttribP2ui, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP2UIPROC glow_debug_glVertexAttribP2ui = glow_debug_impl_glVertexAttribP2ui;

static void glow_debug_impl_glMinSampleShading(GLfloat value) {

  glow_pre_callback_("glMinSampleShading", (void*)(ptrdiff_t)glow_glMinSampleShading, value);
  glow_glMinSampleShading(value);
  glow_post_callback_("glMinSampleShading", (void*)(ptrdiff_t)glow_glMinSampleShading, value);
}
PFNGLMINSAMPLESHADINGPROC glow_debug_glMinSampleShading = glow_debug_impl_glMinSampleShading;

static void glow_debug_impl_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {

  glow_pre_callback_("glVertexAttribL4d", (void*)(ptrdiff_t)glow_glVertexAttribL4d, index, x, y, z, w);
  glow_glVertexAttribL4d(index, x, y, z, w);
  glow_post_callback_("glVertexAttribL4d", (void*)(ptrdiff_t)glow_glVertexAttribL4d, index, x, y, z, w);
}
PFNGLVERTEXATTRIBL4DPROC glow_debug_glVertexAttribL4d = glow_debug_impl_glVertexAttribL4d;

static void glow_debug_impl_glFogCoorddv(const GLdouble *coord) {

  glow_pre_callback_("glFogCoorddv", (void*)(ptrdiff_t)glow_glFogCoorddv, coord);
  glow_glFogCoorddv(coord);
  glow_post_callback_("glFogCoorddv", (void*)(ptrdiff_t)glow_glFogCoorddv, coord);
}
PFNGLFOGCOORDDVPROC glow_debug_glFogCoorddv = glow_debug_impl_glFogCoorddv;

static void glow_debug_impl_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {

  glow_pre_callback_("glDrawRangeElementsBaseVertex", (void*)(ptrdiff_t)glow_glDrawRangeElementsBaseVertex, mode, start, end, count, type, indices, basevertex);
  glow_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  glow_post_callback_("glDrawRangeElementsBaseVertex", (void*)(ptrdiff_t)glow_glDrawRangeElementsBaseVertex, mode, start, end, count, type, indices, basevertex);
}
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glow_debug_glDrawRangeElementsBaseVertex = glow_debug_impl_glDrawRangeElementsBaseVertex;

static GLuint glow_debug_impl_glGenLists(GLsizei range) {

  GLuint ret;
  glow_pre_callback_("glGenLists", (void*)(ptrdiff_t)glow_glGenLists, range);
  ret = glow_glGenLists(range);
  glow_post_callback_("glGenLists", (void*)(ptrdiff_t)glow_glGenLists, range);
  return ret;
}
PFNGLGENLISTSPROC glow_debug_glGenLists = glow_debug_impl_glGenLists;

static void glow_debug_impl_glWindowPos2s(GLshort x, GLshort y) {

  glow_pre_callback_("glWindowPos2s", (void*)(ptrdiff_t)glow_glWindowPos2s, x, y);
  glow_glWindowPos2s(x, y);
  glow_post_callback_("glWindowPos2s", (void*)(ptrdiff_t)glow_glWindowPos2s, x, y);
}
PFNGLWINDOWPOS2SPROC glow_debug_glWindowPos2s = glow_debug_impl_glWindowPos2s;

static void glow_debug_impl_glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glUniform4uiv", (void*)(ptrdiff_t)glow_glUniform4uiv, location, count, value);
  glow_glUniform4uiv(location, count, value);
  glow_post_callback_("glUniform4uiv", (void*)(ptrdiff_t)glow_glUniform4uiv, location, count, value);
}
PFNGLUNIFORM4UIVPROC glow_debug_glUniform4uiv = glow_debug_impl_glUniform4uiv;

static void glow_debug_impl_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {

  glow_pre_callback_("glSamplerParameterf", (void*)(ptrdiff_t)glow_glSamplerParameterf, sampler, pname, param);
  glow_glSamplerParameterf(sampler, pname, param);
  glow_post_callback_("glSamplerParameterf", (void*)(ptrdiff_t)glow_glSamplerParameterf, sampler, pname, param);
}
PFNGLSAMPLERPARAMETERFPROC glow_debug_glSamplerParameterf = glow_debug_impl_glSamplerParameterf;

static void glow_debug_impl_glLineStipple(GLint factor, GLushort pattern) {

  glow_pre_callback_("glLineStipple", (void*)(ptrdiff_t)glow_glLineStipple, factor, pattern);
  glow_glLineStipple(factor, pattern);
  glow_post_callback_("glLineStipple", (void*)(ptrdiff_t)glow_glLineStipple, factor, pattern);
}
PFNGLLINESTIPPLEPROC glow_debug_glLineStipple = glow_debug_impl_glLineStipple;

static void glow_debug_impl_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glProgramUniform2uiv", (void*)(ptrdiff_t)glow_glProgramUniform2uiv, program, location, count, value);
  glow_glProgramUniform2uiv(program, location, count, value);
  glow_post_callback_("glProgramUniform2uiv", (void*)(ptrdiff_t)glow_glProgramUniform2uiv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM2UIVPROC glow_debug_glProgramUniform2uiv = glow_debug_impl_glProgramUniform2uiv;

static void glow_debug_impl_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glVertex3d", (void*)(ptrdiff_t)glow_glVertex3d, x, y, z);
  glow_glVertex3d(x, y, z);
  glow_post_callback_("glVertex3d", (void*)(ptrdiff_t)glow_glVertex3d, x, y, z);
}
PFNGLVERTEX3DPROC glow_debug_glVertex3d = glow_debug_impl_glVertex3d;

static void glow_debug_impl_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {

  glow_pre_callback_("glBindAttribLocation", (void*)(ptrdiff_t)glow_glBindAttribLocation, program, index, name);
  glow_glBindAttribLocation(program, index, name);
  glow_post_callback_("glBindAttribLocation", (void*)(ptrdiff_t)glow_glBindAttribLocation, program, index, name);
}
PFNGLBINDATTRIBLOCATIONPROC glow_debug_glBindAttribLocation = glow_debug_impl_glBindAttribLocation;

static void glow_debug_impl_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix2x4dv", (void*)(ptrdiff_t)glow_glUniformMatrix2x4dv, location, count, transpose, value);
  glow_glUniformMatrix2x4dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix2x4dv", (void*)(ptrdiff_t)glow_glUniformMatrix2x4dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X4DVPROC glow_debug_glUniformMatrix2x4dv = glow_debug_impl_glUniformMatrix2x4dv;

static void glow_debug_impl_glEvalCoord1dv(const GLdouble *u) {

  glow_pre_callback_("glEvalCoord1dv", (void*)(ptrdiff_t)glow_glEvalCoord1dv, u);
  glow_glEvalCoord1dv(u);
  glow_post_callback_("glEvalCoord1dv", (void*)(ptrdiff_t)glow_glEvalCoord1dv, u);
}
PFNGLEVALCOORD1DVPROC glow_debug_glEvalCoord1dv = glow_debug_impl_glEvalCoord1dv;

static void glow_debug_impl_glEvalCoord2d(GLdouble u, GLdouble v) {

  glow_pre_callback_("glEvalCoord2d", (void*)(ptrdiff_t)glow_glEvalCoord2d, u, v);
  glow_glEvalCoord2d(u, v);
  glow_post_callback_("glEvalCoord2d", (void*)(ptrdiff_t)glow_glEvalCoord2d, u, v);
}
PFNGLEVALCOORD2DPROC glow_debug_glEvalCoord2d = glow_debug_impl_glEvalCoord2d;

static void glow_debug_impl_glGetPixelMapfv(GLenum map, GLfloat *values) {

  glow_pre_callback_("glGetPixelMapfv", (void*)(ptrdiff_t)glow_glGetPixelMapfv, map, values);
  glow_glGetPixelMapfv(map, values);
  glow_post_callback_("glGetPixelMapfv", (void*)(ptrdiff_t)glow_glGetPixelMapfv, map, values);
}
PFNGLGETPIXELMAPFVPROC glow_debug_glGetPixelMapfv = glow_debug_impl_glGetPixelMapfv;

static void glow_debug_impl_glBindVertexArray(GLuint array) {

  glow_pre_callback_("glBindVertexArray", (void*)(ptrdiff_t)glow_glBindVertexArray, array);
  glow_glBindVertexArray(array);
  glow_post_callback_("glBindVertexArray", (void*)(ptrdiff_t)glow_glBindVertexArray, array);
}
PFNGLBINDVERTEXARRAYPROC glow_debug_glBindVertexArray = glow_debug_impl_glBindVertexArray;

static void glow_debug_impl_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix3dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix3dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix3dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glow_debug_glProgramUniformMatrix3dv = glow_debug_impl_glProgramUniformMatrix3dv;

static void glow_debug_impl_glPixelStorei(GLenum pname, GLint param) {

  glow_pre_callback_("glPixelStorei", (void*)(ptrdiff_t)glow_glPixelStorei, pname, param);
  glow_glPixelStorei(pname, param);
  glow_post_callback_("glPixelStorei", (void*)(ptrdiff_t)glow_glPixelStorei, pname, param);
}
PFNGLPIXELSTOREIPROC glow_debug_glPixelStorei = glow_debug_impl_glPixelStorei;

static void glow_debug_impl_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glVertexPointer", (void*)(ptrdiff_t)glow_glVertexPointer, size, type, stride, pointer);
  glow_glVertexPointer(size, type, stride, pointer);
  glow_post_callback_("glVertexPointer", (void*)(ptrdiff_t)glow_glVertexPointer, size, type, stride, pointer);
}
PFNGLVERTEXPOINTERPROC glow_debug_glVertexPointer = glow_debug_impl_glVertexPointer;

static void glow_debug_impl_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {

  glow_pre_callback_("glFrustum", (void*)(ptrdiff_t)glow_glFrustum, left, right, bottom, top, zNear, zFar);
  glow_glFrustum(left, right, bottom, top, zNear, zFar);
  glow_post_callback_("glFrustum", (void*)(ptrdiff_t)glow_glFrustum, left, right, bottom, top, zNear, zFar);
}
PFNGLFRUSTUMPROC glow_debug_glFrustum = glow_debug_impl_glFrustum;

static void glow_debug_impl_glLoadName(GLuint name) {

  glow_pre_callback_("glLoadName", (void*)(ptrdiff_t)glow_glLoadName, name);
  glow_glLoadName(name);
  glow_post_callback_("glLoadName", (void*)(ptrdiff_t)glow_glLoadName, name);
}
PFNGLLOADNAMEPROC glow_debug_glLoadName = glow_debug_impl_glLoadName;

static void glow_debug_impl_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {

  glow_pre_callback_("glSecondaryColor3ub", (void*)(ptrdiff_t)glow_glSecondaryColor3ub, red, green, blue);
  glow_glSecondaryColor3ub(red, green, blue);
  glow_post_callback_("glSecondaryColor3ub", (void*)(ptrdiff_t)glow_glSecondaryColor3ub, red, green, blue);
}
PFNGLSECONDARYCOLOR3UBPROC glow_debug_glSecondaryColor3ub = glow_debug_impl_glSecondaryColor3ub;

static void glow_debug_impl_glVertexAttrib4Nusv(GLuint index, const GLushort *v) {

  glow_pre_callback_("glVertexAttrib4Nusv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nusv, index, v);
  glow_glVertexAttrib4Nusv(index, v);
  glow_post_callback_("glVertexAttrib4Nusv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nusv, index, v);
}
PFNGLVERTEXATTRIB4NUSVPROC glow_debug_glVertexAttrib4Nusv = glow_debug_impl_glVertexAttrib4Nusv;

static void glow_debug_impl_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {

  glow_pre_callback_("glFlushMappedBufferRange", (void*)(ptrdiff_t)glow_glFlushMappedBufferRange, target, offset, length);
  glow_glFlushMappedBufferRange(target, offset, length);
  glow_post_callback_("glFlushMappedBufferRange", (void*)(ptrdiff_t)glow_glFlushMappedBufferRange, target, offset, length);
}
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glow_debug_glFlushMappedBufferRange = glow_debug_impl_glFlushMappedBufferRange;

static void glow_debug_impl_glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {

  glow_pre_callback_("glProgramBinary", (void*)(ptrdiff_t)glow_glProgramBinary, program, binaryFormat, binary, length);
  glow_glProgramBinary(program, binaryFormat, binary, length);
  glow_post_callback_("glProgramBinary", (void*)(ptrdiff_t)glow_glProgramBinary, program, binaryFormat, binary, length);
}
PFNGLPROGRAMBINARYPROC glow_debug_glProgramBinary = glow_debug_impl_glProgramBinary;

static void glow_debug_impl_glTexCoord2fv(const GLfloat *v) {

  glow_pre_callback_("glTexCoord2fv", (void*)(ptrdiff_t)glow_glTexCoord2fv, v);
  glow_glTexCoord2fv(v);
  glow_post_callback_("glTexCoord2fv", (void*)(ptrdiff_t)glow_glTexCoord2fv, v);
}
PFNGLTEXCOORD2FVPROC glow_debug_glTexCoord2fv = glow_debug_impl_glTexCoord2fv;

static void glow_debug_impl_glScissorIndexedv(GLuint index, const GLint *v) {

  glow_pre_callback_("glScissorIndexedv", (void*)(ptrdiff_t)glow_glScissorIndexedv, index, v);
  glow_glScissorIndexedv(index, v);
  glow_post_callback_("glScissorIndexedv", (void*)(ptrdiff_t)glow_glScissorIndexedv, index, v);
}
PFNGLSCISSORINDEXEDVPROC glow_debug_glScissorIndexedv = glow_debug_impl_glScissorIndexedv;

static void glow_debug_impl_glEvalCoord1f(GLfloat u) {

  glow_pre_callback_("glEvalCoord1f", (void*)(ptrdiff_t)glow_glEvalCoord1f, u);
  glow_glEvalCoord1f(u);
  glow_post_callback_("glEvalCoord1f", (void*)(ptrdiff_t)glow_glEvalCoord1f, u);
}
PFNGLEVALCOORD1FPROC glow_debug_glEvalCoord1f = glow_debug_impl_glEvalCoord1f;

static void glow_debug_impl_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {

  glow_pre_callback_("glUniform4f", (void*)(ptrdiff_t)glow_glUniform4f, location, v0, v1, v2, v3);
  glow_glUniform4f(location, v0, v1, v2, v3);
  glow_post_callback_("glUniform4f", (void*)(ptrdiff_t)glow_glUniform4f, location, v0, v1, v2, v3);
}
PFNGLUNIFORM4FPROC glow_debug_glUniform4f = glow_debug_impl_glUniform4f;

static void glow_debug_impl_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {

  glow_pre_callback_("glInvalidateBufferSubData", (void*)(ptrdiff_t)glow_glInvalidateBufferSubData, buffer, offset, length);
  glow_glInvalidateBufferSubData(buffer, offset, length);
  glow_post_callback_("glInvalidateBufferSubData", (void*)(ptrdiff_t)glow_glInvalidateBufferSubData, buffer, offset, length);
}
PFNGLINVALIDATEBUFFERSUBDATAPROC glow_debug_glInvalidateBufferSubData = glow_debug_impl_glInvalidateBufferSubData;

static void glow_debug_impl_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {

  glow_pre_callback_("glMultiTexCoord4i", (void*)(ptrdiff_t)glow_glMultiTexCoord4i, target, s, t, r, q);
  glow_glMultiTexCoord4i(target, s, t, r, q);
  glow_post_callback_("glMultiTexCoord4i", (void*)(ptrdiff_t)glow_glMultiTexCoord4i, target, s, t, r, q);
}
PFNGLMULTITEXCOORD4IPROC glow_debug_glMultiTexCoord4i = glow_debug_impl_glMultiTexCoord4i;

static void glow_debug_impl_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {

  glow_pre_callback_("glDeleteFramebuffers", (void*)(ptrdiff_t)glow_glDeleteFramebuffers, n, framebuffers);
  glow_glDeleteFramebuffers(n, framebuffers);
  glow_post_callback_("glDeleteFramebuffers", (void*)(ptrdiff_t)glow_glDeleteFramebuffers, n, framebuffers);
}
PFNGLDELETEFRAMEBUFFERSPROC glow_debug_glDeleteFramebuffers = glow_debug_impl_glDeleteFramebuffers;

static void glow_debug_impl_glGetIntegerv(GLenum pname, GLint *data) {

  glow_pre_callback_("glGetIntegerv", (void*)(ptrdiff_t)glow_glGetIntegerv, pname, data);
  glow_glGetIntegerv(pname, data);
  glow_post_callback_("glGetIntegerv", (void*)(ptrdiff_t)glow_glGetIntegerv, pname, data);
}
PFNGLGETINTEGERVPROC glow_debug_glGetIntegerv = glow_debug_impl_glGetIntegerv;

static void glow_debug_impl_glLoadTransposeMatrixd(const GLdouble *m) {

  glow_pre_callback_("glLoadTransposeMatrixd", (void*)(ptrdiff_t)glow_glLoadTransposeMatrixd, m);
  glow_glLoadTransposeMatrixd(m);
  glow_post_callback_("glLoadTransposeMatrixd", (void*)(ptrdiff_t)glow_glLoadTransposeMatrixd, m);
}
PFNGLLOADTRANSPOSEMATRIXDPROC glow_debug_glLoadTransposeMatrixd = glow_debug_impl_glLoadTransposeMatrixd;

static void glow_debug_impl_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glProgramUniform3dv", (void*)(ptrdiff_t)glow_glProgramUniform3dv, program, location, count, value);
  glow_glProgramUniform3dv(program, location, count, value);
  glow_post_callback_("glProgramUniform3dv", (void*)(ptrdiff_t)glow_glProgramUniform3dv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM3DVPROC glow_debug_glProgramUniform3dv = glow_debug_impl_glProgramUniform3dv;

static void glow_debug_impl_glColor4sv(const GLshort *v) {

  glow_pre_callback_("glColor4sv", (void*)(ptrdiff_t)glow_glColor4sv, v);
  glow_glColor4sv(v);
  glow_post_callback_("glColor4sv", (void*)(ptrdiff_t)glow_glColor4sv, v);
}
PFNGLCOLOR4SVPROC glow_debug_glColor4sv = glow_debug_impl_glColor4sv;

static void glow_debug_impl_glMultTransposeMatrixf(const GLfloat *m) {

  glow_pre_callback_("glMultTransposeMatrixf", (void*)(ptrdiff_t)glow_glMultTransposeMatrixf, m);
  glow_glMultTransposeMatrixf(m);
  glow_post_callback_("glMultTransposeMatrixf", (void*)(ptrdiff_t)glow_glMultTransposeMatrixf, m);
}
PFNGLMULTTRANSPOSEMATRIXFPROC glow_debug_glMultTransposeMatrixf = glow_debug_impl_glMultTransposeMatrixf;

static void glow_debug_impl_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {

  glow_pre_callback_("glBlendEquationSeparate", (void*)(ptrdiff_t)glow_glBlendEquationSeparate, modeRGB, modeAlpha);
  glow_glBlendEquationSeparate(modeRGB, modeAlpha);
  glow_post_callback_("glBlendEquationSeparate", (void*)(ptrdiff_t)glow_glBlendEquationSeparate, modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEPROC glow_debug_glBlendEquationSeparate = glow_debug_impl_glBlendEquationSeparate;

static void glow_debug_impl_glUniform1i(GLint location, GLint v0) {

  glow_pre_callback_("glUniform1i", (void*)(ptrdiff_t)glow_glUniform1i, location, v0);
  glow_glUniform1i(location, v0);
  glow_post_callback_("glUniform1i", (void*)(ptrdiff_t)glow_glUniform1i, location, v0);
}
PFNGLUNIFORM1IPROC glow_debug_glUniform1i = glow_debug_impl_glUniform1i;

static void glow_debug_impl_glBlendEquationi(GLuint buf, GLenum mode) {

  glow_pre_callback_("glBlendEquationi", (void*)(ptrdiff_t)glow_glBlendEquationi, buf, mode);
  glow_glBlendEquationi(buf, mode);
  glow_post_callback_("glBlendEquationi", (void*)(ptrdiff_t)glow_glBlendEquationi, buf, mode);
}
PFNGLBLENDEQUATIONIPROC glow_debug_glBlendEquationi = glow_debug_impl_glBlendEquationi;

static void glow_debug_impl_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glProgramUniform4dv", (void*)(ptrdiff_t)glow_glProgramUniform4dv, program, location, count, value);
  glow_glProgramUniform4dv(program, location, count, value);
  glow_post_callback_("glProgramUniform4dv", (void*)(ptrdiff_t)glow_glProgramUniform4dv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM4DVPROC glow_debug_glProgramUniform4dv = glow_debug_impl_glProgramUniform4dv;

static void glow_debug_impl_glMemoryBarrier(GLbitfield barriers) {

  glow_pre_callback_("glMemoryBarrier", (void*)(ptrdiff_t)glow_glMemoryBarrier, barriers);
  glow_glMemoryBarrier(barriers);
  glow_post_callback_("glMemoryBarrier", (void*)(ptrdiff_t)glow_glMemoryBarrier, barriers);
}
PFNGLMEMORYBARRIERPROC glow_debug_glMemoryBarrier = glow_debug_impl_glMemoryBarrier;

static void glow_debug_impl_glEvalCoord1fv(const GLfloat *u) {

  glow_pre_callback_("glEvalCoord1fv", (void*)(ptrdiff_t)glow_glEvalCoord1fv, u);
  glow_glEvalCoord1fv(u);
  glow_post_callback_("glEvalCoord1fv", (void*)(ptrdiff_t)glow_glEvalCoord1fv, u);
}
PFNGLEVALCOORD1FVPROC glow_debug_glEvalCoord1fv = glow_debug_impl_glEvalCoord1fv;

static void glow_debug_impl_glWindowPos2i(GLint x, GLint y) {

  glow_pre_callback_("glWindowPos2i", (void*)(ptrdiff_t)glow_glWindowPos2i, x, y);
  glow_glWindowPos2i(x, y);
  glow_post_callback_("glWindowPos2i", (void*)(ptrdiff_t)glow_glWindowPos2i, x, y);
}
PFNGLWINDOWPOS2IPROC glow_debug_glWindowPos2i = glow_debug_impl_glWindowPos2i;

static void glow_debug_impl_glDeleteProgram(GLuint program) {

  glow_pre_callback_("glDeleteProgram", (void*)(ptrdiff_t)glow_glDeleteProgram, program);
  glow_glDeleteProgram(program);
  glow_post_callback_("glDeleteProgram", (void*)(ptrdiff_t)glow_glDeleteProgram, program);
}
PFNGLDELETEPROGRAMPROC glow_debug_glDeleteProgram = glow_debug_impl_glDeleteProgram;

static void glow_debug_impl_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {

  glow_pre_callback_("glProgramUniform4d", (void*)(ptrdiff_t)glow_glProgramUniform4d, program, location, v0, v1, v2, v3);
  glow_glProgramUniform4d(program, location, v0, v1, v2, v3);
  glow_post_callback_("glProgramUniform4d", (void*)(ptrdiff_t)glow_glProgramUniform4d, program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4DPROC glow_debug_glProgramUniform4d = glow_debug_impl_glProgramUniform4d;

static void glow_debug_impl_glMultiTexCoord2fv(GLenum target, const GLfloat *v) {

  glow_pre_callback_("glMultiTexCoord2fv", (void*)(ptrdiff_t)glow_glMultiTexCoord2fv, target, v);
  glow_glMultiTexCoord2fv(target, v);
  glow_post_callback_("glMultiTexCoord2fv", (void*)(ptrdiff_t)glow_glMultiTexCoord2fv, target, v);
}
PFNGLMULTITEXCOORD2FVPROC glow_debug_glMultiTexCoord2fv = glow_debug_impl_glMultiTexCoord2fv;

static void glow_debug_impl_glVertexP4ui(GLenum type, GLuint value) {

  glow_pre_callback_("glVertexP4ui", (void*)(ptrdiff_t)glow_glVertexP4ui, type, value);
  glow_glVertexP4ui(type, value);
  glow_post_callback_("glVertexP4ui", (void*)(ptrdiff_t)glow_glVertexP4ui, type, value);
}
PFNGLVERTEXP4UIPROC glow_debug_glVertexP4ui = glow_debug_impl_glVertexP4ui;

static void glow_debug_impl_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {

  glow_pre_callback_("glGetProgramPipelineInfoLog", (void*)(ptrdiff_t)glow_glGetProgramPipelineInfoLog, pipeline, bufSize, length, infoLog);
  glow_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  glow_post_callback_("glGetProgramPipelineInfoLog", (void*)(ptrdiff_t)glow_glGetProgramPipelineInfoLog, pipeline, bufSize, length, infoLog);
}
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glow_debug_glGetProgramPipelineInfoLog = glow_debug_impl_glGetProgramPipelineInfoLog;

static void glow_debug_impl_glVertexAttribI3uiv(GLuint index, const GLuint *v) {

  glow_pre_callback_("glVertexAttribI3uiv", (void*)(ptrdiff_t)glow_glVertexAttribI3uiv, index, v);
  glow_glVertexAttribI3uiv(index, v);
  glow_post_callback_("glVertexAttribI3uiv", (void*)(ptrdiff_t)glow_glVertexAttribI3uiv, index, v);
}
PFNGLVERTEXATTRIBI3UIVPROC glow_debug_glVertexAttribI3uiv = glow_debug_impl_glVertexAttribI3uiv;

static void glow_debug_impl_glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {

  glow_pre_callback_("glVertexAttrib4Nuiv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nuiv, index, v);
  glow_glVertexAttrib4Nuiv(index, v);
  glow_post_callback_("glVertexAttrib4Nuiv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nuiv, index, v);
}
PFNGLVERTEXATTRIB4NUIVPROC glow_debug_glVertexAttrib4Nuiv = glow_debug_impl_glVertexAttrib4Nuiv;

static void glow_debug_impl_glPixelTransferi(GLenum pname, GLint param) {

  glow_pre_callback_("glPixelTransferi", (void*)(ptrdiff_t)glow_glPixelTransferi, pname, param);
  glow_glPixelTransferi(pname, param);
  glow_post_callback_("glPixelTransferi", (void*)(ptrdiff_t)glow_glPixelTransferi, pname, param);
}
PFNGLPIXELTRANSFERIPROC glow_debug_glPixelTransferi = glow_debug_impl_glPixelTransferi;

static void glow_debug_impl_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {

  glow_pre_callback_("glMultiTexCoord3i", (void*)(ptrdiff_t)glow_glMultiTexCoord3i, target, s, t, r);
  glow_glMultiTexCoord3i(target, s, t, r);
  glow_post_callback_("glMultiTexCoord3i", (void*)(ptrdiff_t)glow_glMultiTexCoord3i, target, s, t, r);
}
PFNGLMULTITEXCOORD3IPROC glow_debug_glMultiTexCoord3i = glow_debug_impl_glMultiTexCoord3i;

static void glow_debug_impl_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {

  glow_pre_callback_("glVertexAttribI3ui", (void*)(ptrdiff_t)glow_glVertexAttribI3ui, index, x, y, z);
  glow_glVertexAttribI3ui(index, x, y, z);
  glow_post_callback_("glVertexAttribI3ui", (void*)(ptrdiff_t)glow_glVertexAttribI3ui, index, x, y, z);
}
PFNGLVERTEXATTRIBI3UIPROC glow_debug_glVertexAttribI3ui = glow_debug_impl_glVertexAttribI3ui;

static GLboolean glow_debug_impl_glIsFramebuffer(GLuint framebuffer) {

  GLboolean ret;
  glow_pre_callback_("glIsFramebuffer", (void*)(ptrdiff_t)glow_glIsFramebuffer, framebuffer);
  ret = glow_glIsFramebuffer(framebuffer);
  glow_post_callback_("glIsFramebuffer", (void*)(ptrdiff_t)glow_glIsFramebuffer, framebuffer);
  return ret;
}
PFNGLISFRAMEBUFFERPROC glow_debug_glIsFramebuffer = glow_debug_impl_glIsFramebuffer;

static void glow_debug_impl_glVertexP3ui(GLenum type, GLuint value) {

  glow_pre_callback_("glVertexP3ui", (void*)(ptrdiff_t)glow_glVertexP3ui, type, value);
  glow_glVertexP3ui(type, value);
  glow_post_callback_("glVertexP3ui", (void*)(ptrdiff_t)glow_glVertexP3ui, type, value);
}
PFNGLVERTEXP3UIPROC glow_debug_glVertexP3ui = glow_debug_impl_glVertexP3ui;

static GLboolean glow_debug_impl_glIsEnabled(GLenum cap) {

  GLboolean ret;
  glow_pre_callback_("glIsEnabled", (void*)(ptrdiff_t)glow_glIsEnabled, cap);
  ret = glow_glIsEnabled(cap);
  glow_post_callback_("glIsEnabled", (void*)(ptrdiff_t)glow_glIsEnabled, cap);
  return ret;
}
PFNGLISENABLEDPROC glow_debug_glIsEnabled = glow_debug_impl_glIsEnabled;

static void glow_debug_impl_glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {

  glow_pre_callback_("glScissorArrayv", (void*)(ptrdiff_t)glow_glScissorArrayv, first, count, v);
  glow_glScissorArrayv(first, count, v);
  glow_post_callback_("glScissorArrayv", (void*)(ptrdiff_t)glow_glScissorArrayv, first, count, v);
}
PFNGLSCISSORARRAYVPROC glow_debug_glScissorArrayv = glow_debug_impl_glScissorArrayv;

static void glow_debug_impl_glSecondaryColor3bv(const GLbyte *v) {

  glow_pre_callback_("glSecondaryColor3bv", (void*)(ptrdiff_t)glow_glSecondaryColor3bv, v);
  glow_glSecondaryColor3bv(v);
  glow_post_callback_("glSecondaryColor3bv", (void*)(ptrdiff_t)glow_glSecondaryColor3bv, v);
}
PFNGLSECONDARYCOLOR3BVPROC glow_debug_glSecondaryColor3bv = glow_debug_impl_glSecondaryColor3bv;

static void glow_debug_impl_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glVertex3f", (void*)(ptrdiff_t)glow_glVertex3f, x, y, z);
  glow_glVertex3f(x, y, z);
  glow_post_callback_("glVertex3f", (void*)(ptrdiff_t)glow_glVertex3f, x, y, z);
}
PFNGLVERTEX3FPROC glow_debug_glVertex3f = glow_debug_impl_glVertex3f;

static void glow_debug_impl_glMultiTexCoord2dv(GLenum target, const GLdouble *v) {

  glow_pre_callback_("glMultiTexCoord2dv", (void*)(ptrdiff_t)glow_glMultiTexCoord2dv, target, v);
  glow_glMultiTexCoord2dv(target, v);
  glow_post_callback_("glMultiTexCoord2dv", (void*)(ptrdiff_t)glow_glMultiTexCoord2dv, target, v);
}
PFNGLMULTITEXCOORD2DVPROC glow_debug_glMultiTexCoord2dv = glow_debug_impl_glMultiTexCoord2dv;

static void glow_debug_impl_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {

  glow_pre_callback_("glGetQueryObjecti64v", (void*)(ptrdiff_t)glow_glGetQueryObjecti64v, id, pname, params);
  glow_glGetQueryObjecti64v(id, pname, params);
  glow_post_callback_("glGetQueryObjecti64v", (void*)(ptrdiff_t)glow_glGetQueryObjecti64v, id, pname, params);
}
PFNGLGETQUERYOBJECTI64VPROC glow_debug_glGetQueryObjecti64v = glow_debug_impl_glGetQueryObjecti64v;

static void glow_debug_impl_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetTexLevelParameteriv", (void*)(ptrdiff_t)glow_glGetTexLevelParameteriv, target, level, pname, params);
  glow_glGetTexLevelParameteriv(target, level, pname, params);
  glow_post_callback_("glGetTexLevelParameteriv", (void*)(ptrdiff_t)glow_glGetTexLevelParameteriv, target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERIVPROC glow_debug_glGetTexLevelParameteriv = glow_debug_impl_glGetTexLevelParameteriv;

static void glow_debug_impl_glWindowPos3dv(const GLdouble *v) {

  glow_pre_callback_("glWindowPos3dv", (void*)(ptrdiff_t)glow_glWindowPos3dv, v);
  glow_glWindowPos3dv(v);
  glow_post_callback_("glWindowPos3dv", (void*)(ptrdiff_t)glow_glWindowPos3dv, v);
}
PFNGLWINDOWPOS3DVPROC glow_debug_glWindowPos3dv = glow_debug_impl_glWindowPos3dv;

static void glow_debug_impl_glMultiTexCoord1f(GLenum target, GLfloat s) {

  glow_pre_callback_("glMultiTexCoord1f", (void*)(ptrdiff_t)glow_glMultiTexCoord1f, target, s);
  glow_glMultiTexCoord1f(target, s);
  glow_post_callback_("glMultiTexCoord1f", (void*)(ptrdiff_t)glow_glMultiTexCoord1f, target, s);
}
PFNGLMULTITEXCOORD1FPROC glow_debug_glMultiTexCoord1f = glow_debug_impl_glMultiTexCoord1f;

static void glow_debug_impl_glNormal3i(GLint nx, GLint ny, GLint nz) {

  glow_pre_callback_("glNormal3i", (void*)(ptrdiff_t)glow_glNormal3i, nx, ny, nz);
  glow_glNormal3i(nx, ny, nz);
  glow_post_callback_("glNormal3i", (void*)(ptrdiff_t)glow_glNormal3i, nx, ny, nz);
}
PFNGLNORMAL3IPROC glow_debug_glNormal3i = glow_debug_impl_glNormal3i;

static void glow_debug_impl_glRasterPos2iv(const GLint *v) {

  glow_pre_callback_("glRasterPos2iv", (void*)(ptrdiff_t)glow_glRasterPos2iv, v);
  glow_glRasterPos2iv(v);
  glow_post_callback_("glRasterPos2iv", (void*)(ptrdiff_t)glow_glRasterPos2iv, v);
}
PFNGLRASTERPOS2IVPROC glow_debug_glRasterPos2iv = glow_debug_impl_glRasterPos2iv;

static void glow_debug_impl_glVertex3iv(const GLint *v) {

  glow_pre_callback_("glVertex3iv", (void*)(ptrdiff_t)glow_glVertex3iv, v);
  glow_glVertex3iv(v);
  glow_post_callback_("glVertex3iv", (void*)(ptrdiff_t)glow_glVertex3iv, v);
}
PFNGLVERTEX3IVPROC glow_debug_glVertex3iv = glow_debug_impl_glVertex3iv;

static void glow_debug_impl_glEvalCoord2fv(const GLfloat *u) {

  glow_pre_callback_("glEvalCoord2fv", (void*)(ptrdiff_t)glow_glEvalCoord2fv, u);
  glow_glEvalCoord2fv(u);
  glow_post_callback_("glEvalCoord2fv", (void*)(ptrdiff_t)glow_glEvalCoord2fv, u);
}
PFNGLEVALCOORD2FVPROC glow_debug_glEvalCoord2fv = glow_debug_impl_glEvalCoord2fv;

static void glow_debug_impl_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix3fv", (void*)(ptrdiff_t)glow_glUniformMatrix3fv, location, count, transpose, value);
  glow_glUniformMatrix3fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix3fv", (void*)(ptrdiff_t)glow_glUniformMatrix3fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3FVPROC glow_debug_glUniformMatrix3fv = glow_debug_impl_glUniformMatrix3fv;

static void glow_debug_impl_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {

  glow_pre_callback_("glColor4s", (void*)(ptrdiff_t)glow_glColor4s, red, green, blue, alpha);
  glow_glColor4s(red, green, blue, alpha);
  glow_post_callback_("glColor4s", (void*)(ptrdiff_t)glow_glColor4s, red, green, blue, alpha);
}
PFNGLCOLOR4SPROC glow_debug_glColor4s = glow_debug_impl_glColor4s;

static void glow_debug_impl_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {

  glow_pre_callback_("glVertex4d", (void*)(ptrdiff_t)glow_glVertex4d, x, y, z, w);
  glow_glVertex4d(x, y, z, w);
  glow_post_callback_("glVertex4d", (void*)(ptrdiff_t)glow_glVertex4d, x, y, z, w);
}
PFNGLVERTEX4DPROC glow_debug_glVertex4d = glow_debug_impl_glVertex4d;

static void glow_debug_impl_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {

  glow_pre_callback_("glGetInternalformativ", (void*)(ptrdiff_t)glow_glGetInternalformativ, target, internalformat, pname, bufSize, params);
  glow_glGetInternalformativ(target, internalformat, pname, bufSize, params);
  glow_post_callback_("glGetInternalformativ", (void*)(ptrdiff_t)glow_glGetInternalformativ, target, internalformat, pname, bufSize, params);
}
PFNGLGETINTERNALFORMATIVPROC glow_debug_glGetInternalformativ = glow_debug_impl_glGetInternalformativ;

static void glow_debug_impl_glUniform2d(GLint location, GLdouble x, GLdouble y) {

  glow_pre_callback_("glUniform2d", (void*)(ptrdiff_t)glow_glUniform2d, location, x, y);
  glow_glUniform2d(location, x, y);
  glow_post_callback_("glUniform2d", (void*)(ptrdiff_t)glow_glUniform2d, location, x, y);
}
PFNGLUNIFORM2DPROC glow_debug_glUniform2d = glow_debug_impl_glUniform2d;

static GLboolean glow_debug_impl_glIsProgramPipeline(GLuint pipeline) {

  GLboolean ret;
  glow_pre_callback_("glIsProgramPipeline", (void*)(ptrdiff_t)glow_glIsProgramPipeline, pipeline);
  ret = glow_glIsProgramPipeline(pipeline);
  glow_post_callback_("glIsProgramPipeline", (void*)(ptrdiff_t)glow_glIsProgramPipeline, pipeline);
  return ret;
}
PFNGLISPROGRAMPIPELINEPROC glow_debug_glIsProgramPipeline = glow_debug_impl_glIsProgramPipeline;

static void glow_debug_impl_glVertexAttrib2sv(GLuint index, const GLshort *v) {

  glow_pre_callback_("glVertexAttrib2sv", (void*)(ptrdiff_t)glow_glVertexAttrib2sv, index, v);
  glow_glVertexAttrib2sv(index, v);
  glow_post_callback_("glVertexAttrib2sv", (void*)(ptrdiff_t)glow_glVertexAttrib2sv, index, v);
}
PFNGLVERTEXATTRIB2SVPROC glow_debug_glVertexAttrib2sv = glow_debug_impl_glVertexAttrib2sv;

static void glow_debug_impl_glColor4bv(const GLbyte *v) {

  glow_pre_callback_("glColor4bv", (void*)(ptrdiff_t)glow_glColor4bv, v);
  glow_glColor4bv(v);
  glow_post_callback_("glColor4bv", (void*)(ptrdiff_t)glow_glColor4bv, v);
}
PFNGLCOLOR4BVPROC glow_debug_glColor4bv = glow_debug_impl_glColor4bv;

static void glow_debug_impl_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {

  glow_pre_callback_("glVertex4f", (void*)(ptrdiff_t)glow_glVertex4f, x, y, z, w);
  glow_glVertex4f(x, y, z, w);
  glow_post_callback_("glVertex4f", (void*)(ptrdiff_t)glow_glVertex4f, x, y, z, w);
}
PFNGLVERTEX4FPROC glow_debug_glVertex4f = glow_debug_impl_glVertex4f;

static void glow_debug_impl_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {

  glow_pre_callback_("glGetVertexAttribdv", (void*)(ptrdiff_t)glow_glGetVertexAttribdv, index, pname, params);
  glow_glGetVertexAttribdv(index, pname, params);
  glow_post_callback_("glGetVertexAttribdv", (void*)(ptrdiff_t)glow_glGetVertexAttribdv, index, pname, params);
}
PFNGLGETVERTEXATTRIBDVPROC glow_debug_glGetVertexAttribdv = glow_debug_impl_glGetVertexAttribdv;

static void glow_debug_impl_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {

  glow_pre_callback_("glProgramUniform4i", (void*)(ptrdiff_t)glow_glProgramUniform4i, program, location, v0, v1, v2, v3);
  glow_glProgramUniform4i(program, location, v0, v1, v2, v3);
  glow_post_callback_("glProgramUniform4i", (void*)(ptrdiff_t)glow_glProgramUniform4i, program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4IPROC glow_debug_glProgramUniform4i = glow_debug_impl_glProgramUniform4i;

static void glow_debug_impl_glGetDoublev(GLenum pname, GLdouble *data) {

  glow_pre_callback_("glGetDoublev", (void*)(ptrdiff_t)glow_glGetDoublev, pname, data);
  glow_glGetDoublev(pname, data);
  glow_post_callback_("glGetDoublev", (void*)(ptrdiff_t)glow_glGetDoublev, pname, data);
}
PFNGLGETDOUBLEVPROC glow_debug_glGetDoublev = glow_debug_impl_glGetDoublev;

static void glow_debug_impl_glGetPixelMapusv(GLenum map, GLushort *values) {

  glow_pre_callback_("glGetPixelMapusv", (void*)(ptrdiff_t)glow_glGetPixelMapusv, map, values);
  glow_glGetPixelMapusv(map, values);
  glow_post_callback_("glGetPixelMapusv", (void*)(ptrdiff_t)glow_glGetPixelMapusv, map, values);
}
PFNGLGETPIXELMAPUSVPROC glow_debug_glGetPixelMapusv = glow_debug_impl_glGetPixelMapusv;

static void glow_debug_impl_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glProgramUniform4iv", (void*)(ptrdiff_t)glow_glProgramUniform4iv, program, location, count, value);
  glow_glProgramUniform4iv(program, location, count, value);
  glow_post_callback_("glProgramUniform4iv", (void*)(ptrdiff_t)glow_glProgramUniform4iv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM4IVPROC glow_debug_glProgramUniform4iv = glow_debug_impl_glProgramUniform4iv;

static void glow_debug_impl_glPopDebugGroup() {

  glow_pre_callback_("glPopDebugGroup", (void*)(ptrdiff_t)glow_glPopDebugGroup);
  glow_glPopDebugGroup();
  glow_post_callback_("glPopDebugGroup", (void*)(ptrdiff_t)glow_glPopDebugGroup);
}
PFNGLPOPDEBUGGROUPPROC glow_debug_glPopDebugGroup = glow_debug_impl_glPopDebugGroup;

static void glow_debug_impl_glLogicOp(GLenum opcode) {

  glow_pre_callback_("glLogicOp", (void*)(ptrdiff_t)glow_glLogicOp, opcode);
  glow_glLogicOp(opcode);
  glow_post_callback_("glLogicOp", (void*)(ptrdiff_t)glow_glLogicOp, opcode);
}
PFNGLLOGICOPPROC glow_debug_glLogicOp = glow_debug_impl_glLogicOp;

static void glow_debug_impl_glWindowPos2d(GLdouble x, GLdouble y) {

  glow_pre_callback_("glWindowPos2d", (void*)(ptrdiff_t)glow_glWindowPos2d, x, y);
  glow_glWindowPos2d(x, y);
  glow_post_callback_("glWindowPos2d", (void*)(ptrdiff_t)glow_glWindowPos2d, x, y);
}
PFNGLWINDOWPOS2DPROC glow_debug_glWindowPos2d = glow_debug_impl_glWindowPos2d;

static void * glow_debug_impl_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {

  void * ret;
  glow_pre_callback_("glMapBufferRange", (void*)(ptrdiff_t)glow_glMapBufferRange, target, offset, length, access);
  ret = glow_glMapBufferRange(target, offset, length, access);
  glow_post_callback_("glMapBufferRange", (void*)(ptrdiff_t)glow_glMapBufferRange, target, offset, length, access);
  return ret;
}
PFNGLMAPBUFFERRANGEPROC glow_debug_glMapBufferRange = glow_debug_impl_glMapBufferRange;

static void glow_debug_impl_glFogCoordf(GLfloat coord) {

  glow_pre_callback_("glFogCoordf", (void*)(ptrdiff_t)glow_glFogCoordf, coord);
  glow_glFogCoordf(coord);
  glow_post_callback_("glFogCoordf", (void*)(ptrdiff_t)glow_glFogCoordf, coord);
}
PFNGLFOGCOORDFPROC glow_debug_glFogCoordf = glow_debug_impl_glFogCoordf;

static void glow_debug_impl_glNormal3dv(const GLdouble *v) {

  glow_pre_callback_("glNormal3dv", (void*)(ptrdiff_t)glow_glNormal3dv, v);
  glow_glNormal3dv(v);
  glow_post_callback_("glNormal3dv", (void*)(ptrdiff_t)glow_glNormal3dv, v);
}
PFNGLNORMAL3DVPROC glow_debug_glNormal3dv = glow_debug_impl_glNormal3dv;

static void glow_debug_impl_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {

  glow_pre_callback_("glGetShaderPrecisionFormat", (void*)(ptrdiff_t)glow_glGetShaderPrecisionFormat, shadertype, precisiontype, range, precision);
  glow_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  glow_post_callback_("glGetShaderPrecisionFormat", (void*)(ptrdiff_t)glow_glGetShaderPrecisionFormat, shadertype, precisiontype, range, precision);
}
PFNGLGETSHADERPRECISIONFORMATPROC glow_debug_glGetShaderPrecisionFormat = glow_debug_impl_glGetShaderPrecisionFormat;

static void glow_debug_impl_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {

  glow_pre_callback_("glColor4d", (void*)(ptrdiff_t)glow_glColor4d, red, green, blue, alpha);
  glow_glColor4d(red, green, blue, alpha);
  glow_post_callback_("glColor4d", (void*)(ptrdiff_t)glow_glColor4d, red, green, blue, alpha);
}
PFNGLCOLOR4DPROC glow_debug_glColor4d = glow_debug_impl_glColor4d;

static void glow_debug_impl_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix2fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix2fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix2fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glow_debug_glProgramUniformMatrix2fv = glow_debug_impl_glProgramUniformMatrix2fv;

static void glow_debug_impl_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {

  glow_pre_callback_("glTexStorage3D", (void*)(ptrdiff_t)glow_glTexStorage3D, target, levels, internalformat, width, height, depth);
  glow_glTexStorage3D(target, levels, internalformat, width, height, depth);
  glow_post_callback_("glTexStorage3D", (void*)(ptrdiff_t)glow_glTexStorage3D, target, levels, internalformat, width, height, depth);
}
PFNGLTEXSTORAGE3DPROC glow_debug_glTexStorage3D = glow_debug_impl_glTexStorage3D;

static void glow_debug_impl_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {

  glow_pre_callback_("glClearBufferiv", (void*)(ptrdiff_t)glow_glClearBufferiv, buffer, drawbuffer, value);
  glow_glClearBufferiv(buffer, drawbuffer, value);
  glow_post_callback_("glClearBufferiv", (void*)(ptrdiff_t)glow_glClearBufferiv, buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERIVPROC glow_debug_glClearBufferiv = glow_debug_impl_glClearBufferiv;

static void glow_debug_impl_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {

  glow_pre_callback_("glRectf", (void*)(ptrdiff_t)glow_glRectf, x1, y1, x2, y2);
  glow_glRectf(x1, y1, x2, y2);
  glow_post_callback_("glRectf", (void*)(ptrdiff_t)glow_glRectf, x1, y1, x2, y2);
}
PFNGLRECTFPROC glow_debug_glRectf = glow_debug_impl_glRectf;

static void glow_debug_impl_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {

  glow_pre_callback_("glGetTransformFeedbackVarying", (void*)(ptrdiff_t)glow_glGetTransformFeedbackVarying, program, index, bufSize, length, size, type, name);
  glow_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  glow_post_callback_("glGetTransformFeedbackVarying", (void*)(ptrdiff_t)glow_glGetTransformFeedbackVarying, program, index, bufSize, length, size, type, name);
}
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glow_debug_glGetTransformFeedbackVarying = glow_debug_impl_glGetTransformFeedbackVarying;

static void glow_debug_impl_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {

  glow_pre_callback_("glMultiTexCoordP3uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP3uiv, texture, type, coords);
  glow_glMultiTexCoordP3uiv(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP3uiv", (void*)(ptrdiff_t)glow_glMultiTexCoordP3uiv, texture, type, coords);
}
PFNGLMULTITEXCOORDP3UIVPROC glow_debug_glMultiTexCoordP3uiv = glow_debug_impl_glMultiTexCoordP3uiv;

static void glow_debug_impl_glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {

  glow_pre_callback_("glGetDoublei_v", (void*)(ptrdiff_t)glow_glGetDoublei_v, target, index, data);
  glow_glGetDoublei_v(target, index, data);
  glow_post_callback_("glGetDoublei_v", (void*)(ptrdiff_t)glow_glGetDoublei_v, target, index, data);
}
PFNGLGETDOUBLEI_VPROC glow_debug_glGetDoublei_v = glow_debug_impl_glGetDoublei_v;

static void glow_debug_impl_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glTexParameterfv", (void*)(ptrdiff_t)glow_glTexParameterfv, target, pname, params);
  glow_glTexParameterfv(target, pname, params);
  glow_post_callback_("glTexParameterfv", (void*)(ptrdiff_t)glow_glTexParameterfv, target, pname, params);
}
PFNGLTEXPARAMETERFVPROC glow_debug_glTexParameterfv = glow_debug_impl_glTexParameterfv;

static void glow_debug_impl_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix2fv", (void*)(ptrdiff_t)glow_glUniformMatrix2fv, location, count, transpose, value);
  glow_glUniformMatrix2fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix2fv", (void*)(ptrdiff_t)glow_glUniformMatrix2fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2FVPROC glow_debug_glUniformMatrix2fv = glow_debug_impl_glUniformMatrix2fv;

static GLint glow_debug_impl_glGetFragDataLocation(GLuint program, const GLchar *name) {

  GLint ret;
  glow_pre_callback_("glGetFragDataLocation", (void*)(ptrdiff_t)glow_glGetFragDataLocation, program, name);
  ret = glow_glGetFragDataLocation(program, name);
  glow_post_callback_("glGetFragDataLocation", (void*)(ptrdiff_t)glow_glGetFragDataLocation, program, name);
  return ret;
}
PFNGLGETFRAGDATALOCATIONPROC glow_debug_glGetFragDataLocation = glow_debug_impl_glGetFragDataLocation;

static void glow_debug_impl_glVertexP2uiv(GLenum type, const GLuint *value) {

  glow_pre_callback_("glVertexP2uiv", (void*)(ptrdiff_t)glow_glVertexP2uiv, type, value);
  glow_glVertexP2uiv(type, value);
  glow_post_callback_("glVertexP2uiv", (void*)(ptrdiff_t)glow_glVertexP2uiv, type, value);
}
PFNGLVERTEXP2UIVPROC glow_debug_glVertexP2uiv = glow_debug_impl_glVertexP2uiv;

static void glow_debug_impl_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {

  glow_pre_callback_("glUniform4d", (void*)(ptrdiff_t)glow_glUniform4d, location, x, y, z, w);
  glow_glUniform4d(location, x, y, z, w);
  glow_post_callback_("glUniform4d", (void*)(ptrdiff_t)glow_glUniform4d, location, x, y, z, w);
}
PFNGLUNIFORM4DPROC glow_debug_glUniform4d = glow_debug_impl_glUniform4d;

static void glow_debug_impl_glGetUniformdv(GLuint program, GLint location, GLdouble *params) {

  glow_pre_callback_("glGetUniformdv", (void*)(ptrdiff_t)glow_glGetUniformdv, program, location, params);
  glow_glGetUniformdv(program, location, params);
  glow_post_callback_("glGetUniformdv", (void*)(ptrdiff_t)glow_glGetUniformdv, program, location, params);
}
PFNGLGETUNIFORMDVPROC glow_debug_glGetUniformdv = glow_debug_impl_glGetUniformdv;

static void glow_debug_impl_glIndexs(GLshort c) {

  glow_pre_callback_("glIndexs", (void*)(ptrdiff_t)glow_glIndexs, c);
  glow_glIndexs(c);
  glow_post_callback_("glIndexs", (void*)(ptrdiff_t)glow_glIndexs, c);
}
PFNGLINDEXSPROC glow_debug_glIndexs = glow_debug_impl_glIndexs;

static void glow_debug_impl_glPushMatrix() {

  glow_pre_callback_("glPushMatrix", (void*)(ptrdiff_t)glow_glPushMatrix);
  glow_glPushMatrix();
  glow_post_callback_("glPushMatrix", (void*)(ptrdiff_t)glow_glPushMatrix);
}
PFNGLPUSHMATRIXPROC glow_debug_glPushMatrix = glow_debug_impl_glPushMatrix;

static void glow_debug_impl_glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glUniform4fv", (void*)(ptrdiff_t)glow_glUniform4fv, location, count, value);
  glow_glUniform4fv(location, count, value);
  glow_post_callback_("glUniform4fv", (void*)(ptrdiff_t)glow_glUniform4fv, location, count, value);
}
PFNGLUNIFORM4FVPROC glow_debug_glUniform4fv = glow_debug_impl_glUniform4fv;

static void glow_debug_impl_glTexCoordP3uiv(GLenum type, const GLuint *coords) {

  glow_pre_callback_("glTexCoordP3uiv", (void*)(ptrdiff_t)glow_glTexCoordP3uiv, type, coords);
  glow_glTexCoordP3uiv(type, coords);
  glow_post_callback_("glTexCoordP3uiv", (void*)(ptrdiff_t)glow_glTexCoordP3uiv, type, coords);
}
PFNGLTEXCOORDP3UIVPROC glow_debug_glTexCoordP3uiv = glow_debug_impl_glTexCoordP3uiv;

static void glow_debug_impl_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glProgramUniform2iv", (void*)(ptrdiff_t)glow_glProgramUniform2iv, program, location, count, value);
  glow_glProgramUniform2iv(program, location, count, value);
  glow_post_callback_("glProgramUniform2iv", (void*)(ptrdiff_t)glow_glProgramUniform2iv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM2IVPROC glow_debug_glProgramUniform2iv = glow_debug_impl_glProgramUniform2iv;

static void glow_debug_impl_glColor4ubv(const GLubyte *v) {

  glow_pre_callback_("glColor4ubv", (void*)(ptrdiff_t)glow_glColor4ubv, v);
  glow_glColor4ubv(v);
  glow_post_callback_("glColor4ubv", (void*)(ptrdiff_t)glow_glColor4ubv, v);
}
PFNGLCOLOR4UBVPROC glow_debug_glColor4ubv = glow_debug_impl_glColor4ubv;

static void glow_debug_impl_glMultiTexCoord4fv(GLenum target, const GLfloat *v) {

  glow_pre_callback_("glMultiTexCoord4fv", (void*)(ptrdiff_t)glow_glMultiTexCoord4fv, target, v);
  glow_glMultiTexCoord4fv(target, v);
  glow_post_callback_("glMultiTexCoord4fv", (void*)(ptrdiff_t)glow_glMultiTexCoord4fv, target, v);
}
PFNGLMULTITEXCOORD4FVPROC glow_debug_glMultiTexCoord4fv = glow_debug_impl_glMultiTexCoord4fv;

static void glow_debug_impl_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {

  glow_pre_callback_("glGetShaderSource", (void*)(ptrdiff_t)glow_glGetShaderSource, shader, bufSize, length, source);
  glow_glGetShaderSource(shader, bufSize, length, source);
  glow_post_callback_("glGetShaderSource", (void*)(ptrdiff_t)glow_glGetShaderSource, shader, bufSize, length, source);
}
PFNGLGETSHADERSOURCEPROC glow_debug_glGetShaderSource = glow_debug_impl_glGetShaderSource;

static void glow_debug_impl_glVertexAttribI2iv(GLuint index, const GLint *v) {

  glow_pre_callback_("glVertexAttribI2iv", (void*)(ptrdiff_t)glow_glVertexAttribI2iv, index, v);
  glow_glVertexAttribI2iv(index, v);
  glow_post_callback_("glVertexAttribI2iv", (void*)(ptrdiff_t)glow_glVertexAttribI2iv, index, v);
}
PFNGLVERTEXATTRIBI2IVPROC glow_debug_glVertexAttribI2iv = glow_debug_impl_glVertexAttribI2iv;

static void glow_debug_impl_glVertexAttribI4ubv(GLuint index, const GLubyte *v) {

  glow_pre_callback_("glVertexAttribI4ubv", (void*)(ptrdiff_t)glow_glVertexAttribI4ubv, index, v);
  glow_glVertexAttribI4ubv(index, v);
  glow_post_callback_("glVertexAttribI4ubv", (void*)(ptrdiff_t)glow_glVertexAttribI4ubv, index, v);
}
PFNGLVERTEXATTRIBI4UBVPROC glow_debug_glVertexAttribI4ubv = glow_debug_impl_glVertexAttribI4ubv;

static void glow_debug_impl_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {

  glow_pre_callback_("glProgramUniform2f", (void*)(ptrdiff_t)glow_glProgramUniform2f, program, location, v0, v1);
  glow_glProgramUniform2f(program, location, v0, v1);
  glow_post_callback_("glProgramUniform2f", (void*)(ptrdiff_t)glow_glProgramUniform2f, program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2FPROC glow_debug_glProgramUniform2f = glow_debug_impl_glProgramUniform2f;

static void glow_debug_impl_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {

  glow_pre_callback_("glPushDebugGroup", (void*)(ptrdiff_t)glow_glPushDebugGroup, source, id, length, message);
  glow_glPushDebugGroup(source, id, length, message);
  glow_post_callback_("glPushDebugGroup", (void*)(ptrdiff_t)glow_glPushDebugGroup, source, id, length, message);
}
PFNGLPUSHDEBUGGROUPPROC glow_debug_glPushDebugGroup = glow_debug_impl_glPushDebugGroup;

static void glow_debug_impl_glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {

  glow_pre_callback_("glTexParameteriv", (void*)(ptrdiff_t)glow_glTexParameteriv, target, pname, params);
  glow_glTexParameteriv(target, pname, params);
  glow_post_callback_("glTexParameteriv", (void*)(ptrdiff_t)glow_glTexParameteriv, target, pname, params);
}
PFNGLTEXPARAMETERIVPROC glow_debug_glTexParameteriv = glow_debug_impl_glTexParameteriv;

static void glow_debug_impl_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {

  glow_pre_callback_("glDrawArraysInstanced", (void*)(ptrdiff_t)glow_glDrawArraysInstanced, mode, first, count, instancecount);
  glow_glDrawArraysInstanced(mode, first, count, instancecount);
  glow_post_callback_("glDrawArraysInstanced", (void*)(ptrdiff_t)glow_glDrawArraysInstanced, mode, first, count, instancecount);
}
PFNGLDRAWARRAYSINSTANCEDPROC glow_debug_glDrawArraysInstanced = glow_debug_impl_glDrawArraysInstanced;

static void glow_debug_impl_glClearDepthf(GLfloat d) {

  glow_pre_callback_("glClearDepthf", (void*)(ptrdiff_t)glow_glClearDepthf, d);
  glow_glClearDepthf(d);
  glow_post_callback_("glClearDepthf", (void*)(ptrdiff_t)glow_glClearDepthf, d);
}
PFNGLCLEARDEPTHFPROC glow_debug_glClearDepthf = glow_debug_impl_glClearDepthf;

static void glow_debug_impl_glGenProgramPipelines(GLsizei n, GLuint *pipelines) {

  glow_pre_callback_("glGenProgramPipelines", (void*)(ptrdiff_t)glow_glGenProgramPipelines, n, pipelines);
  glow_glGenProgramPipelines(n, pipelines);
  glow_post_callback_("glGenProgramPipelines", (void*)(ptrdiff_t)glow_glGenProgramPipelines, n, pipelines);
}
PFNGLGENPROGRAMPIPELINESPROC glow_debug_glGenProgramPipelines = glow_debug_impl_glGenProgramPipelines;

static void glow_debug_impl_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {

  glow_pre_callback_("glInvalidateFramebuffer", (void*)(ptrdiff_t)glow_glInvalidateFramebuffer, target, numAttachments, attachments);
  glow_glInvalidateFramebuffer(target, numAttachments, attachments);
  glow_post_callback_("glInvalidateFramebuffer", (void*)(ptrdiff_t)glow_glInvalidateFramebuffer, target, numAttachments, attachments);
}
PFNGLINVALIDATEFRAMEBUFFERPROC glow_debug_glInvalidateFramebuffer = glow_debug_impl_glInvalidateFramebuffer;

static void glow_debug_impl_glMultiTexCoord4sv(GLenum target, const GLshort *v) {

  glow_pre_callback_("glMultiTexCoord4sv", (void*)(ptrdiff_t)glow_glMultiTexCoord4sv, target, v);
  glow_glMultiTexCoord4sv(target, v);
  glow_post_callback_("glMultiTexCoord4sv", (void*)(ptrdiff_t)glow_glMultiTexCoord4sv, target, v);
}
PFNGLMULTITEXCOORD4SVPROC glow_debug_glMultiTexCoord4sv = glow_debug_impl_glMultiTexCoord4sv;

static void glow_debug_impl_glGetPixelMapuiv(GLenum map, GLuint *values) {

  glow_pre_callback_("glGetPixelMapuiv", (void*)(ptrdiff_t)glow_glGetPixelMapuiv, map, values);
  glow_glGetPixelMapuiv(map, values);
  glow_post_callback_("glGetPixelMapuiv", (void*)(ptrdiff_t)glow_glGetPixelMapuiv, map, values);
}
PFNGLGETPIXELMAPUIVPROC glow_debug_glGetPixelMapuiv = glow_debug_impl_glGetPixelMapuiv;

static void glow_debug_impl_glColor3sv(const GLshort *v) {

  glow_pre_callback_("glColor3sv", (void*)(ptrdiff_t)glow_glColor3sv, v);
  glow_glColor3sv(v);
  glow_post_callback_("glColor3sv", (void*)(ptrdiff_t)glow_glColor3sv, v);
}
PFNGLCOLOR3SVPROC glow_debug_glColor3sv = glow_debug_impl_glColor3sv;

static void glow_debug_impl_glEvalPoint1(GLint i) {

  glow_pre_callback_("glEvalPoint1", (void*)(ptrdiff_t)glow_glEvalPoint1, i);
  glow_glEvalPoint1(i);
  glow_post_callback_("glEvalPoint1", (void*)(ptrdiff_t)glow_glEvalPoint1, i);
}
PFNGLEVALPOINT1PROC glow_debug_glEvalPoint1 = glow_debug_impl_glEvalPoint1;

static void glow_debug_impl_glTranslated(GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glTranslated", (void*)(ptrdiff_t)glow_glTranslated, x, y, z);
  glow_glTranslated(x, y, z);
  glow_post_callback_("glTranslated", (void*)(ptrdiff_t)glow_glTranslated, x, y, z);
}
PFNGLTRANSLATEDPROC glow_debug_glTranslated = glow_debug_impl_glTranslated;

static void glow_debug_impl_glVertexAttribI2i(GLuint index, GLint x, GLint y) {

  glow_pre_callback_("glVertexAttribI2i", (void*)(ptrdiff_t)glow_glVertexAttribI2i, index, x, y);
  glow_glVertexAttribI2i(index, x, y);
  glow_post_callback_("glVertexAttribI2i", (void*)(ptrdiff_t)glow_glVertexAttribI2i, index, x, y);
}
PFNGLVERTEXATTRIBI2IPROC glow_debug_glVertexAttribI2i = glow_debug_impl_glVertexAttribI2i;

static void glow_debug_impl_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {

  glow_pre_callback_("glGetTexParameterIuiv", (void*)(ptrdiff_t)glow_glGetTexParameterIuiv, target, pname, params);
  glow_glGetTexParameterIuiv(target, pname, params);
  glow_post_callback_("glGetTexParameterIuiv", (void*)(ptrdiff_t)glow_glGetTexParameterIuiv, target, pname, params);
}
PFNGLGETTEXPARAMETERIUIVPROC glow_debug_glGetTexParameterIuiv = glow_debug_impl_glGetTexParameterIuiv;

static void glow_debug_impl_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {

  glow_pre_callback_("glColor4us", (void*)(ptrdiff_t)glow_glColor4us, red, green, blue, alpha);
  glow_glColor4us(red, green, blue, alpha);
  glow_post_callback_("glColor4us", (void*)(ptrdiff_t)glow_glColor4us, red, green, blue, alpha);
}
PFNGLCOLOR4USPROC glow_debug_glColor4us = glow_debug_impl_glColor4us;

static void glow_debug_impl_glVertexAttribI4bv(GLuint index, const GLbyte *v) {

  glow_pre_callback_("glVertexAttribI4bv", (void*)(ptrdiff_t)glow_glVertexAttribI4bv, index, v);
  glow_glVertexAttribI4bv(index, v);
  glow_post_callback_("glVertexAttribI4bv", (void*)(ptrdiff_t)glow_glVertexAttribI4bv, index, v);
}
PFNGLVERTEXATTRIBI4BVPROC glow_debug_glVertexAttribI4bv = glow_debug_impl_glVertexAttribI4bv;

static void glow_debug_impl_glReleaseShaderCompiler() {

  glow_pre_callback_("glReleaseShaderCompiler", (void*)(ptrdiff_t)glow_glReleaseShaderCompiler);
  glow_glReleaseShaderCompiler();
  glow_post_callback_("glReleaseShaderCompiler", (void*)(ptrdiff_t)glow_glReleaseShaderCompiler);
}
PFNGLRELEASESHADERCOMPILERPROC glow_debug_glReleaseShaderCompiler = glow_debug_impl_glReleaseShaderCompiler;

static void glow_debug_impl_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glTexImage1D", (void*)(ptrdiff_t)glow_glTexImage1D, target, level, internalformat, width, border, format, type, pixels);
  glow_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  glow_post_callback_("glTexImage1D", (void*)(ptrdiff_t)glow_glTexImage1D, target, level, internalformat, width, border, format, type, pixels);
}
PFNGLTEXIMAGE1DPROC glow_debug_glTexImage1D = glow_debug_impl_glTexImage1D;

static void glow_debug_impl_glColor3ui(GLuint red, GLuint green, GLuint blue) {

  glow_pre_callback_("glColor3ui", (void*)(ptrdiff_t)glow_glColor3ui, red, green, blue);
  glow_glColor3ui(red, green, blue);
  glow_post_callback_("glColor3ui", (void*)(ptrdiff_t)glow_glColor3ui, red, green, blue);
}
PFNGLCOLOR3UIPROC glow_debug_glColor3ui = glow_debug_impl_glColor3ui;

static void glow_debug_impl_glTexCoord1i(GLint s) {

  glow_pre_callback_("glTexCoord1i", (void*)(ptrdiff_t)glow_glTexCoord1i, s);
  glow_glTexCoord1i(s);
  glow_post_callback_("glTexCoord1i", (void*)(ptrdiff_t)glow_glTexCoord1i, s);
}
PFNGLTEXCOORD1IPROC glow_debug_glTexCoord1i = glow_debug_impl_glTexCoord1i;

static void glow_debug_impl_glVertexAttrib4fv(GLuint index, const GLfloat *v) {

  glow_pre_callback_("glVertexAttrib4fv", (void*)(ptrdiff_t)glow_glVertexAttrib4fv, index, v);
  glow_glVertexAttrib4fv(index, v);
  glow_post_callback_("glVertexAttrib4fv", (void*)(ptrdiff_t)glow_glVertexAttrib4fv, index, v);
}
PFNGLVERTEXATTRIB4FVPROC glow_debug_glVertexAttrib4fv = glow_debug_impl_glVertexAttrib4fv;

static void glow_debug_impl_glBeginTransformFeedback(GLenum primitiveMode) {

  glow_pre_callback_("glBeginTransformFeedback", (void*)(ptrdiff_t)glow_glBeginTransformFeedback, primitiveMode);
  glow_glBeginTransformFeedback(primitiveMode);
  glow_post_callback_("glBeginTransformFeedback", (void*)(ptrdiff_t)glow_glBeginTransformFeedback, primitiveMode);
}
PFNGLBEGINTRANSFORMFEEDBACKPROC glow_debug_glBeginTransformFeedback = glow_debug_impl_glBeginTransformFeedback;

static GLenum glow_debug_impl_glGetError() {

  GLenum ret;
  glow_pre_callback_("glGetError", (void*)(ptrdiff_t)glow_glGetError);
  ret = glow_glGetError();
  glow_post_callback_("glGetError", (void*)(ptrdiff_t)glow_glGetError);
  return ret;
}
PFNGLGETERRORPROC glow_debug_glGetError = glow_debug_impl_glGetError;

static void glow_debug_impl_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix4dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix4dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix4dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glow_debug_glProgramUniformMatrix4dv = glow_debug_impl_glProgramUniformMatrix4dv;

static void glow_debug_impl_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {

  glow_pre_callback_("glGetProgramBinary", (void*)(ptrdiff_t)glow_glGetProgramBinary, program, bufSize, length, binaryFormat, binary);
  glow_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  glow_post_callback_("glGetProgramBinary", (void*)(ptrdiff_t)glow_glGetProgramBinary, program, bufSize, length, binaryFormat, binary);
}
PFNGLGETPROGRAMBINARYPROC glow_debug_glGetProgramBinary = glow_debug_impl_glGetProgramBinary;

static void glow_debug_impl_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glProgramUniform2dv", (void*)(ptrdiff_t)glow_glProgramUniform2dv, program, location, count, value);
  glow_glProgramUniform2dv(program, location, count, value);
  glow_post_callback_("glProgramUniform2dv", (void*)(ptrdiff_t)glow_glProgramUniform2dv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM2DVPROC glow_debug_glProgramUniform2dv = glow_debug_impl_glProgramUniform2dv;

static void glow_debug_impl_glDrawBuffer(GLenum buf) {

  glow_pre_callback_("glDrawBuffer", (void*)(ptrdiff_t)glow_glDrawBuffer, buf);
  glow_glDrawBuffer(buf);
  glow_post_callback_("glDrawBuffer", (void*)(ptrdiff_t)glow_glDrawBuffer, buf);
}
PFNGLDRAWBUFFERPROC glow_debug_glDrawBuffer = glow_debug_impl_glDrawBuffer;

static void glow_debug_impl_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {

  glow_pre_callback_("glPixelZoom", (void*)(ptrdiff_t)glow_glPixelZoom, xfactor, yfactor);
  glow_glPixelZoom(xfactor, yfactor);
  glow_post_callback_("glPixelZoom", (void*)(ptrdiff_t)glow_glPixelZoom, xfactor, yfactor);
}
PFNGLPIXELZOOMPROC glow_debug_glPixelZoom = glow_debug_impl_glPixelZoom;

static void glow_debug_impl_glMultiTexCoord1i(GLenum target, GLint s) {

  glow_pre_callback_("glMultiTexCoord1i", (void*)(ptrdiff_t)glow_glMultiTexCoord1i, target, s);
  glow_glMultiTexCoord1i(target, s);
  glow_post_callback_("glMultiTexCoord1i", (void*)(ptrdiff_t)glow_glMultiTexCoord1i, target, s);
}
PFNGLMULTITEXCOORD1IPROC glow_debug_glMultiTexCoord1i = glow_debug_impl_glMultiTexCoord1i;

static void glow_debug_impl_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {

  glow_pre_callback_("glUniform3i", (void*)(ptrdiff_t)glow_glUniform3i, location, v0, v1, v2);
  glow_glUniform3i(location, v0, v1, v2);
  glow_post_callback_("glUniform3i", (void*)(ptrdiff_t)glow_glUniform3i, location, v0, v1, v2);
}
PFNGLUNIFORM3IPROC glow_debug_glUniform3i = glow_debug_impl_glUniform3i;

static void glow_debug_impl_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {

  glow_pre_callback_("glGetObjectLabel", (void*)(ptrdiff_t)glow_glGetObjectLabel, identifier, name, bufSize, length, label);
  glow_glGetObjectLabel(identifier, name, bufSize, length, label);
  glow_post_callback_("glGetObjectLabel", (void*)(ptrdiff_t)glow_glGetObjectLabel, identifier, name, bufSize, length, label);
}
PFNGLGETOBJECTLABELPROC glow_debug_glGetObjectLabel = glow_debug_impl_glGetObjectLabel;

static void glow_debug_impl_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {

  glow_pre_callback_("glRasterPos4i", (void*)(ptrdiff_t)glow_glRasterPos4i, x, y, z, w);
  glow_glRasterPos4i(x, y, z, w);
  glow_post_callback_("glRasterPos4i", (void*)(ptrdiff_t)glow_glRasterPos4i, x, y, z, w);
}
PFNGLRASTERPOS4IPROC glow_debug_glRasterPos4i = glow_debug_impl_glRasterPos4i;

static void glow_debug_impl_glPointParameterf(GLenum pname, GLfloat param) {

  glow_pre_callback_("glPointParameterf", (void*)(ptrdiff_t)glow_glPointParameterf, pname, param);
  glow_glPointParameterf(pname, param);
  glow_post_callback_("glPointParameterf", (void*)(ptrdiff_t)glow_glPointParameterf, pname, param);
}
PFNGLPOINTPARAMETERFPROC glow_debug_glPointParameterf = glow_debug_impl_glPointParameterf;

static void glow_debug_impl_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {

  glow_pre_callback_("glSamplerParameterfv", (void*)(ptrdiff_t)glow_glSamplerParameterfv, sampler, pname, param);
  glow_glSamplerParameterfv(sampler, pname, param);
  glow_post_callback_("glSamplerParameterfv", (void*)(ptrdiff_t)glow_glSamplerParameterfv, sampler, pname, param);
}
PFNGLSAMPLERPARAMETERFVPROC glow_debug_glSamplerParameterfv = glow_debug_impl_glSamplerParameterfv;

static void glow_debug_impl_glIndexiv(const GLint *c) {

  glow_pre_callback_("glIndexiv", (void*)(ptrdiff_t)glow_glIndexiv, c);
  glow_glIndexiv(c);
  glow_post_callback_("glIndexiv", (void*)(ptrdiff_t)glow_glIndexiv, c);
}
PFNGLINDEXIVPROC glow_debug_glIndexiv = glow_debug_impl_glIndexiv;

static void glow_debug_impl_glWindowPos3s(GLshort x, GLshort y, GLshort z) {

  glow_pre_callback_("glWindowPos3s", (void*)(ptrdiff_t)glow_glWindowPos3s, x, y, z);
  glow_glWindowPos3s(x, y, z);
  glow_post_callback_("glWindowPos3s", (void*)(ptrdiff_t)glow_glWindowPos3s, x, y, z);
}
PFNGLWINDOWPOS3SPROC glow_debug_glWindowPos3s = glow_debug_impl_glWindowPos3s;

static void glow_debug_impl_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetBufferParameteriv", (void*)(ptrdiff_t)glow_glGetBufferParameteriv, target, pname, params);
  glow_glGetBufferParameteriv(target, pname, params);
  glow_post_callback_("glGetBufferParameteriv", (void*)(ptrdiff_t)glow_glGetBufferParameteriv, target, pname, params);
}
PFNGLGETBUFFERPARAMETERIVPROC glow_debug_glGetBufferParameteriv = glow_debug_impl_glGetBufferParameteriv;

static void glow_debug_impl_glVertexAttribL2dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttribL2dv", (void*)(ptrdiff_t)glow_glVertexAttribL2dv, index, v);
  glow_glVertexAttribL2dv(index, v);
  glow_post_callback_("glVertexAttribL2dv", (void*)(ptrdiff_t)glow_glVertexAttribL2dv, index, v);
}
PFNGLVERTEXATTRIBL2DVPROC glow_debug_glVertexAttribL2dv = glow_debug_impl_glVertexAttribL2dv;

static void glow_debug_impl_glLineWidth(GLfloat width) {

  glow_pre_callback_("glLineWidth", (void*)(ptrdiff_t)glow_glLineWidth, width);
  glow_glLineWidth(width);
  glow_post_callback_("glLineWidth", (void*)(ptrdiff_t)glow_glLineWidth, width);
}
PFNGLLINEWIDTHPROC glow_debug_glLineWidth = glow_debug_impl_glLineWidth;

static void glow_debug_impl_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {

  glow_pre_callback_("glUniform4i", (void*)(ptrdiff_t)glow_glUniform4i, location, v0, v1, v2, v3);
  glow_glUniform4i(location, v0, v1, v2, v3);
  glow_post_callback_("glUniform4i", (void*)(ptrdiff_t)glow_glUniform4i, location, v0, v1, v2, v3);
}
PFNGLUNIFORM4IPROC glow_debug_glUniform4i = glow_debug_impl_glUniform4i;

static void glow_debug_impl_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {

  glow_pre_callback_("glRasterPos4f", (void*)(ptrdiff_t)glow_glRasterPos4f, x, y, z, w);
  glow_glRasterPos4f(x, y, z, w);
  glow_post_callback_("glRasterPos4f", (void*)(ptrdiff_t)glow_glRasterPos4f, x, y, z, w);
}
PFNGLRASTERPOS4FPROC glow_debug_glRasterPos4f = glow_debug_impl_glRasterPos4f;

static void glow_debug_impl_glTexCoord3iv(const GLint *v) {

  glow_pre_callback_("glTexCoord3iv", (void*)(ptrdiff_t)glow_glTexCoord3iv, v);
  glow_glTexCoord3iv(v);
  glow_post_callback_("glTexCoord3iv", (void*)(ptrdiff_t)glow_glTexCoord3iv, v);
}
PFNGLTEXCOORD3IVPROC glow_debug_glTexCoord3iv = glow_debug_impl_glTexCoord3iv;

static void glow_debug_impl_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetVertexAttribIiv", (void*)(ptrdiff_t)glow_glGetVertexAttribIiv, index, pname, params);
  glow_glGetVertexAttribIiv(index, pname, params);
  glow_post_callback_("glGetVertexAttribIiv", (void*)(ptrdiff_t)glow_glGetVertexAttribIiv, index, pname, params);
}
PFNGLGETVERTEXATTRIBIIVPROC glow_debug_glGetVertexAttribIiv = glow_debug_impl_glGetVertexAttribIiv;

static void glow_debug_impl_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {

  glow_pre_callback_("glFramebufferRenderbuffer", (void*)(ptrdiff_t)glow_glFramebufferRenderbuffer, target, attachment, renderbuffertarget, renderbuffer);
  glow_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  glow_post_callback_("glFramebufferRenderbuffer", (void*)(ptrdiff_t)glow_glFramebufferRenderbuffer, target, attachment, renderbuffertarget, renderbuffer);
}
PFNGLFRAMEBUFFERRENDERBUFFERPROC glow_debug_glFramebufferRenderbuffer = glow_debug_impl_glFramebufferRenderbuffer;

static void glow_debug_impl_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetFramebufferAttachmentParameteriv", (void*)(ptrdiff_t)glow_glGetFramebufferAttachmentParameteriv, target, attachment, pname, params);
  glow_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  glow_post_callback_("glGetFramebufferAttachmentParameteriv", (void*)(ptrdiff_t)glow_glGetFramebufferAttachmentParameteriv, target, attachment, pname, params);
}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glow_debug_glGetFramebufferAttachmentParameteriv = glow_debug_impl_glGetFramebufferAttachmentParameteriv;

static void glow_debug_impl_glEnd() {

  glow_pre_callback_("glEnd", (void*)(ptrdiff_t)glow_glEnd);
  glow_glEnd();
  glow_post_callback_("glEnd", (void*)(ptrdiff_t)glow_glEnd);
}
PFNGLENDPROC glow_debug_glEnd = glow_debug_impl_glEnd;

static void glow_debug_impl_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix3x4fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x4fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix3x4fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x4fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glow_debug_glProgramUniformMatrix3x4fv = glow_debug_impl_glProgramUniformMatrix3x4fv;

static void glow_debug_impl_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {

  glow_pre_callback_("glBlendFuncSeparatei", (void*)(ptrdiff_t)glow_glBlendFuncSeparatei, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  glow_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  glow_post_callback_("glBlendFuncSeparatei", (void*)(ptrdiff_t)glow_glBlendFuncSeparatei, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
PFNGLBLENDFUNCSEPARATEIPROC glow_debug_glBlendFuncSeparatei = glow_debug_impl_glBlendFuncSeparatei;

static void glow_debug_impl_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {

  glow_pre_callback_("glStencilOpSeparate", (void*)(ptrdiff_t)glow_glStencilOpSeparate, face, sfail, dpfail, dppass);
  glow_glStencilOpSeparate(face, sfail, dpfail, dppass);
  glow_post_callback_("glStencilOpSeparate", (void*)(ptrdiff_t)glow_glStencilOpSeparate, face, sfail, dpfail, dppass);
}
PFNGLSTENCILOPSEPARATEPROC glow_debug_glStencilOpSeparate = glow_debug_impl_glStencilOpSeparate;

static void glow_debug_impl_glBeginQuery(GLenum target, GLuint id) {

  glow_pre_callback_("glBeginQuery", (void*)(ptrdiff_t)glow_glBeginQuery, target, id);
  glow_glBeginQuery(target, id);
  glow_post_callback_("glBeginQuery", (void*)(ptrdiff_t)glow_glBeginQuery, target, id);
}
PFNGLBEGINQUERYPROC glow_debug_glBeginQuery = glow_debug_impl_glBeginQuery;

static void glow_debug_impl_glVertexAttrib1d(GLuint index, GLdouble x) {

  glow_pre_callback_("glVertexAttrib1d", (void*)(ptrdiff_t)glow_glVertexAttrib1d, index, x);
  glow_glVertexAttrib1d(index, x);
  glow_post_callback_("glVertexAttrib1d", (void*)(ptrdiff_t)glow_glVertexAttrib1d, index, x);
}
PFNGLVERTEXATTRIB1DPROC glow_debug_glVertexAttrib1d = glow_debug_impl_glVertexAttrib1d;

static void glow_debug_impl_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {

  glow_pre_callback_("glProgramUniform3d", (void*)(ptrdiff_t)glow_glProgramUniform3d, program, location, v0, v1, v2);
  glow_glProgramUniform3d(program, location, v0, v1, v2);
  glow_post_callback_("glProgramUniform3d", (void*)(ptrdiff_t)glow_glProgramUniform3d, program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3DPROC glow_debug_glProgramUniform3d = glow_debug_impl_glProgramUniform3d;

static void glow_debug_impl_glVertexAttrib4dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttrib4dv", (void*)(ptrdiff_t)glow_glVertexAttrib4dv, index, v);
  glow_glVertexAttrib4dv(index, v);
  glow_post_callback_("glVertexAttrib4dv", (void*)(ptrdiff_t)glow_glVertexAttrib4dv, index, v);
}
PFNGLVERTEXATTRIB4DVPROC glow_debug_glVertexAttrib4dv = glow_debug_impl_glVertexAttrib4dv;

static void glow_debug_impl_glScaled(GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glScaled", (void*)(ptrdiff_t)glow_glScaled, x, y, z);
  glow_glScaled(x, y, z);
  glow_post_callback_("glScaled", (void*)(ptrdiff_t)glow_glScaled, x, y, z);
}
PFNGLSCALEDPROC glow_debug_glScaled = glow_debug_impl_glScaled;

static void glow_debug_impl_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {

  glow_pre_callback_("glGetActiveUniform", (void*)(ptrdiff_t)glow_glGetActiveUniform, program, index, bufSize, length, size, type, name);
  glow_glGetActiveUniform(program, index, bufSize, length, size, type, name);
  glow_post_callback_("glGetActiveUniform", (void*)(ptrdiff_t)glow_glGetActiveUniform, program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEUNIFORMPROC glow_debug_glGetActiveUniform = glow_debug_impl_glGetActiveUniform;

static void glow_debug_impl_glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {

  glow_pre_callback_("glVertexAttrib4Nubv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nubv, index, v);
  glow_glVertexAttrib4Nubv(index, v);
  glow_post_callback_("glVertexAttrib4Nubv", (void*)(ptrdiff_t)glow_glVertexAttrib4Nubv, index, v);
}
PFNGLVERTEXATTRIB4NUBVPROC glow_debug_glVertexAttrib4Nubv = glow_debug_impl_glVertexAttrib4Nubv;

static void glow_debug_impl_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix3x4dv", (void*)(ptrdiff_t)glow_glUniformMatrix3x4dv, location, count, transpose, value);
  glow_glUniformMatrix3x4dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix3x4dv", (void*)(ptrdiff_t)glow_glUniformMatrix3x4dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X4DVPROC glow_debug_glUniformMatrix3x4dv = glow_debug_impl_glUniformMatrix3x4dv;

static void glow_debug_impl_glPointParameteriv(GLenum pname, const GLint *params) {

  glow_pre_callback_("glPointParameteriv", (void*)(ptrdiff_t)glow_glPointParameteriv, pname, params);
  glow_glPointParameteriv(pname, params);
  glow_post_callback_("glPointParameteriv", (void*)(ptrdiff_t)glow_glPointParameteriv, pname, params);
}
PFNGLPOINTPARAMETERIVPROC glow_debug_glPointParameteriv = glow_debug_impl_glPointParameteriv;

static void glow_debug_impl_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glUniformMatrix4x2dv", (void*)(ptrdiff_t)glow_glUniformMatrix4x2dv, location, count, transpose, value);
  glow_glUniformMatrix4x2dv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix4x2dv", (void*)(ptrdiff_t)glow_glUniformMatrix4x2dv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X2DVPROC glow_debug_glUniformMatrix4x2dv = glow_debug_impl_glUniformMatrix4x2dv;

static void glow_debug_impl_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {

  glow_pre_callback_("glProgramUniform2fv", (void*)(ptrdiff_t)glow_glProgramUniform2fv, program, location, count, value);
  glow_glProgramUniform2fv(program, location, count, value);
  glow_post_callback_("glProgramUniform2fv", (void*)(ptrdiff_t)glow_glProgramUniform2fv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM2FVPROC glow_debug_glProgramUniform2fv = glow_debug_impl_glProgramUniform2fv;

static void glow_debug_impl_glStencilMask(GLuint mask) {

  glow_pre_callback_("glStencilMask", (void*)(ptrdiff_t)glow_glStencilMask, mask);
  glow_glStencilMask(mask);
  glow_post_callback_("glStencilMask", (void*)(ptrdiff_t)glow_glStencilMask, mask);
}
PFNGLSTENCILMASKPROC glow_debug_glStencilMask = glow_debug_impl_glStencilMask;

static void glow_debug_impl_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {

  glow_pre_callback_("glGetProgramStageiv", (void*)(ptrdiff_t)glow_glGetProgramStageiv, program, shadertype, pname, values);
  glow_glGetProgramStageiv(program, shadertype, pname, values);
  glow_post_callback_("glGetProgramStageiv", (void*)(ptrdiff_t)glow_glGetProgramStageiv, program, shadertype, pname, values);
}
PFNGLGETPROGRAMSTAGEIVPROC glow_debug_glGetProgramStageiv = glow_debug_impl_glGetProgramStageiv;

static void glow_debug_impl_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glProgramUniform3uiv", (void*)(ptrdiff_t)glow_glProgramUniform3uiv, program, location, count, value);
  glow_glProgramUniform3uiv(program, location, count, value);
  glow_post_callback_("glProgramUniform3uiv", (void*)(ptrdiff_t)glow_glProgramUniform3uiv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM3UIVPROC glow_debug_glProgramUniform3uiv = glow_debug_impl_glProgramUniform3uiv;

static void glow_debug_impl_glVertexP2ui(GLenum type, GLuint value) {

  glow_pre_callback_("glVertexP2ui", (void*)(ptrdiff_t)glow_glVertexP2ui, type, value);
  glow_glVertexP2ui(type, value);
  glow_post_callback_("glVertexP2ui", (void*)(ptrdiff_t)glow_glVertexP2ui, type, value);
}
PFNGLVERTEXP2UIPROC glow_debug_glVertexP2ui = glow_debug_impl_glVertexP2ui;

static void glow_debug_impl_glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {

  glow_pre_callback_("glProgramUniform1d", (void*)(ptrdiff_t)glow_glProgramUniform1d, program, location, v0);
  glow_glProgramUniform1d(program, location, v0);
  glow_post_callback_("glProgramUniform1d", (void*)(ptrdiff_t)glow_glProgramUniform1d, program, location, v0);
}
PFNGLPROGRAMUNIFORM1DPROC glow_debug_glProgramUniform1d = glow_debug_impl_glProgramUniform1d;

static void glow_debug_impl_glVertexAttrib1dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttrib1dv", (void*)(ptrdiff_t)glow_glVertexAttrib1dv, index, v);
  glow_glVertexAttrib1dv(index, v);
  glow_post_callback_("glVertexAttrib1dv", (void*)(ptrdiff_t)glow_glVertexAttrib1dv, index, v);
}
PFNGLVERTEXATTRIB1DVPROC glow_debug_glVertexAttrib1dv = glow_debug_impl_glVertexAttrib1dv;

static void glow_debug_impl_glCallList(GLuint list) {

  glow_pre_callback_("glCallList", (void*)(ptrdiff_t)glow_glCallList, list);
  glow_glCallList(list);
  glow_post_callback_("glCallList", (void*)(ptrdiff_t)glow_glCallList, list);
}
PFNGLCALLLISTPROC glow_debug_glCallList = glow_debug_impl_glCallList;

static void glow_debug_impl_glWindowPos2f(GLfloat x, GLfloat y) {

  glow_pre_callback_("glWindowPos2f", (void*)(ptrdiff_t)glow_glWindowPos2f, x, y);
  glow_glWindowPos2f(x, y);
  glow_post_callback_("glWindowPos2f", (void*)(ptrdiff_t)glow_glWindowPos2f, x, y);
}
PFNGLWINDOWPOS2FPROC glow_debug_glWindowPos2f = glow_debug_impl_glWindowPos2f;

static void glow_debug_impl_glGenBuffers(GLsizei n, GLuint *buffers) {

  glow_pre_callback_("glGenBuffers", (void*)(ptrdiff_t)glow_glGenBuffers, n, buffers);
  glow_glGenBuffers(n, buffers);
  glow_post_callback_("glGenBuffers", (void*)(ptrdiff_t)glow_glGenBuffers, n, buffers);
}
PFNGLGENBUFFERSPROC glow_debug_glGenBuffers = glow_debug_impl_glGenBuffers;

static void glow_debug_impl_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {

  glow_pre_callback_("glBufferSubData", (void*)(ptrdiff_t)glow_glBufferSubData, target, offset, size, data);
  glow_glBufferSubData(target, offset, size, data);
  glow_post_callback_("glBufferSubData", (void*)(ptrdiff_t)glow_glBufferSubData, target, offset, size, data);
}
PFNGLBUFFERSUBDATAPROC glow_debug_glBufferSubData = glow_debug_impl_glBufferSubData;

static void glow_debug_impl_glVertexAttrib4ubv(GLuint index, const GLubyte *v) {

  glow_pre_callback_("glVertexAttrib4ubv", (void*)(ptrdiff_t)glow_glVertexAttrib4ubv, index, v);
  glow_glVertexAttrib4ubv(index, v);
  glow_post_callback_("glVertexAttrib4ubv", (void*)(ptrdiff_t)glow_glVertexAttrib4ubv, index, v);
}
PFNGLVERTEXATTRIB4UBVPROC glow_debug_glVertexAttrib4ubv = glow_debug_impl_glVertexAttrib4ubv;

static void glow_debug_impl_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {

  glow_pre_callback_("glRecti", (void*)(ptrdiff_t)glow_glRecti, x1, y1, x2, y2);
  glow_glRecti(x1, y1, x2, y2);
  glow_post_callback_("glRecti", (void*)(ptrdiff_t)glow_glRecti, x1, y1, x2, y2);
}
PFNGLRECTIPROC glow_debug_glRecti = glow_debug_impl_glRecti;

static void glow_debug_impl_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glTexCoordPointer", (void*)(ptrdiff_t)glow_glTexCoordPointer, size, type, stride, pointer);
  glow_glTexCoordPointer(size, type, stride, pointer);
  glow_post_callback_("glTexCoordPointer", (void*)(ptrdiff_t)glow_glTexCoordPointer, size, type, stride, pointer);
}
PFNGLTEXCOORDPOINTERPROC glow_debug_glTexCoordPointer = glow_debug_impl_glTexCoordPointer;

static void glow_debug_impl_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {

  glow_pre_callback_("glMultiTexCoord2s", (void*)(ptrdiff_t)glow_glMultiTexCoord2s, target, s, t);
  glow_glMultiTexCoord2s(target, s, t);
  glow_post_callback_("glMultiTexCoord2s", (void*)(ptrdiff_t)glow_glMultiTexCoord2s, target, s, t);
}
PFNGLMULTITEXCOORD2SPROC glow_debug_glMultiTexCoord2s = glow_debug_impl_glMultiTexCoord2s;

static void glow_debug_impl_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {

  glow_pre_callback_("glVertexAttribI3i", (void*)(ptrdiff_t)glow_glVertexAttribI3i, index, x, y, z);
  glow_glVertexAttribI3i(index, x, y, z);
  glow_post_callback_("glVertexAttribI3i", (void*)(ptrdiff_t)glow_glVertexAttribI3i, index, x, y, z);
}
PFNGLVERTEXATTRIBI3IPROC glow_debug_glVertexAttribI3i = glow_debug_impl_glVertexAttribI3i;

static void glow_debug_impl_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {

  glow_pre_callback_("glViewportArrayv", (void*)(ptrdiff_t)glow_glViewportArrayv, first, count, v);
  glow_glViewportArrayv(first, count, v);
  glow_post_callback_("glViewportArrayv", (void*)(ptrdiff_t)glow_glViewportArrayv, first, count, v);
}
PFNGLVIEWPORTARRAYVPROC glow_debug_glViewportArrayv = glow_debug_impl_glViewportArrayv;

static void glow_debug_impl_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {

  glow_pre_callback_("glRectd", (void*)(ptrdiff_t)glow_glRectd, x1, y1, x2, y2);
  glow_glRectd(x1, y1, x2, y2);
  glow_post_callback_("glRectd", (void*)(ptrdiff_t)glow_glRectd, x1, y1, x2, y2);
}
PFNGLRECTDPROC glow_debug_glRectd = glow_debug_impl_glRectd;

static void glow_debug_impl_glDrawArrays(GLenum mode, GLint first, GLsizei count) {

  glow_pre_callback_("glDrawArrays", (void*)(ptrdiff_t)glow_glDrawArrays, mode, first, count);
  glow_glDrawArrays(mode, first, count);
  glow_post_callback_("glDrawArrays", (void*)(ptrdiff_t)glow_glDrawArrays, mode, first, count);
}
PFNGLDRAWARRAYSPROC glow_debug_glDrawArrays = glow_debug_impl_glDrawArrays;

static GLuint glow_debug_impl_glCreateShader(GLenum type) {

  GLuint ret;
  glow_pre_callback_("glCreateShader", (void*)(ptrdiff_t)glow_glCreateShader, type);
  ret = glow_glCreateShader(type);
  glow_post_callback_("glCreateShader", (void*)(ptrdiff_t)glow_glCreateShader, type);
  return ret;
}
PFNGLCREATESHADERPROC glow_debug_glCreateShader = glow_debug_impl_glCreateShader;

static void glow_debug_impl_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {

  glow_pre_callback_("glProgramUniform3i", (void*)(ptrdiff_t)glow_glProgramUniform3i, program, location, v0, v1, v2);
  glow_glProgramUniform3i(program, location, v0, v1, v2);
  glow_post_callback_("glProgramUniform3i", (void*)(ptrdiff_t)glow_glProgramUniform3i, program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3IPROC glow_debug_glProgramUniform3i = glow_debug_impl_glProgramUniform3i;

static void glow_debug_impl_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {

  glow_pre_callback_("glVertexAttribBinding", (void*)(ptrdiff_t)glow_glVertexAttribBinding, attribindex, bindingindex);
  glow_glVertexAttribBinding(attribindex, bindingindex);
  glow_post_callback_("glVertexAttribBinding", (void*)(ptrdiff_t)glow_glVertexAttribBinding, attribindex, bindingindex);
}
PFNGLVERTEXATTRIBBINDINGPROC glow_debug_glVertexAttribBinding = glow_debug_impl_glVertexAttribBinding;

static void glow_debug_impl_glTexCoord2dv(const GLdouble *v) {

  glow_pre_callback_("glTexCoord2dv", (void*)(ptrdiff_t)glow_glTexCoord2dv, v);
  glow_glTexCoord2dv(v);
  glow_post_callback_("glTexCoord2dv", (void*)(ptrdiff_t)glow_glTexCoord2dv, v);
}
PFNGLTEXCOORD2DVPROC glow_debug_glTexCoord2dv = glow_debug_impl_glTexCoord2dv;

static GLuint glow_debug_impl_glCreateProgram() {

  GLuint ret;
  glow_pre_callback_("glCreateProgram", (void*)(ptrdiff_t)glow_glCreateProgram);
  ret = glow_glCreateProgram();
  glow_post_callback_("glCreateProgram", (void*)(ptrdiff_t)glow_glCreateProgram);
  return ret;
}
PFNGLCREATEPROGRAMPROC glow_debug_glCreateProgram = glow_debug_impl_glCreateProgram;

static void glow_debug_impl_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {

  glow_pre_callback_("glTexStorage2D", (void*)(ptrdiff_t)glow_glTexStorage2D, target, levels, internalformat, width, height);
  glow_glTexStorage2D(target, levels, internalformat, width, height);
  glow_post_callback_("glTexStorage2D", (void*)(ptrdiff_t)glow_glTexStorage2D, target, levels, internalformat, width, height);
}
PFNGLTEXSTORAGE2DPROC glow_debug_glTexStorage2D = glow_debug_impl_glTexStorage2D;

static void glow_debug_impl_glTexCoord2f(GLfloat s, GLfloat t) {

  glow_pre_callback_("glTexCoord2f", (void*)(ptrdiff_t)glow_glTexCoord2f, s, t);
  glow_glTexCoord2f(s, t);
  glow_post_callback_("glTexCoord2f", (void*)(ptrdiff_t)glow_glTexCoord2f, s, t);
}
PFNGLTEXCOORD2FPROC glow_debug_glTexCoord2f = glow_debug_impl_glTexCoord2f;

static void glow_debug_impl_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {

  glow_pre_callback_("glMultiTexCoord3s", (void*)(ptrdiff_t)glow_glMultiTexCoord3s, target, s, t, r);
  glow_glMultiTexCoord3s(target, s, t, r);
  glow_post_callback_("glMultiTexCoord3s", (void*)(ptrdiff_t)glow_glMultiTexCoord3s, target, s, t, r);
}
PFNGLMULTITEXCOORD3SPROC glow_debug_glMultiTexCoord3s = glow_debug_impl_glMultiTexCoord3s;

static void glow_debug_impl_glVertexAttrib4bv(GLuint index, const GLbyte *v) {

  glow_pre_callback_("glVertexAttrib4bv", (void*)(ptrdiff_t)glow_glVertexAttrib4bv, index, v);
  glow_glVertexAttrib4bv(index, v);
  glow_post_callback_("glVertexAttrib4bv", (void*)(ptrdiff_t)glow_glVertexAttrib4bv, index, v);
}
PFNGLVERTEXATTRIB4BVPROC glow_debug_glVertexAttrib4bv = glow_debug_impl_glVertexAttrib4bv;

static void glow_debug_impl_glColor3fv(const GLfloat *v) {

  glow_pre_callback_("glColor3fv", (void*)(ptrdiff_t)glow_glColor3fv, v);
  glow_glColor3fv(v);
  glow_post_callback_("glColor3fv", (void*)(ptrdiff_t)glow_glColor3fv, v);
}
PFNGLCOLOR3FVPROC glow_debug_glColor3fv = glow_debug_impl_glColor3fv;

static void glow_debug_impl_glFogiv(GLenum pname, const GLint *params) {

  glow_pre_callback_("glFogiv", (void*)(ptrdiff_t)glow_glFogiv, pname, params);
  glow_glFogiv(pname, params);
  glow_post_callback_("glFogiv", (void*)(ptrdiff_t)glow_glFogiv, pname, params);
}
PFNGLFOGIVPROC glow_debug_glFogiv = glow_debug_impl_glFogiv;

static void glow_debug_impl_glTexEnviv(GLenum target, GLenum pname, const GLint *params) {

  glow_pre_callback_("glTexEnviv", (void*)(ptrdiff_t)glow_glTexEnviv, target, pname, params);
  glow_glTexEnviv(target, pname, params);
  glow_post_callback_("glTexEnviv", (void*)(ptrdiff_t)glow_glTexEnviv, target, pname, params);
}
PFNGLTEXENVIVPROC glow_debug_glTexEnviv = glow_debug_impl_glTexEnviv;

static void glow_debug_impl_glTexGend(GLenum coord, GLenum pname, GLdouble param) {

  glow_pre_callback_("glTexGend", (void*)(ptrdiff_t)glow_glTexGend, coord, pname, param);
  glow_glTexGend(coord, pname, param);
  glow_post_callback_("glTexGend", (void*)(ptrdiff_t)glow_glTexGend, coord, pname, param);
}
PFNGLTEXGENDPROC glow_debug_glTexGend = glow_debug_impl_glTexGend;

static void glow_debug_impl_glPopClientAttrib() {

  glow_pre_callback_("glPopClientAttrib", (void*)(ptrdiff_t)glow_glPopClientAttrib);
  glow_glPopClientAttrib();
  glow_post_callback_("glPopClientAttrib", (void*)(ptrdiff_t)glow_glPopClientAttrib);
}
PFNGLPOPCLIENTATTRIBPROC glow_debug_glPopClientAttrib = glow_debug_impl_glPopClientAttrib;

static void glow_debug_impl_glStencilMaskSeparate(GLenum face, GLuint mask) {

  glow_pre_callback_("glStencilMaskSeparate", (void*)(ptrdiff_t)glow_glStencilMaskSeparate, face, mask);
  glow_glStencilMaskSeparate(face, mask);
  glow_post_callback_("glStencilMaskSeparate", (void*)(ptrdiff_t)glow_glStencilMaskSeparate, face, mask);
}
PFNGLSTENCILMASKSEPARATEPROC glow_debug_glStencilMaskSeparate = glow_debug_impl_glStencilMaskSeparate;

static void glow_debug_impl_glSecondaryColorP3uiv(GLenum type, const GLuint *color) {

  glow_pre_callback_("glSecondaryColorP3uiv", (void*)(ptrdiff_t)glow_glSecondaryColorP3uiv, type, color);
  glow_glSecondaryColorP3uiv(type, color);
  glow_post_callback_("glSecondaryColorP3uiv", (void*)(ptrdiff_t)glow_glSecondaryColorP3uiv, type, color);
}
PFNGLSECONDARYCOLORP3UIVPROC glow_debug_glSecondaryColorP3uiv = glow_debug_impl_glSecondaryColorP3uiv;

static void glow_debug_impl_glFinish() {

  glow_pre_callback_("glFinish", (void*)(ptrdiff_t)glow_glFinish);
  glow_glFinish();
  glow_post_callback_("glFinish", (void*)(ptrdiff_t)glow_glFinish);
}
PFNGLFINISHPROC glow_debug_glFinish = glow_debug_impl_glFinish;

static void glow_debug_impl_glVertexAttrib1s(GLuint index, GLshort x) {

  glow_pre_callback_("glVertexAttrib1s", (void*)(ptrdiff_t)glow_glVertexAttrib1s, index, x);
  glow_glVertexAttrib1s(index, x);
  glow_post_callback_("glVertexAttrib1s", (void*)(ptrdiff_t)glow_glVertexAttrib1s, index, x);
}
PFNGLVERTEXATTRIB1SPROC glow_debug_glVertexAttrib1s = glow_debug_impl_glVertexAttrib1s;

static void glow_debug_impl_glColor3ubv(const GLubyte *v) {

  glow_pre_callback_("glColor3ubv", (void*)(ptrdiff_t)glow_glColor3ubv, v);
  glow_glColor3ubv(v);
  glow_post_callback_("glColor3ubv", (void*)(ptrdiff_t)glow_glColor3ubv, v);
}
PFNGLCOLOR3UBVPROC glow_debug_glColor3ubv = glow_debug_impl_glColor3ubv;

static void glow_debug_impl_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {

  glow_pre_callback_("glVertexAttribP2uiv", (void*)(ptrdiff_t)glow_glVertexAttribP2uiv, index, type, normalized, value);
  glow_glVertexAttribP2uiv(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP2uiv", (void*)(ptrdiff_t)glow_glVertexAttribP2uiv, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP2UIVPROC glow_debug_glVertexAttribP2uiv = glow_debug_impl_glVertexAttribP2uiv;

static void glow_debug_impl_glMultiTexCoord3dv(GLenum target, const GLdouble *v) {

  glow_pre_callback_("glMultiTexCoord3dv", (void*)(ptrdiff_t)glow_glMultiTexCoord3dv, target, v);
  glow_glMultiTexCoord3dv(target, v);
  glow_post_callback_("glMultiTexCoord3dv", (void*)(ptrdiff_t)glow_glMultiTexCoord3dv, target, v);
}
PFNGLMULTITEXCOORD3DVPROC glow_debug_glMultiTexCoord3dv = glow_debug_impl_glMultiTexCoord3dv;

static void glow_debug_impl_glUniform1d(GLint location, GLdouble x) {

  glow_pre_callback_("glUniform1d", (void*)(ptrdiff_t)glow_glUniform1d, location, x);
  glow_glUniform1d(location, x);
  glow_post_callback_("glUniform1d", (void*)(ptrdiff_t)glow_glUniform1d, location, x);
}
PFNGLUNIFORM1DPROC glow_debug_glUniform1d = glow_debug_impl_glUniform1d;

static void glow_debug_impl_glVertex3fv(const GLfloat *v) {

  glow_pre_callback_("glVertex3fv", (void*)(ptrdiff_t)glow_glVertex3fv, v);
  glow_glVertex3fv(v);
  glow_post_callback_("glVertex3fv", (void*)(ptrdiff_t)glow_glVertex3fv, v);
}
PFNGLVERTEX3FVPROC glow_debug_glVertex3fv = glow_debug_impl_glVertex3fv;

static void glow_debug_impl_glEndTransformFeedback() {

  glow_pre_callback_("glEndTransformFeedback", (void*)(ptrdiff_t)glow_glEndTransformFeedback);
  glow_glEndTransformFeedback();
  glow_post_callback_("glEndTransformFeedback", (void*)(ptrdiff_t)glow_glEndTransformFeedback);
}
PFNGLENDTRANSFORMFEEDBACKPROC glow_debug_glEndTransformFeedback = glow_debug_impl_glEndTransformFeedback;

static void glow_debug_impl_glVertex2sv(const GLshort *v) {

  glow_pre_callback_("glVertex2sv", (void*)(ptrdiff_t)glow_glVertex2sv, v);
  glow_glVertex2sv(v);
  glow_post_callback_("glVertex2sv", (void*)(ptrdiff_t)glow_glVertex2sv, v);
}
PFNGLVERTEX2SVPROC glow_debug_glVertex2sv = glow_debug_impl_glVertex2sv;

static void glow_debug_impl_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {

  glow_pre_callback_("glNormal3f", (void*)(ptrdiff_t)glow_glNormal3f, nx, ny, nz);
  glow_glNormal3f(nx, ny, nz);
  glow_post_callback_("glNormal3f", (void*)(ptrdiff_t)glow_glNormal3f, nx, ny, nz);
}
PFNGLNORMAL3FPROC glow_debug_glNormal3f = glow_debug_impl_glNormal3f;

static void glow_debug_impl_glFogCoordd(GLdouble coord) {

  glow_pre_callback_("glFogCoordd", (void*)(ptrdiff_t)glow_glFogCoordd, coord);
  glow_glFogCoordd(coord);
  glow_post_callback_("glFogCoordd", (void*)(ptrdiff_t)glow_glFogCoordd, coord);
}
PFNGLFOGCOORDDPROC glow_debug_glFogCoordd = glow_debug_impl_glFogCoordd;

static void glow_debug_impl_glDetachShader(GLuint program, GLuint shader) {

  glow_pre_callback_("glDetachShader", (void*)(ptrdiff_t)glow_glDetachShader, program, shader);
  glow_glDetachShader(program, shader);
  glow_post_callback_("glDetachShader", (void*)(ptrdiff_t)glow_glDetachShader, program, shader);
}
PFNGLDETACHSHADERPROC glow_debug_glDetachShader = glow_debug_impl_glDetachShader;

static void glow_debug_impl_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix4x2fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x2fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix4x2fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x2fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glow_debug_glProgramUniformMatrix4x2fv = glow_debug_impl_glProgramUniformMatrix4x2fv;

static void glow_debug_impl_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {

  glow_pre_callback_("glEvalMesh2", (void*)(ptrdiff_t)glow_glEvalMesh2, mode, i1, i2, j1, j2);
  glow_glEvalMesh2(mode, i1, i2, j1, j2);
  glow_post_callback_("glEvalMesh2", (void*)(ptrdiff_t)glow_glEvalMesh2, mode, i1, i2, j1, j2);
}
PFNGLEVALMESH2PROC glow_debug_glEvalMesh2 = glow_debug_impl_glEvalMesh2;

static void glow_debug_impl_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glTexImage3D", (void*)(ptrdiff_t)glow_glTexImage3D, target, level, internalformat, width, height, depth, border, format, type, pixels);
  glow_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  glow_post_callback_("glTexImage3D", (void*)(ptrdiff_t)glow_glTexImage3D, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
PFNGLTEXIMAGE3DPROC glow_debug_glTexImage3D = glow_debug_impl_glTexImage3D;

static void glow_debug_impl_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {

  glow_pre_callback_("glColorMaski", (void*)(ptrdiff_t)glow_glColorMaski, index, r, g, b, a);
  glow_glColorMaski(index, r, g, b, a);
  glow_post_callback_("glColorMaski", (void*)(ptrdiff_t)glow_glColorMaski, index, r, g, b, a);
}
PFNGLCOLORMASKIPROC glow_debug_glColorMaski = glow_debug_impl_glColorMaski;

static void glow_debug_impl_glClear(GLbitfield mask) {

  glow_pre_callback_("glClear", (void*)(ptrdiff_t)glow_glClear, mask);
  glow_glClear(mask);
  glow_post_callback_("glClear", (void*)(ptrdiff_t)glow_glClear, mask);
}
PFNGLCLEARPROC glow_debug_glClear = glow_debug_impl_glClear;

static GLboolean glow_debug_impl_glIsEnabledi(GLenum target, GLuint index) {

  GLboolean ret;
  glow_pre_callback_("glIsEnabledi", (void*)(ptrdiff_t)glow_glIsEnabledi, target, index);
  ret = glow_glIsEnabledi(target, index);
  glow_post_callback_("glIsEnabledi", (void*)(ptrdiff_t)glow_glIsEnabledi, target, index);
  return ret;
}
PFNGLISENABLEDIPROC glow_debug_glIsEnabledi = glow_debug_impl_glIsEnabledi;

static void glow_debug_impl_glTexCoordP1uiv(GLenum type, const GLuint *coords) {

  glow_pre_callback_("glTexCoordP1uiv", (void*)(ptrdiff_t)glow_glTexCoordP1uiv, type, coords);
  glow_glTexCoordP1uiv(type, coords);
  glow_post_callback_("glTexCoordP1uiv", (void*)(ptrdiff_t)glow_glTexCoordP1uiv, type, coords);
}
PFNGLTEXCOORDP1UIVPROC glow_debug_glTexCoordP1uiv = glow_debug_impl_glTexCoordP1uiv;

static void glow_debug_impl_glTexCoordP4uiv(GLenum type, const GLuint *coords) {

  glow_pre_callback_("glTexCoordP4uiv", (void*)(ptrdiff_t)glow_glTexCoordP4uiv, type, coords);
  glow_glTexCoordP4uiv(type, coords);
  glow_post_callback_("glTexCoordP4uiv", (void*)(ptrdiff_t)glow_glTexCoordP4uiv, type, coords);
}
PFNGLTEXCOORDP4UIVPROC glow_debug_glTexCoordP4uiv = glow_debug_impl_glTexCoordP4uiv;

static void glow_debug_impl_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {

  glow_pre_callback_("glTexCoord4f", (void*)(ptrdiff_t)glow_glTexCoord4f, s, t, r, q);
  glow_glTexCoord4f(s, t, r, q);
  glow_post_callback_("glTexCoord4f", (void*)(ptrdiff_t)glow_glTexCoord4f, s, t, r, q);
}
PFNGLTEXCOORD4FPROC glow_debug_glTexCoord4f = glow_debug_impl_glTexCoord4f;

static void glow_debug_impl_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {

  glow_pre_callback_("glBindRenderbuffer", (void*)(ptrdiff_t)glow_glBindRenderbuffer, target, renderbuffer);
  glow_glBindRenderbuffer(target, renderbuffer);
  glow_post_callback_("glBindRenderbuffer", (void*)(ptrdiff_t)glow_glBindRenderbuffer, target, renderbuffer);
}
PFNGLBINDRENDERBUFFERPROC glow_debug_glBindRenderbuffer = glow_debug_impl_glBindRenderbuffer;

static void glow_debug_impl_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {

  glow_pre_callback_("glTextureView", (void*)(ptrdiff_t)glow_glTextureView, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  glow_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  glow_post_callback_("glTextureView", (void*)(ptrdiff_t)glow_glTextureView, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
PFNGLTEXTUREVIEWPROC glow_debug_glTextureView = glow_debug_impl_glTextureView;

static void glow_debug_impl_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {

  glow_pre_callback_("glVertexAttrib2s", (void*)(ptrdiff_t)glow_glVertexAttrib2s, index, x, y);
  glow_glVertexAttrib2s(index, x, y);
  glow_post_callback_("glVertexAttrib2s", (void*)(ptrdiff_t)glow_glVertexAttrib2s, index, x, y);
}
PFNGLVERTEXATTRIB2SPROC glow_debug_glVertexAttrib2s = glow_debug_impl_glVertexAttrib2s;

static void glow_debug_impl_glMaterialf(GLenum face, GLenum pname, GLfloat param) {

  glow_pre_callback_("glMaterialf", (void*)(ptrdiff_t)glow_glMaterialf, face, pname, param);
  glow_glMaterialf(face, pname, param);
  glow_post_callback_("glMaterialf", (void*)(ptrdiff_t)glow_glMaterialf, face, pname, param);
}
PFNGLMATERIALFPROC glow_debug_glMaterialf = glow_debug_impl_glMaterialf;

static void glow_debug_impl_glEvalCoord2dv(const GLdouble *u) {

  glow_pre_callback_("glEvalCoord2dv", (void*)(ptrdiff_t)glow_glEvalCoord2dv, u);
  glow_glEvalCoord2dv(u);
  glow_post_callback_("glEvalCoord2dv", (void*)(ptrdiff_t)glow_glEvalCoord2dv, u);
}
PFNGLEVALCOORD2DVPROC glow_debug_glEvalCoord2dv = glow_debug_impl_glEvalCoord2dv;

static void glow_debug_impl_glVertexAttribDivisor(GLuint index, GLuint divisor) {

  glow_pre_callback_("glVertexAttribDivisor", (void*)(ptrdiff_t)glow_glVertexAttribDivisor, index, divisor);
  glow_glVertexAttribDivisor(index, divisor);
  glow_post_callback_("glVertexAttribDivisor", (void*)(ptrdiff_t)glow_glVertexAttribDivisor, index, divisor);
}
PFNGLVERTEXATTRIBDIVISORPROC glow_debug_glVertexAttribDivisor = glow_debug_impl_glVertexAttribDivisor;

static void glow_debug_impl_glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {

  glow_pre_callback_("glDrawElementsIndirect", (void*)(ptrdiff_t)glow_glDrawElementsIndirect, mode, type, indirect);
  glow_glDrawElementsIndirect(mode, type, indirect);
  glow_post_callback_("glDrawElementsIndirect", (void*)(ptrdiff_t)glow_glDrawElementsIndirect, mode, type, indirect);
}
PFNGLDRAWELEMENTSINDIRECTPROC glow_debug_glDrawElementsIndirect = glow_debug_impl_glDrawElementsIndirect;

static void glow_debug_impl_glDepthRange(GLdouble near, GLdouble far) {

  glow_pre_callback_("glDepthRange", (void*)(ptrdiff_t)glow_glDepthRange, near, far);
  glow_glDepthRange(near, far);
  glow_post_callback_("glDepthRange", (void*)(ptrdiff_t)glow_glDepthRange, near, far);
}
PFNGLDEPTHRANGEPROC glow_debug_glDepthRange = glow_debug_impl_glDepthRange;

static void glow_debug_impl_glSecondaryColor3uiv(const GLuint *v) {

  glow_pre_callback_("glSecondaryColor3uiv", (void*)(ptrdiff_t)glow_glSecondaryColor3uiv, v);
  glow_glSecondaryColor3uiv(v);
  glow_post_callback_("glSecondaryColor3uiv", (void*)(ptrdiff_t)glow_glSecondaryColor3uiv, v);
}
PFNGLSECONDARYCOLOR3UIVPROC glow_debug_glSecondaryColor3uiv = glow_debug_impl_glSecondaryColor3uiv;

static GLenum glow_debug_impl_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {

  GLenum ret;
  glow_pre_callback_("glClientWaitSync", (void*)(ptrdiff_t)glow_glClientWaitSync, sync, flags, timeout);
  ret = glow_glClientWaitSync(sync, flags, timeout);
  glow_post_callback_("glClientWaitSync", (void*)(ptrdiff_t)glow_glClientWaitSync, sync, flags, timeout);
  return ret;
}
PFNGLCLIENTWAITSYNCPROC glow_debug_glClientWaitSync = glow_debug_impl_glClientWaitSync;

static void glow_debug_impl_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {

  glow_pre_callback_("glColor3d", (void*)(ptrdiff_t)glow_glColor3d, red, green, blue);
  glow_glColor3d(red, green, blue);
  glow_post_callback_("glColor3d", (void*)(ptrdiff_t)glow_glColor3d, red, green, blue);
}
PFNGLCOLOR3DPROC glow_debug_glColor3d = glow_debug_impl_glColor3d;

static void glow_debug_impl_glVertex4iv(const GLint *v) {

  glow_pre_callback_("glVertex4iv", (void*)(ptrdiff_t)glow_glVertex4iv, v);
  glow_glVertex4iv(v);
  glow_post_callback_("glVertex4iv", (void*)(ptrdiff_t)glow_glVertex4iv, v);
}
PFNGLVERTEX4IVPROC glow_debug_glVertex4iv = glow_debug_impl_glVertex4iv;

static void glow_debug_impl_glNormalPointer(GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glNormalPointer", (void*)(ptrdiff_t)glow_glNormalPointer, type, stride, pointer);
  glow_glNormalPointer(type, stride, pointer);
  glow_post_callback_("glNormalPointer", (void*)(ptrdiff_t)glow_glNormalPointer, type, stride, pointer);
}
PFNGLNORMALPOINTERPROC glow_debug_glNormalPointer = glow_debug_impl_glNormalPointer;

static void glow_debug_impl_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {

  glow_pre_callback_("glCompressedTexSubImage1D", (void*)(ptrdiff_t)glow_glCompressedTexSubImage1D, target, level, xoffset, width, format, imageSize, data);
  glow_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  glow_post_callback_("glCompressedTexSubImage1D", (void*)(ptrdiff_t)glow_glCompressedTexSubImage1D, target, level, xoffset, width, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glow_debug_glCompressedTexSubImage1D = glow_debug_impl_glCompressedTexSubImage1D;

static void glow_debug_impl_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {

  glow_pre_callback_("glDeleteRenderbuffers", (void*)(ptrdiff_t)glow_glDeleteRenderbuffers, n, renderbuffers);
  glow_glDeleteRenderbuffers(n, renderbuffers);
  glow_post_callback_("glDeleteRenderbuffers", (void*)(ptrdiff_t)glow_glDeleteRenderbuffers, n, renderbuffers);
}
PFNGLDELETERENDERBUFFERSPROC glow_debug_glDeleteRenderbuffers = glow_debug_impl_glDeleteRenderbuffers;

static void glow_debug_impl_glTexCoord1iv(const GLint *v) {

  glow_pre_callback_("glTexCoord1iv", (void*)(ptrdiff_t)glow_glTexCoord1iv, v);
  glow_glTexCoord1iv(v);
  glow_post_callback_("glTexCoord1iv", (void*)(ptrdiff_t)glow_glTexCoord1iv, v);
}
PFNGLTEXCOORD1IVPROC glow_debug_glTexCoord1iv = glow_debug_impl_glTexCoord1iv;

static void glow_debug_impl_glColor3usv(const GLushort *v) {

  glow_pre_callback_("glColor3usv", (void*)(ptrdiff_t)glow_glColor3usv, v);
  glow_glColor3usv(v);
  glow_post_callback_("glColor3usv", (void*)(ptrdiff_t)glow_glColor3usv, v);
}
PFNGLCOLOR3USVPROC glow_debug_glColor3usv = glow_debug_impl_glColor3usv;

static void glow_debug_impl_glSelectBuffer(GLsizei size, GLuint *buffer) {

  glow_pre_callback_("glSelectBuffer", (void*)(ptrdiff_t)glow_glSelectBuffer, size, buffer);
  glow_glSelectBuffer(size, buffer);
  glow_post_callback_("glSelectBuffer", (void*)(ptrdiff_t)glow_glSelectBuffer, size, buffer);
}
PFNGLSELECTBUFFERPROC glow_debug_glSelectBuffer = glow_debug_impl_glSelectBuffer;

static void glow_debug_impl_glProgramUniform1i(GLuint program, GLint location, GLint v0) {

  glow_pre_callback_("glProgramUniform1i", (void*)(ptrdiff_t)glow_glProgramUniform1i, program, location, v0);
  glow_glProgramUniform1i(program, location, v0);
  glow_post_callback_("glProgramUniform1i", (void*)(ptrdiff_t)glow_glProgramUniform1i, program, location, v0);
}
PFNGLPROGRAMUNIFORM1IPROC glow_debug_glProgramUniform1i = glow_debug_impl_glProgramUniform1i;

static void glow_debug_impl_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {

  glow_pre_callback_("glMultiTexCoord3d", (void*)(ptrdiff_t)glow_glMultiTexCoord3d, target, s, t, r);
  glow_glMultiTexCoord3d(target, s, t, r);
  glow_post_callback_("glMultiTexCoord3d", (void*)(ptrdiff_t)glow_glMultiTexCoord3d, target, s, t, r);
}
PFNGLMULTITEXCOORD3DPROC glow_debug_glMultiTexCoord3d = glow_debug_impl_glMultiTexCoord3d;

static void glow_debug_impl_glDeleteSync(GLsync sync) {

  glow_pre_callback_("glDeleteSync", (void*)(ptrdiff_t)glow_glDeleteSync, sync);
  glow_glDeleteSync(sync);
  glow_post_callback_("glDeleteSync", (void*)(ptrdiff_t)glow_glDeleteSync, sync);
}
PFNGLDELETESYNCPROC glow_debug_glDeleteSync = glow_debug_impl_glDeleteSync;

static void glow_debug_impl_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {

  glow_pre_callback_("glProgramUniform4ui", (void*)(ptrdiff_t)glow_glProgramUniform4ui, program, location, v0, v1, v2, v3);
  glow_glProgramUniform4ui(program, location, v0, v1, v2, v3);
  glow_post_callback_("glProgramUniform4ui", (void*)(ptrdiff_t)glow_glProgramUniform4ui, program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4UIPROC glow_debug_glProgramUniform4ui = glow_debug_impl_glProgramUniform4ui;

static void glow_debug_impl_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glMaterialfv", (void*)(ptrdiff_t)glow_glMaterialfv, face, pname, params);
  glow_glMaterialfv(face, pname, params);
  glow_post_callback_("glMaterialfv", (void*)(ptrdiff_t)glow_glMaterialfv, face, pname, params);
}
PFNGLMATERIALFVPROC glow_debug_glMaterialfv = glow_debug_impl_glMaterialfv;

static void glow_debug_impl_glGenSamplers(GLsizei count, GLuint *samplers) {

  glow_pre_callback_("glGenSamplers", (void*)(ptrdiff_t)glow_glGenSamplers, count, samplers);
  glow_glGenSamplers(count, samplers);
  glow_post_callback_("glGenSamplers", (void*)(ptrdiff_t)glow_glGenSamplers, count, samplers);
}
PFNGLGENSAMPLERSPROC glow_debug_glGenSamplers = glow_debug_impl_glGenSamplers;

static void glow_debug_impl_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix3x2dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x2dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix3x2dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix3x2dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glow_debug_glProgramUniformMatrix3x2dv = glow_debug_impl_glProgramUniformMatrix3x2dv;

static void glow_debug_impl_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetVertexAttribiv", (void*)(ptrdiff_t)glow_glGetVertexAttribiv, index, pname, params);
  glow_glGetVertexAttribiv(index, pname, params);
  glow_post_callback_("glGetVertexAttribiv", (void*)(ptrdiff_t)glow_glGetVertexAttribiv, index, pname, params);
}
PFNGLGETVERTEXATTRIBIVPROC glow_debug_glGetVertexAttribiv = glow_debug_impl_glGetVertexAttribiv;

static void glow_debug_impl_glColor3uiv(const GLuint *v) {

  glow_pre_callback_("glColor3uiv", (void*)(ptrdiff_t)glow_glColor3uiv, v);
  glow_glColor3uiv(v);
  glow_post_callback_("glColor3uiv", (void*)(ptrdiff_t)glow_glColor3uiv, v);
}
PFNGLCOLOR3UIVPROC glow_debug_glColor3uiv = glow_debug_impl_glColor3uiv;

static GLboolean glow_debug_impl_glIsQuery(GLuint id) {

  GLboolean ret;
  glow_pre_callback_("glIsQuery", (void*)(ptrdiff_t)glow_glIsQuery, id);
  ret = glow_glIsQuery(id);
  glow_post_callback_("glIsQuery", (void*)(ptrdiff_t)glow_glIsQuery, id);
  return ret;
}
PFNGLISQUERYPROC glow_debug_glIsQuery = glow_debug_impl_glIsQuery;

static void glow_debug_impl_glGenTransformFeedbacks(GLsizei n, GLuint *ids) {

  glow_pre_callback_("glGenTransformFeedbacks", (void*)(ptrdiff_t)glow_glGenTransformFeedbacks, n, ids);
  glow_glGenTransformFeedbacks(n, ids);
  glow_post_callback_("glGenTransformFeedbacks", (void*)(ptrdiff_t)glow_glGenTransformFeedbacks, n, ids);
}
PFNGLGENTRANSFORMFEEDBACKSPROC glow_debug_glGenTransformFeedbacks = glow_debug_impl_glGenTransformFeedbacks;

static void glow_debug_impl_glStencilFunc(GLenum func, GLint ref, GLuint mask) {

  glow_pre_callback_("glStencilFunc", (void*)(ptrdiff_t)glow_glStencilFunc, func, ref, mask);
  glow_glStencilFunc(func, ref, mask);
  glow_post_callback_("glStencilFunc", (void*)(ptrdiff_t)glow_glStencilFunc, func, ref, mask);
}
PFNGLSTENCILFUNCPROC glow_debug_glStencilFunc = glow_debug_impl_glStencilFunc;

static void glow_debug_impl_glEvalPoint2(GLint i, GLint j) {

  glow_pre_callback_("glEvalPoint2", (void*)(ptrdiff_t)glow_glEvalPoint2, i, j);
  glow_glEvalPoint2(i, j);
  glow_post_callback_("glEvalPoint2", (void*)(ptrdiff_t)glow_glEvalPoint2, i, j);
}
PFNGLEVALPOINT2PROC glow_debug_glEvalPoint2 = glow_debug_impl_glEvalPoint2;

static void glow_debug_impl_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {

  glow_pre_callback_("glGetProgramInfoLog", (void*)(ptrdiff_t)glow_glGetProgramInfoLog, program, bufSize, length, infoLog);
  glow_glGetProgramInfoLog(program, bufSize, length, infoLog);
  glow_post_callback_("glGetProgramInfoLog", (void*)(ptrdiff_t)glow_glGetProgramInfoLog, program, bufSize, length, infoLog);
}
PFNGLGETPROGRAMINFOLOGPROC glow_debug_glGetProgramInfoLog = glow_debug_impl_glGetProgramInfoLog;

static void glow_debug_impl_glVertexAttrib4uiv(GLuint index, const GLuint *v) {

  glow_pre_callback_("glVertexAttrib4uiv", (void*)(ptrdiff_t)glow_glVertexAttrib4uiv, index, v);
  glow_glVertexAttrib4uiv(index, v);
  glow_post_callback_("glVertexAttrib4uiv", (void*)(ptrdiff_t)glow_glVertexAttrib4uiv, index, v);
}
PFNGLVERTEXATTRIB4UIVPROC glow_debug_glVertexAttrib4uiv = glow_debug_impl_glVertexAttrib4uiv;

static void glow_debug_impl_glGenerateMipmap(GLenum target) {

  glow_pre_callback_("glGenerateMipmap", (void*)(ptrdiff_t)glow_glGenerateMipmap, target);
  glow_glGenerateMipmap(target);
  glow_post_callback_("glGenerateMipmap", (void*)(ptrdiff_t)glow_glGenerateMipmap, target);
}
PFNGLGENERATEMIPMAPPROC glow_debug_glGenerateMipmap = glow_debug_impl_glGenerateMipmap;

static void glow_debug_impl_glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetLightfv", (void*)(ptrdiff_t)glow_glGetLightfv, light, pname, params);
  glow_glGetLightfv(light, pname, params);
  glow_post_callback_("glGetLightfv", (void*)(ptrdiff_t)glow_glGetLightfv, light, pname, params);
}
PFNGLGETLIGHTFVPROC glow_debug_glGetLightfv = glow_debug_impl_glGetLightfv;

static void glow_debug_impl_glPrimitiveRestartIndex(GLuint index) {

  glow_pre_callback_("glPrimitiveRestartIndex", (void*)(ptrdiff_t)glow_glPrimitiveRestartIndex, index);
  glow_glPrimitiveRestartIndex(index);
  glow_post_callback_("glPrimitiveRestartIndex", (void*)(ptrdiff_t)glow_glPrimitiveRestartIndex, index);
}
PFNGLPRIMITIVERESTARTINDEXPROC glow_debug_glPrimitiveRestartIndex = glow_debug_impl_glPrimitiveRestartIndex;

static void glow_debug_impl_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) {

  glow_pre_callback_("glReadPixels", (void*)(ptrdiff_t)glow_glReadPixels, x, y, width, height, format, type, pixels);
  glow_glReadPixels(x, y, width, height, format, type, pixels);
  glow_post_callback_("glReadPixels", (void*)(ptrdiff_t)glow_glReadPixels, x, y, width, height, format, type, pixels);
}
PFNGLREADPIXELSPROC glow_debug_glReadPixels = glow_debug_impl_glReadPixels;

static void glow_debug_impl_glEnableVertexAttribArray(GLuint index) {

  glow_pre_callback_("glEnableVertexAttribArray", (void*)(ptrdiff_t)glow_glEnableVertexAttribArray, index);
  glow_glEnableVertexAttribArray(index);
  glow_post_callback_("glEnableVertexAttribArray", (void*)(ptrdiff_t)glow_glEnableVertexAttribArray, index);
}
PFNGLENABLEVERTEXATTRIBARRAYPROC glow_debug_glEnableVertexAttribArray = glow_debug_impl_glEnableVertexAttribArray;

static void glow_debug_impl_glUseProgram(GLuint program) {

  glow_pre_callback_("glUseProgram", (void*)(ptrdiff_t)glow_glUseProgram, program);
  glow_glUseProgram(program);
  glow_post_callback_("glUseProgram", (void*)(ptrdiff_t)glow_glUseProgram, program);
}
PFNGLUSEPROGRAMPROC glow_debug_glUseProgram = glow_debug_impl_glUseProgram;

static void glow_debug_impl_glVertexAttrib3fv(GLuint index, const GLfloat *v) {

  glow_pre_callback_("glVertexAttrib3fv", (void*)(ptrdiff_t)glow_glVertexAttrib3fv, index, v);
  glow_glVertexAttrib3fv(index, v);
  glow_post_callback_("glVertexAttrib3fv", (void*)(ptrdiff_t)glow_glVertexAttrib3fv, index, v);
}
PFNGLVERTEXATTRIB3FVPROC glow_debug_glVertexAttrib3fv = glow_debug_impl_glVertexAttrib3fv;

static void glow_debug_impl_glMultiTexCoord1sv(GLenum target, const GLshort *v) {

  glow_pre_callback_("glMultiTexCoord1sv", (void*)(ptrdiff_t)glow_glMultiTexCoord1sv, target, v);
  glow_glMultiTexCoord1sv(target, v);
  glow_post_callback_("glMultiTexCoord1sv", (void*)(ptrdiff_t)glow_glMultiTexCoord1sv, target, v);
}
PFNGLMULTITEXCOORD1SVPROC glow_debug_glMultiTexCoord1sv = glow_debug_impl_glMultiTexCoord1sv;

static void glow_debug_impl_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {

  glow_pre_callback_("glMultiTexCoord2d", (void*)(ptrdiff_t)glow_glMultiTexCoord2d, target, s, t);
  glow_glMultiTexCoord2d(target, s, t);
  glow_post_callback_("glMultiTexCoord2d", (void*)(ptrdiff_t)glow_glMultiTexCoord2d, target, s, t);
}
PFNGLMULTITEXCOORD2DPROC glow_debug_glMultiTexCoord2d = glow_debug_impl_glMultiTexCoord2d;

static void glow_debug_impl_glSecondaryColor3ubv(const GLubyte *v) {

  glow_pre_callback_("glSecondaryColor3ubv", (void*)(ptrdiff_t)glow_glSecondaryColor3ubv, v);
  glow_glSecondaryColor3ubv(v);
  glow_post_callback_("glSecondaryColor3ubv", (void*)(ptrdiff_t)glow_glSecondaryColor3ubv, v);
}
PFNGLSECONDARYCOLOR3UBVPROC glow_debug_glSecondaryColor3ubv = glow_debug_impl_glSecondaryColor3ubv;

static void glow_debug_impl_glCompileShader(GLuint shader) {

  glow_pre_callback_("glCompileShader", (void*)(ptrdiff_t)glow_glCompileShader, shader);
  glow_glCompileShader(shader);
  glow_post_callback_("glCompileShader", (void*)(ptrdiff_t)glow_glCompileShader, shader);
}
PFNGLCOMPILESHADERPROC glow_debug_glCompileShader = glow_debug_impl_glCompileShader;

static void glow_debug_impl_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetActiveAtomicCounterBufferiv", (void*)(ptrdiff_t)glow_glGetActiveAtomicCounterBufferiv, program, bufferIndex, pname, params);
  glow_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  glow_post_callback_("glGetActiveAtomicCounterBufferiv", (void*)(ptrdiff_t)glow_glGetActiveAtomicCounterBufferiv, program, bufferIndex, pname, params);
}
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glow_debug_glGetActiveAtomicCounterBufferiv = glow_debug_impl_glGetActiveAtomicCounterBufferiv;

static void glow_debug_impl_glDeleteLists(GLuint list, GLsizei range) {

  glow_pre_callback_("glDeleteLists", (void*)(ptrdiff_t)glow_glDeleteLists, list, range);
  glow_glDeleteLists(list, range);
  glow_post_callback_("glDeleteLists", (void*)(ptrdiff_t)glow_glDeleteLists, list, range);
}
PFNGLDELETELISTSPROC glow_debug_glDeleteLists = glow_debug_impl_glDeleteLists;

static void glow_debug_impl_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {

  glow_pre_callback_("glTexCoord4s", (void*)(ptrdiff_t)glow_glTexCoord4s, s, t, r, q);
  glow_glTexCoord4s(s, t, r, q);
  glow_post_callback_("glTexCoord4s", (void*)(ptrdiff_t)glow_glTexCoord4s, s, t, r, q);
}
PFNGLTEXCOORD4SPROC glow_debug_glTexCoord4s = glow_debug_impl_glTexCoord4s;

static void glow_debug_impl_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {

  glow_pre_callback_("glGenRenderbuffers", (void*)(ptrdiff_t)glow_glGenRenderbuffers, n, renderbuffers);
  glow_glGenRenderbuffers(n, renderbuffers);
  glow_post_callback_("glGenRenderbuffers", (void*)(ptrdiff_t)glow_glGenRenderbuffers, n, renderbuffers);
}
PFNGLGENRENDERBUFFERSPROC glow_debug_glGenRenderbuffers = glow_debug_impl_glGenRenderbuffers;

static GLboolean glow_debug_impl_glIsTransformFeedback(GLuint id) {

  GLboolean ret;
  glow_pre_callback_("glIsTransformFeedback", (void*)(ptrdiff_t)glow_glIsTransformFeedback, id);
  ret = glow_glIsTransformFeedback(id);
  glow_post_callback_("glIsTransformFeedback", (void*)(ptrdiff_t)glow_glIsTransformFeedback, id);
  return ret;
}
PFNGLISTRANSFORMFEEDBACKPROC glow_debug_glIsTransformFeedback = glow_debug_impl_glIsTransformFeedback;

static void glow_debug_impl_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {

  glow_pre_callback_("glBeginQueryIndexed", (void*)(ptrdiff_t)glow_glBeginQueryIndexed, target, index, id);
  glow_glBeginQueryIndexed(target, index, id);
  glow_post_callback_("glBeginQueryIndexed", (void*)(ptrdiff_t)glow_glBeginQueryIndexed, target, index, id);
}
PFNGLBEGINQUERYINDEXEDPROC glow_debug_glBeginQueryIndexed = glow_debug_impl_glBeginQueryIndexed;

static void glow_debug_impl_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {

  glow_pre_callback_("glColor4f", (void*)(ptrdiff_t)glow_glColor4f, red, green, blue, alpha);
  glow_glColor4f(red, green, blue, alpha);
  glow_post_callback_("glColor4f", (void*)(ptrdiff_t)glow_glColor4f, red, green, blue, alpha);
}
PFNGLCOLOR4FPROC glow_debug_glColor4f = glow_debug_impl_glColor4f;

static void glow_debug_impl_glTexCoord3i(GLint s, GLint t, GLint r) {

  glow_pre_callback_("glTexCoord3i", (void*)(ptrdiff_t)glow_glTexCoord3i, s, t, r);
  glow_glTexCoord3i(s, t, r);
  glow_post_callback_("glTexCoord3i", (void*)(ptrdiff_t)glow_glTexCoord3i, s, t, r);
}
PFNGLTEXCOORD3IPROC glow_debug_glTexCoord3i = glow_debug_impl_glTexCoord3i;

static void glow_debug_impl_glMultiTexCoord3sv(GLenum target, const GLshort *v) {

  glow_pre_callback_("glMultiTexCoord3sv", (void*)(ptrdiff_t)glow_glMultiTexCoord3sv, target, v);
  glow_glMultiTexCoord3sv(target, v);
  glow_post_callback_("glMultiTexCoord3sv", (void*)(ptrdiff_t)glow_glMultiTexCoord3sv, target, v);
}
PFNGLMULTITEXCOORD3SVPROC glow_debug_glMultiTexCoord3sv = glow_debug_impl_glMultiTexCoord3sv;

static void glow_debug_impl_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetRenderbufferParameteriv", (void*)(ptrdiff_t)glow_glGetRenderbufferParameteriv, target, pname, params);
  glow_glGetRenderbufferParameteriv(target, pname, params);
  glow_post_callback_("glGetRenderbufferParameteriv", (void*)(ptrdiff_t)glow_glGetRenderbufferParameteriv, target, pname, params);
}
PFNGLGETRENDERBUFFERPARAMETERIVPROC glow_debug_glGetRenderbufferParameteriv = glow_debug_impl_glGetRenderbufferParameteriv;

static void glow_debug_impl_glRasterPos2fv(const GLfloat *v) {

  glow_pre_callback_("glRasterPos2fv", (void*)(ptrdiff_t)glow_glRasterPos2fv, v);
  glow_glRasterPos2fv(v);
  glow_post_callback_("glRasterPos2fv", (void*)(ptrdiff_t)glow_glRasterPos2fv, v);
}
PFNGLRASTERPOS2FVPROC glow_debug_glRasterPos2fv = glow_debug_impl_glRasterPos2fv;

static void glow_debug_impl_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {

  glow_pre_callback_("glBindBufferBase", (void*)(ptrdiff_t)glow_glBindBufferBase, target, index, buffer);
  glow_glBindBufferBase(target, index, buffer);
  glow_post_callback_("glBindBufferBase", (void*)(ptrdiff_t)glow_glBindBufferBase, target, index, buffer);
}
PFNGLBINDBUFFERBASEPROC glow_debug_glBindBufferBase = glow_debug_impl_glBindBufferBase;

static void glow_debug_impl_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {

  glow_pre_callback_("glClearBufferfi", (void*)(ptrdiff_t)glow_glClearBufferfi, buffer, drawbuffer, depth, stencil);
  glow_glClearBufferfi(buffer, drawbuffer, depth, stencil);
  glow_post_callback_("glClearBufferfi", (void*)(ptrdiff_t)glow_glClearBufferfi, buffer, drawbuffer, depth, stencil);
}
PFNGLCLEARBUFFERFIPROC glow_debug_glClearBufferfi = glow_debug_impl_glClearBufferfi;

static void glow_debug_impl_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {

  glow_pre_callback_("glScissorIndexed", (void*)(ptrdiff_t)glow_glScissorIndexed, index, left, bottom, width, height);
  glow_glScissorIndexed(index, left, bottom, width, height);
  glow_post_callback_("glScissorIndexed", (void*)(ptrdiff_t)glow_glScissorIndexed, index, left, bottom, width, height);
}
PFNGLSCISSORINDEXEDPROC glow_debug_glScissorIndexed = glow_debug_impl_glScissorIndexed;

static void glow_debug_impl_glMultiTexCoord2sv(GLenum target, const GLshort *v) {

  glow_pre_callback_("glMultiTexCoord2sv", (void*)(ptrdiff_t)glow_glMultiTexCoord2sv, target, v);
  glow_glMultiTexCoord2sv(target, v);
  glow_post_callback_("glMultiTexCoord2sv", (void*)(ptrdiff_t)glow_glMultiTexCoord2sv, target, v);
}
PFNGLMULTITEXCOORD2SVPROC glow_debug_glMultiTexCoord2sv = glow_debug_impl_glMultiTexCoord2sv;

static void glow_debug_impl_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {

  glow_pre_callback_("glSecondaryColor3ui", (void*)(ptrdiff_t)glow_glSecondaryColor3ui, red, green, blue);
  glow_glSecondaryColor3ui(red, green, blue);
  glow_post_callback_("glSecondaryColor3ui", (void*)(ptrdiff_t)glow_glSecondaryColor3ui, red, green, blue);
}
PFNGLSECONDARYCOLOR3UIPROC glow_debug_glSecondaryColor3ui = glow_debug_impl_glSecondaryColor3ui;

static void glow_debug_impl_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {

  glow_pre_callback_("glTexParameterIiv", (void*)(ptrdiff_t)glow_glTexParameterIiv, target, pname, params);
  glow_glTexParameterIiv(target, pname, params);
  glow_post_callback_("glTexParameterIiv", (void*)(ptrdiff_t)glow_glTexParameterIiv, target, pname, params);
}
PFNGLTEXPARAMETERIIVPROC glow_debug_glTexParameterIiv = glow_debug_impl_glTexParameterIiv;

static void glow_debug_impl_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {

  glow_pre_callback_("glProgramUniform4f", (void*)(ptrdiff_t)glow_glProgramUniform4f, program, location, v0, v1, v2, v3);
  glow_glProgramUniform4f(program, location, v0, v1, v2, v3);
  glow_post_callback_("glProgramUniform4f", (void*)(ptrdiff_t)glow_glProgramUniform4f, program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4FPROC glow_debug_glProgramUniform4f = glow_debug_impl_glProgramUniform4f;

static void glow_debug_impl_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetTexParameteriv", (void*)(ptrdiff_t)glow_glGetTexParameteriv, target, pname, params);
  glow_glGetTexParameteriv(target, pname, params);
  glow_post_callback_("glGetTexParameteriv", (void*)(ptrdiff_t)glow_glGetTexParameteriv, target, pname, params);
}
PFNGLGETTEXPARAMETERIVPROC glow_debug_glGetTexParameteriv = glow_debug_impl_glGetTexParameteriv;

static void glow_debug_impl_glGetLightiv(GLenum light, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetLightiv", (void*)(ptrdiff_t)glow_glGetLightiv, light, pname, params);
  glow_glGetLightiv(light, pname, params);
  glow_post_callback_("glGetLightiv", (void*)(ptrdiff_t)glow_glGetLightiv, light, pname, params);
}
PFNGLGETLIGHTIVPROC glow_debug_glGetLightiv = glow_debug_impl_glGetLightiv;

static void glow_debug_impl_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {

  glow_pre_callback_("glGetTexGendv", (void*)(ptrdiff_t)glow_glGetTexGendv, coord, pname, params);
  glow_glGetTexGendv(coord, pname, params);
  glow_post_callback_("glGetTexGendv", (void*)(ptrdiff_t)glow_glGetTexGendv, coord, pname, params);
}
PFNGLGETTEXGENDVPROC glow_debug_glGetTexGendv = glow_debug_impl_glGetTexGendv;

static void glow_debug_impl_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {

  glow_pre_callback_("glVertexAttribP1ui", (void*)(ptrdiff_t)glow_glVertexAttribP1ui, index, type, normalized, value);
  glow_glVertexAttribP1ui(index, type, normalized, value);
  glow_post_callback_("glVertexAttribP1ui", (void*)(ptrdiff_t)glow_glVertexAttribP1ui, index, type, normalized, value);
}
PFNGLVERTEXATTRIBP1UIPROC glow_debug_glVertexAttribP1ui = glow_debug_impl_glVertexAttribP1ui;

static void glow_debug_impl_glActiveShaderProgram(GLuint pipeline, GLuint program) {

  glow_pre_callback_("glActiveShaderProgram", (void*)(ptrdiff_t)glow_glActiveShaderProgram, pipeline, program);
  glow_glActiveShaderProgram(pipeline, program);
  glow_post_callback_("glActiveShaderProgram", (void*)(ptrdiff_t)glow_glActiveShaderProgram, pipeline, program);
}
PFNGLACTIVESHADERPROGRAMPROC glow_debug_glActiveShaderProgram = glow_debug_impl_glActiveShaderProgram;

static void glow_debug_impl_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {

  glow_pre_callback_("glProgramUniform1uiv", (void*)(ptrdiff_t)glow_glProgramUniform1uiv, program, location, count, value);
  glow_glProgramUniform1uiv(program, location, count, value);
  glow_post_callback_("glProgramUniform1uiv", (void*)(ptrdiff_t)glow_glProgramUniform1uiv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM1UIVPROC glow_debug_glProgramUniform1uiv = glow_debug_impl_glProgramUniform1uiv;

static void glow_debug_impl_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {

  glow_pre_callback_("glProgramUniformMatrix4x2dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x2dv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix4x2dv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix4x2dv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glow_debug_glProgramUniformMatrix4x2dv = glow_debug_impl_glProgramUniformMatrix4x2dv;

static void glow_debug_impl_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {

  glow_pre_callback_("glTexStorage3DMultisample", (void*)(ptrdiff_t)glow_glTexStorage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  glow_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  glow_post_callback_("glTexStorage3DMultisample", (void*)(ptrdiff_t)glow_glTexStorage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glow_debug_glTexStorage3DMultisample = glow_debug_impl_glTexStorage3DMultisample;

static void glow_debug_impl_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {

  glow_pre_callback_("glMapGrid2f", (void*)(ptrdiff_t)glow_glMapGrid2f, un, u1, u2, vn, v1, v2);
  glow_glMapGrid2f(un, u1, u2, vn, v1, v2);
  glow_post_callback_("glMapGrid2f", (void*)(ptrdiff_t)glow_glMapGrid2f, un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2FPROC glow_debug_glMapGrid2f = glow_debug_impl_glMapGrid2f;

static void glow_debug_impl_glColorMaterial(GLenum face, GLenum mode) {

  glow_pre_callback_("glColorMaterial", (void*)(ptrdiff_t)glow_glColorMaterial, face, mode);
  glow_glColorMaterial(face, mode);
  glow_post_callback_("glColorMaterial", (void*)(ptrdiff_t)glow_glColorMaterial, face, mode);
}
PFNGLCOLORMATERIALPROC glow_debug_glColorMaterial = glow_debug_impl_glColorMaterial;

static void glow_debug_impl_glVertexAttrib4usv(GLuint index, const GLushort *v) {

  glow_pre_callback_("glVertexAttrib4usv", (void*)(ptrdiff_t)glow_glVertexAttrib4usv, index, v);
  glow_glVertexAttrib4usv(index, v);
  glow_post_callback_("glVertexAttrib4usv", (void*)(ptrdiff_t)glow_glVertexAttrib4usv, index, v);
}
PFNGLVERTEXATTRIB4USVPROC glow_debug_glVertexAttrib4usv = glow_debug_impl_glVertexAttrib4usv;

static void glow_debug_impl_glGetInteger64v(GLenum pname, GLint64 *data) {

  glow_pre_callback_("glGetInteger64v", (void*)(ptrdiff_t)glow_glGetInteger64v, pname, data);
  glow_glGetInteger64v(pname, data);
  glow_post_callback_("glGetInteger64v", (void*)(ptrdiff_t)glow_glGetInteger64v, pname, data);
}
PFNGLGETINTEGER64VPROC glow_debug_glGetInteger64v = glow_debug_impl_glGetInteger64v;

static void glow_debug_impl_glTexCoord1s(GLshort s) {

  glow_pre_callback_("glTexCoord1s", (void*)(ptrdiff_t)glow_glTexCoord1s, s);
  glow_glTexCoord1s(s);
  glow_post_callback_("glTexCoord1s", (void*)(ptrdiff_t)glow_glTexCoord1s, s);
}
PFNGLTEXCOORD1SPROC glow_debug_glTexCoord1s = glow_debug_impl_glTexCoord1s;

static void glow_debug_impl_glClipPlane(GLenum plane, const GLdouble *equation) {

  glow_pre_callback_("glClipPlane", (void*)(ptrdiff_t)glow_glClipPlane, plane, equation);
  glow_glClipPlane(plane, equation);
  glow_post_callback_("glClipPlane", (void*)(ptrdiff_t)glow_glClipPlane, plane, equation);
}
PFNGLCLIPPLANEPROC glow_debug_glClipPlane = glow_debug_impl_glClipPlane;

static void glow_debug_impl_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {

  glow_pre_callback_("glDrawRangeElements", (void*)(ptrdiff_t)glow_glDrawRangeElements, mode, start, end, count, type, indices);
  glow_glDrawRangeElements(mode, start, end, count, type, indices);
  glow_post_callback_("glDrawRangeElements", (void*)(ptrdiff_t)glow_glDrawRangeElements, mode, start, end, count, type, indices);
}
PFNGLDRAWRANGEELEMENTSPROC glow_debug_glDrawRangeElements = glow_debug_impl_glDrawRangeElements;

static void glow_debug_impl_glMultiTexCoord2iv(GLenum target, const GLint *v) {

  glow_pre_callback_("glMultiTexCoord2iv", (void*)(ptrdiff_t)glow_glMultiTexCoord2iv, target, v);
  glow_glMultiTexCoord2iv(target, v);
  glow_post_callback_("glMultiTexCoord2iv", (void*)(ptrdiff_t)glow_glMultiTexCoord2iv, target, v);
}
PFNGLMULTITEXCOORD2IVPROC glow_debug_glMultiTexCoord2iv = glow_debug_impl_glMultiTexCoord2iv;

static void glow_debug_impl_glGetUniformiv(GLuint program, GLint location, GLint *params) {

  glow_pre_callback_("glGetUniformiv", (void*)(ptrdiff_t)glow_glGetUniformiv, program, location, params);
  glow_glGetUniformiv(program, location, params);
  glow_post_callback_("glGetUniformiv", (void*)(ptrdiff_t)glow_glGetUniformiv, program, location, params);
}
PFNGLGETUNIFORMIVPROC glow_debug_glGetUniformiv = glow_debug_impl_glGetUniformiv;

static void glow_debug_impl_glCallLists(GLsizei n, GLenum type, const void *lists) {

  glow_pre_callback_("glCallLists", (void*)(ptrdiff_t)glow_glCallLists, n, type, lists);
  glow_glCallLists(n, type, lists);
  glow_post_callback_("glCallLists", (void*)(ptrdiff_t)glow_glCallLists, n, type, lists);
}
PFNGLCALLLISTSPROC glow_debug_glCallLists = glow_debug_impl_glCallLists;

static void glow_debug_impl_glVertex2fv(const GLfloat *v) {

  glow_pre_callback_("glVertex2fv", (void*)(ptrdiff_t)glow_glVertex2fv, v);
  glow_glVertex2fv(v);
  glow_post_callback_("glVertex2fv", (void*)(ptrdiff_t)glow_glVertex2fv, v);
}
PFNGLVERTEX2FVPROC glow_debug_glVertex2fv = glow_debug_impl_glVertex2fv;

static void glow_debug_impl_glProvokingVertex(GLenum mode) {

  glow_pre_callback_("glProvokingVertex", (void*)(ptrdiff_t)glow_glProvokingVertex, mode);
  glow_glProvokingVertex(mode);
  glow_post_callback_("glProvokingVertex", (void*)(ptrdiff_t)glow_glProvokingVertex, mode);
}
PFNGLPROVOKINGVERTEXPROC glow_debug_glProvokingVertex = glow_debug_impl_glProvokingVertex;

static void glow_debug_impl_glDispatchComputeIndirect(GLintptr indirect) {

  glow_pre_callback_("glDispatchComputeIndirect", (void*)(ptrdiff_t)glow_glDispatchComputeIndirect, indirect);
  glow_glDispatchComputeIndirect(indirect);
  glow_post_callback_("glDispatchComputeIndirect", (void*)(ptrdiff_t)glow_glDispatchComputeIndirect, indirect);
}
PFNGLDISPATCHCOMPUTEINDIRECTPROC glow_debug_glDispatchComputeIndirect = glow_debug_impl_glDispatchComputeIndirect;

static void glow_debug_impl_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {

  glow_pre_callback_("glTexCoord4d", (void*)(ptrdiff_t)glow_glTexCoord4d, s, t, r, q);
  glow_glTexCoord4d(s, t, r, q);
  glow_post_callback_("glTexCoord4d", (void*)(ptrdiff_t)glow_glTexCoord4d, s, t, r, q);
}
PFNGLTEXCOORD4DPROC glow_debug_glTexCoord4d = glow_debug_impl_glTexCoord4d;

static void glow_debug_impl_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {

  glow_pre_callback_("glTexImage3DMultisample", (void*)(ptrdiff_t)glow_glTexImage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  glow_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  glow_post_callback_("glTexImage3DMultisample", (void*)(ptrdiff_t)glow_glTexImage3DMultisample, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXIMAGE3DMULTISAMPLEPROC glow_debug_glTexImage3DMultisample = glow_debug_impl_glTexImage3DMultisample;

static void glow_debug_impl_glVertex4sv(const GLshort *v) {

  glow_pre_callback_("glVertex4sv", (void*)(ptrdiff_t)glow_glVertex4sv, v);
  glow_glVertex4sv(v);
  glow_post_callback_("glVertex4sv", (void*)(ptrdiff_t)glow_glVertex4sv, v);
}
PFNGLVERTEX4SVPROC glow_debug_glVertex4sv = glow_debug_impl_glVertex4sv;

static void glow_debug_impl_glFogfv(GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glFogfv", (void*)(ptrdiff_t)glow_glFogfv, pname, params);
  glow_glFogfv(pname, params);
  glow_post_callback_("glFogfv", (void*)(ptrdiff_t)glow_glFogfv, pname, params);
}
PFNGLFOGFVPROC glow_debug_glFogfv = glow_debug_impl_glFogfv;

static void glow_debug_impl_glVertexAttribI4sv(GLuint index, const GLshort *v) {

  glow_pre_callback_("glVertexAttribI4sv", (void*)(ptrdiff_t)glow_glVertexAttribI4sv, index, v);
  glow_glVertexAttribI4sv(index, v);
  glow_post_callback_("glVertexAttribI4sv", (void*)(ptrdiff_t)glow_glVertexAttribI4sv, index, v);
}
PFNGLVERTEXATTRIBI4SVPROC glow_debug_glVertexAttribI4sv = glow_debug_impl_glVertexAttribI4sv;

static void glow_debug_impl_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetActiveUniformBlockiv", (void*)(ptrdiff_t)glow_glGetActiveUniformBlockiv, program, uniformBlockIndex, pname, params);
  glow_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  glow_post_callback_("glGetActiveUniformBlockiv", (void*)(ptrdiff_t)glow_glGetActiveUniformBlockiv, program, uniformBlockIndex, pname, params);
}
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glow_debug_glGetActiveUniformBlockiv = glow_debug_impl_glGetActiveUniformBlockiv;

static void glow_debug_impl_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetSamplerParameteriv", (void*)(ptrdiff_t)glow_glGetSamplerParameteriv, sampler, pname, params);
  glow_glGetSamplerParameteriv(sampler, pname, params);
  glow_post_callback_("glGetSamplerParameteriv", (void*)(ptrdiff_t)glow_glGetSamplerParameteriv, sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIVPROC glow_debug_glGetSamplerParameteriv = glow_debug_impl_glGetSamplerParameteriv;

static void glow_debug_impl_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {

  glow_pre_callback_("glFramebufferParameteri", (void*)(ptrdiff_t)glow_glFramebufferParameteri, target, pname, param);
  glow_glFramebufferParameteri(target, pname, param);
  glow_post_callback_("glFramebufferParameteri", (void*)(ptrdiff_t)glow_glFramebufferParameteri, target, pname, param);
}
PFNGLFRAMEBUFFERPARAMETERIPROC glow_debug_glFramebufferParameteri = glow_debug_impl_glFramebufferParameteri;

static void glow_debug_impl_glColor4fv(const GLfloat *v) {

  glow_pre_callback_("glColor4fv", (void*)(ptrdiff_t)glow_glColor4fv, v);
  glow_glColor4fv(v);
  glow_post_callback_("glColor4fv", (void*)(ptrdiff_t)glow_glColor4fv, v);
}
PFNGLCOLOR4FVPROC glow_debug_glColor4fv = glow_debug_impl_glColor4fv;

static void glow_debug_impl_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices) {

  glow_pre_callback_("glDrawElements", (void*)(ptrdiff_t)glow_glDrawElements, mode, count, type, indices);
  glow_glDrawElements(mode, count, type, indices);
  glow_post_callback_("glDrawElements", (void*)(ptrdiff_t)glow_glDrawElements, mode, count, type, indices);
}
PFNGLDRAWELEMENTSPROC glow_debug_glDrawElements = glow_debug_impl_glDrawElements;

static void glow_debug_impl_glSampleCoverage(GLfloat value, GLboolean invert) {

  glow_pre_callback_("glSampleCoverage", (void*)(ptrdiff_t)glow_glSampleCoverage, value, invert);
  glow_glSampleCoverage(value, invert);
  glow_post_callback_("glSampleCoverage", (void*)(ptrdiff_t)glow_glSampleCoverage, value, invert);
}
PFNGLSAMPLECOVERAGEPROC glow_debug_glSampleCoverage = glow_debug_impl_glSampleCoverage;

static void glow_debug_impl_glVertexAttribL4dv(GLuint index, const GLdouble *v) {

  glow_pre_callback_("glVertexAttribL4dv", (void*)(ptrdiff_t)glow_glVertexAttribL4dv, index, v);
  glow_glVertexAttribL4dv(index, v);
  glow_post_callback_("glVertexAttribL4dv", (void*)(ptrdiff_t)glow_glVertexAttribL4dv, index, v);
}
PFNGLVERTEXATTRIBL4DVPROC glow_debug_glVertexAttribL4dv = glow_debug_impl_glVertexAttribL4dv;

static void glow_debug_impl_glNormal3iv(const GLint *v) {

  glow_pre_callback_("glNormal3iv", (void*)(ptrdiff_t)glow_glNormal3iv, v);
  glow_glNormal3iv(v);
  glow_post_callback_("glNormal3iv", (void*)(ptrdiff_t)glow_glNormal3iv, v);
}
PFNGLNORMAL3IVPROC glow_debug_glNormal3iv = glow_debug_impl_glNormal3iv;

static GLboolean glow_debug_impl_glIsSampler(GLuint sampler) {

  GLboolean ret;
  glow_pre_callback_("glIsSampler", (void*)(ptrdiff_t)glow_glIsSampler, sampler);
  ret = glow_glIsSampler(sampler);
  glow_post_callback_("glIsSampler", (void*)(ptrdiff_t)glow_glIsSampler, sampler);
  return ret;
}
PFNGLISSAMPLERPROC glow_debug_glIsSampler = glow_debug_impl_glIsSampler;

static void glow_debug_impl_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetProgramPipelineiv", (void*)(ptrdiff_t)glow_glGetProgramPipelineiv, pipeline, pname, params);
  glow_glGetProgramPipelineiv(pipeline, pname, params);
  glow_post_callback_("glGetProgramPipelineiv", (void*)(ptrdiff_t)glow_glGetProgramPipelineiv, pipeline, pname, params);
}
PFNGLGETPROGRAMPIPELINEIVPROC glow_debug_glGetProgramPipelineiv = glow_debug_impl_glGetProgramPipelineiv;

static void glow_debug_impl_glInvalidateTexImage(GLuint texture, GLint level) {

  glow_pre_callback_("glInvalidateTexImage", (void*)(ptrdiff_t)glow_glInvalidateTexImage, texture, level);
  glow_glInvalidateTexImage(texture, level);
  glow_post_callback_("glInvalidateTexImage", (void*)(ptrdiff_t)glow_glInvalidateTexImage, texture, level);
}
PFNGLINVALIDATETEXIMAGEPROC glow_debug_glInvalidateTexImage = glow_debug_impl_glInvalidateTexImage;

static void glow_debug_impl_glUniform1ui(GLint location, GLuint v0) {

  glow_pre_callback_("glUniform1ui", (void*)(ptrdiff_t)glow_glUniform1ui, location, v0);
  glow_glUniform1ui(location, v0);
  glow_post_callback_("glUniform1ui", (void*)(ptrdiff_t)glow_glUniform1ui, location, v0);
}
PFNGLUNIFORM1UIPROC glow_debug_glUniform1ui = glow_debug_impl_glUniform1ui;

static void glow_debug_impl_glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {

  glow_pre_callback_("glBufferData", (void*)(ptrdiff_t)glow_glBufferData, target, size, data, usage);
  glow_glBufferData(target, size, data, usage);
  glow_post_callback_("glBufferData", (void*)(ptrdiff_t)glow_glBufferData, target, size, data, usage);
}
PFNGLBUFFERDATAPROC glow_debug_glBufferData = glow_debug_impl_glBufferData;

static void glow_debug_impl_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix4fv", (void*)(ptrdiff_t)glow_glUniformMatrix4fv, location, count, transpose, value);
  glow_glUniformMatrix4fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix4fv", (void*)(ptrdiff_t)glow_glUniformMatrix4fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4FVPROC glow_debug_glUniformMatrix4fv = glow_debug_impl_glUniformMatrix4fv;

static void glow_debug_impl_glDrawArraysIndirect(GLenum mode, const void *indirect) {

  glow_pre_callback_("glDrawArraysIndirect", (void*)(ptrdiff_t)glow_glDrawArraysIndirect, mode, indirect);
  glow_glDrawArraysIndirect(mode, indirect);
  glow_post_callback_("glDrawArraysIndirect", (void*)(ptrdiff_t)glow_glDrawArraysIndirect, mode, indirect);
}
PFNGLDRAWARRAYSINDIRECTPROC glow_debug_glDrawArraysIndirect = glow_debug_impl_glDrawArraysIndirect;

static void glow_debug_impl_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glProgramUniform1dv", (void*)(ptrdiff_t)glow_glProgramUniform1dv, program, location, count, value);
  glow_glProgramUniform1dv(program, location, count, value);
  glow_post_callback_("glProgramUniform1dv", (void*)(ptrdiff_t)glow_glProgramUniform1dv, program, location, count, value);
}
PFNGLPROGRAMUNIFORM1DVPROC glow_debug_glProgramUniform1dv = glow_debug_impl_glProgramUniform1dv;

static void glow_debug_impl_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {

  glow_pre_callback_("glDrawElementsInstancedBaseVertexBaseInstance", (void*)(ptrdiff_t)glow_glDrawElementsInstancedBaseVertexBaseInstance, mode, count, type, indices, instancecount, basevertex, baseinstance);
  glow_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
  glow_post_callback_("glDrawElementsInstancedBaseVertexBaseInstance", (void*)(ptrdiff_t)glow_glDrawElementsInstancedBaseVertexBaseInstance, mode, count, type, indices, instancecount, basevertex, baseinstance);
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glow_debug_glDrawElementsInstancedBaseVertexBaseInstance = glow_debug_impl_glDrawElementsInstancedBaseVertexBaseInstance;

static void glow_debug_impl_glLoadMatrixd(const GLdouble *m) {

  glow_pre_callback_("glLoadMatrixd", (void*)(ptrdiff_t)glow_glLoadMatrixd, m);
  glow_glLoadMatrixd(m);
  glow_post_callback_("glLoadMatrixd", (void*)(ptrdiff_t)glow_glLoadMatrixd, m);
}
PFNGLLOADMATRIXDPROC glow_debug_glLoadMatrixd = glow_debug_impl_glLoadMatrixd;

static void glow_debug_impl_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {

  glow_pre_callback_("glCompressedTexSubImage2D", (void*)(ptrdiff_t)glow_glCompressedTexSubImage2D, target, level, xoffset, yoffset, width, height, format, imageSize, data);
  glow_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  glow_post_callback_("glCompressedTexSubImage2D", (void*)(ptrdiff_t)glow_glCompressedTexSubImage2D, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glow_debug_glCompressedTexSubImage2D = glow_debug_impl_glCompressedTexSubImage2D;

static void glow_debug_impl_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix4x2fv", (void*)(ptrdiff_t)glow_glUniformMatrix4x2fv, location, count, transpose, value);
  glow_glUniformMatrix4x2fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix4x2fv", (void*)(ptrdiff_t)glow_glUniformMatrix4x2fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X2FVPROC glow_debug_glUniformMatrix4x2fv = glow_debug_impl_glUniformMatrix4x2fv;

static void glow_debug_impl_glBindFramebuffer(GLenum target, GLuint framebuffer) {

  glow_pre_callback_("glBindFramebuffer", (void*)(ptrdiff_t)glow_glBindFramebuffer, target, framebuffer);
  glow_glBindFramebuffer(target, framebuffer);
  glow_post_callback_("glBindFramebuffer", (void*)(ptrdiff_t)glow_glBindFramebuffer, target, framebuffer);
}
PFNGLBINDFRAMEBUFFERPROC glow_debug_glBindFramebuffer = glow_debug_impl_glBindFramebuffer;

static void glow_debug_impl_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {

  glow_pre_callback_("glFramebufferTextureLayer", (void*)(ptrdiff_t)glow_glFramebufferTextureLayer, target, attachment, texture, level, layer);
  glow_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  glow_post_callback_("glFramebufferTextureLayer", (void*)(ptrdiff_t)glow_glFramebufferTextureLayer, target, attachment, texture, level, layer);
}
PFNGLFRAMEBUFFERTEXTURELAYERPROC glow_debug_glFramebufferTextureLayer = glow_debug_impl_glFramebufferTextureLayer;

static void glow_debug_impl_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {

  glow_pre_callback_("glGetActiveSubroutineUniformiv", (void*)(ptrdiff_t)glow_glGetActiveSubroutineUniformiv, program, shadertype, index, pname, values);
  glow_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
  glow_post_callback_("glGetActiveSubroutineUniformiv", (void*)(ptrdiff_t)glow_glGetActiveSubroutineUniformiv, program, shadertype, index, pname, values);
}
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glow_debug_glGetActiveSubroutineUniformiv = glow_debug_impl_glGetActiveSubroutineUniformiv;

static void glow_debug_impl_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {

  glow_pre_callback_("glRasterPos4d", (void*)(ptrdiff_t)glow_glRasterPos4d, x, y, z, w);
  glow_glRasterPos4d(x, y, z, w);
  glow_post_callback_("glRasterPos4d", (void*)(ptrdiff_t)glow_glRasterPos4d, x, y, z, w);
}
PFNGLRASTERPOS4DPROC glow_debug_glRasterPos4d = glow_debug_impl_glRasterPos4d;

static void glow_debug_impl_glWindowPos2dv(const GLdouble *v) {

  glow_pre_callback_("glWindowPos2dv", (void*)(ptrdiff_t)glow_glWindowPos2dv, v);
  glow_glWindowPos2dv(v);
  glow_post_callback_("glWindowPos2dv", (void*)(ptrdiff_t)glow_glWindowPos2dv, v);
}
PFNGLWINDOWPOS2DVPROC glow_debug_glWindowPos2dv = glow_debug_impl_glWindowPos2dv;

static void glow_debug_impl_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {

  glow_pre_callback_("glColor3b", (void*)(ptrdiff_t)glow_glColor3b, red, green, blue);
  glow_glColor3b(red, green, blue);
  glow_post_callback_("glColor3b", (void*)(ptrdiff_t)glow_glColor3b, red, green, blue);
}
PFNGLCOLOR3BPROC glow_debug_glColor3b = glow_debug_impl_glColor3b;

static void glow_debug_impl_glMultMatrixd(const GLdouble *m) {

  glow_pre_callback_("glMultMatrixd", (void*)(ptrdiff_t)glow_glMultMatrixd, m);
  glow_glMultMatrixd(m);
  glow_post_callback_("glMultMatrixd", (void*)(ptrdiff_t)glow_glMultMatrixd, m);
}
PFNGLMULTMATRIXDPROC glow_debug_glMultMatrixd = glow_debug_impl_glMultMatrixd;

static void glow_debug_impl_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {

  glow_pre_callback_("glTexEnvf", (void*)(ptrdiff_t)glow_glTexEnvf, target, pname, param);
  glow_glTexEnvf(target, pname, param);
  glow_post_callback_("glTexEnvf", (void*)(ptrdiff_t)glow_glTexEnvf, target, pname, param);
}
PFNGLTEXENVFPROC glow_debug_glTexEnvf = glow_debug_impl_glTexEnvf;

static void glow_debug_impl_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {

  glow_pre_callback_("glVertexAttrib2d", (void*)(ptrdiff_t)glow_glVertexAttrib2d, index, x, y);
  glow_glVertexAttrib2d(index, x, y);
  glow_post_callback_("glVertexAttrib2d", (void*)(ptrdiff_t)glow_glVertexAttrib2d, index, x, y);
}
PFNGLVERTEXATTRIB2DPROC glow_debug_glVertexAttrib2d = glow_debug_impl_glVertexAttrib2d;

static void glow_debug_impl_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {

  glow_pre_callback_("glMultiTexCoordP2ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP2ui, texture, type, coords);
  glow_glMultiTexCoordP2ui(texture, type, coords);
  glow_post_callback_("glMultiTexCoordP2ui", (void*)(ptrdiff_t)glow_glMultiTexCoordP2ui, texture, type, coords);
}
PFNGLMULTITEXCOORDP2UIPROC glow_debug_glMultiTexCoordP2ui = glow_debug_impl_glMultiTexCoordP2ui;

static void glow_debug_impl_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {

  glow_pre_callback_("glProgramUniform3f", (void*)(ptrdiff_t)glow_glProgramUniform3f, program, location, v0, v1, v2);
  glow_glProgramUniform3f(program, location, v0, v1, v2);
  glow_post_callback_("glProgramUniform3f", (void*)(ptrdiff_t)glow_glProgramUniform3f, program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3FPROC glow_debug_glProgramUniform3f = glow_debug_impl_glProgramUniform3f;

static void glow_debug_impl_glMateriali(GLenum face, GLenum pname, GLint param) {

  glow_pre_callback_("glMateriali", (void*)(ptrdiff_t)glow_glMateriali, face, pname, param);
  glow_glMateriali(face, pname, param);
  glow_post_callback_("glMateriali", (void*)(ptrdiff_t)glow_glMateriali, face, pname, param);
}
PFNGLMATERIALIPROC glow_debug_glMateriali = glow_debug_impl_glMateriali;

static void glow_debug_impl_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {

  glow_pre_callback_("glMapGrid1f", (void*)(ptrdiff_t)glow_glMapGrid1f, un, u1, u2);
  glow_glMapGrid1f(un, u1, u2);
  glow_post_callback_("glMapGrid1f", (void*)(ptrdiff_t)glow_glMapGrid1f, un, u1, u2);
}
PFNGLMAPGRID1FPROC glow_debug_glMapGrid1f = glow_debug_impl_glMapGrid1f;

static void glow_debug_impl_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {

  glow_pre_callback_("glMapGrid2d", (void*)(ptrdiff_t)glow_glMapGrid2d, un, u1, u2, vn, v1, v2);
  glow_glMapGrid2d(un, u1, u2, vn, v1, v2);
  glow_post_callback_("glMapGrid2d", (void*)(ptrdiff_t)glow_glMapGrid2d, un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2DPROC glow_debug_glMapGrid2d = glow_debug_impl_glMapGrid2d;

static void glow_debug_impl_glGetUniformuiv(GLuint program, GLint location, GLuint *params) {

  glow_pre_callback_("glGetUniformuiv", (void*)(ptrdiff_t)glow_glGetUniformuiv, program, location, params);
  glow_glGetUniformuiv(program, location, params);
  glow_post_callback_("glGetUniformuiv", (void*)(ptrdiff_t)glow_glGetUniformuiv, program, location, params);
}
PFNGLGETUNIFORMUIVPROC glow_debug_glGetUniformuiv = glow_debug_impl_glGetUniformuiv;

static void glow_debug_impl_glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {

  glow_pre_callback_("glUniform3dv", (void*)(ptrdiff_t)glow_glUniform3dv, location, count, value);
  glow_glUniform3dv(location, count, value);
  glow_post_callback_("glUniform3dv", (void*)(ptrdiff_t)glow_glUniform3dv, location, count, value);
}
PFNGLUNIFORM3DVPROC glow_debug_glUniform3dv = glow_debug_impl_glUniform3dv;

static void glow_debug_impl_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {

  glow_pre_callback_("glUseProgramStages", (void*)(ptrdiff_t)glow_glUseProgramStages, pipeline, stages, program);
  glow_glUseProgramStages(pipeline, stages, program);
  glow_post_callback_("glUseProgramStages", (void*)(ptrdiff_t)glow_glUseProgramStages, pipeline, stages, program);
}
PFNGLUSEPROGRAMSTAGESPROC glow_debug_glUseProgramStages = glow_debug_impl_glUseProgramStages;

static void glow_debug_impl_glRasterPos4iv(const GLint *v) {

  glow_pre_callback_("glRasterPos4iv", (void*)(ptrdiff_t)glow_glRasterPos4iv, v);
  glow_glRasterPos4iv(v);
  glow_post_callback_("glRasterPos4iv", (void*)(ptrdiff_t)glow_glRasterPos4iv, v);
}
PFNGLRASTERPOS4IVPROC glow_debug_glRasterPos4iv = glow_debug_impl_glRasterPos4iv;

static void glow_debug_impl_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {

  glow_pre_callback_("glRasterPos4s", (void*)(ptrdiff_t)glow_glRasterPos4s, x, y, z, w);
  glow_glRasterPos4s(x, y, z, w);
  glow_post_callback_("glRasterPos4s", (void*)(ptrdiff_t)glow_glRasterPos4s, x, y, z, w);
}
PFNGLRASTERPOS4SPROC glow_debug_glRasterPos4s = glow_debug_impl_glRasterPos4s;

static void glow_debug_impl_glRasterPos3fv(const GLfloat *v) {

  glow_pre_callback_("glRasterPos3fv", (void*)(ptrdiff_t)glow_glRasterPos3fv, v);
  glow_glRasterPos3fv(v);
  glow_post_callback_("glRasterPos3fv", (void*)(ptrdiff_t)glow_glRasterPos3fv, v);
}
PFNGLRASTERPOS3FVPROC glow_debug_glRasterPos3fv = glow_debug_impl_glRasterPos3fv;

static void glow_debug_impl_glNormal3fv(const GLfloat *v) {

  glow_pre_callback_("glNormal3fv", (void*)(ptrdiff_t)glow_glNormal3fv, v);
  glow_glNormal3fv(v);
  glow_post_callback_("glNormal3fv", (void*)(ptrdiff_t)glow_glNormal3fv, v);
}
PFNGLNORMAL3FVPROC glow_debug_glNormal3fv = glow_debug_impl_glNormal3fv;

static void glow_debug_impl_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {

  glow_pre_callback_("glGetShaderInfoLog", (void*)(ptrdiff_t)glow_glGetShaderInfoLog, shader, bufSize, length, infoLog);
  glow_glGetShaderInfoLog(shader, bufSize, length, infoLog);
  glow_post_callback_("glGetShaderInfoLog", (void*)(ptrdiff_t)glow_glGetShaderInfoLog, shader, bufSize, length, infoLog);
}
PFNGLGETSHADERINFOLOGPROC glow_debug_glGetShaderInfoLog = glow_debug_impl_glGetShaderInfoLog;

static void glow_debug_impl_glVertexAttrib1f(GLuint index, GLfloat x) {

  glow_pre_callback_("glVertexAttrib1f", (void*)(ptrdiff_t)glow_glVertexAttrib1f, index, x);
  glow_glVertexAttrib1f(index, x);
  glow_post_callback_("glVertexAttrib1f", (void*)(ptrdiff_t)glow_glVertexAttrib1f, index, x);
}
PFNGLVERTEXATTRIB1FPROC glow_debug_glVertexAttrib1f = glow_debug_impl_glVertexAttrib1f;

static void glow_debug_impl_glDisablei(GLenum target, GLuint index) {

  glow_pre_callback_("glDisablei", (void*)(ptrdiff_t)glow_glDisablei, target, index);
  glow_glDisablei(target, index);
  glow_post_callback_("glDisablei", (void*)(ptrdiff_t)glow_glDisablei, target, index);
}
PFNGLDISABLEIPROC glow_debug_glDisablei = glow_debug_impl_glDisablei;

static void glow_debug_impl_glVertexAttribI4usv(GLuint index, const GLushort *v) {

  glow_pre_callback_("glVertexAttribI4usv", (void*)(ptrdiff_t)glow_glVertexAttribI4usv, index, v);
  glow_glVertexAttribI4usv(index, v);
  glow_post_callback_("glVertexAttribI4usv", (void*)(ptrdiff_t)glow_glVertexAttribI4usv, index, v);
}
PFNGLVERTEXATTRIBI4USVPROC glow_debug_glVertexAttribI4usv = glow_debug_impl_glVertexAttribI4usv;

static void glow_debug_impl_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {

  glow_pre_callback_("glDeleteTransformFeedbacks", (void*)(ptrdiff_t)glow_glDeleteTransformFeedbacks, n, ids);
  glow_glDeleteTransformFeedbacks(n, ids);
  glow_post_callback_("glDeleteTransformFeedbacks", (void*)(ptrdiff_t)glow_glDeleteTransformFeedbacks, n, ids);
}
PFNGLDELETETRANSFORMFEEDBACKSPROC glow_debug_glDeleteTransformFeedbacks = glow_debug_impl_glDeleteTransformFeedbacks;

static void glow_debug_impl_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {

  glow_pre_callback_("glDrawArraysInstancedBaseInstance", (void*)(ptrdiff_t)glow_glDrawArraysInstancedBaseInstance, mode, first, count, instancecount, baseinstance);
  glow_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
  glow_post_callback_("glDrawArraysInstancedBaseInstance", (void*)(ptrdiff_t)glow_glDrawArraysInstancedBaseInstance, mode, first, count, instancecount, baseinstance);
}
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glow_debug_glDrawArraysInstancedBaseInstance = glow_debug_impl_glDrawArraysInstancedBaseInstance;

static void glow_debug_impl_glColor4usv(const GLushort *v) {

  glow_pre_callback_("glColor4usv", (void*)(ptrdiff_t)glow_glColor4usv, v);
  glow_glColor4usv(v);
  glow_post_callback_("glColor4usv", (void*)(ptrdiff_t)glow_glColor4usv, v);
}
PFNGLCOLOR4USVPROC glow_debug_glColor4usv = glow_debug_impl_glColor4usv;

static void glow_debug_impl_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {

  glow_pre_callback_("glColor3ub", (void*)(ptrdiff_t)glow_glColor3ub, red, green, blue);
  glow_glColor3ub(red, green, blue);
  glow_post_callback_("glColor3ub", (void*)(ptrdiff_t)glow_glColor3ub, red, green, blue);
}
PFNGLCOLOR3UBPROC glow_debug_glColor3ub = glow_debug_impl_glColor3ub;

static void glow_debug_impl_glFogi(GLenum pname, GLint param) {

  glow_pre_callback_("glFogi", (void*)(ptrdiff_t)glow_glFogi, pname, param);
  glow_glFogi(pname, param);
  glow_post_callback_("glFogi", (void*)(ptrdiff_t)glow_glFogi, pname, param);
}
PFNGLFOGIPROC glow_debug_glFogi = glow_debug_impl_glFogi;

static void glow_debug_impl_glAccum(GLenum op, GLfloat value) {

  glow_pre_callback_("glAccum", (void*)(ptrdiff_t)glow_glAccum, op, value);
  glow_glAccum(op, value);
  glow_post_callback_("glAccum", (void*)(ptrdiff_t)glow_glAccum, op, value);
}
PFNGLACCUMPROC glow_debug_glAccum = glow_debug_impl_glAccum;

static void glow_debug_impl_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glUniformMatrix2x3fv", (void*)(ptrdiff_t)glow_glUniformMatrix2x3fv, location, count, transpose, value);
  glow_glUniformMatrix2x3fv(location, count, transpose, value);
  glow_post_callback_("glUniformMatrix2x3fv", (void*)(ptrdiff_t)glow_glUniformMatrix2x3fv, location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X3FVPROC glow_debug_glUniformMatrix2x3fv = glow_debug_impl_glUniformMatrix2x3fv;

static void glow_debug_impl_glTexCoordP2uiv(GLenum type, const GLuint *coords) {

  glow_pre_callback_("glTexCoordP2uiv", (void*)(ptrdiff_t)glow_glTexCoordP2uiv, type, coords);
  glow_glTexCoordP2uiv(type, coords);
  glow_post_callback_("glTexCoordP2uiv", (void*)(ptrdiff_t)glow_glTexCoordP2uiv, type, coords);
}
PFNGLTEXCOORDP2UIVPROC glow_debug_glTexCoordP2uiv = glow_debug_impl_glTexCoordP2uiv;

static void glow_debug_impl_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glTexImage2D", (void*)(ptrdiff_t)glow_glTexImage2D, target, level, internalformat, width, height, border, format, type, pixels);
  glow_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  glow_post_callback_("glTexImage2D", (void*)(ptrdiff_t)glow_glTexImage2D, target, level, internalformat, width, height, border, format, type, pixels);
}
PFNGLTEXIMAGE2DPROC glow_debug_glTexImage2D = glow_debug_impl_glTexImage2D;

static void glow_debug_impl_glMatrixMode(GLenum mode) {

  glow_pre_callback_("glMatrixMode", (void*)(ptrdiff_t)glow_glMatrixMode, mode);
  glow_glMatrixMode(mode);
  glow_post_callback_("glMatrixMode", (void*)(ptrdiff_t)glow_glMatrixMode, mode);
}
PFNGLMATRIXMODEPROC glow_debug_glMatrixMode = glow_debug_impl_glMatrixMode;

static void glow_debug_impl_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {

  glow_pre_callback_("glTexSubImage2D", (void*)(ptrdiff_t)glow_glTexSubImage2D, target, level, xoffset, yoffset, width, height, format, type, pixels);
  glow_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  glow_post_callback_("glTexSubImage2D", (void*)(ptrdiff_t)glow_glTexSubImage2D, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXSUBIMAGE2DPROC glow_debug_glTexSubImage2D = glow_debug_impl_glTexSubImage2D;

static void glow_debug_impl_glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glFogCoordPointer", (void*)(ptrdiff_t)glow_glFogCoordPointer, type, stride, pointer);
  glow_glFogCoordPointer(type, stride, pointer);
  glow_post_callback_("glFogCoordPointer", (void*)(ptrdiff_t)glow_glFogCoordPointer, type, stride, pointer);
}
PFNGLFOGCOORDPOINTERPROC glow_debug_glFogCoordPointer = glow_debug_impl_glFogCoordPointer;

static GLboolean glow_debug_impl_glUnmapBuffer(GLenum target) {

  GLboolean ret;
  glow_pre_callback_("glUnmapBuffer", (void*)(ptrdiff_t)glow_glUnmapBuffer, target);
  ret = glow_glUnmapBuffer(target);
  glow_post_callback_("glUnmapBuffer", (void*)(ptrdiff_t)glow_glUnmapBuffer, target);
  return ret;
}
PFNGLUNMAPBUFFERPROC glow_debug_glUnmapBuffer = glow_debug_impl_glUnmapBuffer;

static void glow_debug_impl_glTexCoordP2ui(GLenum type, GLuint coords) {

  glow_pre_callback_("glTexCoordP2ui", (void*)(ptrdiff_t)glow_glTexCoordP2ui, type, coords);
  glow_glTexCoordP2ui(type, coords);
  glow_post_callback_("glTexCoordP2ui", (void*)(ptrdiff_t)glow_glTexCoordP2ui, type, coords);
}
PFNGLTEXCOORDP2UIPROC glow_debug_glTexCoordP2ui = glow_debug_impl_glTexCoordP2ui;

static void glow_debug_impl_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {

  glow_pre_callback_("glTexStorage1D", (void*)(ptrdiff_t)glow_glTexStorage1D, target, levels, internalformat, width);
  glow_glTexStorage1D(target, levels, internalformat, width);
  glow_post_callback_("glTexStorage1D", (void*)(ptrdiff_t)glow_glTexStorage1D, target, levels, internalformat, width);
}
PFNGLTEXSTORAGE1DPROC glow_debug_glTexStorage1D = glow_debug_impl_glTexStorage1D;

static void glow_debug_impl_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {

  glow_pre_callback_("glGetProgramResourceiv", (void*)(ptrdiff_t)glow_glGetProgramResourceiv, program, programInterface, index, propCount, props, bufSize, length, params);
  glow_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
  glow_post_callback_("glGetProgramResourceiv", (void*)(ptrdiff_t)glow_glGetProgramResourceiv, program, programInterface, index, propCount, props, bufSize, length, params);
}
PFNGLGETPROGRAMRESOURCEIVPROC glow_debug_glGetProgramResourceiv = glow_debug_impl_glGetProgramResourceiv;

static void glow_debug_impl_glColor3i(GLint red, GLint green, GLint blue) {

  glow_pre_callback_("glColor3i", (void*)(ptrdiff_t)glow_glColor3i, red, green, blue);
  glow_glColor3i(red, green, blue);
  glow_post_callback_("glColor3i", (void*)(ptrdiff_t)glow_glColor3i, red, green, blue);
}
PFNGLCOLOR3IPROC glow_debug_glColor3i = glow_debug_impl_glColor3i;

static void glow_debug_impl_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {

  glow_pre_callback_("glMapGrid1d", (void*)(ptrdiff_t)glow_glMapGrid1d, un, u1, u2);
  glow_glMapGrid1d(un, u1, u2);
  glow_post_callback_("glMapGrid1d", (void*)(ptrdiff_t)glow_glMapGrid1d, un, u1, u2);
}
PFNGLMAPGRID1DPROC glow_debug_glMapGrid1d = glow_debug_impl_glMapGrid1d;

static void glow_debug_impl_glBindBuffer(GLenum target, GLuint buffer) {

  glow_pre_callback_("glBindBuffer", (void*)(ptrdiff_t)glow_glBindBuffer, target, buffer);
  glow_glBindBuffer(target, buffer);
  glow_post_callback_("glBindBuffer", (void*)(ptrdiff_t)glow_glBindBuffer, target, buffer);
}
PFNGLBINDBUFFERPROC glow_debug_glBindBuffer = glow_debug_impl_glBindBuffer;

static void glow_debug_impl_glUniform2iv(GLint location, GLsizei count, const GLint *value) {

  glow_pre_callback_("glUniform2iv", (void*)(ptrdiff_t)glow_glUniform2iv, location, count, value);
  glow_glUniform2iv(location, count, value);
  glow_post_callback_("glUniform2iv", (void*)(ptrdiff_t)glow_glUniform2iv, location, count, value);
}
PFNGLUNIFORM2IVPROC glow_debug_glUniform2iv = glow_debug_impl_glUniform2iv;

static void glow_debug_impl_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {

  glow_pre_callback_("glSamplerParameterIiv", (void*)(ptrdiff_t)glow_glSamplerParameterIiv, sampler, pname, param);
  glow_glSamplerParameterIiv(sampler, pname, param);
  glow_post_callback_("glSamplerParameterIiv", (void*)(ptrdiff_t)glow_glSamplerParameterIiv, sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIIVPROC glow_debug_glSamplerParameterIiv = glow_debug_impl_glSamplerParameterIiv;

static void glow_debug_impl_glVertex3i(GLint x, GLint y, GLint z) {

  glow_pre_callback_("glVertex3i", (void*)(ptrdiff_t)glow_glVertex3i, x, y, z);
  glow_glVertex3i(x, y, z);
  glow_post_callback_("glVertex3i", (void*)(ptrdiff_t)glow_glVertex3i, x, y, z);
}
PFNGLVERTEX3IPROC glow_debug_glVertex3i = glow_debug_impl_glVertex3i;

static void glow_debug_impl_glVertex4fv(const GLfloat *v) {

  glow_pre_callback_("glVertex4fv", (void*)(ptrdiff_t)glow_glVertex4fv, v);
  glow_glVertex4fv(v);
  glow_post_callback_("glVertex4fv", (void*)(ptrdiff_t)glow_glVertex4fv, v);
}
PFNGLVERTEX4FVPROC glow_debug_glVertex4fv = glow_debug_impl_glVertex4fv;

static void glow_debug_impl_glLoadMatrixf(const GLfloat *m) {

  glow_pre_callback_("glLoadMatrixf", (void*)(ptrdiff_t)glow_glLoadMatrixf, m);
  glow_glLoadMatrixf(m);
  glow_post_callback_("glLoadMatrixf", (void*)(ptrdiff_t)glow_glLoadMatrixf, m);
}
PFNGLLOADMATRIXFPROC glow_debug_glLoadMatrixf = glow_debug_impl_glLoadMatrixf;

static void glow_debug_impl_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {

  glow_pre_callback_("glMultiTexCoord4s", (void*)(ptrdiff_t)glow_glMultiTexCoord4s, target, s, t, r, q);
  glow_glMultiTexCoord4s(target, s, t, r, q);
  glow_post_callback_("glMultiTexCoord4s", (void*)(ptrdiff_t)glow_glMultiTexCoord4s, target, s, t, r, q);
}
PFNGLMULTITEXCOORD4SPROC glow_debug_glMultiTexCoord4s = glow_debug_impl_glMultiTexCoord4s;

static void glow_debug_impl_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glVertexAttrib3f", (void*)(ptrdiff_t)glow_glVertexAttrib3f, index, x, y, z);
  glow_glVertexAttrib3f(index, x, y, z);
  glow_post_callback_("glVertexAttrib3f", (void*)(ptrdiff_t)glow_glVertexAttrib3f, index, x, y, z);
}
PFNGLVERTEXATTRIB3FPROC glow_debug_glVertexAttrib3f = glow_debug_impl_glVertexAttrib3f;

static void glow_debug_impl_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {

  glow_pre_callback_("glGetInteger64i_v", (void*)(ptrdiff_t)glow_glGetInteger64i_v, target, index, data);
  glow_glGetInteger64i_v(target, index, data);
  glow_post_callback_("glGetInteger64i_v", (void*)(ptrdiff_t)glow_glGetInteger64i_v, target, index, data);
}
PFNGLGETINTEGER64I_VPROC glow_debug_glGetInteger64i_v = glow_debug_impl_glGetInteger64i_v;

static GLubyte glow_debug_impl_glGetString(GLenum name) {

  GLubyte ret;
  glow_pre_callback_("glGetString", (void*)(ptrdiff_t)glow_glGetString, name);
  ret = glow_glGetString(name);
  glow_post_callback_("glGetString", (void*)(ptrdiff_t)glow_glGetString, name);
  return ret;
}
PFNGLGETSTRINGPROC glow_debug_glGetString = glow_debug_impl_glGetString;

static void glow_debug_impl_glEndQuery(GLenum target) {

  glow_pre_callback_("glEndQuery", (void*)(ptrdiff_t)glow_glEndQuery, target);
  glow_glEndQuery(target);
  glow_post_callback_("glEndQuery", (void*)(ptrdiff_t)glow_glEndQuery, target);
}
PFNGLENDQUERYPROC glow_debug_glEndQuery = glow_debug_impl_glEndQuery;

static void glow_debug_impl_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {

  glow_pre_callback_("glRenderbufferStorage", (void*)(ptrdiff_t)glow_glRenderbufferStorage, target, internalformat, width, height);
  glow_glRenderbufferStorage(target, internalformat, width, height);
  glow_post_callback_("glRenderbufferStorage", (void*)(ptrdiff_t)glow_glRenderbufferStorage, target, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEPROC glow_debug_glRenderbufferStorage = glow_debug_impl_glRenderbufferStorage;

static void glow_debug_impl_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {

  glow_pre_callback_("glGetProgramResourceName", (void*)(ptrdiff_t)glow_glGetProgramResourceName, program, programInterface, index, bufSize, length, name);
  glow_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  glow_post_callback_("glGetProgramResourceName", (void*)(ptrdiff_t)glow_glGetProgramResourceName, program, programInterface, index, bufSize, length, name);
}
PFNGLGETPROGRAMRESOURCENAMEPROC glow_debug_glGetProgramResourceName = glow_debug_impl_glGetProgramResourceName;

static void glow_debug_impl_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {

  glow_pre_callback_("glMultiTexCoord2i", (void*)(ptrdiff_t)glow_glMultiTexCoord2i, target, s, t);
  glow_glMultiTexCoord2i(target, s, t);
  glow_post_callback_("glMultiTexCoord2i", (void*)(ptrdiff_t)glow_glMultiTexCoord2i, target, s, t);
}
PFNGLMULTITEXCOORD2IPROC glow_debug_glMultiTexCoord2i = glow_debug_impl_glMultiTexCoord2i;

static void glow_debug_impl_glTexCoord1d(GLdouble s) {

  glow_pre_callback_("glTexCoord1d", (void*)(ptrdiff_t)glow_glTexCoord1d, s);
  glow_glTexCoord1d(s);
  glow_post_callback_("glTexCoord1d", (void*)(ptrdiff_t)glow_glTexCoord1d, s);
}
PFNGLTEXCOORD1DPROC glow_debug_glTexCoord1d = glow_debug_impl_glTexCoord1d;

static void glow_debug_impl_glTexCoord2d(GLdouble s, GLdouble t) {

  glow_pre_callback_("glTexCoord2d", (void*)(ptrdiff_t)glow_glTexCoord2d, s, t);
  glow_glTexCoord2d(s, t);
  glow_post_callback_("glTexCoord2d", (void*)(ptrdiff_t)glow_glTexCoord2d, s, t);
}
PFNGLTEXCOORD2DPROC glow_debug_glTexCoord2d = glow_debug_impl_glTexCoord2d;

static void glow_debug_impl_glPixelTransferf(GLenum pname, GLfloat param) {

  glow_pre_callback_("glPixelTransferf", (void*)(ptrdiff_t)glow_glPixelTransferf, pname, param);
  glow_glPixelTransferf(pname, param);
  glow_post_callback_("glPixelTransferf", (void*)(ptrdiff_t)glow_glPixelTransferf, pname, param);
}
PFNGLPIXELTRANSFERFPROC glow_debug_glPixelTransferf = glow_debug_impl_glPixelTransferf;

static void glow_debug_impl_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {

  glow_pre_callback_("glPixelMapusv", (void*)(ptrdiff_t)glow_glPixelMapusv, map, mapsize, values);
  glow_glPixelMapusv(map, mapsize, values);
  glow_post_callback_("glPixelMapusv", (void*)(ptrdiff_t)glow_glPixelMapusv, map, mapsize, values);
}
PFNGLPIXELMAPUSVPROC glow_debug_glPixelMapusv = glow_debug_impl_glPixelMapusv;

static void glow_debug_impl_glRasterPos2i(GLint x, GLint y) {

  glow_pre_callback_("glRasterPos2i", (void*)(ptrdiff_t)glow_glRasterPos2i, x, y);
  glow_glRasterPos2i(x, y);
  glow_post_callback_("glRasterPos2i", (void*)(ptrdiff_t)glow_glRasterPos2i, x, y);
}
PFNGLRASTERPOS2IPROC glow_debug_glRasterPos2i = glow_debug_impl_glRasterPos2i;

static void glow_debug_impl_glRasterPos2d(GLdouble x, GLdouble y) {

  glow_pre_callback_("glRasterPos2d", (void*)(ptrdiff_t)glow_glRasterPos2d, x, y);
  glow_glRasterPos2d(x, y);
  glow_post_callback_("glRasterPos2d", (void*)(ptrdiff_t)glow_glRasterPos2d, x, y);
}
PFNGLRASTERPOS2DPROC glow_debug_glRasterPos2d = glow_debug_impl_glRasterPos2d;

static void glow_debug_impl_glPolygonStipple(const GLubyte *mask) {

  glow_pre_callback_("glPolygonStipple", (void*)(ptrdiff_t)glow_glPolygonStipple, mask);
  glow_glPolygonStipple(mask);
  glow_post_callback_("glPolygonStipple", (void*)(ptrdiff_t)glow_glPolygonStipple, mask);
}
PFNGLPOLYGONSTIPPLEPROC glow_debug_glPolygonStipple = glow_debug_impl_glPolygonStipple;

static void glow_debug_impl_glGetClipPlane(GLenum plane, GLdouble *equation) {

  glow_pre_callback_("glGetClipPlane", (void*)(ptrdiff_t)glow_glGetClipPlane, plane, equation);
  glow_glGetClipPlane(plane, equation);
  glow_post_callback_("glGetClipPlane", (void*)(ptrdiff_t)glow_glGetClipPlane, plane, equation);
}
PFNGLGETCLIPPLANEPROC glow_debug_glGetClipPlane = glow_debug_impl_glGetClipPlane;

static void glow_debug_impl_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {

  glow_pre_callback_("glGetBufferSubData", (void*)(ptrdiff_t)glow_glGetBufferSubData, target, offset, size, data);
  glow_glGetBufferSubData(target, offset, size, data);
  glow_post_callback_("glGetBufferSubData", (void*)(ptrdiff_t)glow_glGetBufferSubData, target, offset, size, data);
}
PFNGLGETBUFFERSUBDATAPROC glow_debug_glGetBufferSubData = glow_debug_impl_glGetBufferSubData;

static void glow_debug_impl_glPatchParameterfv(GLenum pname, const GLfloat *values) {

  glow_pre_callback_("glPatchParameterfv", (void*)(ptrdiff_t)glow_glPatchParameterfv, pname, values);
  glow_glPatchParameterfv(pname, values);
  glow_post_callback_("glPatchParameterfv", (void*)(ptrdiff_t)glow_glPatchParameterfv, pname, values);
}
PFNGLPATCHPARAMETERFVPROC glow_debug_glPatchParameterfv = glow_debug_impl_glPatchParameterfv;

static void glow_debug_impl_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {

  glow_pre_callback_("glVertexAttribIFormat", (void*)(ptrdiff_t)glow_glVertexAttribIFormat, attribindex, size, type, relativeoffset);
  glow_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  glow_post_callback_("glVertexAttribIFormat", (void*)(ptrdiff_t)glow_glVertexAttribIFormat, attribindex, size, type, relativeoffset);
}
PFNGLVERTEXATTRIBIFORMATPROC glow_debug_glVertexAttribIFormat = glow_debug_impl_glVertexAttribIFormat;

static void glow_debug_impl_glDisable(GLenum cap) {

  glow_pre_callback_("glDisable", (void*)(ptrdiff_t)glow_glDisable, cap);
  glow_glDisable(cap);
  glow_post_callback_("glDisable", (void*)(ptrdiff_t)glow_glDisable, cap);
}
PFNGLDISABLEPROC glow_debug_glDisable = glow_debug_impl_glDisable;

static void glow_debug_impl_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {

  glow_pre_callback_("glTexGendv", (void*)(ptrdiff_t)glow_glTexGendv, coord, pname, params);
  glow_glTexGendv(coord, pname, params);
  glow_post_callback_("glTexGendv", (void*)(ptrdiff_t)glow_glTexGendv, coord, pname, params);
}
PFNGLTEXGENDVPROC glow_debug_glTexGendv = glow_debug_impl_glTexGendv;

static void glow_debug_impl_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {

  glow_pre_callback_("glTransformFeedbackVaryings", (void*)(ptrdiff_t)glow_glTransformFeedbackVaryings, program, count, varyings, bufferMode);
  glow_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  glow_post_callback_("glTransformFeedbackVaryings", (void*)(ptrdiff_t)glow_glTransformFeedbackVaryings, program, count, varyings, bufferMode);
}
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glow_debug_glTransformFeedbackVaryings = glow_debug_impl_glTransformFeedbackVaryings;

static void glow_debug_impl_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {

  glow_pre_callback_("glGetVertexAttribIuiv", (void*)(ptrdiff_t)glow_glGetVertexAttribIuiv, index, pname, params);
  glow_glGetVertexAttribIuiv(index, pname, params);
  glow_post_callback_("glGetVertexAttribIuiv", (void*)(ptrdiff_t)glow_glGetVertexAttribIuiv, index, pname, params);
}
PFNGLGETVERTEXATTRIBIUIVPROC glow_debug_glGetVertexAttribIuiv = glow_debug_impl_glGetVertexAttribIuiv;

static void glow_debug_impl_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {

  glow_pre_callback_("glBindFragDataLocation", (void*)(ptrdiff_t)glow_glBindFragDataLocation, program, color, name);
  glow_glBindFragDataLocation(program, color, name);
  glow_post_callback_("glBindFragDataLocation", (void*)(ptrdiff_t)glow_glBindFragDataLocation, program, color, name);
}
PFNGLBINDFRAGDATALOCATIONPROC glow_debug_glBindFragDataLocation = glow_debug_impl_glBindFragDataLocation;

static void glow_debug_impl_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {

  glow_pre_callback_("glRenderbufferStorageMultisample", (void*)(ptrdiff_t)glow_glRenderbufferStorageMultisample, target, samples, internalformat, width, height);
  glow_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  glow_post_callback_("glRenderbufferStorageMultisample", (void*)(ptrdiff_t)glow_glRenderbufferStorageMultisample, target, samples, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glow_debug_glRenderbufferStorageMultisample = glow_debug_impl_glRenderbufferStorageMultisample;

static void glow_debug_impl_glColorP3uiv(GLenum type, const GLuint *color) {

  glow_pre_callback_("glColorP3uiv", (void*)(ptrdiff_t)glow_glColorP3uiv, type, color);
  glow_glColorP3uiv(type, color);
  glow_post_callback_("glColorP3uiv", (void*)(ptrdiff_t)glow_glColorP3uiv, type, color);
}
PFNGLCOLORP3UIVPROC glow_debug_glColorP3uiv = glow_debug_impl_glColorP3uiv;

static void glow_debug_impl_glEnable(GLenum cap) {

  glow_pre_callback_("glEnable", (void*)(ptrdiff_t)glow_glEnable, cap);
  glow_glEnable(cap);
  glow_post_callback_("glEnable", (void*)(ptrdiff_t)glow_glEnable, cap);
}
PFNGLENABLEPROC glow_debug_glEnable = glow_debug_impl_glEnable;

static void glow_debug_impl_glTexGeni(GLenum coord, GLenum pname, GLint param) {

  glow_pre_callback_("glTexGeni", (void*)(ptrdiff_t)glow_glTexGeni, coord, pname, param);
  glow_glTexGeni(coord, pname, param);
  glow_post_callback_("glTexGeni", (void*)(ptrdiff_t)glow_glTexGeni, coord, pname, param);
}
PFNGLTEXGENIPROC glow_debug_glTexGeni = glow_debug_impl_glTexGeni;

static void glow_debug_impl_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {

  glow_pre_callback_("glMultiTexCoord3f", (void*)(ptrdiff_t)glow_glMultiTexCoord3f, target, s, t, r);
  glow_glMultiTexCoord3f(target, s, t, r);
  glow_post_callback_("glMultiTexCoord3f", (void*)(ptrdiff_t)glow_glMultiTexCoord3f, target, s, t, r);
}
PFNGLMULTITEXCOORD3FPROC glow_debug_glMultiTexCoord3f = glow_debug_impl_glMultiTexCoord3f;

static void glow_debug_impl_glPointParameteri(GLenum pname, GLint param) {

  glow_pre_callback_("glPointParameteri", (void*)(ptrdiff_t)glow_glPointParameteri, pname, param);
  glow_glPointParameteri(pname, param);
  glow_post_callback_("glPointParameteri", (void*)(ptrdiff_t)glow_glPointParameteri, pname, param);
}
PFNGLPOINTPARAMETERIPROC glow_debug_glPointParameteri = glow_debug_impl_glPointParameteri;

static void glow_debug_impl_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {

  glow_pre_callback_("glSamplerParameteri", (void*)(ptrdiff_t)glow_glSamplerParameteri, sampler, pname, param);
  glow_glSamplerParameteri(sampler, pname, param);
  glow_post_callback_("glSamplerParameteri", (void*)(ptrdiff_t)glow_glSamplerParameteri, sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIPROC glow_debug_glSamplerParameteri = glow_debug_impl_glSamplerParameteri;

static void glow_debug_impl_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {

  glow_pre_callback_("glInvalidateSubFramebuffer", (void*)(ptrdiff_t)glow_glInvalidateSubFramebuffer, target, numAttachments, attachments, x, y, width, height);
  glow_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  glow_post_callback_("glInvalidateSubFramebuffer", (void*)(ptrdiff_t)glow_glInvalidateSubFramebuffer, target, numAttachments, attachments, x, y, width, height);
}
PFNGLINVALIDATESUBFRAMEBUFFERPROC glow_debug_glInvalidateSubFramebuffer = glow_debug_impl_glInvalidateSubFramebuffer;

static void glow_debug_impl_glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {

  glow_pre_callback_("glMultiDrawArraysIndirect", (void*)(ptrdiff_t)glow_glMultiDrawArraysIndirect, mode, indirect, drawcount, stride);
  glow_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
  glow_post_callback_("glMultiDrawArraysIndirect", (void*)(ptrdiff_t)glow_glMultiDrawArraysIndirect, mode, indirect, drawcount, stride);
}
PFNGLMULTIDRAWARRAYSINDIRECTPROC glow_debug_glMultiDrawArraysIndirect = glow_debug_impl_glMultiDrawArraysIndirect;

static void glow_debug_impl_glTexCoord3dv(const GLdouble *v) {

  glow_pre_callback_("glTexCoord3dv", (void*)(ptrdiff_t)glow_glTexCoord3dv, v);
  glow_glTexCoord3dv(v);
  glow_post_callback_("glTexCoord3dv", (void*)(ptrdiff_t)glow_glTexCoord3dv, v);
}
PFNGLTEXCOORD3DVPROC glow_debug_glTexCoord3dv = glow_debug_impl_glTexCoord3dv;

static void glow_debug_impl_glTexCoord2sv(const GLshort *v) {

  glow_pre_callback_("glTexCoord2sv", (void*)(ptrdiff_t)glow_glTexCoord2sv, v);
  glow_glTexCoord2sv(v);
  glow_post_callback_("glTexCoord2sv", (void*)(ptrdiff_t)glow_glTexCoord2sv, v);
}
PFNGLTEXCOORD2SVPROC glow_debug_glTexCoord2sv = glow_debug_impl_glTexCoord2sv;

static void glow_debug_impl_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {

  glow_pre_callback_("glGetSynciv", (void*)(ptrdiff_t)glow_glGetSynciv, sync, pname, bufSize, length, values);
  glow_glGetSynciv(sync, pname, bufSize, length, values);
  glow_post_callback_("glGetSynciv", (void*)(ptrdiff_t)glow_glGetSynciv, sync, pname, bufSize, length, values);
}
PFNGLGETSYNCIVPROC glow_debug_glGetSynciv = glow_debug_impl_glGetSynciv;

static void glow_debug_impl_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {

  glow_pre_callback_("glUniform3d", (void*)(ptrdiff_t)glow_glUniform3d, location, x, y, z);
  glow_glUniform3d(location, x, y, z);
  glow_post_callback_("glUniform3d", (void*)(ptrdiff_t)glow_glUniform3d, location, x, y, z);
}
PFNGLUNIFORM3DPROC glow_debug_glUniform3d = glow_debug_impl_glUniform3d;

static void glow_debug_impl_glSecondaryColor3i(GLint red, GLint green, GLint blue) {

  glow_pre_callback_("glSecondaryColor3i", (void*)(ptrdiff_t)glow_glSecondaryColor3i, red, green, blue);
  glow_glSecondaryColor3i(red, green, blue);
  glow_post_callback_("glSecondaryColor3i", (void*)(ptrdiff_t)glow_glSecondaryColor3i, red, green, blue);
}
PFNGLSECONDARYCOLOR3IPROC glow_debug_glSecondaryColor3i = glow_debug_impl_glSecondaryColor3i;

static void * glow_debug_impl_glMapBuffer(GLenum target, GLenum access) {

  void * ret;
  glow_pre_callback_("glMapBuffer", (void*)(ptrdiff_t)glow_glMapBuffer, target, access);
  ret = glow_glMapBuffer(target, access);
  glow_post_callback_("glMapBuffer", (void*)(ptrdiff_t)glow_glMapBuffer, target, access);
  return ret;
}
PFNGLMAPBUFFERPROC glow_debug_glMapBuffer = glow_debug_impl_glMapBuffer;

static void glow_debug_impl_glNormalP3uiv(GLenum type, const GLuint *coords) {

  glow_pre_callback_("glNormalP3uiv", (void*)(ptrdiff_t)glow_glNormalP3uiv, type, coords);
  glow_glNormalP3uiv(type, coords);
  glow_post_callback_("glNormalP3uiv", (void*)(ptrdiff_t)glow_glNormalP3uiv, type, coords);
}
PFNGLNORMALP3UIVPROC glow_debug_glNormalP3uiv = glow_debug_impl_glNormalP3uiv;

static void glow_debug_impl_glInvalidateBufferData(GLuint buffer) {

  glow_pre_callback_("glInvalidateBufferData", (void*)(ptrdiff_t)glow_glInvalidateBufferData, buffer);
  glow_glInvalidateBufferData(buffer);
  glow_post_callback_("glInvalidateBufferData", (void*)(ptrdiff_t)glow_glInvalidateBufferData, buffer);
}
PFNGLINVALIDATEBUFFERDATAPROC glow_debug_glInvalidateBufferData = glow_debug_impl_glInvalidateBufferData;

static void glow_debug_impl_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {

  glow_pre_callback_("glBlendColor", (void*)(ptrdiff_t)glow_glBlendColor, red, green, blue, alpha);
  glow_glBlendColor(red, green, blue, alpha);
  glow_post_callback_("glBlendColor", (void*)(ptrdiff_t)glow_glBlendColor, red, green, blue, alpha);
}
PFNGLBLENDCOLORPROC glow_debug_glBlendColor = glow_debug_impl_glBlendColor;

static void glow_debug_impl_glPushName(GLuint name) {

  glow_pre_callback_("glPushName", (void*)(ptrdiff_t)glow_glPushName, name);
  glow_glPushName(name);
  glow_post_callback_("glPushName", (void*)(ptrdiff_t)glow_glPushName, name);
}
PFNGLPUSHNAMEPROC glow_debug_glPushName = glow_debug_impl_glPushName;

static void glow_debug_impl_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {

  glow_pre_callback_("glWindowPos3f", (void*)(ptrdiff_t)glow_glWindowPos3f, x, y, z);
  glow_glWindowPos3f(x, y, z);
  glow_post_callback_("glWindowPos3f", (void*)(ptrdiff_t)glow_glWindowPos3f, x, y, z);
}
PFNGLWINDOWPOS3FPROC glow_debug_glWindowPos3f = glow_debug_impl_glWindowPos3f;

static void glow_debug_impl_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {

  glow_pre_callback_("glGetSamplerParameterIiv", (void*)(ptrdiff_t)glow_glGetSamplerParameterIiv, sampler, pname, params);
  glow_glGetSamplerParameterIiv(sampler, pname, params);
  glow_post_callback_("glGetSamplerParameterIiv", (void*)(ptrdiff_t)glow_glGetSamplerParameterIiv, sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIIVPROC glow_debug_glGetSamplerParameterIiv = glow_debug_impl_glGetSamplerParameterIiv;

static void glow_debug_impl_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {

  glow_pre_callback_("glClearColor", (void*)(ptrdiff_t)glow_glClearColor, red, green, blue, alpha);
  glow_glClearColor(red, green, blue, alpha);
  glow_post_callback_("glClearColor", (void*)(ptrdiff_t)glow_glClearColor, red, green, blue, alpha);
}
PFNGLCLEARCOLORPROC glow_debug_glClearColor = glow_debug_impl_glClearColor;

static void glow_debug_impl_glMultMatrixf(const GLfloat *m) {

  glow_pre_callback_("glMultMatrixf", (void*)(ptrdiff_t)glow_glMultMatrixf, m);
  glow_glMultMatrixf(m);
  glow_post_callback_("glMultMatrixf", (void*)(ptrdiff_t)glow_glMultMatrixf, m);
}
PFNGLMULTMATRIXFPROC glow_debug_glMultMatrixf = glow_debug_impl_glMultMatrixf;

static void glow_debug_impl_glInitNames() {

  glow_pre_callback_("glInitNames", (void*)(ptrdiff_t)glow_glInitNames);
  glow_glInitNames();
  glow_post_callback_("glInitNames", (void*)(ptrdiff_t)glow_glInitNames);
}
PFNGLINITNAMESPROC glow_debug_glInitNames = glow_debug_impl_glInitNames;

static void glow_debug_impl_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {

  glow_pre_callback_("glCopyBufferSubData", (void*)(ptrdiff_t)glow_glCopyBufferSubData, readTarget, writeTarget, readOffset, writeOffset, size);
  glow_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  glow_post_callback_("glCopyBufferSubData", (void*)(ptrdiff_t)glow_glCopyBufferSubData, readTarget, writeTarget, readOffset, writeOffset, size);
}
PFNGLCOPYBUFFERSUBDATAPROC glow_debug_glCopyBufferSubData = glow_debug_impl_glCopyBufferSubData;

static void glow_debug_impl_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {

  glow_pre_callback_("glGetActiveSubroutineUniformName", (void*)(ptrdiff_t)glow_glGetActiveSubroutineUniformName, program, shadertype, index, bufsize, length, name);
  glow_glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
  glow_post_callback_("glGetActiveSubroutineUniformName", (void*)(ptrdiff_t)glow_glGetActiveSubroutineUniformName, program, shadertype, index, bufsize, length, name);
}
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glow_debug_glGetActiveSubroutineUniformName = glow_debug_impl_glGetActiveSubroutineUniformName;

static void glow_debug_impl_glRectdv(const GLdouble *v1, const GLdouble *v2) {

  glow_pre_callback_("glRectdv", (void*)(ptrdiff_t)glow_glRectdv, v1, v2);
  glow_glRectdv(v1, v2);
  glow_post_callback_("glRectdv", (void*)(ptrdiff_t)glow_glRectdv, v1, v2);
}
PFNGLRECTDVPROC glow_debug_glRectdv = glow_debug_impl_glRectdv;

static void glow_debug_impl_glRasterPos4fv(const GLfloat *v) {

  glow_pre_callback_("glRasterPos4fv", (void*)(ptrdiff_t)glow_glRasterPos4fv, v);
  glow_glRasterPos4fv(v);
  glow_post_callback_("glRasterPos4fv", (void*)(ptrdiff_t)glow_glRasterPos4fv, v);
}
PFNGLRASTERPOS4FVPROC glow_debug_glRasterPos4fv = glow_debug_impl_glRasterPos4fv;

static void glow_debug_impl_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {

  glow_pre_callback_("glProgramUniformMatrix2x3fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x3fv, program, location, count, transpose, value);
  glow_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  glow_post_callback_("glProgramUniformMatrix2x3fv", (void*)(ptrdiff_t)glow_glProgramUniformMatrix2x3fv, program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glow_debug_glProgramUniformMatrix2x3fv = glow_debug_impl_glProgramUniformMatrix2x3fv;

static void glow_debug_impl_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {

  glow_pre_callback_("glVertexAttribLPointer", (void*)(ptrdiff_t)glow_glVertexAttribLPointer, index, size, type, stride, pointer);
  glow_glVertexAttribLPointer(index, size, type, stride, pointer);
  glow_post_callback_("glVertexAttribLPointer", (void*)(ptrdiff_t)glow_glVertexAttribLPointer, index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBLPOINTERPROC glow_debug_glVertexAttribLPointer = glow_debug_impl_glVertexAttribLPointer;

static void glow_debug_impl_glNormal3sv(const GLshort *v) {

  glow_pre_callback_("glNormal3sv", (void*)(ptrdiff_t)glow_glNormal3sv, v);
  glow_glNormal3sv(v);
  glow_post_callback_("glNormal3sv", (void*)(ptrdiff_t)glow_glNormal3sv, v);
}
PFNGLNORMAL3SVPROC glow_debug_glNormal3sv = glow_debug_impl_glNormal3sv;

static void glow_debug_impl_glEdgeFlagv(const GLboolean *flag) {

  glow_pre_callback_("glEdgeFlagv", (void*)(ptrdiff_t)glow_glEdgeFlagv, flag);
  glow_glEdgeFlagv(flag);
  glow_post_callback_("glEdgeFlagv", (void*)(ptrdiff_t)glow_glEdgeFlagv, flag);
}
PFNGLEDGEFLAGVPROC glow_debug_glEdgeFlagv = glow_debug_impl_glEdgeFlagv;

static void glow_debug_impl_glPointParameterfv(GLenum pname, const GLfloat *params) {

  glow_pre_callback_("glPointParameterfv", (void*)(ptrdiff_t)glow_glPointParameterfv, pname, params);
  glow_glPointParameterfv(pname, params);
  glow_post_callback_("glPointParameterfv", (void*)(ptrdiff_t)glow_glPointParameterfv, pname, params);
}
PFNGLPOINTPARAMETERFVPROC glow_debug_glPointParameterfv = glow_debug_impl_glPointParameterfv;

static void glow_debug_impl_glSecondaryColor3dv(const GLdouble *v) {

  glow_pre_callback_("glSecondaryColor3dv", (void*)(ptrdiff_t)glow_glSecondaryColor3dv, v);
  glow_glSecondaryColor3dv(v);
  glow_post_callback_("glSecondaryColor3dv", (void*)(ptrdiff_t)glow_glSecondaryColor3dv, v);
}
PFNGLSECONDARYCOLOR3DVPROC glow_debug_glSecondaryColor3dv = glow_debug_impl_glSecondaryColor3dv;

static void glow_debug_impl_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {

  glow_pre_callback_("glGetSamplerParameterIuiv", (void*)(ptrdiff_t)glow_glGetSamplerParameterIuiv, sampler, pname, params);
  glow_glGetSamplerParameterIuiv(sampler, pname, params);
  glow_post_callback_("glGetSamplerParameterIuiv", (void*)(ptrdiff_t)glow_glGetSamplerParameterIuiv, sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIUIVPROC glow_debug_glGetSamplerParameterIuiv = glow_debug_impl_glGetSamplerParameterIuiv;

static void glow_debug_impl_glMultiTexCoord1iv(GLenum target, const GLint *v) {

  glow_pre_callback_("glMultiTexCoord1iv", (void*)(ptrdiff_t)glow_glMultiTexCoord1iv, target, v);
  glow_glMultiTexCoord1iv(target, v);
  glow_post_callback_("glMultiTexCoord1iv", (void*)(ptrdiff_t)glow_glMultiTexCoord1iv, target, v);
}
PFNGLMULTITEXCOORD1IVPROC glow_debug_glMultiTexCoord1iv = glow_debug_impl_glMultiTexCoord1iv;

static void glow_debug_impl_glPopName() {

  glow_pre_callback_("glPopName", (void*)(ptrdiff_t)glow_glPopName);
  glow_glPopName();
  glow_post_callback_("glPopName", (void*)(ptrdiff_t)glow_glPopName);
}
PFNGLPOPNAMEPROC glow_debug_glPopName = glow_debug_impl_glPopName;

static void glow_debug_impl_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {

  glow_pre_callback_("glGetTexGenfv", (void*)(ptrdiff_t)glow_glGetTexGenfv, coord, pname, params);
  glow_glGetTexGenfv(coord, pname, params);
  glow_post_callback_("glGetTexGenfv", (void*)(ptrdiff_t)glow_glGetTexGenfv, coord, pname, params);
}
PFNGLGETTEXGENFVPROC glow_debug_glGetTexGenfv = glow_debug_impl_glGetTexGenfv;

static void glow_debug_impl_glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {

  glow_pre_callback_("glShaderSource", (void*)(ptrdiff_t)glow_glShaderSource, shader, count, string, length);
  glow_glShaderSource(shader, count, string, length);
  glow_post_callback_("glShaderSource", (void*)(ptrdiff_t)glow_glShaderSource, shader, count, string, length);
}
PFNGLSHADERSOURCEPROC glow_debug_glShaderSource = glow_debug_impl_glShaderSource;

static void glow_debug_impl_glCullFace(GLenum mode) {

  glow_pre_callback_("glCullFace", (void*)(ptrdiff_t)glow_glCullFace, mode);
  glow_glCullFace(mode);
  glow_post_callback_("glCullFace", (void*)(ptrdiff_t)glow_glCullFace, mode);
}
PFNGLCULLFACEPROC glow_debug_glCullFace = glow_debug_impl_glCullFace;

#endif /* GLOW_DEBUG */



int glow_init(void) {
  return glow_init_with(&glow_get_proc);
}

int glow_init_with(glow_load_proc_t get_proc) {
  int unresolved_count = 0;

  glow_glIndexf = (PFNGLINDEXFPROC)(ptrdiff_t)get_proc("glIndexf");
  if (glow_glIndexf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)(ptrdiff_t)get_proc("glGetTexParameterIiv");
  if (glow_glGetTexParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameterIiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsSync = (PFNGLISSYNCPROC)(ptrdiff_t)get_proc("glIsSync");
  if (glow_glIsSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsSync\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)(ptrdiff_t)get_proc("glUniformMatrix3dv");
  if (glow_glUniformMatrix3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRotatef = (PFNGLROTATEFPROC)(ptrdiff_t)get_proc("glRotatef");
  if (glow_glRotatef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRotatef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRotatef\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexGeniv = (PFNGLTEXGENIVPROC)(ptrdiff_t)get_proc("glTexGeniv");
  if (glow_glTexGeniv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGeniv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGeniv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)(ptrdiff_t)get_proc("glUniform1uiv");
  if (glow_glUniform1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3i = (PFNGLRASTERPOS3IPROC)(ptrdiff_t)get_proc("glRasterPos3i");
  if (glow_glRasterPos3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2f = (PFNGLVERTEX2FPROC)(ptrdiff_t)get_proc("glVertex2f");
  if (glow_glVertex2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)(ptrdiff_t)get_proc("glCompressedTexImage3D");
  if (glow_glCompressedTexImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexImage3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEndList = (PFNGLENDLISTPROC)(ptrdiff_t)get_proc("glEndList");
  if (glow_glEndList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndList\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)(ptrdiff_t)get_proc("glProgramUniform2d");
  if (glow_glProgramUniform2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetFramebufferParameteriv");
  if (glow_glGetFramebufferParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFramebufferParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFramebufferParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)(ptrdiff_t)get_proc("glMultiTexCoord4dv");
  if (glow_glMultiTexCoord4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBegin = (PFNGLBEGINPROC)(ptrdiff_t)get_proc("glBegin");
  if (glow_glBegin == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBegin\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBegin\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)(ptrdiff_t)get_proc("glSecondaryColor3fv");
  if (glow_glSecondaryColor3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3iv = (PFNGLUNIFORM3IVPROC)(ptrdiff_t)get_proc("glUniform3iv");
  if (glow_glUniform3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)(ptrdiff_t)get_proc("glGetQueryIndexediv");
  if (glow_glGetQueryIndexediv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryIndexediv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryIndexediv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPolygonMode = (PFNGLPOLYGONMODEPROC)(ptrdiff_t)get_proc("glPolygonMode");
  if (glow_glPolygonMode == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPolygonMode\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPolygonMode\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)(ptrdiff_t)get_proc("glDispatchCompute");
  if (glow_glDispatchCompute == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDispatchCompute\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDispatchCompute\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindTexture = (PFNGLBINDTEXTUREPROC)(ptrdiff_t)get_proc("glBindTexture");
  if (glow_glBindTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindTexture\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)(ptrdiff_t)get_proc("glPrioritizeTextures");
  if (glow_glPrioritizeTextures == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPrioritizeTextures\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPrioritizeTextures\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexubv = (PFNGLINDEXUBVPROC)(ptrdiff_t)get_proc("glIndexubv");
  if (glow_glIndexubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDepthMask = (PFNGLDEPTHMASKPROC)(ptrdiff_t)get_proc("glDepthMask");
  if (glow_glDepthMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthMask\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)(ptrdiff_t)get_proc("glEnableClientState");
  if (glow_glEnableClientState == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnableClientState\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnableClientState\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)(ptrdiff_t)get_proc("glGetAttachedShaders");
  if (glow_glGetAttachedShaders == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetAttachedShaders\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetAttachedShaders\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorP4ui = (PFNGLCOLORP4UIPROC)(ptrdiff_t)get_proc("glColorP4ui");
  if (glow_glColorP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)(ptrdiff_t)get_proc("glFeedbackBuffer");
  if (glow_glFeedbackBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFeedbackBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFeedbackBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3f = (PFNGLRASTERPOS3FPROC)(ptrdiff_t)get_proc("glRasterPos3f");
  if (glow_glRasterPos3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1f = (PFNGLTEXCOORD1FPROC)(ptrdiff_t)get_proc("glTexCoord1f");
  if (glow_glTexCoord1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)(ptrdiff_t)get_proc("glTexCoord4sv");
  if (glow_glTexCoord4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetQueryiv = (PFNGLGETQUERYIVPROC)(ptrdiff_t)get_proc("glGetQueryiv");
  if (glow_glGetQueryiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearDepth = (PFNGLCLEARDEPTHPROC)(ptrdiff_t)get_proc("glClearDepth");
  if (glow_glClearDepth == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearDepth\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearDepth\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexEnvi = (PFNGLTEXENVIPROC)(ptrdiff_t)get_proc("glTexEnvi");
  if (glow_glTexEnvi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnvi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnvi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPopMatrix = (PFNGLPOPMATRIXPROC)(ptrdiff_t)get_proc("glPopMatrix");
  if (glow_glPopMatrix == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopMatrix\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopMatrix\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)(ptrdiff_t)get_proc("glEdgeFlagPointer");
  if (glow_glEdgeFlagPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEdgeFlagPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEdgeFlagPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)(ptrdiff_t)get_proc("glTexCoord4dv");
  if (glow_glTexCoord4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)(ptrdiff_t)get_proc("glBindVertexBuffer");
  if (glow_glBindVertexBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindVertexBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindVertexBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)(ptrdiff_t)get_proc("glGetObjectPtrLabel");
  if (glow_glGetObjectPtrLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetObjectPtrLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetObjectPtrLabel\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexParameterf = (PFNGLTEXPARAMETERFPROC)(ptrdiff_t)get_proc("glTexParameterf");
  if (glow_glTexParameterf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)(ptrdiff_t)get_proc("glVertexAttrib1sv");
  if (glow_glVertexAttrib1sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)(ptrdiff_t)get_proc("glTexCoord3fv");
  if (glow_glTexCoord3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightModeliv = (PFNGLLIGHTMODELIVPROC)(ptrdiff_t)get_proc("glLightModeliv");
  if (glow_glLightModeliv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModeliv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModeliv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)(ptrdiff_t)get_proc("glGetQueryObjectuiv");
  if (glow_glGetQueryObjectuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjectuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjectuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)(ptrdiff_t)get_proc("glGetVertexAttribLdv");
  if (glow_glGetVertexAttribLdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribLdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribLdv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)(ptrdiff_t)get_proc("glDebugMessageCallback");
  if (glow_glDebugMessageCallback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDebugMessageCallback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDebugMessageCallback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glStencilOp = (PFNGLSTENCILOPPROC)(ptrdiff_t)get_proc("glStencilOp");
  if (glow_glStencilOp == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilOp\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilOp\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyPixels = (PFNGLCOPYPIXELSPROC)(ptrdiff_t)get_proc("glCopyPixels");
  if (glow_glCopyPixels == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyPixels\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyPixels\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)(ptrdiff_t)get_proc("glIsVertexArray");
  if (glow_glIsVertexArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsVertexArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsVertexArray\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSampleMaski = (PFNGLSAMPLEMASKIPROC)(ptrdiff_t)get_proc("glSampleMaski");
  if (glow_glSampleMaski == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSampleMaski\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSampleMaski\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightiv = (PFNGLLIGHTIVPROC)(ptrdiff_t)get_proc("glLightiv");
  if (glow_glLightiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexBuffer = (PFNGLTEXBUFFERPROC)(ptrdiff_t)get_proc("glTexBuffer");
  if (glow_glTexBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glShaderBinary = (PFNGLSHADERBINARYPROC)(ptrdiff_t)get_proc("glShaderBinary");
  if (glow_glShaderBinary == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShaderBinary\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShaderBinary\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMaterialiv = (PFNGLMATERIALIVPROC)(ptrdiff_t)get_proc("glMaterialiv");
  if (glow_glMaterialiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMaterialiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMaterialiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3b = (PFNGLNORMAL3BPROC)(ptrdiff_t)get_proc("glNormal3b");
  if (glow_glNormal3b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3b\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetMapiv = (PFNGLGETMAPIVPROC)(ptrdiff_t)get_proc("glGetMapiv");
  if (glow_glGetMapiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMapiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMapiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glBindTransformFeedback");
  if (glow_glBindTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)(ptrdiff_t)get_proc("glGetDebugMessageLog");
  if (glow_glGetDebugMessageLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetDebugMessageLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetDebugMessageLog\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetBooleanv = (PFNGLGETBOOLEANVPROC)(ptrdiff_t)get_proc("glGetBooleanv");
  if (glow_glGetBooleanv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBooleanv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBooleanv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexub = (PFNGLINDEXUBPROC)(ptrdiff_t)get_proc("glIndexub");
  if (glow_glIndexub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexub\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)(ptrdiff_t)get_proc("glBlitFramebuffer");
  if (glow_glBlitFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlitFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlitFramebuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)(ptrdiff_t)get_proc("glGetMultisamplefv");
  if (glow_glGetMultisamplefv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMultisamplefv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMultisamplefv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)(ptrdiff_t)get_proc("glProgramUniform3iv");
  if (glow_glProgramUniform3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)(ptrdiff_t)get_proc("glGetProgramResourceIndex");
  if (glow_glGetProgramResourceIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexfv = (PFNGLINDEXFVPROC)(ptrdiff_t)get_proc("glIndexfv");
  if (glow_glIndexfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)(ptrdiff_t)get_proc("glVertexAttribFormat");
  if (glow_glVertexAttribFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribFormat\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)(ptrdiff_t)get_proc("glRasterPos4dv");
  if (glow_glRasterPos4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(ptrdiff_t)get_proc("glDrawTransformFeedbackInstanced");
  if (glow_glDrawTransformFeedbackInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedbackInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedbackInstanced\n");
#endif
    unresolved_count += 1;
  } 
  glow_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)(ptrdiff_t)get_proc("glViewportIndexedf");
  if (glow_glViewportIndexedf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewportIndexedf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewportIndexedf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsBuffer = (PFNGLISBUFFERPROC)(ptrdiff_t)get_proc("glIsBuffer");
  if (glow_glIsBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)(ptrdiff_t)get_proc("glUniformMatrix3x2fv");
  if (glow_glUniformMatrix3x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)(ptrdiff_t)get_proc("glDepthRangeIndexed");
  if (glow_glDepthRangeIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRangeIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRangeIndexed\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)(ptrdiff_t)get_proc("glGetTexLevelParameterfv");
  if (glow_glGetTexLevelParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexLevelParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexLevelParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)(ptrdiff_t)get_proc("glSecondaryColor3iv");
  if (glow_glSecondaryColor3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1iv = (PFNGLUNIFORM1IVPROC)(ptrdiff_t)get_proc("glUniform1iv");
  if (glow_glUniform1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)(ptrdiff_t)get_proc("glVertexAttrib4d");
  if (glow_glVertexAttrib4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)(ptrdiff_t)get_proc("glSecondaryColorP3ui");
  if (glow_glSecondaryColorP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColorP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColorP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRectsv = (PFNGLRECTSVPROC)(ptrdiff_t)get_proc("glRectsv");
  if (glow_glRectsv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectsv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectsv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)(ptrdiff_t)get_proc("glRasterPos2sv");
  if (glow_glRasterPos2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalMesh1 = (PFNGLEVALMESH1PROC)(ptrdiff_t)get_proc("glEvalMesh1");
  if (glow_glEvalMesh1 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalMesh1\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalMesh1\n");
#endif
    unresolved_count += 1;
  } 
  glow_glOrtho = (PFNGLORTHOPROC)(ptrdiff_t)get_proc("glOrtho");
  if (glow_glOrtho == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glOrtho\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glOrtho\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)(ptrdiff_t)get_proc("glMultiDrawElements");
  if (glow_glMultiDrawElements == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawElements\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawElements\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)(ptrdiff_t)get_proc("glDisableVertexAttribArray");
  if (glow_glDisableVertexAttribArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisableVertexAttribArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisableVertexAttribArray\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)(ptrdiff_t)get_proc("glProgramUniform4fv");
  if (glow_glProgramUniform4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4uiv = (PFNGLCOLOR4UIVPROC)(ptrdiff_t)get_proc("glColor4uiv");
  if (glow_glColor4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexGenf = (PFNGLTEXGENFPROC)(ptrdiff_t)get_proc("glTexGenf");
  if (glow_glTexGenf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGenf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGenf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)(ptrdiff_t)get_proc("glVertexAttribI4i");
  if (glow_glVertexAttribI4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(ptrdiff_t)get_proc("glGetActiveUniformBlockName");
  if (glow_glGetActiveUniformBlockName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformBlockName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformBlockName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)(ptrdiff_t)get_proc("glDeleteSamplers");
  if (glow_glDeleteSamplers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteSamplers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteSamplers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4dv = (PFNGLUNIFORM4DVPROC)(ptrdiff_t)get_proc("glUniform4dv");
  if (glow_glUniform4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)(ptrdiff_t)get_proc("glProgramUniform2ui");
  if (glow_glProgramUniform2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRectfv = (PFNGLRECTFVPROC)(ptrdiff_t)get_proc("glRectfv");
  if (glow_glRectfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEnablei = (PFNGLENABLEIPROC)(ptrdiff_t)get_proc("glEnablei");
  if (glow_glEnablei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnablei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnablei\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)(ptrdiff_t)get_proc("glVertexAttribI1iv");
  if (glow_glVertexAttribI1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)(ptrdiff_t)get_proc("glClientActiveTexture");
  if (glow_glClientActiveTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClientActiveTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClientActiveTexture\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)(ptrdiff_t)get_proc("glVertexAttrib4Nbv");
  if (glow_glVertexAttrib4Nbv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nbv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nbv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)(ptrdiff_t)get_proc("glWindowPos3i");
  if (glow_glWindowPos3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)(ptrdiff_t)get_proc("glGetBufferPointerv");
  if (glow_glGetBufferPointerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferPointerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferPointerv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)(ptrdiff_t)get_proc("glGetVertexAttribPointerv");
  if (glow_glGetVertexAttribPointerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribPointerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribPointerv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1dv = (PFNGLUNIFORM1DVPROC)(ptrdiff_t)get_proc("glUniform1dv");
  if (glow_glUniform1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)(ptrdiff_t)get_proc("glVertexAttribL1d");
  if (glow_glVertexAttribL1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexEnviv = (PFNGLGETTEXENVIVPROC)(ptrdiff_t)get_proc("glGetTexEnviv");
  if (glow_glGetTexEnviv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexEnviv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexEnviv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)(ptrdiff_t)get_proc("glProgramUniform1iv");
  if (glow_glProgramUniform1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)(ptrdiff_t)get_proc("glProgramUniform3ui");
  if (glow_glProgramUniform3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMap2d = (PFNGLMAP2DPROC)(ptrdiff_t)get_proc("glMap2d");
  if (glow_glMap2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)(ptrdiff_t)get_proc("glPolygonOffset");
  if (glow_glPolygonOffset == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPolygonOffset\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPolygonOffset\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorPointer = (PFNGLCOLORPOINTERPROC)(ptrdiff_t)get_proc("glColorPointer");
  if (glow_glColorPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindSampler = (PFNGLBINDSAMPLERPROC)(ptrdiff_t)get_proc("glBindSampler");
  if (glow_glBindSampler == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindSampler\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindSampler\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)(ptrdiff_t)get_proc("glInvalidateTexSubImage");
  if (glow_glInvalidateTexSubImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateTexSubImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateTexSubImage\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4ui = (PFNGLCOLOR4UIPROC)(ptrdiff_t)get_proc("glColor4ui");
  if (glow_glColor4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearIndex = (PFNGLCLEARINDEXPROC)(ptrdiff_t)get_proc("glClearIndex");
  if (glow_glClearIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)(ptrdiff_t)get_proc("glDeleteVertexArrays");
  if (glow_glDeleteVertexArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteVertexArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteVertexArrays\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWaitSync = (PFNGLWAITSYNCPROC)(ptrdiff_t)get_proc("glWaitSync");
  if (glow_glWaitSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWaitSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWaitSync\n");
#endif
    unresolved_count += 1;
  } 
  glow_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glResumeTransformFeedback");
  if (glow_glResumeTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glResumeTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glResumeTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)(ptrdiff_t)get_proc("glCopyImageSubData");
  if (glow_glCopyImageSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyImageSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyImageSubData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glShadeModel = (PFNGLSHADEMODELPROC)(ptrdiff_t)get_proc("glShadeModel");
  if (glow_glShadeModel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShadeModel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShadeModel\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)(ptrdiff_t)get_proc("glSamplerParameteriv");
  if (glow_glSamplerParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2ui = (PFNGLUNIFORM2UIPROC)(ptrdiff_t)get_proc("glUniform2ui");
  if (glow_glUniform2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)(ptrdiff_t)get_proc("glGetQueryObjectui64v");
  if (glow_glGetQueryObjectui64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjectui64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjectui64v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetMaterialfv = (PFNGLGETMATERIALFVPROC)(ptrdiff_t)get_proc("glGetMaterialfv");
  if (glow_glGetMaterialfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMaterialfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMaterialfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)(ptrdiff_t)get_proc("glClearBufferuiv");
  if (glow_glClearBufferuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3f = (PFNGLCOLOR3FPROC)(ptrdiff_t)get_proc("glColor3f");
  if (glow_glColor3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)(ptrdiff_t)get_proc("glSecondaryColor3usv");
  if (glow_glSecondaryColor3usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3usv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)(ptrdiff_t)get_proc("glVertexAttrib4Niv");
  if (glow_glVertexAttrib4Niv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Niv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Niv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)(ptrdiff_t)get_proc("glVertexAttrib4sv");
  if (glow_glVertexAttrib4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)(ptrdiff_t)get_proc("glGetIntegeri_v");
  if (glow_glGetIntegeri_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetIntegeri_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetIntegeri_v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)(ptrdiff_t)get_proc("glVertexAttribI4iv");
  if (glow_glVertexAttribI4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3ui = (PFNGLUNIFORM3UIPROC)(ptrdiff_t)get_proc("glUniform3ui");
  if (glow_glUniform3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)(ptrdiff_t)get_proc("glGetActiveSubroutineName");
  if (glow_glGetActiveSubroutineName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveSubroutineName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveSubroutineName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRects = (PFNGLRECTSPROC)(ptrdiff_t)get_proc("glRects");
  if (glow_glRects == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRects\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRects\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)(ptrdiff_t)get_proc("glVertexAttribL1dv");
  if (glow_glVertexAttribL1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2f = (PFNGLUNIFORM2FPROC)(ptrdiff_t)get_proc("glUniform2f");
  if (glow_glUniform2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFlush = (PFNGLFLUSHPROC)(ptrdiff_t)get_proc("glFlush");
  if (glow_glFlush == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFlush\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFlush\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(ptrdiff_t)get_proc("glMultiDrawElementsBaseVertex");
  if (glow_glMultiDrawElementsBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawElementsBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawElementsBaseVertex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)(ptrdiff_t)get_proc("glUniformMatrix3x2dv");
  if (glow_glUniformMatrix3x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)(ptrdiff_t)get_proc("glPatchParameteri");
  if (glow_glPatchParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPatchParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPatchParameteri\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTranslatef = (PFNGLTRANSLATEFPROC)(ptrdiff_t)get_proc("glTranslatef");
  if (glow_glTranslatef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTranslatef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTranslatef\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)(ptrdiff_t)get_proc("glTexImage2DMultisample");
  if (glow_glTexImage2DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage2DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage2DMultisample\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)(ptrdiff_t)get_proc("glMultiTexCoordP3ui");
  if (glow_glMultiTexCoordP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)(ptrdiff_t)get_proc("glGetProgramResourceLocation");
  if (glow_glGetProgramResourceLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)(ptrdiff_t)get_proc("glVertexAttrib3d");
  if (glow_glVertexAttrib3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2s = (PFNGLTEXCOORD2SPROC)(ptrdiff_t)get_proc("glTexCoord2s");
  if (glow_glTexCoord2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)(ptrdiff_t)get_proc("glFramebufferTexture1D");
  if (glow_glFramebufferTexture1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3us = (PFNGLCOLOR3USPROC)(ptrdiff_t)get_proc("glColor3us");
  if (glow_glColor3us == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3us\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3us\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)(ptrdiff_t)get_proc("glTexCoord1fv");
  if (glow_glTexCoord1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)(ptrdiff_t)get_proc("glPushClientAttrib");
  if (glow_glPushClientAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushClientAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushClientAttrib\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)(ptrdiff_t)get_proc("glVertexAttrib2dv");
  if (glow_glVertexAttrib2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexImage = (PFNGLGETTEXIMAGEPROC)(ptrdiff_t)get_proc("glGetTexImage");
  if (glow_glGetTexImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexImage\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4dv = (PFNGLVERTEX4DVPROC)(ptrdiff_t)get_proc("glVertex4dv");
  if (glow_glVertex4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexPointer = (PFNGLINDEXPOINTERPROC)(ptrdiff_t)get_proc("glIndexPointer");
  if (glow_glIndexPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)(ptrdiff_t)get_proc("glVertexAttribI4uiv");
  if (glow_glVertexAttribI4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix2x4fv");
  if (glow_glProgramUniformMatrix2x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)(ptrdiff_t)get_proc("glVertexAttribP4uiv");
  if (glow_glVertexAttribP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)(ptrdiff_t)get_proc("glRasterPos3dv");
  if (glow_glRasterPos3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)(ptrdiff_t)get_proc("glVertexAttrib1fv");
  if (glow_glVertexAttrib1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)(ptrdiff_t)get_proc("glGetFragDataIndex");
  if (glow_glGetFragDataIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFragDataIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFragDataIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix2x3dv");
  if (glow_glProgramUniformMatrix2x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix3x4dv");
  if (glow_glProgramUniformMatrix3x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormalP3ui = (PFNGLNORMALP3UIPROC)(ptrdiff_t)get_proc("glNormalP3ui");
  if (glow_glNormalP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormalP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormalP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix3fv");
  if (glow_glProgramUniformMatrix3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearAccum = (PFNGLCLEARACCUMPROC)(ptrdiff_t)get_proc("glClearAccum");
  if (glow_glClearAccum == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearAccum\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearAccum\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)(ptrdiff_t)get_proc("glVertexAttribLFormat");
  if (glow_glVertexAttribLFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribLFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribLFormat\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)(ptrdiff_t)get_proc("glProgramUniform1f");
  if (glow_glProgramUniform1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexEnvfv = (PFNGLTEXENVFVPROC)(ptrdiff_t)get_proc("glTexEnvfv");
  if (glow_glTexEnvfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnvfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnvfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)(ptrdiff_t)get_proc("glMultiTexCoord3iv");
  if (glow_glMultiTexCoord3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)(ptrdiff_t)get_proc("glSecondaryColor3sv");
  if (glow_glSecondaryColor3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)(ptrdiff_t)get_proc("glCreateShaderProgramv");
  if (glow_glCreateShaderProgramv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCreateShaderProgramv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCreateShaderProgramv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3iv = (PFNGLCOLOR3IVPROC)(ptrdiff_t)get_proc("glColor3iv");
  if (glow_glColor3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord1d = (PFNGLEVALCOORD1DPROC)(ptrdiff_t)get_proc("glEvalCoord1d");
  if (glow_glEvalCoord1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPushAttrib = (PFNGLPUSHATTRIBPROC)(ptrdiff_t)get_proc("glPushAttrib");
  if (glow_glPushAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushAttrib\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)(ptrdiff_t)get_proc("glBlendFuncSeparate");
  if (glow_glBlendFuncSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFuncSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFuncSeparate\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)(ptrdiff_t)get_proc("glVertexAttrib4f");
  if (glow_glVertexAttrib4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)(ptrdiff_t)get_proc("glGetUniformIndices");
  if (glow_glGetUniformIndices == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformIndices\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformIndices\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)(ptrdiff_t)get_proc("glMultiTexCoordP1ui");
  if (glow_glMultiTexCoordP1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP1ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)(ptrdiff_t)get_proc("glClearBufferData");
  if (glow_glClearBufferData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexMask = (PFNGLINDEXMASKPROC)(ptrdiff_t)get_proc("glIndexMask");
  if (glow_glIndexMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexMask\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawPixels = (PFNGLDRAWPIXELSPROC)(ptrdiff_t)get_proc("glDrawPixels");
  if (glow_glDrawPixels == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawPixels\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawPixels\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(ptrdiff_t)get_proc("glCompressedTexSubImage3D");
  if (glow_glCompressedTexSubImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexSubImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexSubImage3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)(ptrdiff_t)get_proc("glMultiTexCoord4d");
  if (glow_glMultiTexCoord4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorP4uiv = (PFNGLCOLORP4UIVPROC)(ptrdiff_t)get_proc("glColorP4uiv");
  if (glow_glColorP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3bv = (PFNGLCOLOR3BVPROC)(ptrdiff_t)get_proc("glColor3bv");
  if (glow_glColor3bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3bv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNewList = (PFNGLNEWLISTPROC)(ptrdiff_t)get_proc("glNewList");
  if (glow_glNewList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNewList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNewList\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3s = (PFNGLTEXCOORD3SPROC)(ptrdiff_t)get_proc("glTexCoord3s");
  if (glow_glTexCoord3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendFunc = (PFNGLBLENDFUNCPROC)(ptrdiff_t)get_proc("glBlendFunc");
  if (glow_glBlendFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFunc\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMap1d = (PFNGLMAP1DPROC)(ptrdiff_t)get_proc("glMap1d");
  if (glow_glMap1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)(ptrdiff_t)get_proc("glDeleteBuffers");
  if (glow_glDeleteBuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteBuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteBuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsProgram = (PFNGLISPROGRAMPROC)(ptrdiff_t)get_proc("glIsProgram");
  if (glow_glIsProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)(ptrdiff_t)get_proc("glVertexAttribPointer");
  if (glow_glVertexAttribPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3s = (PFNGLVERTEX3SPROC)(ptrdiff_t)get_proc("glVertex3s");
  if (glow_glVertex3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2dv = (PFNGLUNIFORM2DVPROC)(ptrdiff_t)get_proc("glUniform2dv");
  if (glow_glUniform2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightfv = (PFNGLLIGHTFVPROC)(ptrdiff_t)get_proc("glLightfv");
  if (glow_glLightfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)(ptrdiff_t)get_proc("glSecondaryColor3b");
  if (glow_glSecondaryColor3b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3b\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendEquation = (PFNGLBLENDEQUATIONPROC)(ptrdiff_t)get_proc("glBlendEquation");
  if (glow_glBlendEquation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)(ptrdiff_t)get_proc("glVertexAttribIPointer");
  if (glow_glVertexAttribIPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribIPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribIPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMap2f = (PFNGLMAP2FPROC)(ptrdiff_t)get_proc("glMap2f");
  if (glow_glMap2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)(ptrdiff_t)get_proc("glVertexAttribI1uiv");
  if (glow_glVertexAttribI1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)(ptrdiff_t)get_proc("glGetUniformBlockIndex");
  if (glow_glGetUniformBlockIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformBlockIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformBlockIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)(ptrdiff_t)get_proc("glTexCoord4iv");
  if (glow_glTexCoord4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)(ptrdiff_t)get_proc("glCopyTexSubImage1D");
  if (glow_glCopyTexSubImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexSubImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexSubImage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)(ptrdiff_t)get_proc("glCopyTexSubImage2D");
  if (glow_glCopyTexSubImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexSubImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexSubImage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)(ptrdiff_t)get_proc("glWindowPos3d");
  if (glow_glWindowPos3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBitmap = (PFNGLBITMAPPROC)(ptrdiff_t)get_proc("glBitmap");
  if (glow_glBitmap == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBitmap\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBitmap\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4dv = (PFNGLCOLOR4DVPROC)(ptrdiff_t)get_proc("glColor4dv");
  if (glow_glColor4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogf = (PFNGLFOGFPROC)(ptrdiff_t)get_proc("glFogf");
  if (glow_glFogf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPassThrough = (PFNGLPASSTHROUGHPROC)(ptrdiff_t)get_proc("glPassThrough");
  if (glow_glPassThrough == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPassThrough\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPassThrough\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)(ptrdiff_t)get_proc("glMultiTexCoord2f");
  if (glow_glMultiTexCoord2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)(ptrdiff_t)get_proc("glSecondaryColor3s");
  if (glow_glSecondaryColor3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetFloatv = (PFNGLGETFLOATVPROC)(ptrdiff_t)get_proc("glGetFloatv");
  if (glow_glGetFloatv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFloatv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFloatv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)(ptrdiff_t)get_proc("glUniformMatrix2x4fv");
  if (glow_glUniformMatrix2x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)(ptrdiff_t)get_proc("glVertexAttribP1uiv");
  if (glow_glVertexAttribP1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP1uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)(ptrdiff_t)get_proc("glEndQueryIndexed");
  if (glow_glEndQueryIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndQueryIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndQueryIndexed\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenQueries = (PFNGLGENQUERIESPROC)(ptrdiff_t)get_proc("glGenQueries");
  if (glow_glGenQueries == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenQueries\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenQueries\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)(ptrdiff_t)get_proc("glUniformMatrix2x3dv");
  if (glow_glUniformMatrix2x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)(ptrdiff_t)get_proc("glTexCoord2iv");
  if (glow_glTexCoord2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetMapfv = (PFNGLGETMAPFVPROC)(ptrdiff_t)get_proc("glGetMapfv");
  if (glow_glGetMapfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMapfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMapfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)(ptrdiff_t)get_proc("glGetTexEnvfv");
  if (glow_glGetTexEnvfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexEnvfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexEnvfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)(ptrdiff_t)get_proc("glProgramUniform1ui");
  if (glow_glProgramUniform1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDepthFunc = (PFNGLDEPTHFUNCPROC)(ptrdiff_t)get_proc("glDepthFunc");
  if (glow_glDepthFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthFunc\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)(ptrdiff_t)get_proc("glGetCompressedTexImage");
  if (glow_glGetCompressedTexImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetCompressedTexImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetCompressedTexImage\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRenderMode = (PFNGLRENDERMODEPROC)(ptrdiff_t)get_proc("glRenderMode");
  if (glow_glRenderMode == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRenderMode\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRenderMode\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)(ptrdiff_t)get_proc("glCopyTexImage1D");
  if (glow_glCopyTexImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexImage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)(ptrdiff_t)get_proc("glGetActiveUniformsiv");
  if (glow_glGetActiveUniformsiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformsiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformsiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPopAttrib = (PFNGLPOPATTRIBPROC)(ptrdiff_t)get_proc("glPopAttrib");
  if (glow_glPopAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopAttrib\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetMapdv = (PFNGLGETMAPDVPROC)(ptrdiff_t)get_proc("glGetMapdv");
  if (glow_glGetMapdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMapdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMapdv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenTextures = (PFNGLGENTEXTURESPROC)(ptrdiff_t)get_proc("glGenTextures");
  if (glow_glGenTextures == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenTextures\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenTextures\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)(ptrdiff_t)get_proc("glCompressedTexImage2D");
  if (glow_glCompressedTexImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexImage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)(ptrdiff_t)get_proc("glFramebufferTexture2D");
  if (glow_glFramebufferTexture2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)(ptrdiff_t)get_proc("glGetInternalformati64v");
  if (glow_glGetInternalformati64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInternalformati64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInternalformati64v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLighti = (PFNGLLIGHTIPROC)(ptrdiff_t)get_proc("glLighti");
  if (glow_glLighti == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLighti\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLighti\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)(ptrdiff_t)get_proc("glUniformMatrix3x4fv");
  if (glow_glUniformMatrix3x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetStringi = (PFNGLGETSTRINGIPROC)(ptrdiff_t)get_proc("glGetStringi");
  if (glow_glGetStringi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetStringi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetStringi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)(ptrdiff_t)get_proc("glVertexP3uiv");
  if (glow_glVertexP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)(ptrdiff_t)get_proc("glMultiDrawArrays");
  if (glow_glMultiDrawArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawArrays\n");
#endif
    unresolved_count += 1;
  } 
  glow_glAttachShader = (PFNGLATTACHSHADERPROC)(ptrdiff_t)get_proc("glAttachShader");
  if (glow_glAttachShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAttachShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAttachShader\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsList = (PFNGLISLISTPROC)(ptrdiff_t)get_proc("glIsList");
  if (glow_glIsList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsList\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteQueries = (PFNGLDELETEQUERIESPROC)(ptrdiff_t)get_proc("glDeleteQueries");
  if (glow_glDeleteQueries == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteQueries\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteQueries\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)(ptrdiff_t)get_proc("glVertexAttribI4ui");
  if (glow_glVertexAttribI4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)(ptrdiff_t)get_proc("glVertexAttrib4iv");
  if (glow_glVertexAttrib4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEdgeFlag = (PFNGLEDGEFLAGPROC)(ptrdiff_t)get_proc("glEdgeFlag");
  if (glow_glEdgeFlag == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEdgeFlag\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEdgeFlag\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRotated = (PFNGLROTATEDPROC)(ptrdiff_t)get_proc("glRotated");
  if (glow_glRotated == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRotated\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRotated\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPointSize = (PFNGLPOINTSIZEPROC)(ptrdiff_t)get_proc("glPointSize");
  if (glow_glPointSize == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointSize\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointSize\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)(ptrdiff_t)get_proc("glDepthRangeArrayv");
  if (glow_glDepthRangeArrayv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRangeArrayv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRangeArrayv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLoadIdentity = (PFNGLLOADIDENTITYPROC)(ptrdiff_t)get_proc("glLoadIdentity");
  if (glow_glLoadIdentity == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadIdentity\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadIdentity\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3sv = (PFNGLVERTEX3SVPROC)(ptrdiff_t)get_proc("glVertex3sv");
  if (glow_glVertex3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix4x3fv");
  if (glow_glProgramUniformMatrix4x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)(ptrdiff_t)get_proc("glDisableClientState");
  if (glow_glDisableClientState == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisableClientState\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisableClientState\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)(ptrdiff_t)get_proc("glSecondaryColor3f");
  if (glow_glSecondaryColor3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)(ptrdiff_t)get_proc("glVertexAttrib3sv");
  if (glow_glVertexAttrib3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)(ptrdiff_t)get_proc("glVertexAttribP3uiv");
  if (glow_glVertexAttribP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)(ptrdiff_t)get_proc("glProgramParameteri");
  if (glow_glProgramParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramParameteri\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexGeniv = (PFNGLGETTEXGENIVPROC)(ptrdiff_t)get_proc("glGetTexGeniv");
  if (glow_glGetTexGeniv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexGeniv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexGeniv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)(ptrdiff_t)get_proc("glVertexAttrib4s");
  if (glow_glVertexAttrib4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)(ptrdiff_t)get_proc("glUniformMatrix2dv");
  if (glow_glUniformMatrix2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)(ptrdiff_t)get_proc("glViewportIndexedfv");
  if (glow_glViewportIndexedfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewportIndexedfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewportIndexedfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)(ptrdiff_t)get_proc("glVertexAttrib2fv");
  if (glow_glVertexAttrib2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)(ptrdiff_t)get_proc("glMultiTexCoordP1uiv");
  if (glow_glMultiTexCoordP1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP1uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)(ptrdiff_t)get_proc("glUniformMatrix4x3dv");
  if (glow_glUniformMatrix4x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix2dv");
  if (glow_glProgramUniformMatrix2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glListBase = (PFNGLLISTBASEPROC)(ptrdiff_t)get_proc("glListBase");
  if (glow_glListBase == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glListBase\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glListBase\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3f = (PFNGLUNIFORM3FPROC)(ptrdiff_t)get_proc("glUniform3f");
  if (glow_glUniform3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)(ptrdiff_t)get_proc("glGetActiveUniformName");
  if (glow_glGetActiveUniformName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetPointerv = (PFNGLGETPOINTERVPROC)(ptrdiff_t)get_proc("glGetPointerv");
  if (glow_glGetPointerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPointerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPointerv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)(ptrdiff_t)get_proc("glTexSubImage1D");
  if (glow_glTexSubImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexSubImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexSubImage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glArrayElement = (PFNGLARRAYELEMENTPROC)(ptrdiff_t)get_proc("glArrayElement");
  if (glow_glArrayElement == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glArrayElement\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glArrayElement\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2i = (PFNGLUNIFORM2IPROC)(ptrdiff_t)get_proc("glUniform2i");
  if (glow_glUniform2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)(ptrdiff_t)get_proc("glVertexAttrib4Nub");
  if (glow_glVertexAttrib4Nub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nub\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)(ptrdiff_t)get_proc("glGenFramebuffers");
  if (glow_glGenFramebuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenFramebuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenFramebuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord2f = (PFNGLEVALCOORD2FPROC)(ptrdiff_t)get_proc("glEvalCoord2f");
  if (glow_glEvalCoord2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3dv = (PFNGLVERTEX3DVPROC)(ptrdiff_t)get_proc("glVertex3dv");
  if (glow_glVertex3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)(ptrdiff_t)get_proc("glWindowPos2iv");
  if (glow_glWindowPos2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glQueryCounter = (PFNGLQUERYCOUNTERPROC)(ptrdiff_t)get_proc("glQueryCounter");
  if (glow_glQueryCounter == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glQueryCounter\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glQueryCounter\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3d = (PFNGLTEXCOORD3DPROC)(ptrdiff_t)get_proc("glTexCoord3d");
  if (glow_glTexCoord3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightModelfv = (PFNGLLIGHTMODELFVPROC)(ptrdiff_t)get_proc("glLightModelfv");
  if (glow_glLightModelfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModelfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModelfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)(ptrdiff_t)get_proc("glGetUniformfv");
  if (glow_glGetUniformfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)(ptrdiff_t)get_proc("glFramebufferTexture3D");
  if (glow_glFramebufferTexture3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelStoref = (PFNGLPIXELSTOREFPROC)(ptrdiff_t)get_proc("glPixelStoref");
  if (glow_glPixelStoref == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelStoref\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelStoref\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(ptrdiff_t)get_proc("glBindFragDataLocationIndexed");
  if (glow_glBindFragDataLocationIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindFragDataLocationIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindFragDataLocationIndexed\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorP3ui = (PFNGLCOLORP3UIPROC)(ptrdiff_t)get_proc("glColorP3ui");
  if (glow_glColorP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4i = (PFNGLTEXCOORD4IPROC)(ptrdiff_t)get_proc("glTexCoord4i");
  if (glow_glTexCoord4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)(ptrdiff_t)get_proc("glSecondaryColor3d");
  if (glow_glSecondaryColor3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4ui = (PFNGLUNIFORM4UIPROC)(ptrdiff_t)get_proc("glUniform4ui");
  if (glow_glUniform4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(ptrdiff_t)get_proc("glDrawTransformFeedbackStream");
  if (glow_glDrawTransformFeedbackStream == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedbackStream\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedbackStream\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDepthRangef = (PFNGLDEPTHRANGEFPROC)(ptrdiff_t)get_proc("glDepthRangef");
  if (glow_glDepthRangef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRangef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRangef\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)(ptrdiff_t)get_proc("glRasterPos2dv");
  if (glow_glRasterPos2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2s = (PFNGLVERTEX2SPROC)(ptrdiff_t)get_proc("glVertex2s");
  if (glow_glVertex2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)(ptrdiff_t)get_proc("glBindBufferRange");
  if (glow_glBindBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindBufferRange\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3s = (PFNGLNORMAL3SPROC)(ptrdiff_t)get_proc("glNormal3s");
  if (glow_glNormal3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexi = (PFNGLINDEXIPROC)(ptrdiff_t)get_proc("glIndexi");
  if (glow_glIndexi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)(ptrdiff_t)get_proc("glProgramUniform3fv");
  if (glow_glProgramUniform3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)(ptrdiff_t)get_proc("glValidateProgramPipeline");
  if (glow_glValidateProgramPipeline == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glValidateProgramPipeline\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glValidateProgramPipeline\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3s = (PFNGLCOLOR3SPROC)(ptrdiff_t)get_proc("glColor3s");
  if (glow_glColor3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3fv = (PFNGLUNIFORM3FVPROC)(ptrdiff_t)get_proc("glUniform3fv");
  if (glow_glUniform3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)(ptrdiff_t)get_proc("glIsRenderbuffer");
  if (glow_glIsRenderbuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsRenderbuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsRenderbuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)(ptrdiff_t)get_proc("glUniformMatrix4dv");
  if (glow_glUniformMatrix4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)(ptrdiff_t)get_proc("glClearBufferSubData");
  if (glow_glClearBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferSubData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)(ptrdiff_t)get_proc("glSecondaryColorPointer");
  if (glow_glSecondaryColorPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColorPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColorPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)(ptrdiff_t)get_proc("glEndConditionalRender");
  if (glow_glEndConditionalRender == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndConditionalRender\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndConditionalRender\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)(ptrdiff_t)get_proc("glVertexBindingDivisor");
  if (glow_glVertexBindingDivisor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexBindingDivisor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexBindingDivisor\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2f = (PFNGLRASTERPOS2FPROC)(ptrdiff_t)get_proc("glRasterPos2f");
  if (glow_glRasterPos2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)(ptrdiff_t)get_proc("glVertexP4uiv");
  if (glow_glVertexP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)(ptrdiff_t)get_proc("glGetPolygonStipple");
  if (glow_glGetPolygonStipple == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPolygonStipple\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPolygonStipple\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)(ptrdiff_t)get_proc("glRasterPos3sv");
  if (glow_glRasterPos3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)(ptrdiff_t)get_proc("glMultiTexCoord1dv");
  if (glow_glMultiTexCoord1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix2x4dv");
  if (glow_glProgramUniformMatrix2x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3bv = (PFNGLNORMAL3BVPROC)(ptrdiff_t)get_proc("glNormal3bv");
  if (glow_glNormal3bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3bv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorMask = (PFNGLCOLORMASKPROC)(ptrdiff_t)get_proc("glColorMask");
  if (glow_glColorMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorMask\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4b = (PFNGLCOLOR4BPROC)(ptrdiff_t)get_proc("glColor4b");
  if (glow_glColor4b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4b\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearStencil = (PFNGLCLEARSTENCILPROC)(ptrdiff_t)get_proc("glClearStencil");
  if (glow_glClearStencil == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearStencil\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearStencil\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)(ptrdiff_t)get_proc("glVertexAttribI2uiv");
  if (glow_glVertexAttribI2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4iv = (PFNGLUNIFORM4IVPROC)(ptrdiff_t)get_proc("glUniform4iv");
  if (glow_glUniform4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)(ptrdiff_t)get_proc("glTexCoord1dv");
  if (glow_glTexCoord1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glScalef = (PFNGLSCALEFPROC)(ptrdiff_t)get_proc("glScalef");
  if (glow_glScalef == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScalef\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScalef\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)(ptrdiff_t)get_proc("glCopyTexImage2D");
  if (glow_glCopyTexImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexImage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)(ptrdiff_t)get_proc("glSecondaryColor3us");
  if (glow_glSecondaryColor3us == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3us\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3us\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexsv = (PFNGLINDEXSVPROC)(ptrdiff_t)get_proc("glIndexsv");
  if (glow_glIndexsv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexsv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexsv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)(ptrdiff_t)get_proc("glRasterPos3iv");
  if (glow_glRasterPos3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)(ptrdiff_t)get_proc("glGetSubroutineIndex");
  if (glow_glGetSubroutineIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSubroutineIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSubroutineIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4ub = (PFNGLCOLOR4UBPROC)(ptrdiff_t)get_proc("glColor4ub");
  if (glow_glColor4ub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4ub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4ub\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2fv = (PFNGLUNIFORM2FVPROC)(ptrdiff_t)get_proc("glUniform2fv");
  if (glow_glUniform2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(ptrdiff_t)get_proc("glGetSubroutineUniformLocation");
  if (glow_glGetSubroutineUniformLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSubroutineUniformLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSubroutineUniformLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(ptrdiff_t)get_proc("glShaderStorageBlockBinding");
  if (glow_glShaderStorageBlockBinding == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShaderStorageBlockBinding\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShaderStorageBlockBinding\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)(ptrdiff_t)get_proc("glTexSubImage3D");
  if (glow_glTexSubImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexSubImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexSubImage3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightModelf = (PFNGLLIGHTMODELFPROC)(ptrdiff_t)get_proc("glLightModelf");
  if (glow_glLightModelf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModelf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModelf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)(ptrdiff_t)get_proc("glWindowPos3fv");
  if (glow_glWindowPos3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)(ptrdiff_t)get_proc("glStencilFuncSeparate");
  if (glow_glStencilFuncSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilFuncSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilFuncSeparate\n");
#endif
    unresolved_count += 1;
  } 
  glow_glReadBuffer = (PFNGLREADBUFFERPROC)(ptrdiff_t)get_proc("glReadBuffer");
  if (glow_glReadBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glReadBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glReadBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)(ptrdiff_t)get_proc("glMultiTexCoord3fv");
  if (glow_glMultiTexCoord3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)(ptrdiff_t)get_proc("glCheckFramebufferStatus");
  if (glow_glCheckFramebufferStatus == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCheckFramebufferStatus\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCheckFramebufferStatus\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)(ptrdiff_t)get_proc("glProgramUniform4uiv");
  if (glow_glProgramUniform4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2i = (PFNGLVERTEX2IPROC)(ptrdiff_t)get_proc("glVertex2i");
  if (glow_glVertex2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glAlphaFunc = (PFNGLALPHAFUNCPROC)(ptrdiff_t)get_proc("glAlphaFunc");
  if (glow_glAlphaFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAlphaFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAlphaFunc\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)(ptrdiff_t)get_proc("glDrawBuffers");
  if (glow_glDrawBuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawBuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawBuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)(ptrdiff_t)get_proc("glVertexAttrib2f");
  if (glow_glVertexAttrib2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix3x2fv");
  if (glow_glProgramUniformMatrix3x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2iv = (PFNGLVERTEX2IVPROC)(ptrdiff_t)get_proc("glVertex2iv");
  if (glow_glVertex2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)(ptrdiff_t)get_proc("glCompressedTexImage1D");
  if (glow_glCompressedTexImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexImage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2d = (PFNGLVERTEX2DPROC)(ptrdiff_t)get_proc("glVertex2d");
  if (glow_glVertex2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightf = (PFNGLLIGHTFPROC)(ptrdiff_t)get_proc("glLightf");
  if (glow_glLightf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFenceSync = (PFNGLFENCESYNCPROC)(ptrdiff_t)get_proc("glFenceSync");
  if (glow_glFenceSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFenceSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFenceSync\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)(ptrdiff_t)get_proc("glVertexAttribP4ui");
  if (glow_glVertexAttribP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)(ptrdiff_t)get_proc("glTexCoordP3ui");
  if (glow_glTexCoordP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)(ptrdiff_t)get_proc("glTexCoordP4ui");
  if (glow_glTexCoordP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)(ptrdiff_t)get_proc("glTexBufferRange");
  if (glow_glTexBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexBufferRange\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRectiv = (PFNGLRECTIVPROC)(ptrdiff_t)get_proc("glRectiv");
  if (glow_glRectiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLinkProgram = (PFNGLLINKPROGRAMPROC)(ptrdiff_t)get_proc("glLinkProgram");
  if (glow_glLinkProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLinkProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLinkProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsTexture = (PFNGLISTEXTUREPROC)(ptrdiff_t)get_proc("glIsTexture");
  if (glow_glIsTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsTexture\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramiv = (PFNGLGETPROGRAMIVPROC)(ptrdiff_t)get_proc("glGetProgramiv");
  if (glow_glGetProgramiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1f = (PFNGLUNIFORM1FPROC)(ptrdiff_t)get_proc("glUniform1f");
  if (glow_glUniform1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)(ptrdiff_t)get_proc("glGetProgramInterfaceiv");
  if (glow_glGetProgramInterfaceiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramInterfaceiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramInterfaceiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)(ptrdiff_t)get_proc("glGetUniformLocation");
  if (glow_glGetUniformLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(ptrdiff_t)get_proc("glDrawElementsInstancedBaseVertex");
  if (glow_glDrawElementsInstancedBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstancedBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstancedBaseVertex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3dv = (PFNGLCOLOR3DVPROC)(ptrdiff_t)get_proc("glColor3dv");
  if (glow_glColor3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)(ptrdiff_t)get_proc("glWindowPos2sv");
  if (glow_glWindowPos2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1fv = (PFNGLUNIFORM1FVPROC)(ptrdiff_t)get_proc("glUniform1fv");
  if (glow_glUniform1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)(ptrdiff_t)get_proc("glSamplerParameterIuiv");
  if (glow_glSamplerParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterIuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)(ptrdiff_t)get_proc("glCopyTexSubImage3D");
  if (glow_glCopyTexSubImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyTexSubImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyTexSubImage3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)(ptrdiff_t)get_proc("glGetAttribLocation");
  if (glow_glGetAttribLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetAttribLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetAttribLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)(ptrdiff_t)get_proc("glUniformMatrix4x3fv");
  if (glow_glUniformMatrix4x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)(ptrdiff_t)get_proc("glVertexAttribI2ui");
  if (glow_glVertexAttribI2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)(ptrdiff_t)get_proc("glBlendEquationSeparatei");
  if (glow_glBlendEquationSeparatei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquationSeparatei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquationSeparatei\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)(ptrdiff_t)get_proc("glWindowPos2fv");
  if (glow_glWindowPos2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelMapfv = (PFNGLPIXELMAPFVPROC)(ptrdiff_t)get_proc("glPixelMapfv");
  if (glow_glPixelMapfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelMapfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelMapfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)(ptrdiff_t)get_proc("glGetActiveAttrib");
  if (glow_glGetActiveAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveAttrib\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)(ptrdiff_t)get_proc("glGetUniformSubroutineuiv");
  if (glow_glGetUniformSubroutineuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformSubroutineuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformSubroutineuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)(ptrdiff_t)get_proc("glTexCoord1sv");
  if (glow_glTexCoord1sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)(ptrdiff_t)get_proc("glVertexAttribL2d");
  if (glow_glVertexAttribL2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)(ptrdiff_t)get_proc("glUniform2uiv");
  if (glow_glUniform2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)(ptrdiff_t)get_proc("glInterleavedArrays");
  if (glow_glInterleavedArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInterleavedArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInterleavedArrays\n");
#endif
    unresolved_count += 1;
  } 
  glow_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)(ptrdiff_t)get_proc("glAreTexturesResident");
  if (glow_glAreTexturesResident == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAreTexturesResident\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAreTexturesResident\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)(ptrdiff_t)get_proc("glMultiTexCoord1s");
  if (glow_glMultiTexCoord1s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)(ptrdiff_t)get_proc("glVertexAttribP3ui");
  if (glow_glVertexAttribP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix4x3dv");
  if (glow_glProgramUniformMatrix4x3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3f = (PFNGLTEXCOORD3FPROC)(ptrdiff_t)get_proc("glTexCoord3f");
  if (glow_glTexCoord3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)(ptrdiff_t)get_proc("glVertexAttribL3dv");
  if (glow_glVertexAttribL3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)(ptrdiff_t)get_proc("glMultiTexCoord4f");
  if (glow_glMultiTexCoord4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetShaderiv = (PFNGLGETSHADERIVPROC)(ptrdiff_t)get_proc("glGetShaderiv");
  if (glow_glGetShaderiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)(ptrdiff_t)get_proc("glGetSamplerParameterfv");
  if (glow_glGetSamplerParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(ptrdiff_t)get_proc("glMultiDrawElementsIndirect");
  if (glow_glMultiDrawElementsIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawElementsIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawElementsIndirect\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)(ptrdiff_t)get_proc("glDebugMessageInsert");
  if (glow_glDebugMessageInsert == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDebugMessageInsert\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDebugMessageInsert\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)(ptrdiff_t)get_proc("glMultiTexCoord1d");
  if (glow_glMultiTexCoord1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4i = (PFNGLCOLOR4IPROC)(ptrdiff_t)get_proc("glColor4i");
  if (glow_glColor4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2dv = (PFNGLVERTEX2DVPROC)(ptrdiff_t)get_proc("glVertex2dv");
  if (glow_glVertex2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteTextures = (PFNGLDELETETEXTURESPROC)(ptrdiff_t)get_proc("glDeleteTextures");
  if (glow_glDeleteTextures == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteTextures\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteTextures\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexParameteri = (PFNGLTEXPARAMETERIPROC)(ptrdiff_t)get_proc("glTexParameteri");
  if (glow_glTexParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameteri\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)(ptrdiff_t)get_proc("glRasterPos4sv");
  if (glow_glRasterPos4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glPauseTransformFeedback");
  if (glow_glPauseTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPauseTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPauseTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexd = (PFNGLINDEXDPROC)(ptrdiff_t)get_proc("glIndexd");
  if (glow_glIndexd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)(ptrdiff_t)get_proc("glVertexAttribI1i");
  if (glow_glVertexAttribI1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(ptrdiff_t)get_proc("glDrawElementsInstancedBaseInstance");
  if (glow_glDrawElementsInstancedBaseInstance == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstancedBaseInstance\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstancedBaseInstance\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClampColor = (PFNGLCLAMPCOLORPROC)(ptrdiff_t)get_proc("glClampColor");
  if (glow_glClampColor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClampColor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClampColor\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)(ptrdiff_t)get_proc("glDrawElementsInstanced");
  if (glow_glDrawElementsInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstanced\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)(ptrdiff_t)get_proc("glBindImageTexture");
  if (glow_glBindImageTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindImageTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindImageTexture\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(ptrdiff_t)get_proc("glDrawTransformFeedbackStreamInstanced");
  if (glow_glDrawTransformFeedbackStreamInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedbackStreamInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedbackStreamInstanced\n");
#endif
    unresolved_count += 1;
  } 
  glow_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)(ptrdiff_t)get_proc("glObjectPtrLabel");
  if (glow_glObjectPtrLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glObjectPtrLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glObjectPtrLabel\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4iv = (PFNGLCOLOR4IVPROC)(ptrdiff_t)get_proc("glColor4iv");
  if (glow_glColor4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)(ptrdiff_t)get_proc("glWindowPos3sv");
  if (glow_glWindowPos3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)(ptrdiff_t)get_proc("glVertexAttrib3dv");
  if (glow_glVertexAttrib3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)(ptrdiff_t)get_proc("glUniform3uiv");
  if (glow_glUniform3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)(ptrdiff_t)get_proc("glFramebufferTexture");
  if (glow_glFramebufferTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTexture\n");
#endif
    unresolved_count += 1;
  } 
  glow_glActiveTexture = (PFNGLACTIVETEXTUREPROC)(ptrdiff_t)get_proc("glActiveTexture");
  if (glow_glActiveTexture == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glActiveTexture\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glActiveTexture\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMap1f = (PFNGLMAP1FPROC)(ptrdiff_t)get_proc("glMap1f");
  if (glow_glMap1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMap1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMap1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)(ptrdiff_t)get_proc("glPixelMapuiv");
  if (glow_glPixelMapuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelMapuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelMapuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glViewport = (PFNGLVIEWPORTPROC)(ptrdiff_t)get_proc("glViewport");
  if (glow_glViewport == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewport\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewport\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)(ptrdiff_t)get_proc("glBeginConditionalRender");
  if (glow_glBeginConditionalRender == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginConditionalRender\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginConditionalRender\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)(ptrdiff_t)get_proc("glUniformSubroutinesuiv");
  if (glow_glUniformSubroutinesuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformSubroutinesuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformSubroutinesuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFrontFace = (PFNGLFRONTFACEPROC)(ptrdiff_t)get_proc("glFrontFace");
  if (glow_glFrontFace == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFrontFace\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFrontFace\n");
#endif
    unresolved_count += 1;
  } 
  glow_glScissor = (PFNGLSCISSORPROC)(ptrdiff_t)get_proc("glScissor");
  if (glow_glScissor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissor\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3d = (PFNGLRASTERPOS3DPROC)(ptrdiff_t)get_proc("glRasterPos3d");
  if (glow_glRasterPos3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2i = (PFNGLTEXCOORD2IPROC)(ptrdiff_t)get_proc("glTexCoord2i");
  if (glow_glTexCoord2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLightModeli = (PFNGLLIGHTMODELIPROC)(ptrdiff_t)get_proc("glLightModeli");
  if (glow_glLightModeli == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLightModeli\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLightModeli\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)(ptrdiff_t)get_proc("glGetBooleani_v");
  if (glow_glGetBooleani_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBooleani_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBooleani_v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetFloati_v = (PFNGLGETFLOATI_VPROC)(ptrdiff_t)get_proc("glGetFloati_v");
  if (glow_glGetFloati_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFloati_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFloati_v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glHint = (PFNGLHINTPROC)(ptrdiff_t)get_proc("glHint");
  if (glow_glHint == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glHint\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glHint\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)(ptrdiff_t)get_proc("glLoadTransposeMatrixf");
  if (glow_glLoadTransposeMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadTransposeMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadTransposeMatrixf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)(ptrdiff_t)get_proc("glProgramUniform2i");
  if (glow_glProgramUniform2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix4fv");
  if (glow_glProgramUniformMatrix4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexGenfv = (PFNGLTEXGENFVPROC)(ptrdiff_t)get_proc("glTexGenfv");
  if (glow_glTexGenfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGenfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGenfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)(ptrdiff_t)get_proc("glVertexAttribI3iv");
  if (glow_glVertexAttribI3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)(ptrdiff_t)get_proc("glDrawElementsBaseVertex");
  if (glow_glDrawElementsBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsBaseVertex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)(ptrdiff_t)get_proc("glMultiTexCoordP4uiv");
  if (glow_glMultiTexCoordP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)(ptrdiff_t)get_proc("glDeleteProgramPipelines");
  if (glow_glDeleteProgramPipelines == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteProgramPipelines\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteProgramPipelines\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3d = (PFNGLNORMAL3DPROC)(ptrdiff_t)get_proc("glNormal3d");
  if (glow_glNormal3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glDrawTransformFeedback");
  if (glow_glDrawTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetMaterialiv = (PFNGLGETMATERIALIVPROC)(ptrdiff_t)get_proc("glGetMaterialiv");
  if (glow_glGetMaterialiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetMaterialiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetMaterialiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)(ptrdiff_t)get_proc("glMultTransposeMatrixd");
  if (glow_glMultTransposeMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultTransposeMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultTransposeMatrixd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsShader = (PFNGLISSHADERPROC)(ptrdiff_t)get_proc("glIsShader");
  if (glow_glIsShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsShader\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)(ptrdiff_t)get_proc("glDebugMessageControl");
  if (glow_glDebugMessageControl == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDebugMessageControl\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDebugMessageControl\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2s = (PFNGLRASTERPOS2SPROC)(ptrdiff_t)get_proc("glRasterPos2s");
  if (glow_glRasterPos2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogCoordfv = (PFNGLFOGCOORDFVPROC)(ptrdiff_t)get_proc("glFogCoordfv");
  if (glow_glFogCoordfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)(ptrdiff_t)get_proc("glWindowPos3iv");
  if (glow_glWindowPos3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)(ptrdiff_t)get_proc("glBindProgramPipeline");
  if (glow_glBindProgramPipeline == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindProgramPipeline\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindProgramPipeline\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)(ptrdiff_t)get_proc("glTexCoord3sv");
  if (glow_glTexCoord3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)(ptrdiff_t)get_proc("glVertexAttribL3d");
  if (glow_glVertexAttribL3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)(ptrdiff_t)get_proc("glGetQueryObjectiv");
  if (glow_glGetQueryObjectiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjectiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjectiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)(ptrdiff_t)get_proc("glGetVertexAttribfv");
  if (glow_glGetVertexAttribfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(ptrdiff_t)get_proc("glGetProgramResourceLocationIndex");
  if (glow_glGetProgramResourceLocationIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceLocationIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceLocationIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4i = (PFNGLVERTEX4IPROC)(ptrdiff_t)get_proc("glVertex4i");
  if (glow_glVertex4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4s = (PFNGLVERTEX4SPROC)(ptrdiff_t)get_proc("glVertex4s");
  if (glow_glVertex4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendFunci = (PFNGLBLENDFUNCIPROC)(ptrdiff_t)get_proc("glBlendFunci");
  if (glow_glBlendFunci == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFunci\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFunci\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3s = (PFNGLRASTERPOS3SPROC)(ptrdiff_t)get_proc("glRasterPos3s");
  if (glow_glRasterPos3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteShader = (PFNGLDELETESHADERPROC)(ptrdiff_t)get_proc("glDeleteShader");
  if (glow_glDeleteShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteShader\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)(ptrdiff_t)get_proc("glVertexAttrib4Nsv");
  if (glow_glVertexAttrib4Nsv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nsv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nsv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)(ptrdiff_t)get_proc("glMultiTexCoordP2uiv");
  if (glow_glMultiTexCoordP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(ptrdiff_t)get_proc("glTexStorage2DMultisample");
  if (glow_glTexStorage2DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage2DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage2DMultisample\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)(ptrdiff_t)get_proc("glGetTexParameterfv");
  if (glow_glGetTexParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)(ptrdiff_t)get_proc("glValidateProgram");
  if (glow_glValidateProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glValidateProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glValidateProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)(ptrdiff_t)get_proc("glVertexAttribI1ui");
  if (glow_glVertexAttribI1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI1ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)(ptrdiff_t)get_proc("glGetBufferParameteri64v");
  if (glow_glGetBufferParameteri64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferParameteri64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferParameteri64v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)(ptrdiff_t)get_proc("glMultiTexCoordP4ui");
  if (glow_glMultiTexCoordP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)(ptrdiff_t)get_proc("glMultiTexCoord1fv");
  if (glow_glMultiTexCoord1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)(ptrdiff_t)get_proc("glTexCoord4fv");
  if (glow_glTexCoord4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)(ptrdiff_t)get_proc("glUniformBlockBinding");
  if (glow_glUniformBlockBinding == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformBlockBinding\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformBlockBinding\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)(ptrdiff_t)get_proc("glTexCoordP1ui");
  if (glow_glTexCoordP1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP1ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexdv = (PFNGLINDEXDVPROC)(ptrdiff_t)get_proc("glIndexdv");
  if (glow_glIndexdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexdv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)(ptrdiff_t)get_proc("glTexParameterIuiv");
  if (glow_glTexParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterIuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)(ptrdiff_t)get_proc("glClearBufferfv");
  if (glow_glClearBufferfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)(ptrdiff_t)get_proc("glGenVertexArrays");
  if (glow_glGenVertexArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenVertexArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenVertexArrays\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)(ptrdiff_t)get_proc("glProgramUniform1fv");
  if (glow_glProgramUniform1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glObjectLabel = (PFNGLOBJECTLABELPROC)(ptrdiff_t)get_proc("glObjectLabel");
  if (glow_glObjectLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glObjectLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glObjectLabel\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)(ptrdiff_t)get_proc("glMultiTexCoord4iv");
  if (glow_glMultiTexCoord4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)(ptrdiff_t)get_proc("glVertexAttrib3s");
  if (glow_glVertexAttrib3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)(ptrdiff_t)get_proc("glVertexAttribP2ui");
  if (glow_glVertexAttribP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)(ptrdiff_t)get_proc("glMinSampleShading");
  if (glow_glMinSampleShading == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMinSampleShading\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMinSampleShading\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)(ptrdiff_t)get_proc("glVertexAttribL4d");
  if (glow_glVertexAttribL4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogCoorddv = (PFNGLFOGCOORDDVPROC)(ptrdiff_t)get_proc("glFogCoorddv");
  if (glow_glFogCoorddv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoorddv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoorddv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(ptrdiff_t)get_proc("glDrawRangeElementsBaseVertex");
  if (glow_glDrawRangeElementsBaseVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawRangeElementsBaseVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawRangeElementsBaseVertex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenLists = (PFNGLGENLISTSPROC)(ptrdiff_t)get_proc("glGenLists");
  if (glow_glGenLists == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenLists\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenLists\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)(ptrdiff_t)get_proc("glWindowPos2s");
  if (glow_glWindowPos2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)(ptrdiff_t)get_proc("glUniform4uiv");
  if (glow_glUniform4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)(ptrdiff_t)get_proc("glSamplerParameterf");
  if (glow_glSamplerParameterf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLineStipple = (PFNGLLINESTIPPLEPROC)(ptrdiff_t)get_proc("glLineStipple");
  if (glow_glLineStipple == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLineStipple\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLineStipple\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)(ptrdiff_t)get_proc("glProgramUniform2uiv");
  if (glow_glProgramUniform2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3d = (PFNGLVERTEX3DPROC)(ptrdiff_t)get_proc("glVertex3d");
  if (glow_glVertex3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)(ptrdiff_t)get_proc("glBindAttribLocation");
  if (glow_glBindAttribLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindAttribLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindAttribLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)(ptrdiff_t)get_proc("glUniformMatrix2x4dv");
  if (glow_glUniformMatrix2x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)(ptrdiff_t)get_proc("glEvalCoord1dv");
  if (glow_glEvalCoord1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord2d = (PFNGLEVALCOORD2DPROC)(ptrdiff_t)get_proc("glEvalCoord2d");
  if (glow_glEvalCoord2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)(ptrdiff_t)get_proc("glGetPixelMapfv");
  if (glow_glGetPixelMapfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPixelMapfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPixelMapfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)(ptrdiff_t)get_proc("glBindVertexArray");
  if (glow_glBindVertexArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindVertexArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindVertexArray\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix3dv");
  if (glow_glProgramUniformMatrix3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelStorei = (PFNGLPIXELSTOREIPROC)(ptrdiff_t)get_proc("glPixelStorei");
  if (glow_glPixelStorei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelStorei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelStorei\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexPointer = (PFNGLVERTEXPOINTERPROC)(ptrdiff_t)get_proc("glVertexPointer");
  if (glow_glVertexPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFrustum = (PFNGLFRUSTUMPROC)(ptrdiff_t)get_proc("glFrustum");
  if (glow_glFrustum == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFrustum\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFrustum\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLoadName = (PFNGLLOADNAMEPROC)(ptrdiff_t)get_proc("glLoadName");
  if (glow_glLoadName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)(ptrdiff_t)get_proc("glSecondaryColor3ub");
  if (glow_glSecondaryColor3ub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3ub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3ub\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)(ptrdiff_t)get_proc("glVertexAttrib4Nusv");
  if (glow_glVertexAttrib4Nusv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nusv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nusv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(ptrdiff_t)get_proc("glFlushMappedBufferRange");
  if (glow_glFlushMappedBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFlushMappedBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFlushMappedBufferRange\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramBinary = (PFNGLPROGRAMBINARYPROC)(ptrdiff_t)get_proc("glProgramBinary");
  if (glow_glProgramBinary == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramBinary\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramBinary\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)(ptrdiff_t)get_proc("glTexCoord2fv");
  if (glow_glTexCoord2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)(ptrdiff_t)get_proc("glScissorIndexedv");
  if (glow_glScissorIndexedv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissorIndexedv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissorIndexedv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord1f = (PFNGLEVALCOORD1FPROC)(ptrdiff_t)get_proc("glEvalCoord1f");
  if (glow_glEvalCoord1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4f = (PFNGLUNIFORM4FPROC)(ptrdiff_t)get_proc("glUniform4f");
  if (glow_glUniform4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)(ptrdiff_t)get_proc("glInvalidateBufferSubData");
  if (glow_glInvalidateBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateBufferSubData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)(ptrdiff_t)get_proc("glMultiTexCoord4i");
  if (glow_glMultiTexCoord4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)(ptrdiff_t)get_proc("glDeleteFramebuffers");
  if (glow_glDeleteFramebuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteFramebuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteFramebuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetIntegerv = (PFNGLGETINTEGERVPROC)(ptrdiff_t)get_proc("glGetIntegerv");
  if (glow_glGetIntegerv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetIntegerv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetIntegerv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)(ptrdiff_t)get_proc("glLoadTransposeMatrixd");
  if (glow_glLoadTransposeMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadTransposeMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadTransposeMatrixd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)(ptrdiff_t)get_proc("glProgramUniform3dv");
  if (glow_glProgramUniform3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4sv = (PFNGLCOLOR4SVPROC)(ptrdiff_t)get_proc("glColor4sv");
  if (glow_glColor4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)(ptrdiff_t)get_proc("glMultTransposeMatrixf");
  if (glow_glMultTransposeMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultTransposeMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultTransposeMatrixf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)(ptrdiff_t)get_proc("glBlendEquationSeparate");
  if (glow_glBlendEquationSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquationSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquationSeparate\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1i = (PFNGLUNIFORM1IPROC)(ptrdiff_t)get_proc("glUniform1i");
  if (glow_glUniform1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)(ptrdiff_t)get_proc("glBlendEquationi");
  if (glow_glBlendEquationi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendEquationi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendEquationi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)(ptrdiff_t)get_proc("glProgramUniform4dv");
  if (glow_glProgramUniform4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)(ptrdiff_t)get_proc("glMemoryBarrier");
  if (glow_glMemoryBarrier == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMemoryBarrier\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMemoryBarrier\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)(ptrdiff_t)get_proc("glEvalCoord1fv");
  if (glow_glEvalCoord1fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord1fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord1fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)(ptrdiff_t)get_proc("glWindowPos2i");
  if (glow_glWindowPos2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteProgram = (PFNGLDELETEPROGRAMPROC)(ptrdiff_t)get_proc("glDeleteProgram");
  if (glow_glDeleteProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)(ptrdiff_t)get_proc("glProgramUniform4d");
  if (glow_glProgramUniform4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)(ptrdiff_t)get_proc("glMultiTexCoord2fv");
  if (glow_glMultiTexCoord2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexP4ui = (PFNGLVERTEXP4UIPROC)(ptrdiff_t)get_proc("glVertexP4ui");
  if (glow_glVertexP4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(ptrdiff_t)get_proc("glGetProgramPipelineInfoLog");
  if (glow_glGetProgramPipelineInfoLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramPipelineInfoLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramPipelineInfoLog\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)(ptrdiff_t)get_proc("glVertexAttribI3uiv");
  if (glow_glVertexAttribI3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)(ptrdiff_t)get_proc("glVertexAttrib4Nuiv");
  if (glow_glVertexAttrib4Nuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)(ptrdiff_t)get_proc("glPixelTransferi");
  if (glow_glPixelTransferi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelTransferi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelTransferi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)(ptrdiff_t)get_proc("glMultiTexCoord3i");
  if (glow_glMultiTexCoord3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)(ptrdiff_t)get_proc("glVertexAttribI3ui");
  if (glow_glVertexAttribI3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)(ptrdiff_t)get_proc("glIsFramebuffer");
  if (glow_glIsFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsFramebuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexP3ui = (PFNGLVERTEXP3UIPROC)(ptrdiff_t)get_proc("glVertexP3ui");
  if (glow_glVertexP3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsEnabled = (PFNGLISENABLEDPROC)(ptrdiff_t)get_proc("glIsEnabled");
  if (glow_glIsEnabled == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsEnabled\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsEnabled\n");
#endif
    unresolved_count += 1;
  } 
  glow_glScissorArrayv = (PFNGLSCISSORARRAYVPROC)(ptrdiff_t)get_proc("glScissorArrayv");
  if (glow_glScissorArrayv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissorArrayv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissorArrayv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)(ptrdiff_t)get_proc("glSecondaryColor3bv");
  if (glow_glSecondaryColor3bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3bv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3f = (PFNGLVERTEX3FPROC)(ptrdiff_t)get_proc("glVertex3f");
  if (glow_glVertex3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)(ptrdiff_t)get_proc("glMultiTexCoord2dv");
  if (glow_glMultiTexCoord2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)(ptrdiff_t)get_proc("glGetQueryObjecti64v");
  if (glow_glGetQueryObjecti64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetQueryObjecti64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetQueryObjecti64v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetTexLevelParameteriv");
  if (glow_glGetTexLevelParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexLevelParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexLevelParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)(ptrdiff_t)get_proc("glWindowPos3dv");
  if (glow_glWindowPos3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)(ptrdiff_t)get_proc("glMultiTexCoord1f");
  if (glow_glMultiTexCoord1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3i = (PFNGLNORMAL3IPROC)(ptrdiff_t)get_proc("glNormal3i");
  if (glow_glNormal3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)(ptrdiff_t)get_proc("glRasterPos2iv");
  if (glow_glRasterPos2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3iv = (PFNGLVERTEX3IVPROC)(ptrdiff_t)get_proc("glVertex3iv");
  if (glow_glVertex3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)(ptrdiff_t)get_proc("glEvalCoord2fv");
  if (glow_glEvalCoord2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)(ptrdiff_t)get_proc("glUniformMatrix3fv");
  if (glow_glUniformMatrix3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4s = (PFNGLCOLOR4SPROC)(ptrdiff_t)get_proc("glColor4s");
  if (glow_glColor4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4d = (PFNGLVERTEX4DPROC)(ptrdiff_t)get_proc("glVertex4d");
  if (glow_glVertex4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)(ptrdiff_t)get_proc("glGetInternalformativ");
  if (glow_glGetInternalformativ == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInternalformativ\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInternalformativ\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2d = (PFNGLUNIFORM2DPROC)(ptrdiff_t)get_proc("glUniform2d");
  if (glow_glUniform2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)(ptrdiff_t)get_proc("glIsProgramPipeline");
  if (glow_glIsProgramPipeline == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsProgramPipeline\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsProgramPipeline\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)(ptrdiff_t)get_proc("glVertexAttrib2sv");
  if (glow_glVertexAttrib2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4bv = (PFNGLCOLOR4BVPROC)(ptrdiff_t)get_proc("glColor4bv");
  if (glow_glColor4bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4bv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4f = (PFNGLVERTEX4FPROC)(ptrdiff_t)get_proc("glVertex4f");
  if (glow_glVertex4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)(ptrdiff_t)get_proc("glGetVertexAttribdv");
  if (glow_glGetVertexAttribdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribdv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)(ptrdiff_t)get_proc("glProgramUniform4i");
  if (glow_glProgramUniform4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetDoublev = (PFNGLGETDOUBLEVPROC)(ptrdiff_t)get_proc("glGetDoublev");
  if (glow_glGetDoublev == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetDoublev\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetDoublev\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)(ptrdiff_t)get_proc("glGetPixelMapusv");
  if (glow_glGetPixelMapusv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPixelMapusv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPixelMapusv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)(ptrdiff_t)get_proc("glProgramUniform4iv");
  if (glow_glProgramUniform4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)(ptrdiff_t)get_proc("glPopDebugGroup");
  if (glow_glPopDebugGroup == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopDebugGroup\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopDebugGroup\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLogicOp = (PFNGLLOGICOPPROC)(ptrdiff_t)get_proc("glLogicOp");
  if (glow_glLogicOp == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLogicOp\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLogicOp\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)(ptrdiff_t)get_proc("glWindowPos2d");
  if (glow_glWindowPos2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)(ptrdiff_t)get_proc("glMapBufferRange");
  if (glow_glMapBufferRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapBufferRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapBufferRange\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogCoordf = (PFNGLFOGCOORDFPROC)(ptrdiff_t)get_proc("glFogCoordf");
  if (glow_glFogCoordf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3dv = (PFNGLNORMAL3DVPROC)(ptrdiff_t)get_proc("glNormal3dv");
  if (glow_glNormal3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)(ptrdiff_t)get_proc("glGetShaderPrecisionFormat");
  if (glow_glGetShaderPrecisionFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderPrecisionFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderPrecisionFormat\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4d = (PFNGLCOLOR4DPROC)(ptrdiff_t)get_proc("glColor4d");
  if (glow_glColor4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix2fv");
  if (glow_glProgramUniformMatrix2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)(ptrdiff_t)get_proc("glTexStorage3D");
  if (glow_glTexStorage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)(ptrdiff_t)get_proc("glClearBufferiv");
  if (glow_glClearBufferiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRectf = (PFNGLRECTFPROC)(ptrdiff_t)get_proc("glRectf");
  if (glow_glRectf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(ptrdiff_t)get_proc("glGetTransformFeedbackVarying");
  if (glow_glGetTransformFeedbackVarying == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTransformFeedbackVarying\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTransformFeedbackVarying\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)(ptrdiff_t)get_proc("glMultiTexCoordP3uiv");
  if (glow_glMultiTexCoordP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)(ptrdiff_t)get_proc("glGetDoublei_v");
  if (glow_glGetDoublei_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetDoublei_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetDoublei_v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)(ptrdiff_t)get_proc("glTexParameterfv");
  if (glow_glTexParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)(ptrdiff_t)get_proc("glUniformMatrix2fv");
  if (glow_glUniformMatrix2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)(ptrdiff_t)get_proc("glGetFragDataLocation");
  if (glow_glGetFragDataLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFragDataLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFragDataLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)(ptrdiff_t)get_proc("glVertexP2uiv");
  if (glow_glVertexP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4d = (PFNGLUNIFORM4DPROC)(ptrdiff_t)get_proc("glUniform4d");
  if (glow_glUniform4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformdv = (PFNGLGETUNIFORMDVPROC)(ptrdiff_t)get_proc("glGetUniformdv");
  if (glow_glGetUniformdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformdv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexs = (PFNGLINDEXSPROC)(ptrdiff_t)get_proc("glIndexs");
  if (glow_glIndexs == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexs\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexs\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPushMatrix = (PFNGLPUSHMATRIXPROC)(ptrdiff_t)get_proc("glPushMatrix");
  if (glow_glPushMatrix == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushMatrix\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushMatrix\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4fv = (PFNGLUNIFORM4FVPROC)(ptrdiff_t)get_proc("glUniform4fv");
  if (glow_glUniform4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)(ptrdiff_t)get_proc("glTexCoordP3uiv");
  if (glow_glTexCoordP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)(ptrdiff_t)get_proc("glProgramUniform2iv");
  if (glow_glProgramUniform2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4ubv = (PFNGLCOLOR4UBVPROC)(ptrdiff_t)get_proc("glColor4ubv");
  if (glow_glColor4ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4ubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)(ptrdiff_t)get_proc("glMultiTexCoord4fv");
  if (glow_glMultiTexCoord4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)(ptrdiff_t)get_proc("glGetShaderSource");
  if (glow_glGetShaderSource == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderSource\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderSource\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)(ptrdiff_t)get_proc("glVertexAttribI2iv");
  if (glow_glVertexAttribI2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)(ptrdiff_t)get_proc("glVertexAttribI4ubv");
  if (glow_glVertexAttribI4ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4ubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)(ptrdiff_t)get_proc("glProgramUniform2f");
  if (glow_glProgramUniform2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)(ptrdiff_t)get_proc("glPushDebugGroup");
  if (glow_glPushDebugGroup == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushDebugGroup\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushDebugGroup\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)(ptrdiff_t)get_proc("glTexParameteriv");
  if (glow_glTexParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)(ptrdiff_t)get_proc("glDrawArraysInstanced");
  if (glow_glDrawArraysInstanced == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArraysInstanced\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArraysInstanced\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearDepthf = (PFNGLCLEARDEPTHFPROC)(ptrdiff_t)get_proc("glClearDepthf");
  if (glow_glClearDepthf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearDepthf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearDepthf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)(ptrdiff_t)get_proc("glGenProgramPipelines");
  if (glow_glGenProgramPipelines == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenProgramPipelines\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenProgramPipelines\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)(ptrdiff_t)get_proc("glInvalidateFramebuffer");
  if (glow_glInvalidateFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateFramebuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)(ptrdiff_t)get_proc("glMultiTexCoord4sv");
  if (glow_glMultiTexCoord4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)(ptrdiff_t)get_proc("glGetPixelMapuiv");
  if (glow_glGetPixelMapuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetPixelMapuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetPixelMapuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3sv = (PFNGLCOLOR3SVPROC)(ptrdiff_t)get_proc("glColor3sv");
  if (glow_glColor3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalPoint1 = (PFNGLEVALPOINT1PROC)(ptrdiff_t)get_proc("glEvalPoint1");
  if (glow_glEvalPoint1 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalPoint1\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalPoint1\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTranslated = (PFNGLTRANSLATEDPROC)(ptrdiff_t)get_proc("glTranslated");
  if (glow_glTranslated == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTranslated\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTranslated\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)(ptrdiff_t)get_proc("glVertexAttribI2i");
  if (glow_glVertexAttribI2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)(ptrdiff_t)get_proc("glGetTexParameterIuiv");
  if (glow_glGetTexParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameterIuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4us = (PFNGLCOLOR4USPROC)(ptrdiff_t)get_proc("glColor4us");
  if (glow_glColor4us == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4us\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4us\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)(ptrdiff_t)get_proc("glVertexAttribI4bv");
  if (glow_glVertexAttribI4bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4bv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)(ptrdiff_t)get_proc("glReleaseShaderCompiler");
  if (glow_glReleaseShaderCompiler == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glReleaseShaderCompiler\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glReleaseShaderCompiler\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexImage1D = (PFNGLTEXIMAGE1DPROC)(ptrdiff_t)get_proc("glTexImage1D");
  if (glow_glTexImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3ui = (PFNGLCOLOR3UIPROC)(ptrdiff_t)get_proc("glColor3ui");
  if (glow_glColor3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1i = (PFNGLTEXCOORD1IPROC)(ptrdiff_t)get_proc("glTexCoord1i");
  if (glow_glTexCoord1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)(ptrdiff_t)get_proc("glVertexAttrib4fv");
  if (glow_glVertexAttrib4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glBeginTransformFeedback");
  if (glow_glBeginTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetError = (PFNGLGETERRORPROC)(ptrdiff_t)get_proc("glGetError");
  if (glow_glGetError == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetError\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetError\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix4dv");
  if (glow_glProgramUniformMatrix4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)(ptrdiff_t)get_proc("glGetProgramBinary");
  if (glow_glGetProgramBinary == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramBinary\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramBinary\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)(ptrdiff_t)get_proc("glProgramUniform2dv");
  if (glow_glProgramUniform2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawBuffer = (PFNGLDRAWBUFFERPROC)(ptrdiff_t)get_proc("glDrawBuffer");
  if (glow_glDrawBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelZoom = (PFNGLPIXELZOOMPROC)(ptrdiff_t)get_proc("glPixelZoom");
  if (glow_glPixelZoom == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelZoom\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelZoom\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)(ptrdiff_t)get_proc("glMultiTexCoord1i");
  if (glow_glMultiTexCoord1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3i = (PFNGLUNIFORM3IPROC)(ptrdiff_t)get_proc("glUniform3i");
  if (glow_glUniform3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)(ptrdiff_t)get_proc("glGetObjectLabel");
  if (glow_glGetObjectLabel == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetObjectLabel\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetObjectLabel\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4i = (PFNGLRASTERPOS4IPROC)(ptrdiff_t)get_proc("glRasterPos4i");
  if (glow_glRasterPos4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)(ptrdiff_t)get_proc("glPointParameterf");
  if (glow_glPointParameterf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameterf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameterf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)(ptrdiff_t)get_proc("glSamplerParameterfv");
  if (glow_glSamplerParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIndexiv = (PFNGLINDEXIVPROC)(ptrdiff_t)get_proc("glIndexiv");
  if (glow_glIndexiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIndexiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIndexiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)(ptrdiff_t)get_proc("glWindowPos3s");
  if (glow_glWindowPos3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetBufferParameteriv");
  if (glow_glGetBufferParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)(ptrdiff_t)get_proc("glVertexAttribL2dv");
  if (glow_glVertexAttribL2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLineWidth = (PFNGLLINEWIDTHPROC)(ptrdiff_t)get_proc("glLineWidth");
  if (glow_glLineWidth == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLineWidth\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLineWidth\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform4i = (PFNGLUNIFORM4IPROC)(ptrdiff_t)get_proc("glUniform4i");
  if (glow_glUniform4i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform4i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform4i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4f = (PFNGLRASTERPOS4FPROC)(ptrdiff_t)get_proc("glRasterPos4f");
  if (glow_glRasterPos4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)(ptrdiff_t)get_proc("glTexCoord3iv");
  if (glow_glTexCoord3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)(ptrdiff_t)get_proc("glGetVertexAttribIiv");
  if (glow_glGetVertexAttribIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribIiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)(ptrdiff_t)get_proc("glFramebufferRenderbuffer");
  if (glow_glFramebufferRenderbuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferRenderbuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferRenderbuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetFramebufferAttachmentParameteriv");
  if (glow_glGetFramebufferAttachmentParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetFramebufferAttachmentParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetFramebufferAttachmentParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEnd = (PFNGLENDPROC)(ptrdiff_t)get_proc("glEnd");
  if (glow_glEnd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix3x4fv");
  if (glow_glProgramUniformMatrix3x4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)(ptrdiff_t)get_proc("glBlendFuncSeparatei");
  if (glow_glBlendFuncSeparatei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendFuncSeparatei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendFuncSeparatei\n");
#endif
    unresolved_count += 1;
  } 
  glow_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)(ptrdiff_t)get_proc("glStencilOpSeparate");
  if (glow_glStencilOpSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilOpSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilOpSeparate\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBeginQuery = (PFNGLBEGINQUERYPROC)(ptrdiff_t)get_proc("glBeginQuery");
  if (glow_glBeginQuery == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginQuery\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginQuery\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)(ptrdiff_t)get_proc("glVertexAttrib1d");
  if (glow_glVertexAttrib1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)(ptrdiff_t)get_proc("glProgramUniform3d");
  if (glow_glProgramUniform3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)(ptrdiff_t)get_proc("glVertexAttrib4dv");
  if (glow_glVertexAttrib4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glScaled = (PFNGLSCALEDPROC)(ptrdiff_t)get_proc("glScaled");
  if (glow_glScaled == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScaled\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScaled\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)(ptrdiff_t)get_proc("glGetActiveUniform");
  if (glow_glGetActiveUniform == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniform\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniform\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)(ptrdiff_t)get_proc("glVertexAttrib4Nubv");
  if (glow_glVertexAttrib4Nubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4Nubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4Nubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)(ptrdiff_t)get_proc("glUniformMatrix3x4dv");
  if (glow_glUniformMatrix3x4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix3x4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix3x4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)(ptrdiff_t)get_proc("glPointParameteriv");
  if (glow_glPointParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)(ptrdiff_t)get_proc("glUniformMatrix4x2dv");
  if (glow_glUniformMatrix4x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)(ptrdiff_t)get_proc("glProgramUniform2fv");
  if (glow_glProgramUniform2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glStencilMask = (PFNGLSTENCILMASKPROC)(ptrdiff_t)get_proc("glStencilMask");
  if (glow_glStencilMask == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilMask\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilMask\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)(ptrdiff_t)get_proc("glGetProgramStageiv");
  if (glow_glGetProgramStageiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramStageiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramStageiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)(ptrdiff_t)get_proc("glProgramUniform3uiv");
  if (glow_glProgramUniform3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexP2ui = (PFNGLVERTEXP2UIPROC)(ptrdiff_t)get_proc("glVertexP2ui");
  if (glow_glVertexP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexP2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)(ptrdiff_t)get_proc("glProgramUniform1d");
  if (glow_glProgramUniform1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)(ptrdiff_t)get_proc("glVertexAttrib1dv");
  if (glow_glVertexAttrib1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCallList = (PFNGLCALLLISTPROC)(ptrdiff_t)get_proc("glCallList");
  if (glow_glCallList == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCallList\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCallList\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)(ptrdiff_t)get_proc("glWindowPos2f");
  if (glow_glWindowPos2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenBuffers = (PFNGLGENBUFFERSPROC)(ptrdiff_t)get_proc("glGenBuffers");
  if (glow_glGenBuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenBuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenBuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)(ptrdiff_t)get_proc("glBufferSubData");
  if (glow_glBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBufferSubData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)(ptrdiff_t)get_proc("glVertexAttrib4ubv");
  if (glow_glVertexAttrib4ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4ubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRecti = (PFNGLRECTIPROC)(ptrdiff_t)get_proc("glRecti");
  if (glow_glRecti == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRecti\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRecti\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)(ptrdiff_t)get_proc("glTexCoordPointer");
  if (glow_glTexCoordPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)(ptrdiff_t)get_proc("glMultiTexCoord2s");
  if (glow_glMultiTexCoord2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)(ptrdiff_t)get_proc("glVertexAttribI3i");
  if (glow_glVertexAttribI3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)(ptrdiff_t)get_proc("glViewportArrayv");
  if (glow_glViewportArrayv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glViewportArrayv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glViewportArrayv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRectd = (PFNGLRECTDPROC)(ptrdiff_t)get_proc("glRectd");
  if (glow_glRectd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawArrays = (PFNGLDRAWARRAYSPROC)(ptrdiff_t)get_proc("glDrawArrays");
  if (glow_glDrawArrays == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArrays\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArrays\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCreateShader = (PFNGLCREATESHADERPROC)(ptrdiff_t)get_proc("glCreateShader");
  if (glow_glCreateShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCreateShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCreateShader\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)(ptrdiff_t)get_proc("glProgramUniform3i");
  if (glow_glProgramUniform3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)(ptrdiff_t)get_proc("glVertexAttribBinding");
  if (glow_glVertexAttribBinding == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribBinding\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribBinding\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)(ptrdiff_t)get_proc("glTexCoord2dv");
  if (glow_glTexCoord2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCreateProgram = (PFNGLCREATEPROGRAMPROC)(ptrdiff_t)get_proc("glCreateProgram");
  if (glow_glCreateProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCreateProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCreateProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)(ptrdiff_t)get_proc("glTexStorage2D");
  if (glow_glTexStorage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2f = (PFNGLTEXCOORD2FPROC)(ptrdiff_t)get_proc("glTexCoord2f");
  if (glow_glTexCoord2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)(ptrdiff_t)get_proc("glMultiTexCoord3s");
  if (glow_glMultiTexCoord3s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)(ptrdiff_t)get_proc("glVertexAttrib4bv");
  if (glow_glVertexAttrib4bv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4bv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4bv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3fv = (PFNGLCOLOR3FVPROC)(ptrdiff_t)get_proc("glColor3fv");
  if (glow_glColor3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogiv = (PFNGLFOGIVPROC)(ptrdiff_t)get_proc("glFogiv");
  if (glow_glFogiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexEnviv = (PFNGLTEXENVIVPROC)(ptrdiff_t)get_proc("glTexEnviv");
  if (glow_glTexEnviv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnviv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnviv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexGend = (PFNGLTEXGENDPROC)(ptrdiff_t)get_proc("glTexGend");
  if (glow_glTexGend == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGend\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGend\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)(ptrdiff_t)get_proc("glPopClientAttrib");
  if (glow_glPopClientAttrib == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopClientAttrib\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopClientAttrib\n");
#endif
    unresolved_count += 1;
  } 
  glow_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)(ptrdiff_t)get_proc("glStencilMaskSeparate");
  if (glow_glStencilMaskSeparate == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilMaskSeparate\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilMaskSeparate\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)(ptrdiff_t)get_proc("glSecondaryColorP3uiv");
  if (glow_glSecondaryColorP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColorP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColorP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFinish = (PFNGLFINISHPROC)(ptrdiff_t)get_proc("glFinish");
  if (glow_glFinish == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFinish\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFinish\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)(ptrdiff_t)get_proc("glVertexAttrib1s");
  if (glow_glVertexAttrib1s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3ubv = (PFNGLCOLOR3UBVPROC)(ptrdiff_t)get_proc("glColor3ubv");
  if (glow_glColor3ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3ubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)(ptrdiff_t)get_proc("glVertexAttribP2uiv");
  if (glow_glVertexAttribP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)(ptrdiff_t)get_proc("glMultiTexCoord3dv");
  if (glow_glMultiTexCoord3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1d = (PFNGLUNIFORM1DPROC)(ptrdiff_t)get_proc("glUniform1d");
  if (glow_glUniform1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3fv = (PFNGLVERTEX3FVPROC)(ptrdiff_t)get_proc("glVertex3fv");
  if (glow_glVertex3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glEndTransformFeedback");
  if (glow_glEndTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2sv = (PFNGLVERTEX2SVPROC)(ptrdiff_t)get_proc("glVertex2sv");
  if (glow_glVertex2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3f = (PFNGLNORMAL3FPROC)(ptrdiff_t)get_proc("glNormal3f");
  if (glow_glNormal3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogCoordd = (PFNGLFOGCOORDDPROC)(ptrdiff_t)get_proc("glFogCoordd");
  if (glow_glFogCoordd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDetachShader = (PFNGLDETACHSHADERPROC)(ptrdiff_t)get_proc("glDetachShader");
  if (glow_glDetachShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDetachShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDetachShader\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix4x2fv");
  if (glow_glProgramUniformMatrix4x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalMesh2 = (PFNGLEVALMESH2PROC)(ptrdiff_t)get_proc("glEvalMesh2");
  if (glow_glEvalMesh2 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalMesh2\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalMesh2\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexImage3D = (PFNGLTEXIMAGE3DPROC)(ptrdiff_t)get_proc("glTexImage3D");
  if (glow_glTexImage3D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage3D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage3D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorMaski = (PFNGLCOLORMASKIPROC)(ptrdiff_t)get_proc("glColorMaski");
  if (glow_glColorMaski == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorMaski\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorMaski\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClear = (PFNGLCLEARPROC)(ptrdiff_t)get_proc("glClear");
  if (glow_glClear == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClear\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClear\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsEnabledi = (PFNGLISENABLEDIPROC)(ptrdiff_t)get_proc("glIsEnabledi");
  if (glow_glIsEnabledi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsEnabledi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsEnabledi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)(ptrdiff_t)get_proc("glTexCoordP1uiv");
  if (glow_glTexCoordP1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP1uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)(ptrdiff_t)get_proc("glTexCoordP4uiv");
  if (glow_glTexCoordP4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4f = (PFNGLTEXCOORD4FPROC)(ptrdiff_t)get_proc("glTexCoord4f");
  if (glow_glTexCoord4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)(ptrdiff_t)get_proc("glBindRenderbuffer");
  if (glow_glBindRenderbuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindRenderbuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindRenderbuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTextureView = (PFNGLTEXTUREVIEWPROC)(ptrdiff_t)get_proc("glTextureView");
  if (glow_glTextureView == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTextureView\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTextureView\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)(ptrdiff_t)get_proc("glVertexAttrib2s");
  if (glow_glVertexAttrib2s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMaterialf = (PFNGLMATERIALFPROC)(ptrdiff_t)get_proc("glMaterialf");
  if (glow_glMaterialf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMaterialf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMaterialf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)(ptrdiff_t)get_proc("glEvalCoord2dv");
  if (glow_glEvalCoord2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalCoord2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalCoord2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)(ptrdiff_t)get_proc("glVertexAttribDivisor");
  if (glow_glVertexAttribDivisor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribDivisor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribDivisor\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)(ptrdiff_t)get_proc("glDrawElementsIndirect");
  if (glow_glDrawElementsIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsIndirect\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDepthRange = (PFNGLDEPTHRANGEPROC)(ptrdiff_t)get_proc("glDepthRange");
  if (glow_glDepthRange == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDepthRange\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDepthRange\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)(ptrdiff_t)get_proc("glSecondaryColor3uiv");
  if (glow_glSecondaryColor3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)(ptrdiff_t)get_proc("glClientWaitSync");
  if (glow_glClientWaitSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClientWaitSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClientWaitSync\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3d = (PFNGLCOLOR3DPROC)(ptrdiff_t)get_proc("glColor3d");
  if (glow_glColor3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4iv = (PFNGLVERTEX4IVPROC)(ptrdiff_t)get_proc("glVertex4iv");
  if (glow_glVertex4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormalPointer = (PFNGLNORMALPOINTERPROC)(ptrdiff_t)get_proc("glNormalPointer");
  if (glow_glNormalPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormalPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormalPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(ptrdiff_t)get_proc("glCompressedTexSubImage1D");
  if (glow_glCompressedTexSubImage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexSubImage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexSubImage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)(ptrdiff_t)get_proc("glDeleteRenderbuffers");
  if (glow_glDeleteRenderbuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteRenderbuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteRenderbuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)(ptrdiff_t)get_proc("glTexCoord1iv");
  if (glow_glTexCoord1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3usv = (PFNGLCOLOR3USVPROC)(ptrdiff_t)get_proc("glColor3usv");
  if (glow_glColor3usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3usv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSelectBuffer = (PFNGLSELECTBUFFERPROC)(ptrdiff_t)get_proc("glSelectBuffer");
  if (glow_glSelectBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSelectBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSelectBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)(ptrdiff_t)get_proc("glProgramUniform1i");
  if (glow_glProgramUniform1i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)(ptrdiff_t)get_proc("glMultiTexCoord3d");
  if (glow_glMultiTexCoord3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteSync = (PFNGLDELETESYNCPROC)(ptrdiff_t)get_proc("glDeleteSync");
  if (glow_glDeleteSync == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteSync\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteSync\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)(ptrdiff_t)get_proc("glProgramUniform4ui");
  if (glow_glProgramUniform4ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMaterialfv = (PFNGLMATERIALFVPROC)(ptrdiff_t)get_proc("glMaterialfv");
  if (glow_glMaterialfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMaterialfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMaterialfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenSamplers = (PFNGLGENSAMPLERSPROC)(ptrdiff_t)get_proc("glGenSamplers");
  if (glow_glGenSamplers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenSamplers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenSamplers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix3x2dv");
  if (glow_glProgramUniformMatrix3x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix3x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix3x2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)(ptrdiff_t)get_proc("glGetVertexAttribiv");
  if (glow_glGetVertexAttribiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3uiv = (PFNGLCOLOR3UIVPROC)(ptrdiff_t)get_proc("glColor3uiv");
  if (glow_glColor3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsQuery = (PFNGLISQUERYPROC)(ptrdiff_t)get_proc("glIsQuery");
  if (glow_glIsQuery == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsQuery\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsQuery\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)(ptrdiff_t)get_proc("glGenTransformFeedbacks");
  if (glow_glGenTransformFeedbacks == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenTransformFeedbacks\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenTransformFeedbacks\n");
#endif
    unresolved_count += 1;
  } 
  glow_glStencilFunc = (PFNGLSTENCILFUNCPROC)(ptrdiff_t)get_proc("glStencilFunc");
  if (glow_glStencilFunc == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glStencilFunc\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glStencilFunc\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEvalPoint2 = (PFNGLEVALPOINT2PROC)(ptrdiff_t)get_proc("glEvalPoint2");
  if (glow_glEvalPoint2 == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEvalPoint2\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEvalPoint2\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)(ptrdiff_t)get_proc("glGetProgramInfoLog");
  if (glow_glGetProgramInfoLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramInfoLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramInfoLog\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)(ptrdiff_t)get_proc("glVertexAttrib4uiv");
  if (glow_glVertexAttrib4uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)(ptrdiff_t)get_proc("glGenerateMipmap");
  if (glow_glGenerateMipmap == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenerateMipmap\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenerateMipmap\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetLightfv = (PFNGLGETLIGHTFVPROC)(ptrdiff_t)get_proc("glGetLightfv");
  if (glow_glGetLightfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetLightfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetLightfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)(ptrdiff_t)get_proc("glPrimitiveRestartIndex");
  if (glow_glPrimitiveRestartIndex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPrimitiveRestartIndex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPrimitiveRestartIndex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glReadPixels = (PFNGLREADPIXELSPROC)(ptrdiff_t)get_proc("glReadPixels");
  if (glow_glReadPixels == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glReadPixels\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glReadPixels\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)(ptrdiff_t)get_proc("glEnableVertexAttribArray");
  if (glow_glEnableVertexAttribArray == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnableVertexAttribArray\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnableVertexAttribArray\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUseProgram = (PFNGLUSEPROGRAMPROC)(ptrdiff_t)get_proc("glUseProgram");
  if (glow_glUseProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUseProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUseProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)(ptrdiff_t)get_proc("glVertexAttrib3fv");
  if (glow_glVertexAttrib3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)(ptrdiff_t)get_proc("glMultiTexCoord1sv");
  if (glow_glMultiTexCoord1sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)(ptrdiff_t)get_proc("glMultiTexCoord2d");
  if (glow_glMultiTexCoord2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)(ptrdiff_t)get_proc("glSecondaryColor3ubv");
  if (glow_glSecondaryColor3ubv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3ubv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3ubv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompileShader = (PFNGLCOMPILESHADERPROC)(ptrdiff_t)get_proc("glCompileShader");
  if (glow_glCompileShader == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompileShader\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompileShader\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(ptrdiff_t)get_proc("glGetActiveAtomicCounterBufferiv");
  if (glow_glGetActiveAtomicCounterBufferiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveAtomicCounterBufferiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveAtomicCounterBufferiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteLists = (PFNGLDELETELISTSPROC)(ptrdiff_t)get_proc("glDeleteLists");
  if (glow_glDeleteLists == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteLists\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteLists\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4s = (PFNGLTEXCOORD4SPROC)(ptrdiff_t)get_proc("glTexCoord4s");
  if (glow_glTexCoord4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)(ptrdiff_t)get_proc("glGenRenderbuffers");
  if (glow_glGenRenderbuffers == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGenRenderbuffers\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGenRenderbuffers\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)(ptrdiff_t)get_proc("glIsTransformFeedback");
  if (glow_glIsTransformFeedback == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsTransformFeedback\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsTransformFeedback\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)(ptrdiff_t)get_proc("glBeginQueryIndexed");
  if (glow_glBeginQueryIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBeginQueryIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBeginQueryIndexed\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4f = (PFNGLCOLOR4FPROC)(ptrdiff_t)get_proc("glColor4f");
  if (glow_glColor4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3i = (PFNGLTEXCOORD3IPROC)(ptrdiff_t)get_proc("glTexCoord3i");
  if (glow_glTexCoord3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)(ptrdiff_t)get_proc("glMultiTexCoord3sv");
  if (glow_glMultiTexCoord3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetRenderbufferParameteriv");
  if (glow_glGetRenderbufferParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetRenderbufferParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetRenderbufferParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)(ptrdiff_t)get_proc("glRasterPos2fv");
  if (glow_glRasterPos2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)(ptrdiff_t)get_proc("glBindBufferBase");
  if (glow_glBindBufferBase == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindBufferBase\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindBufferBase\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)(ptrdiff_t)get_proc("glClearBufferfi");
  if (glow_glClearBufferfi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearBufferfi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearBufferfi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)(ptrdiff_t)get_proc("glScissorIndexed");
  if (glow_glScissorIndexed == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glScissorIndexed\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glScissorIndexed\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)(ptrdiff_t)get_proc("glMultiTexCoord2sv");
  if (glow_glMultiTexCoord2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)(ptrdiff_t)get_proc("glSecondaryColor3ui");
  if (glow_glSecondaryColor3ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)(ptrdiff_t)get_proc("glTexParameterIiv");
  if (glow_glTexParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexParameterIiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)(ptrdiff_t)get_proc("glProgramUniform4f");
  if (glow_glProgramUniform4f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform4f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform4f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetTexParameteriv");
  if (glow_glGetTexParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetLightiv = (PFNGLGETLIGHTIVPROC)(ptrdiff_t)get_proc("glGetLightiv");
  if (glow_glGetLightiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetLightiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetLightiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexGendv = (PFNGLGETTEXGENDVPROC)(ptrdiff_t)get_proc("glGetTexGendv");
  if (glow_glGetTexGendv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexGendv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexGendv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)(ptrdiff_t)get_proc("glVertexAttribP1ui");
  if (glow_glVertexAttribP1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribP1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribP1ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)(ptrdiff_t)get_proc("glActiveShaderProgram");
  if (glow_glActiveShaderProgram == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glActiveShaderProgram\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glActiveShaderProgram\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)(ptrdiff_t)get_proc("glProgramUniform1uiv");
  if (glow_glProgramUniform1uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix4x2dv");
  if (glow_glProgramUniformMatrix4x2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix4x2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix4x2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(ptrdiff_t)get_proc("glTexStorage3DMultisample");
  if (glow_glTexStorage3DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage3DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage3DMultisample\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMapGrid2f = (PFNGLMAPGRID2FPROC)(ptrdiff_t)get_proc("glMapGrid2f");
  if (glow_glMapGrid2f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid2f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid2f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorMaterial = (PFNGLCOLORMATERIALPROC)(ptrdiff_t)get_proc("glColorMaterial");
  if (glow_glColorMaterial == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorMaterial\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorMaterial\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)(ptrdiff_t)get_proc("glVertexAttrib4usv");
  if (glow_glVertexAttrib4usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib4usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib4usv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetInteger64v = (PFNGLGETINTEGER64VPROC)(ptrdiff_t)get_proc("glGetInteger64v");
  if (glow_glGetInteger64v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInteger64v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInteger64v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1s = (PFNGLTEXCOORD1SPROC)(ptrdiff_t)get_proc("glTexCoord1s");
  if (glow_glTexCoord1s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClipPlane = (PFNGLCLIPPLANEPROC)(ptrdiff_t)get_proc("glClipPlane");
  if (glow_glClipPlane == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClipPlane\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClipPlane\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)(ptrdiff_t)get_proc("glDrawRangeElements");
  if (glow_glDrawRangeElements == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawRangeElements\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawRangeElements\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)(ptrdiff_t)get_proc("glMultiTexCoord2iv");
  if (glow_glMultiTexCoord2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)(ptrdiff_t)get_proc("glGetUniformiv");
  if (glow_glGetUniformiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCallLists = (PFNGLCALLLISTSPROC)(ptrdiff_t)get_proc("glCallLists");
  if (glow_glCallLists == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCallLists\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCallLists\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex2fv = (PFNGLVERTEX2FVPROC)(ptrdiff_t)get_proc("glVertex2fv");
  if (glow_glVertex2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)(ptrdiff_t)get_proc("glProvokingVertex");
  if (glow_glProvokingVertex == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProvokingVertex\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProvokingVertex\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)(ptrdiff_t)get_proc("glDispatchComputeIndirect");
  if (glow_glDispatchComputeIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDispatchComputeIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDispatchComputeIndirect\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord4d = (PFNGLTEXCOORD4DPROC)(ptrdiff_t)get_proc("glTexCoord4d");
  if (glow_glTexCoord4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)(ptrdiff_t)get_proc("glTexImage3DMultisample");
  if (glow_glTexImage3DMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage3DMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage3DMultisample\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4sv = (PFNGLVERTEX4SVPROC)(ptrdiff_t)get_proc("glVertex4sv");
  if (glow_glVertex4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogfv = (PFNGLFOGFVPROC)(ptrdiff_t)get_proc("glFogfv");
  if (glow_glFogfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)(ptrdiff_t)get_proc("glVertexAttribI4sv");
  if (glow_glVertexAttribI4sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(ptrdiff_t)get_proc("glGetActiveUniformBlockiv");
  if (glow_glGetActiveUniformBlockiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveUniformBlockiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveUniformBlockiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)(ptrdiff_t)get_proc("glGetSamplerParameteriv");
  if (glow_glGetSamplerParameteriv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameteriv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameteriv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)(ptrdiff_t)get_proc("glFramebufferParameteri");
  if (glow_glFramebufferParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferParameteri\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4fv = (PFNGLCOLOR4FVPROC)(ptrdiff_t)get_proc("glColor4fv");
  if (glow_glColor4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElements = (PFNGLDRAWELEMENTSPROC)(ptrdiff_t)get_proc("glDrawElements");
  if (glow_glDrawElements == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElements\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElements\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)(ptrdiff_t)get_proc("glSampleCoverage");
  if (glow_glSampleCoverage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSampleCoverage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSampleCoverage\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)(ptrdiff_t)get_proc("glVertexAttribL4dv");
  if (glow_glVertexAttribL4dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribL4dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribL4dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3iv = (PFNGLNORMAL3IVPROC)(ptrdiff_t)get_proc("glNormal3iv");
  if (glow_glNormal3iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glIsSampler = (PFNGLISSAMPLERPROC)(ptrdiff_t)get_proc("glIsSampler");
  if (glow_glIsSampler == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glIsSampler\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glIsSampler\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)(ptrdiff_t)get_proc("glGetProgramPipelineiv");
  if (glow_glGetProgramPipelineiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramPipelineiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramPipelineiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)(ptrdiff_t)get_proc("glInvalidateTexImage");
  if (glow_glInvalidateTexImage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateTexImage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateTexImage\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform1ui = (PFNGLUNIFORM1UIPROC)(ptrdiff_t)get_proc("glUniform1ui");
  if (glow_glUniform1ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform1ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform1ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBufferData = (PFNGLBUFFERDATAPROC)(ptrdiff_t)get_proc("glBufferData");
  if (glow_glBufferData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBufferData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBufferData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)(ptrdiff_t)get_proc("glUniformMatrix4fv");
  if (glow_glUniformMatrix4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)(ptrdiff_t)get_proc("glDrawArraysIndirect");
  if (glow_glDrawArraysIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArraysIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArraysIndirect\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)(ptrdiff_t)get_proc("glProgramUniform1dv");
  if (glow_glProgramUniform1dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform1dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform1dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(ptrdiff_t)get_proc("glDrawElementsInstancedBaseVertexBaseInstance");
  if (glow_glDrawElementsInstancedBaseVertexBaseInstance == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawElementsInstancedBaseVertexBaseInstance\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawElementsInstancedBaseVertexBaseInstance\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLoadMatrixd = (PFNGLLOADMATRIXDPROC)(ptrdiff_t)get_proc("glLoadMatrixd");
  if (glow_glLoadMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadMatrixd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(ptrdiff_t)get_proc("glCompressedTexSubImage2D");
  if (glow_glCompressedTexSubImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCompressedTexSubImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCompressedTexSubImage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)(ptrdiff_t)get_proc("glUniformMatrix4x2fv");
  if (glow_glUniformMatrix4x2fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix4x2fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix4x2fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)(ptrdiff_t)get_proc("glBindFramebuffer");
  if (glow_glBindFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindFramebuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)(ptrdiff_t)get_proc("glFramebufferTextureLayer");
  if (glow_glFramebufferTextureLayer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFramebufferTextureLayer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFramebufferTextureLayer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(ptrdiff_t)get_proc("glGetActiveSubroutineUniformiv");
  if (glow_glGetActiveSubroutineUniformiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveSubroutineUniformiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveSubroutineUniformiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4d = (PFNGLRASTERPOS4DPROC)(ptrdiff_t)get_proc("glRasterPos4d");
  if (glow_glRasterPos4d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)(ptrdiff_t)get_proc("glWindowPos2dv");
  if (glow_glWindowPos2dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos2dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos2dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3b = (PFNGLCOLOR3BPROC)(ptrdiff_t)get_proc("glColor3b");
  if (glow_glColor3b == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3b\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3b\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultMatrixd = (PFNGLMULTMATRIXDPROC)(ptrdiff_t)get_proc("glMultMatrixd");
  if (glow_glMultMatrixd == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultMatrixd\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultMatrixd\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexEnvf = (PFNGLTEXENVFPROC)(ptrdiff_t)get_proc("glTexEnvf");
  if (glow_glTexEnvf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexEnvf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexEnvf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)(ptrdiff_t)get_proc("glVertexAttrib2d");
  if (glow_glVertexAttrib2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)(ptrdiff_t)get_proc("glMultiTexCoordP2ui");
  if (glow_glMultiTexCoordP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoordP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoordP2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)(ptrdiff_t)get_proc("glProgramUniform3f");
  if (glow_glProgramUniform3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniform3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniform3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMateriali = (PFNGLMATERIALIPROC)(ptrdiff_t)get_proc("glMateriali");
  if (glow_glMateriali == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMateriali\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMateriali\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMapGrid1f = (PFNGLMAPGRID1FPROC)(ptrdiff_t)get_proc("glMapGrid1f");
  if (glow_glMapGrid1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMapGrid2d = (PFNGLMAPGRID2DPROC)(ptrdiff_t)get_proc("glMapGrid2d");
  if (glow_glMapGrid2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)(ptrdiff_t)get_proc("glGetUniformuiv");
  if (glow_glGetUniformuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetUniformuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetUniformuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3dv = (PFNGLUNIFORM3DVPROC)(ptrdiff_t)get_proc("glUniform3dv");
  if (glow_glUniform3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)(ptrdiff_t)get_proc("glUseProgramStages");
  if (glow_glUseProgramStages == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUseProgramStages\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUseProgramStages\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)(ptrdiff_t)get_proc("glRasterPos4iv");
  if (glow_glRasterPos4iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4s = (PFNGLRASTERPOS4SPROC)(ptrdiff_t)get_proc("glRasterPos4s");
  if (glow_glRasterPos4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)(ptrdiff_t)get_proc("glRasterPos3fv");
  if (glow_glRasterPos3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3fv = (PFNGLNORMAL3FVPROC)(ptrdiff_t)get_proc("glNormal3fv");
  if (glow_glNormal3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)(ptrdiff_t)get_proc("glGetShaderInfoLog");
  if (glow_glGetShaderInfoLog == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetShaderInfoLog\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetShaderInfoLog\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)(ptrdiff_t)get_proc("glVertexAttrib1f");
  if (glow_glVertexAttrib1f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib1f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib1f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDisablei = (PFNGLDISABLEIPROC)(ptrdiff_t)get_proc("glDisablei");
  if (glow_glDisablei == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisablei\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisablei\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)(ptrdiff_t)get_proc("glVertexAttribI4usv");
  if (glow_glVertexAttribI4usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribI4usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribI4usv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)(ptrdiff_t)get_proc("glDeleteTransformFeedbacks");
  if (glow_glDeleteTransformFeedbacks == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDeleteTransformFeedbacks\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDeleteTransformFeedbacks\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(ptrdiff_t)get_proc("glDrawArraysInstancedBaseInstance");
  if (glow_glDrawArraysInstancedBaseInstance == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDrawArraysInstancedBaseInstance\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDrawArraysInstancedBaseInstance\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor4usv = (PFNGLCOLOR4USVPROC)(ptrdiff_t)get_proc("glColor4usv");
  if (glow_glColor4usv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor4usv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor4usv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3ub = (PFNGLCOLOR3UBPROC)(ptrdiff_t)get_proc("glColor3ub");
  if (glow_glColor3ub == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3ub\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3ub\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogi = (PFNGLFOGIPROC)(ptrdiff_t)get_proc("glFogi");
  if (glow_glFogi == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogi\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogi\n");
#endif
    unresolved_count += 1;
  } 
  glow_glAccum = (PFNGLACCUMPROC)(ptrdiff_t)get_proc("glAccum");
  if (glow_glAccum == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glAccum\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glAccum\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)(ptrdiff_t)get_proc("glUniformMatrix2x3fv");
  if (glow_glUniformMatrix2x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniformMatrix2x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniformMatrix2x3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)(ptrdiff_t)get_proc("glTexCoordP2uiv");
  if (glow_glTexCoordP2uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP2uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP2uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexImage2D = (PFNGLTEXIMAGE2DPROC)(ptrdiff_t)get_proc("glTexImage2D");
  if (glow_glTexImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexImage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMatrixMode = (PFNGLMATRIXMODEPROC)(ptrdiff_t)get_proc("glMatrixMode");
  if (glow_glMatrixMode == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMatrixMode\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMatrixMode\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)(ptrdiff_t)get_proc("glTexSubImage2D");
  if (glow_glTexSubImage2D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexSubImage2D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexSubImage2D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)(ptrdiff_t)get_proc("glFogCoordPointer");
  if (glow_glFogCoordPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glFogCoordPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glFogCoordPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)(ptrdiff_t)get_proc("glUnmapBuffer");
  if (glow_glUnmapBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUnmapBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUnmapBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)(ptrdiff_t)get_proc("glTexCoordP2ui");
  if (glow_glTexCoordP2ui == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoordP2ui\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoordP2ui\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)(ptrdiff_t)get_proc("glTexStorage1D");
  if (glow_glTexStorage1D == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexStorage1D\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexStorage1D\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)(ptrdiff_t)get_proc("glGetProgramResourceiv");
  if (glow_glGetProgramResourceiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColor3i = (PFNGLCOLOR3IPROC)(ptrdiff_t)get_proc("glColor3i");
  if (glow_glColor3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColor3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColor3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMapGrid1d = (PFNGLMAPGRID1DPROC)(ptrdiff_t)get_proc("glMapGrid1d");
  if (glow_glMapGrid1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapGrid1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapGrid1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindBuffer = (PFNGLBINDBUFFERPROC)(ptrdiff_t)get_proc("glBindBuffer");
  if (glow_glBindBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform2iv = (PFNGLUNIFORM2IVPROC)(ptrdiff_t)get_proc("glUniform2iv");
  if (glow_glUniform2iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform2iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform2iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)(ptrdiff_t)get_proc("glSamplerParameterIiv");
  if (glow_glSamplerParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameterIiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex3i = (PFNGLVERTEX3IPROC)(ptrdiff_t)get_proc("glVertex3i");
  if (glow_glVertex3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertex4fv = (PFNGLVERTEX4FVPROC)(ptrdiff_t)get_proc("glVertex4fv");
  if (glow_glVertex4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertex4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertex4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glLoadMatrixf = (PFNGLLOADMATRIXFPROC)(ptrdiff_t)get_proc("glLoadMatrixf");
  if (glow_glLoadMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glLoadMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glLoadMatrixf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)(ptrdiff_t)get_proc("glMultiTexCoord4s");
  if (glow_glMultiTexCoord4s == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord4s\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord4s\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)(ptrdiff_t)get_proc("glVertexAttrib3f");
  if (glow_glVertexAttrib3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttrib3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttrib3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)(ptrdiff_t)get_proc("glGetInteger64i_v");
  if (glow_glGetInteger64i_v == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetInteger64i_v\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetInteger64i_v\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetString = (PFNGLGETSTRINGPROC)(ptrdiff_t)get_proc("glGetString");
  if (glow_glGetString == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetString\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetString\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEndQuery = (PFNGLENDQUERYPROC)(ptrdiff_t)get_proc("glEndQuery");
  if (glow_glEndQuery == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEndQuery\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEndQuery\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)(ptrdiff_t)get_proc("glRenderbufferStorage");
  if (glow_glRenderbufferStorage == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRenderbufferStorage\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRenderbufferStorage\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)(ptrdiff_t)get_proc("glGetProgramResourceName");
  if (glow_glGetProgramResourceName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetProgramResourceName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetProgramResourceName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)(ptrdiff_t)get_proc("glMultiTexCoord2i");
  if (glow_glMultiTexCoord2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord1d = (PFNGLTEXCOORD1DPROC)(ptrdiff_t)get_proc("glTexCoord1d");
  if (glow_glTexCoord1d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord1d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord1d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2d = (PFNGLTEXCOORD2DPROC)(ptrdiff_t)get_proc("glTexCoord2d");
  if (glow_glTexCoord2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)(ptrdiff_t)get_proc("glPixelTransferf");
  if (glow_glPixelTransferf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelTransferf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelTransferf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPixelMapusv = (PFNGLPIXELMAPUSVPROC)(ptrdiff_t)get_proc("glPixelMapusv");
  if (glow_glPixelMapusv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPixelMapusv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPixelMapusv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2i = (PFNGLRASTERPOS2IPROC)(ptrdiff_t)get_proc("glRasterPos2i");
  if (glow_glRasterPos2i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos2d = (PFNGLRASTERPOS2DPROC)(ptrdiff_t)get_proc("glRasterPos2d");
  if (glow_glRasterPos2d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos2d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos2d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)(ptrdiff_t)get_proc("glPolygonStipple");
  if (glow_glPolygonStipple == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPolygonStipple\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPolygonStipple\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetClipPlane = (PFNGLGETCLIPPLANEPROC)(ptrdiff_t)get_proc("glGetClipPlane");
  if (glow_glGetClipPlane == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetClipPlane\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetClipPlane\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)(ptrdiff_t)get_proc("glGetBufferSubData");
  if (glow_glGetBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetBufferSubData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)(ptrdiff_t)get_proc("glPatchParameterfv");
  if (glow_glPatchParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPatchParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPatchParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)(ptrdiff_t)get_proc("glVertexAttribIFormat");
  if (glow_glVertexAttribIFormat == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribIFormat\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribIFormat\n");
#endif
    unresolved_count += 1;
  } 
  glow_glDisable = (PFNGLDISABLEPROC)(ptrdiff_t)get_proc("glDisable");
  if (glow_glDisable == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glDisable\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glDisable\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexGendv = (PFNGLTEXGENDVPROC)(ptrdiff_t)get_proc("glTexGendv");
  if (glow_glTexGendv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGendv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGendv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(ptrdiff_t)get_proc("glTransformFeedbackVaryings");
  if (glow_glTransformFeedbackVaryings == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTransformFeedbackVaryings\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTransformFeedbackVaryings\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)(ptrdiff_t)get_proc("glGetVertexAttribIuiv");
  if (glow_glGetVertexAttribIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetVertexAttribIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetVertexAttribIuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)(ptrdiff_t)get_proc("glBindFragDataLocation");
  if (glow_glBindFragDataLocation == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBindFragDataLocation\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBindFragDataLocation\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(ptrdiff_t)get_proc("glRenderbufferStorageMultisample");
  if (glow_glRenderbufferStorageMultisample == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRenderbufferStorageMultisample\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRenderbufferStorageMultisample\n");
#endif
    unresolved_count += 1;
  } 
  glow_glColorP3uiv = (PFNGLCOLORP3UIVPROC)(ptrdiff_t)get_proc("glColorP3uiv");
  if (glow_glColorP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glColorP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glColorP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEnable = (PFNGLENABLEPROC)(ptrdiff_t)get_proc("glEnable");
  if (glow_glEnable == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEnable\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEnable\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexGeni = (PFNGLTEXGENIPROC)(ptrdiff_t)get_proc("glTexGeni");
  if (glow_glTexGeni == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexGeni\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexGeni\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)(ptrdiff_t)get_proc("glMultiTexCoord3f");
  if (glow_glMultiTexCoord3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)(ptrdiff_t)get_proc("glPointParameteri");
  if (glow_glPointParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameteri\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)(ptrdiff_t)get_proc("glSamplerParameteri");
  if (glow_glSamplerParameteri == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSamplerParameteri\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSamplerParameteri\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)(ptrdiff_t)get_proc("glInvalidateSubFramebuffer");
  if (glow_glInvalidateSubFramebuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateSubFramebuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateSubFramebuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)(ptrdiff_t)get_proc("glMultiDrawArraysIndirect");
  if (glow_glMultiDrawArraysIndirect == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiDrawArraysIndirect\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiDrawArraysIndirect\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)(ptrdiff_t)get_proc("glTexCoord3dv");
  if (glow_glTexCoord3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)(ptrdiff_t)get_proc("glTexCoord2sv");
  if (glow_glTexCoord2sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glTexCoord2sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glTexCoord2sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSynciv = (PFNGLGETSYNCIVPROC)(ptrdiff_t)get_proc("glGetSynciv");
  if (glow_glGetSynciv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSynciv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSynciv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glUniform3d = (PFNGLUNIFORM3DPROC)(ptrdiff_t)get_proc("glUniform3d");
  if (glow_glUniform3d == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glUniform3d\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glUniform3d\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)(ptrdiff_t)get_proc("glSecondaryColor3i");
  if (glow_glSecondaryColor3i == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3i\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3i\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMapBuffer = (PFNGLMAPBUFFERPROC)(ptrdiff_t)get_proc("glMapBuffer");
  if (glow_glMapBuffer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMapBuffer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMapBuffer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)(ptrdiff_t)get_proc("glNormalP3uiv");
  if (glow_glNormalP3uiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormalP3uiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormalP3uiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)(ptrdiff_t)get_proc("glInvalidateBufferData");
  if (glow_glInvalidateBufferData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInvalidateBufferData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInvalidateBufferData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glBlendColor = (PFNGLBLENDCOLORPROC)(ptrdiff_t)get_proc("glBlendColor");
  if (glow_glBlendColor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glBlendColor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glBlendColor\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPushName = (PFNGLPUSHNAMEPROC)(ptrdiff_t)get_proc("glPushName");
  if (glow_glPushName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPushName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPushName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)(ptrdiff_t)get_proc("glWindowPos3f");
  if (glow_glWindowPos3f == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glWindowPos3f\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glWindowPos3f\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)(ptrdiff_t)get_proc("glGetSamplerParameterIiv");
  if (glow_glGetSamplerParameterIiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameterIiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameterIiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glClearColor = (PFNGLCLEARCOLORPROC)(ptrdiff_t)get_proc("glClearColor");
  if (glow_glClearColor == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glClearColor\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glClearColor\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultMatrixf = (PFNGLMULTMATRIXFPROC)(ptrdiff_t)get_proc("glMultMatrixf");
  if (glow_glMultMatrixf == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultMatrixf\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultMatrixf\n");
#endif
    unresolved_count += 1;
  } 
  glow_glInitNames = (PFNGLINITNAMESPROC)(ptrdiff_t)get_proc("glInitNames");
  if (glow_glInitNames == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glInitNames\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glInitNames\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)(ptrdiff_t)get_proc("glCopyBufferSubData");
  if (glow_glCopyBufferSubData == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCopyBufferSubData\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCopyBufferSubData\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(ptrdiff_t)get_proc("glGetActiveSubroutineUniformName");
  if (glow_glGetActiveSubroutineUniformName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetActiveSubroutineUniformName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetActiveSubroutineUniformName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRectdv = (PFNGLRECTDVPROC)(ptrdiff_t)get_proc("glRectdv");
  if (glow_glRectdv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRectdv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRectdv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)(ptrdiff_t)get_proc("glRasterPos4fv");
  if (glow_glRasterPos4fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glRasterPos4fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glRasterPos4fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(ptrdiff_t)get_proc("glProgramUniformMatrix2x3fv");
  if (glow_glProgramUniformMatrix2x3fv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glProgramUniformMatrix2x3fv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glProgramUniformMatrix2x3fv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)(ptrdiff_t)get_proc("glVertexAttribLPointer");
  if (glow_glVertexAttribLPointer == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glVertexAttribLPointer\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glVertexAttribLPointer\n");
#endif
    unresolved_count += 1;
  } 
  glow_glNormal3sv = (PFNGLNORMAL3SVPROC)(ptrdiff_t)get_proc("glNormal3sv");
  if (glow_glNormal3sv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glNormal3sv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glNormal3sv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glEdgeFlagv = (PFNGLEDGEFLAGVPROC)(ptrdiff_t)get_proc("glEdgeFlagv");
  if (glow_glEdgeFlagv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glEdgeFlagv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glEdgeFlagv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)(ptrdiff_t)get_proc("glPointParameterfv");
  if (glow_glPointParameterfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPointParameterfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPointParameterfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)(ptrdiff_t)get_proc("glSecondaryColor3dv");
  if (glow_glSecondaryColor3dv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glSecondaryColor3dv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glSecondaryColor3dv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)(ptrdiff_t)get_proc("glGetSamplerParameterIuiv");
  if (glow_glGetSamplerParameterIuiv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetSamplerParameterIuiv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetSamplerParameterIuiv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)(ptrdiff_t)get_proc("glMultiTexCoord1iv");
  if (glow_glMultiTexCoord1iv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glMultiTexCoord1iv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glMultiTexCoord1iv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glPopName = (PFNGLPOPNAMEPROC)(ptrdiff_t)get_proc("glPopName");
  if (glow_glPopName == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glPopName\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glPopName\n");
#endif
    unresolved_count += 1;
  } 
  glow_glGetTexGenfv = (PFNGLGETTEXGENFVPROC)(ptrdiff_t)get_proc("glGetTexGenfv");
  if (glow_glGetTexGenfv == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glGetTexGenfv\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glGetTexGenfv\n");
#endif
    unresolved_count += 1;
  } 
  glow_glShaderSource = (PFNGLSHADERSOURCEPROC)(ptrdiff_t)get_proc("glShaderSource");
  if (glow_glShaderSource == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glShaderSource\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glShaderSource\n");
#endif
    unresolved_count += 1;
  } 
  glow_glCullFace = (PFNGLCULLFACEPROC)(ptrdiff_t)get_proc("glCullFace");
  if (glow_glCullFace == NULL) {
    GLOW_ASSERT(!0 && "glow error: failed to load glCullFace\n");
#ifndef GLOW_NO_STDIO
    printf("glow error: failed to load glCullFace\n");
#endif
    unresolved_count += 1;
  } 
  return unresolved_count;
}


void glow_set_pre_callback(glow_debug_proc_t callback) {
  glow_pre_callback_ = callback;
}

void glow_set_post_callback(glow_debug_proc_t callback) {
  glow_post_callback_ = callback;
}

#endif  /* GLOW_IMPLEMENTATION */
